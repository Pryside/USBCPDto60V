
DRP1M1_DRP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  0801ad28  0801ad28  0002ad28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bcb4  0801bcb4  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801bcb4  0801bcb4  0002bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bcbc  0801bcbc  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bcbc  0801bcbc  0002bcbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bcc0  0801bcc0  0002bcc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0801bcc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000312c  200001d4  0801be98  000301d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003300  0801be98  00033300  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002d3bc  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002eb35  00000000  00000000  0005d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006dde  00000000  00000000  0008c0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  00092ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b73d  00000000  00000000  000954a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024c0  00000000  00000000  001d0be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000362f8  00000000  00000000  001d30a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00004cb9  00000000  00000000  00209398  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000004ac  00000000  00000000  0020e051  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000034  00000000  00000000  0020e500  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 0000055a  00000000  00000000  0020e534  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c4e0  00000000  00000000  0020ea90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ad10 	.word	0x0801ad10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0801ad10 	.word	0x0801ad10

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f01a f8b5 	bl	801a3ac <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f01a f87e 	bl	801a34c <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	; (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f00f fe07 	bl	800fe78 <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	; (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	; (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f010 f88e 	bl	80103c4 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	7801      	ldrb	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f001 01f7 	andeq.w	r1, r1, #247	; 0xf7
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	7001      	strb	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	; 0x68
 800033a:	f000 f935 	bl	80005a8 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	; 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f91e 	bl	80005a8 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	200001f0 	.word	0x200001f0

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f012 f802 	bl	8012388 <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f012 b809 	b.w	80123a0 <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f012 f88f 	bl	80124b4 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f011 bf58 	b.w	8012250 <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f00f be94 	b.w	80100cc <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f00f fee7 	bl	8010178 <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	; 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e03e      	b.n	800045a <USBPD_PE_Init+0x9e>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d239      	bcs.n	800045a <USBPD_PE_Init+0x9e>
 80003e6:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 80003ea:	f019 ffdf 	bl	801a3ac <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d031      	beq.n	800045a <USBPD_PE_Init+0x9e>
 80003f6:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 80003fa:	f019 ffa7 	bl	801a34c <__aeabi_memclr>
 80003fe:	f8df 0c20 	ldr.w	r0, [pc, #3104]	; 8001020 <.text_55>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 823f 	strb.w	r8, [r4, #575]	; 0x23f
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	4631      	mov	r1, r6
 8000414:	4640      	mov	r0, r8
 8000416:	f005 f89e 	bl	8005556 <USBPD_PRL_Init>
 800041a:	0007      	movs	r7, r0
 800041c:	d11d      	bne.n	800045a <USBPD_PE_Init+0x9e>
 800041e:	6820      	ldr	r0, [r4, #0]
 8000420:	6841      	ldr	r1, [r0, #4]
 8000422:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000426:	2800      	cmp	r0, #0
 8000428:	6860      	ldr	r0, [r4, #4]
 800042a:	7801      	ldrb	r1, [r0, #0]
 800042c:	d004      	beq.n	8000438 <USBPD_PE_Init+0x7c>
 800042e:	f041 0108 	orr.w	r1, r1, #8
 8000432:	7001      	strb	r1, [r0, #0]
 8000434:	2201      	movs	r2, #1
 8000436:	e003      	b.n	8000440 <USBPD_PE_Init+0x84>
 8000438:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800043c:	7001      	strb	r1, [r0, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	7933      	ldrb	r3, [r6, #4]
 8000442:	f003 0303 	and.w	r3, r3, #3
 8000446:	4611      	mov	r1, r2
 8000448:	4640      	mov	r0, r8
 800044a:	f005 f8ab 	bl	80055a4 <USBPD_PRL_SetHeader>
 800044e:	7931      	ldrb	r1, [r6, #4]
 8000450:	f001 0103 	and.w	r1, r1, #3
 8000454:	4640      	mov	r0, r8
 8000456:	f005 f8d6 	bl	8005606 <USBPD_PRL_CBL_SetHeaderSpecification>
 800045a:	4638      	mov	r0, r7
 800045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000460 <USBPD_PE_TimerCounter>:
 8000460:	f8df 1bbc 	ldr.w	r1, [pc, #3004]	; 8001020 <.text_55>
 8000464:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000468:	f200 204e 	addw	r0, r0, #590	; 0x24e
 800046c:	8801      	ldrh	r1, [r0, #0]
 800046e:	044a      	lsls	r2, r1, #17
 8000470:	d002      	beq.n	8000478 <USBPD_PE_TimerCounter+0x18>
 8000472:	8801      	ldrh	r1, [r0, #0]
 8000474:	1e4b      	subs	r3, r1, #1
 8000476:	8003      	strh	r3, [r0, #0]
 8000478:	8841      	ldrh	r1, [r0, #2]
 800047a:	044a      	lsls	r2, r1, #17
 800047c:	d002      	beq.n	8000484 <USBPD_PE_TimerCounter+0x24>
 800047e:	8841      	ldrh	r1, [r0, #2]
 8000480:	1e4a      	subs	r2, r1, #1
 8000482:	8042      	strh	r2, [r0, #2]
 8000484:	8981      	ldrh	r1, [r0, #12]
 8000486:	044a      	lsls	r2, r1, #17
 8000488:	d002      	beq.n	8000490 <USBPD_PE_TimerCounter+0x30>
 800048a:	8981      	ldrh	r1, [r0, #12]
 800048c:	1e4a      	subs	r2, r1, #1
 800048e:	8182      	strh	r2, [r0, #12]
 8000490:	8881      	ldrh	r1, [r0, #4]
 8000492:	044a      	lsls	r2, r1, #17
 8000494:	d002      	beq.n	800049c <USBPD_PE_TimerCounter+0x3c>
 8000496:	8881      	ldrh	r1, [r0, #4]
 8000498:	1e4a      	subs	r2, r1, #1
 800049a:	8082      	strh	r2, [r0, #4]
 800049c:	88c1      	ldrh	r1, [r0, #6]
 800049e:	044a      	lsls	r2, r1, #17
 80004a0:	d002      	beq.n	80004a8 <USBPD_PE_TimerCounter+0x48>
 80004a2:	88c1      	ldrh	r1, [r0, #6]
 80004a4:	1e4a      	subs	r2, r1, #1
 80004a6:	80c2      	strh	r2, [r0, #6]
 80004a8:	8901      	ldrh	r1, [r0, #8]
 80004aa:	044a      	lsls	r2, r1, #17
 80004ac:	d002      	beq.n	80004b4 <USBPD_PE_TimerCounter+0x54>
 80004ae:	8901      	ldrh	r1, [r0, #8]
 80004b0:	1e4a      	subs	r2, r1, #1
 80004b2:	8102      	strh	r2, [r0, #8]
 80004b4:	8941      	ldrh	r1, [r0, #10]
 80004b6:	044a      	lsls	r2, r1, #17
 80004b8:	d002      	beq.n	80004c0 <USBPD_PE_TimerCounter+0x60>
 80004ba:	8941      	ldrh	r1, [r0, #10]
 80004bc:	1e4a      	subs	r2, r1, #1
 80004be:	8142      	strh	r2, [r0, #10]
 80004c0:	89c1      	ldrh	r1, [r0, #14]
 80004c2:	044a      	lsls	r2, r1, #17
 80004c4:	d002      	beq.n	80004cc <USBPD_PE_TimerCounter+0x6c>
 80004c6:	89c1      	ldrh	r1, [r0, #14]
 80004c8:	1e4a      	subs	r2, r1, #1
 80004ca:	81c2      	strh	r2, [r0, #14]
 80004cc:	4770      	bx	lr

080004ce <USBPD_PE_TimerCounteUpdate>:
 80004ce:	b538      	push	{r3, r4, r5, lr}
 80004d0:	460c      	mov	r4, r1
 80004d2:	f8df 1b4c 	ldr.w	r1, [pc, #2892]	; 8001020 <.text_55>
 80004d6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80004da:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80004de:	da39      	bge.n	8000554 <USBPD_PE_TimerCounteUpdate+0x86>
 80004e0:	f200 254e 	addw	r5, r0, #590	; 0x24e
 80004e4:	8828      	ldrh	r0, [r5, #0]
 80004e6:	0441      	lsls	r1, r0, #17
 80004e8:	d003      	beq.n	80004f2 <USBPD_PE_TimerCounteUpdate+0x24>
 80004ea:	8828      	ldrh	r0, [r5, #0]
 80004ec:	f000 f833 	bl	8000556 <.text_8>
 80004f0:	8028      	strh	r0, [r5, #0]
 80004f2:	8868      	ldrh	r0, [r5, #2]
 80004f4:	0441      	lsls	r1, r0, #17
 80004f6:	d003      	beq.n	8000500 <USBPD_PE_TimerCounteUpdate+0x32>
 80004f8:	8868      	ldrh	r0, [r5, #2]
 80004fa:	f000 f82c 	bl	8000556 <.text_8>
 80004fe:	8068      	strh	r0, [r5, #2]
 8000500:	89a8      	ldrh	r0, [r5, #12]
 8000502:	0441      	lsls	r1, r0, #17
 8000504:	d003      	beq.n	800050e <USBPD_PE_TimerCounteUpdate+0x40>
 8000506:	89a8      	ldrh	r0, [r5, #12]
 8000508:	f000 f825 	bl	8000556 <.text_8>
 800050c:	81a8      	strh	r0, [r5, #12]
 800050e:	88a8      	ldrh	r0, [r5, #4]
 8000510:	0441      	lsls	r1, r0, #17
 8000512:	d003      	beq.n	800051c <USBPD_PE_TimerCounteUpdate+0x4e>
 8000514:	88a8      	ldrh	r0, [r5, #4]
 8000516:	f000 f81e 	bl	8000556 <.text_8>
 800051a:	80a8      	strh	r0, [r5, #4]
 800051c:	88e8      	ldrh	r0, [r5, #6]
 800051e:	0441      	lsls	r1, r0, #17
 8000520:	d003      	beq.n	800052a <USBPD_PE_TimerCounteUpdate+0x5c>
 8000522:	88e8      	ldrh	r0, [r5, #6]
 8000524:	f000 f817 	bl	8000556 <.text_8>
 8000528:	80e8      	strh	r0, [r5, #6]
 800052a:	8928      	ldrh	r0, [r5, #8]
 800052c:	0441      	lsls	r1, r0, #17
 800052e:	d003      	beq.n	8000538 <USBPD_PE_TimerCounteUpdate+0x6a>
 8000530:	8928      	ldrh	r0, [r5, #8]
 8000532:	f000 f810 	bl	8000556 <.text_8>
 8000536:	8128      	strh	r0, [r5, #8]
 8000538:	8968      	ldrh	r0, [r5, #10]
 800053a:	0441      	lsls	r1, r0, #17
 800053c:	d003      	beq.n	8000546 <USBPD_PE_TimerCounteUpdate+0x78>
 800053e:	8968      	ldrh	r0, [r5, #10]
 8000540:	f000 f809 	bl	8000556 <.text_8>
 8000544:	8168      	strh	r0, [r5, #10]
 8000546:	89e8      	ldrh	r0, [r5, #14]
 8000548:	0441      	lsls	r1, r0, #17
 800054a:	d003      	beq.n	8000554 <USBPD_PE_TimerCounteUpdate+0x86>
 800054c:	89e8      	ldrh	r0, [r5, #14]
 800054e:	f000 f802 	bl	8000556 <.text_8>
 8000552:	81e8      	strh	r0, [r5, #14]
 8000554:	bd31      	pop	{r0, r4, r5, pc}

08000556 <.text_8>:
 8000556:	4621      	mov	r1, r4
 8000558:	f000 bfa4 	b.w	80014a4 <PE_UpdateTimer>

0800055c <USBPD_PE_IsCableConnected>:
 800055c:	f8df 2ac0 	ldr.w	r2, [pc, #2752]	; 8001020 <.text_55>
 8000560:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000564:	6842      	ldr	r2, [r0, #4]
 8000566:	6813      	ldr	r3, [r2, #0]
 8000568:	f361 330c 	bfi	r3, r1, #12, #1
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	2248      	movs	r2, #72	; 0x48
 8000570:	f880 2240 	strb.w	r2, [r0, #576]	; 0x240
 8000574:	4770      	bx	lr

08000576 <USBPD_PE_StateMachine_Reset>:
 8000576:	f8df 2aa8 	ldr.w	r2, [pc, #2728]	; 8001020 <.text_55>
 800057a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800057e:	2148      	movs	r1, #72	; 0x48
 8000580:	f880 1240 	strb.w	r1, [r0, #576]	; 0x240
 8000584:	4770      	bx	lr

08000586 <USBPD_PE_StateMachine_Stop>:
 8000586:	f005 bc04 	b.w	8005d92 <USBPD_PRL_Stop>

0800058a <USBPD_PE_StateMachine_DRP>:
 800058a:	f8df 1a94 	ldr.w	r1, [pc, #2708]	; 8001020 <.text_55>
 800058e:	4602      	mov	r2, r0
 8000590:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	680a      	ldr	r2, [r1, #0]
 8000598:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800059c:	2900      	cmp	r1, #0
 800059e:	bf18      	it	ne
 80005a0:	f002 bb8a 	bne.w	8002cb8 <USBPD_PE_StateMachine_SRC>
 80005a4:	f001 bce6 	b.w	8001f74 <USBPD_PE_StateMachine_SNK>

080005a8 <USBPD_PE_Notification>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	2803      	cmp	r0, #3
 80005ac:	4604      	mov	r4, r0
 80005ae:	460d      	mov	r5, r1
 80005b0:	d214      	bcs.n	80005dc <__iar_annotation$$tailcall+0x2>
 80005b2:	2600      	movs	r6, #0
 80005b4:	9600      	str	r6, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8df 7a68 	ldr.w	r7, [pc, #2664]	; 8001024 <.text_56>
 80005bc:	683e      	ldr	r6, [r7, #0]
 80005be:	462a      	mov	r2, r5
 80005c0:	4621      	mov	r1, r4
 80005c2:	2009      	movs	r0, #9
 80005c4:	47b0      	blx	r6
 80005c6:	f8df 2a58 	ldr.w	r2, [pc, #2648]	; 8001020 <.text_55>
 80005ca:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	68d3      	ldr	r3, [r2, #12]
 80005d2:	4629      	mov	r1, r5
 80005d4:	4620      	mov	r0, r4
 80005d6:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

080005da <__iar_annotation$$tailcall>:
 80005da:	4718      	bx	r3
 80005dc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080005de <USBPD_PE_InitVDM_Callback>:
 80005de:	f8df 2a40 	ldr.w	r2, [pc, #2624]	; 8001020 <.text_55>
 80005e2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80005e6:	60c1      	str	r1, [r0, #12]
 80005e8:	4770      	bx	lr

080005ea <USBPD_PE_Request_HardReset>:
 80005ea:	b580      	push	{r7, lr}
 80005ec:	f8df 1a30 	ldr.w	r1, [pc, #2608]	; 8001020 <.text_55>
 80005f0:	4602      	mov	r2, r0
 80005f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005f6:	230f      	movs	r3, #15
 80005f8:	f881 326a 	strb.w	r3, [r1, #618]	; 0x26a
 80005fc:	6889      	ldr	r1, [r1, #8]
 80005fe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000600:	4790      	blx	r2
 8000602:	2000      	movs	r0, #0
 8000604:	bd02      	pop	{r1, pc}

08000606 <USBPD_PE_Request_CableReset>:
 8000606:	b580      	push	{r7, lr}
 8000608:	f000 fcfb 	bl	8001002 <.text_52>
 800060c:	6851      	ldr	r1, [r2, #4]
 800060e:	f000 f910 	bl	8000832 <.text_19+0x2>
 8000612:	d111      	bne.n	8000638 <USBPD_PE_Request_CableReset+0x32>
 8000614:	6851      	ldr	r1, [r2, #4]
 8000616:	780b      	ldrb	r3, [r1, #0]
 8000618:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 800061c:	2900      	cmp	r1, #0
 800061e:	bf1f      	itttt	ne
 8000620:	6851      	ldrne	r1, [r2, #4]
 8000622:	680b      	ldrne	r3, [r1, #0]
 8000624:	f3c3 31c0 	ubfxne	r1, r3, #15, #1
 8000628:	2900      	cmpne	r1, #0
 800062a:	d005      	beq.n	8000638 <USBPD_PE_Request_CableReset+0x32>
 800062c:	2199      	movs	r1, #153	; 0x99
 800062e:	f882 126a 	strb.w	r1, [r2, #618]	; 0x26a
 8000632:	6892      	ldr	r2, [r2, #8]
 8000634:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000636:	4788      	blx	r1
 8000638:	2010      	movs	r0, #16
 800063a:	bd02      	pop	{r1, pc}

0800063c <USBPD_PE_Request_CtrlMessage>:
 800063c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000640:	4680      	mov	r8, r0
 8000642:	460c      	mov	r4, r1
 8000644:	f8df 09d8 	ldr.w	r0, [pc, #2520]	; 8001020 <.text_55>
 8000648:	b093      	sub	sp, #76	; 0x4c
 800064a:	4641      	mov	r1, r8
 800064c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8000650:	f8df 19d4 	ldr.w	r1, [pc, #2516]	; 8001028 <.text_57>
 8000654:	4617      	mov	r7, r2
 8000656:	4668      	mov	r0, sp
 8000658:	224c      	movs	r2, #76	; 0x4c
 800065a:	f019 fe7a 	bl	801a352 <__aeabi_memcpy>
 800065e:	f205 216a 	addw	r1, r5, #618	; 0x26a
 8000662:	2600      	movs	r6, #0
 8000664:	7808      	ldrb	r0, [r1, #0]
 8000666:	b920      	cbnz	r0, 8000672 <USBPD_PE_Request_CtrlMessage+0x36>
 8000668:	6868      	ldr	r0, [r5, #4]
 800066a:	6802      	ldr	r2, [r0, #0]
 800066c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000670:	b908      	cbnz	r0, 8000676 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000672:	2603      	movs	r6, #3
 8000674:	e081      	b.n	800077a <USBPD_PE_Request_CtrlMessage+0x13e>
 8000676:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800067a:	6828      	ldr	r0, [r5, #0]
 800067c:	f8dc e000 	ldr.w	lr, [ip]
 8000680:	6842      	ldr	r2, [r0, #4]
 8000682:	6868      	ldr	r0, [r5, #4]
 8000684:	6803      	ldr	r3, [r0, #0]
 8000686:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800068a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800068e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000692:	f89e 9000 	ldrb.w	r9, [lr]
 8000696:	f009 0903 	and.w	r9, r9, #3
 800069a:	08d2      	lsrs	r2, r2, #3
 800069c:	2800      	cmp	r0, #0
 800069e:	bf07      	ittee	eq
 80006a0:	2002      	moveq	r0, #2
 80006a2:	2300      	moveq	r3, #0
 80006a4:	2000      	movne	r0, #0
 80006a6:	2304      	movne	r3, #4
 80006a8:	f1bc 0f03 	cmp.w	ip, #3
 80006ac:	bf0c      	ite	eq
 80006ae:	f04f 0c08 	moveq.w	ip, #8
 80006b2:	46b4      	movne	ip, r6
 80006b4:	f1b9 0f02 	cmp.w	r9, #2
 80006b8:	f002 0201 	and.w	r2, r2, #1
 80006bc:	bf0c      	ite	eq
 80006be:	f04f 0e40 	moveq.w	lr, #64	; 0x40
 80006c2:	46b6      	movne	lr, r6
 80006c4:	4302      	orrs	r2, r0
 80006c6:	431a      	orrs	r2, r3
 80006c8:	ea4c 0202 	orr.w	r2, ip, r2
 80006cc:	ea4e 0202 	orr.w	r2, lr, r2
 80006d0:	f012 0f03 	tst.w	r2, #3
 80006d4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	f042 0210 	orrne.w	r2, r2, #16
 80006de:	f012 0f05 	tst.w	r2, #5
 80006e2:	f81d 0003 	ldrb.w	r0, [sp, r3]
 80006e6:	bf18      	it	ne
 80006e8:	f042 0220 	orrne.w	r2, r2, #32
 80006ec:	4002      	ands	r2, r0
 80006ee:	4282      	cmp	r2, r0
 80006f0:	d11a      	bne.n	8000728 <USBPD_PE_Request_CtrlMessage+0xec>
 80006f2:	2c05      	cmp	r4, #5
 80006f4:	704e      	strb	r6, [r1, #1]
 80006f6:	f205 4297 	addw	r2, r5, #1175	; 0x497
 80006fa:	d02f      	beq.n	800075c <USBPD_PE_Request_CtrlMessage+0x120>
 80006fc:	2c0b      	cmp	r4, #11
 80006fe:	d010      	beq.n	8000722 <USBPD_PE_Request_CtrlMessage+0xe6>
 8000700:	2c0d      	cmp	r4, #13
 8000702:	d029      	beq.n	8000758 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000704:	2c0e      	cmp	r4, #14
 8000706:	d02c      	beq.n	8000762 <USBPD_PE_Request_CtrlMessage+0x126>
 8000708:	2c11      	cmp	r4, #17
 800070a:	d00f      	beq.n	800072c <USBPD_PE_Request_CtrlMessage+0xf0>
 800070c:	2c12      	cmp	r4, #18
 800070e:	d011      	beq.n	8000734 <USBPD_PE_Request_CtrlMessage+0xf8>
 8000710:	2c14      	cmp	r4, #20
 8000712:	d011      	beq.n	8000738 <USBPD_PE_Request_CtrlMessage+0xfc>
 8000714:	2c15      	cmp	r4, #21
 8000716:	d016      	beq.n	8000746 <USBPD_PE_Request_CtrlMessage+0x10a>
 8000718:	2c16      	cmp	r4, #22
 800071a:	d009      	beq.n	8000730 <USBPD_PE_Request_CtrlMessage+0xf4>
 800071c:	2c18      	cmp	r4, #24
 800071e:	d01b      	beq.n	8000758 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000720:	e021      	b.n	8000766 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000722:	68af      	ldr	r7, [r5, #8]
 8000724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000726:	b9f0      	cbnz	r0, 8000766 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000728:	2602      	movs	r6, #2
 800072a:	e026      	b.n	800077a <USBPD_PE_Request_CtrlMessage+0x13e>
 800072c:	2011      	movs	r0, #17
 800072e:	e016      	b.n	800075e <USBPD_PE_Request_CtrlMessage+0x122>
 8000730:	2716      	movs	r7, #22
 8000732:	e017      	b.n	8000764 <USBPD_PE_Request_CtrlMessage+0x128>
 8000734:	2012      	movs	r0, #18
 8000736:	e012      	b.n	800075e <USBPD_PE_Request_CtrlMessage+0x122>
 8000738:	6828      	ldr	r0, [r5, #0]
 800073a:	8907      	ldrh	r7, [r0, #8]
 800073c:	f3c7 0080 	ubfx	r0, r7, #2, #1
 8000740:	b988      	cbnz	r0, 8000766 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000742:	2610      	movs	r6, #16
 8000744:	e019      	b.n	800077a <USBPD_PE_Request_CtrlMessage+0x13e>
 8000746:	6828      	ldr	r0, [r5, #0]
 8000748:	8907      	ldrh	r7, [r0, #8]
 800074a:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 800074e:	b908      	cbnz	r0, 8000754 <USBPD_PE_Request_CtrlMessage+0x118>
 8000750:	2010      	movs	r0, #16
 8000752:	e013      	b.n	800077c <USBPD_PE_Request_CtrlMessage+0x140>
 8000754:	2015      	movs	r0, #21
 8000756:	e002      	b.n	800075e <USBPD_PE_Request_CtrlMessage+0x122>
 8000758:	704f      	strb	r7, [r1, #1]
 800075a:	e004      	b.n	8000766 <USBPD_PE_Request_CtrlMessage+0x12a>
 800075c:	2005      	movs	r0, #5
 800075e:	7010      	strb	r0, [r2, #0]
 8000760:	e001      	b.n	8000766 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000762:	270e      	movs	r7, #14
 8000764:	7017      	strb	r7, [r2, #0]
 8000766:	eb0d 0003 	add.w	r0, sp, r3
 800076a:	7847      	ldrb	r7, [r0, #1]
 800076c:	7057      	strb	r7, [r2, #1]
 800076e:	7882      	ldrb	r2, [r0, #2]
 8000770:	700a      	strb	r2, [r1, #0]
 8000772:	4640      	mov	r0, r8
 8000774:	68a9      	ldr	r1, [r5, #8]
 8000776:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000778:	4790      	blx	r2
 800077a:	4630      	mov	r0, r6
 800077c:	b013      	add	sp, #76	; 0x4c
 800077e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000782 <USBPD_PE_Request_DataMessage>:
 8000782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000784:	f000 f8d4 	bl	8000930 <.text_24>
 8000788:	f505 7618 	add.w	r6, r5, #608	; 0x260
 800078c:	2402      	movs	r4, #2
 800078e:	7ab3      	ldrb	r3, [r6, #10]
 8000790:	b923      	cbnz	r3, 800079c <USBPD_PE_Request_DataMessage+0x1a>
 8000792:	686b      	ldr	r3, [r5, #4]
 8000794:	681f      	ldr	r7, [r3, #0]
 8000796:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800079a:	b90b      	cbnz	r3, 80007a0 <USBPD_PE_Request_DataMessage+0x1e>
 800079c:	2403      	movs	r4, #3
 800079e:	e019      	b.n	80007d4 <USBPD_PE_Request_DataMessage+0x52>
 80007a0:	2300      	movs	r3, #0
 80007a2:	2901      	cmp	r1, #1
 80007a4:	72f3      	strb	r3, [r6, #11]
 80007a6:	d017      	beq.n	80007d8 <USBPD_PE_Request_DataMessage+0x56>
 80007a8:	2906      	cmp	r1, #6
 80007aa:	d021      	beq.n	80007f0 <USBPD_PE_Request_DataMessage+0x6e>
 80007ac:	2907      	cmp	r1, #7
 80007ae:	d02d      	beq.n	800080c <USBPD_PE_Request_DataMessage+0x8a>
 80007b0:	2908      	cmp	r1, #8
 80007b2:	d13b      	bne.n	800082c <USBPD_PE_Request_DataMessage+0xaa>
 80007b4:	6869      	ldr	r1, [r5, #4]
 80007b6:	780b      	ldrb	r3, [r1, #0]
 80007b8:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80007bc:	b151      	cbz	r1, 80007d4 <USBPD_PE_Request_DataMessage+0x52>
 80007be:	6811      	ldr	r1, [r2, #0]
 80007c0:	6031      	str	r1, [r6, #0]
 80007c2:	2213      	movs	r2, #19
 80007c4:	f885 2498 	strb.w	r2, [r5, #1176]	; 0x498
 80007c8:	234d      	movs	r3, #77	; 0x4d
 80007ca:	72b3      	strb	r3, [r6, #10]
 80007cc:	2400      	movs	r4, #0
 80007ce:	68a9      	ldr	r1, [r5, #8]
 80007d0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80007d2:	4790      	blx	r2
 80007d4:	4620      	mov	r0, r4
 80007d6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80007d8:	6869      	ldr	r1, [r5, #4]
 80007da:	680a      	ldr	r2, [r1, #0]
 80007dc:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d0f7      	beq.n	80007d4 <USBPD_PE_Request_DataMessage+0x52>
 80007e4:	2101      	movs	r1, #1
 80007e6:	f885 1498 	strb.w	r1, [r5, #1176]	; 0x498
 80007ea:	2207      	movs	r2, #7
 80007ec:	72b2      	strb	r2, [r6, #10]
 80007ee:	e7ed      	b.n	80007cc <USBPD_PE_Request_DataMessage+0x4a>
 80007f0:	f000 f81e 	bl	8000830 <.text_19>
 80007f4:	bf01      	itttt	eq
 80007f6:	6869      	ldreq	r1, [r5, #4]
 80007f8:	780b      	ldrbeq	r3, [r1, #0]
 80007fa:	f003 0303 	andeq.w	r3, r3, #3
 80007fe:	2b02      	cmpeq	r3, #2
 8000800:	d1e8      	bne.n	80007d4 <USBPD_PE_Request_DataMessage+0x52>
 8000802:	6811      	ldr	r1, [r2, #0]
 8000804:	6031      	str	r1, [r6, #0]
 8000806:	222b      	movs	r2, #43	; 0x2b
 8000808:	72b2      	strb	r2, [r6, #10]
 800080a:	e7df      	b.n	80007cc <USBPD_PE_Request_DataMessage+0x4a>
 800080c:	f000 f810 	bl	8000830 <.text_19>
 8000810:	bf01      	itttt	eq
 8000812:	6869      	ldreq	r1, [r5, #4]
 8000814:	780b      	ldrbeq	r3, [r1, #0]
 8000816:	f003 0303 	andeq.w	r3, r3, #3
 800081a:	2b02      	cmpeq	r3, #2
 800081c:	d1da      	bne.n	80007d4 <USBPD_PE_Request_DataMessage+0x52>
 800081e:	6811      	ldr	r1, [r2, #0]
 8000820:	6031      	str	r1, [r6, #0]
 8000822:	225d      	movs	r2, #93	; 0x5d
 8000824:	f885 2498 	strb.w	r2, [r5, #1176]	; 0x498
 8000828:	2362      	movs	r3, #98	; 0x62
 800082a:	e7ce      	b.n	80007ca <USBPD_PE_Request_DataMessage+0x48>
 800082c:	2410      	movs	r4, #16
 800082e:	e7d1      	b.n	80007d4 <USBPD_PE_Request_DataMessage+0x52>

08000830 <.text_19>:
 8000830:	6869      	ldr	r1, [r5, #4]
 8000832:	680b      	ldr	r3, [r1, #0]
 8000834:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8000838:	2903      	cmp	r1, #3
 800083a:	4770      	bx	lr

0800083c <USBPD_PE_Request_EPRModeEnter>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f000 f845 	bl	80008cc <.text_22>
 8000842:	b921      	cbnz	r1, 800084e <USBPD_PE_Request_EPRModeEnter+0x12>
 8000844:	6859      	ldr	r1, [r3, #4]
 8000846:	680d      	ldr	r5, [r1, #0]
 8000848:	f3c5 3100 	ubfx	r1, r5, #12, #1
 800084c:	b909      	cbnz	r1, 8000852 <USBPD_PE_Request_EPRModeEnter+0x16>
 800084e:	2203      	movs	r2, #3
 8000850:	e014      	b.n	800087c <USBPD_PE_Request_EPRModeEnter+0x40>
 8000852:	685d      	ldr	r5, [r3, #4]
 8000854:	682e      	ldr	r6, [r5, #0]
 8000856:	f240 7104 	movw	r1, #1796	; 0x704
 800085a:	400e      	ands	r6, r1
 800085c:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 8000860:	bf02      	ittt	eq
 8000862:	782d      	ldrbeq	r5, [r5, #0]
 8000864:	f005 0503 	andeq.w	r5, r5, #3
 8000868:	2d02      	cmpeq	r5, #2
 800086a:	d107      	bne.n	800087c <USBPD_PE_Request_EPRModeEnter+0x40>
 800086c:	2101      	movs	r1, #1
 800086e:	6021      	str	r1, [r4, #0]
 8000870:	22a8      	movs	r2, #168	; 0xa8
 8000872:	72a2      	strb	r2, [r4, #10]
 8000874:	6899      	ldr	r1, [r3, #8]
 8000876:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000878:	4790      	blx	r2
 800087a:	2200      	movs	r2, #0
 800087c:	4610      	mov	r0, r2
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <USBPD_PE_Request_EPRModeExit>:
 8000880:	b538      	push	{r3, r4, r5, lr}
 8000882:	f000 f823 	bl	80008cc <.text_22>
 8000886:	b921      	cbnz	r1, 8000892 <USBPD_PE_Request_EPRModeExit+0x12>
 8000888:	6859      	ldr	r1, [r3, #4]
 800088a:	680d      	ldr	r5, [r1, #0]
 800088c:	f3c5 3100 	ubfx	r1, r5, #12, #1
 8000890:	b909      	cbnz	r1, 8000896 <USBPD_PE_Request_EPRModeExit+0x16>
 8000892:	2203      	movs	r2, #3
 8000894:	e018      	b.n	80008c8 <USBPD_PE_Request_EPRModeExit+0x48>
 8000896:	f3c5 2102 	ubfx	r1, r5, #8, #3
 800089a:	2903      	cmp	r1, #3
 800089c:	d114      	bne.n	80008c8 <USBPD_PE_Request_EPRModeExit+0x48>
 800089e:	6859      	ldr	r1, [r3, #4]
 80008a0:	78cd      	ldrb	r5, [r1, #3]
 80008a2:	f3c5 1140 	ubfx	r1, r5, #5, #1
 80008a6:	b179      	cbz	r1, 80008c8 <USBPD_PE_Request_EPRModeExit+0x48>
 80008a8:	6859      	ldr	r1, [r3, #4]
 80008aa:	680a      	ldr	r2, [r1, #0]
 80008ac:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf07      	ittee	eq
 80008b4:	2103      	moveq	r1, #3
 80008b6:	6021      	streq	r1, [r4, #0]
 80008b8:	2204      	movne	r2, #4
 80008ba:	6022      	strne	r2, [r4, #0]
 80008bc:	21a8      	movs	r1, #168	; 0xa8
 80008be:	72a1      	strb	r1, [r4, #10]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80008c4:	4788      	blx	r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	4610      	mov	r0, r2
 80008ca:	bd32      	pop	{r1, r4, r5, pc}

080008cc <.text_22>:
 80008cc:	f8df 1750 	ldr.w	r1, [pc, #1872]	; 8001020 <.text_55>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80008d6:	f503 7418 	add.w	r4, r3, #608	; 0x260
 80008da:	2202      	movs	r2, #2
 80008dc:	7aa1      	ldrb	r1, [r4, #10]
 80008de:	4770      	bx	lr

080008e0 <USBPD_PE_Send_Request>:
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e2:	f000 f825 	bl	8000930 <.text_24>
 80008e6:	f205 266a 	addw	r6, r5, #618	; 0x26a
 80008ea:	2402      	movs	r4, #2
 80008ec:	7833      	ldrb	r3, [r6, #0]
 80008ee:	b923      	cbnz	r3, 80008fa <USBPD_PE_Send_Request+0x1a>
 80008f0:	686b      	ldr	r3, [r5, #4]
 80008f2:	681f      	ldr	r7, [r3, #0]
 80008f4:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80008f8:	b90b      	cbnz	r3, 80008fe <USBPD_PE_Send_Request+0x1e>
 80008fa:	2403      	movs	r4, #3
 80008fc:	e016      	b.n	800092c <USBPD_PE_Send_Request+0x4c>
 80008fe:	686f      	ldr	r7, [r5, #4]
 8000900:	683f      	ldr	r7, [r7, #0]
 8000902:	f240 7304 	movw	r3, #1796	; 0x704
 8000906:	403b      	ands	r3, r7
 8000908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800090c:	d10e      	bne.n	800092c <USBPD_PE_Send_Request+0x4c>
 800090e:	2445      	movs	r4, #69	; 0x45
 8000910:	f505 7311 	add.w	r3, r5, #580	; 0x244
 8000914:	7034      	strb	r4, [r6, #0]
 8000916:	6059      	str	r1, [r3, #4]
 8000918:	2400      	movs	r4, #0
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	f362 01c4 	bfi	r1, r2, #3, #2
 8000920:	6019      	str	r1, [r3, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	7072      	strb	r2, [r6, #1]
 8000926:	68a9      	ldr	r1, [r5, #8]
 8000928:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800092a:	4790      	blx	r2
 800092c:	4620      	mov	r0, r4
 800092e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000930 <.text_24>:
 8000930:	f8df 36ec 	ldr.w	r3, [pc, #1772]	; 8001020 <.text_55>
 8000934:	4604      	mov	r4, r0
 8000936:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800093a:	4770      	bx	lr

0800093c <USBPD_PE_SendExtendedMessage>:
 800093c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000940:	4680      	mov	r8, r0
 8000942:	4689      	mov	r9, r1
 8000944:	f8df 06d8 	ldr.w	r0, [pc, #1752]	; 8001020 <.text_55>
 8000948:	4641      	mov	r1, r8
 800094a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800094e:	f894 026a 	ldrb.w	r0, [r4, #618]	; 0x26a
 8000952:	469b      	mov	fp, r3
 8000954:	2600      	movs	r6, #0
 8000956:	b920      	cbnz	r0, 8000962 <USBPD_PE_SendExtendedMessage+0x26>
 8000958:	6860      	ldr	r0, [r4, #4]
 800095a:	6801      	ldr	r1, [r0, #0]
 800095c:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000960:	b908      	cbnz	r0, 8000966 <USBPD_PE_SendExtendedMessage+0x2a>
 8000962:	2603      	movs	r6, #3
 8000964:	e068      	b.n	8000a38 <USBPD_PE_SendExtendedMessage+0xfc>
 8000966:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800096a:	2803      	cmp	r0, #3
 800096c:	d10c      	bne.n	8000988 <USBPD_PE_SendExtendedMessage+0x4c>
 800096e:	6860      	ldr	r0, [r4, #4]
 8000970:	7801      	ldrb	r1, [r0, #0]
 8000972:	f001 0103 	and.w	r1, r1, #3
 8000976:	2902      	cmp	r1, #2
 8000978:	bfb8      	it	lt
 800097a:	2601      	movlt	r6, #1
 800097c:	db5c      	blt.n	8000a38 <USBPD_PE_SendExtendedMessage+0xfc>
 800097e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000980:	f240 1105 	movw	r1, #261	; 0x105
 8000984:	428d      	cmp	r5, r1
 8000986:	d301      	bcc.n	800098c <USBPD_PE_SendExtendedMessage+0x50>
 8000988:	2602      	movs	r6, #2
 800098a:	e055      	b.n	8000a38 <USBPD_PE_SendExtendedMessage+0xfc>
 800098c:	f504 7708 	add.w	r7, r4, #544	; 0x220
 8000990:	f88d 2000 	strb.w	r2, [sp]
 8000994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000996:	f020 0020 	bic.w	r0, r0, #32
 800099a:	6278      	str	r0, [r7, #36]	; 0x24
 800099c:	f89d 0000 	ldrb.w	r0, [sp]
 80009a0:	2803      	cmp	r0, #3
 80009a2:	d008      	beq.n	80009b6 <USBPD_PE_SendExtendedMessage+0x7a>
 80009a4:	2804      	cmp	r0, #4
 80009a6:	d01a      	beq.n	80009de <USBPD_PE_SendExtendedMessage+0xa2>
 80009a8:	2806      	cmp	r0, #6
 80009aa:	d01d      	beq.n	80009e8 <USBPD_PE_SendExtendedMessage+0xac>
 80009ac:	2808      	cmp	r0, #8
 80009ae:	d01f      	beq.n	80009f0 <USBPD_PE_SendExtendedMessage+0xb4>
 80009b0:	280a      	cmp	r0, #10
 80009b2:	d022      	beq.n	80009fa <USBPD_PE_SendExtendedMessage+0xbe>
 80009b4:	e023      	b.n	80009fe <USBPD_PE_SendExtendedMessage+0xc2>
 80009b6:	f204 4296 	addw	r2, r4, #1174	; 0x496
 80009ba:	210c      	movs	r1, #12
 80009bc:	7091      	strb	r1, [r2, #2]
 80009be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009c0:	f040 0020 	orr.w	r0, r0, #32
 80009c4:	6278      	str	r0, [r7, #36]	; 0x24
 80009c6:	0028      	movs	r0, r5
 80009c8:	d027      	beq.n	8000a1a <USBPD_PE_SendExtendedMessage+0xde>
 80009ca:	4640      	mov	r0, r8
 80009cc:	f000 fb1f 	bl	800100e <PE_Get_UnchunkedSupport>
 80009d0:	46b2      	mov	sl, r6
 80009d2:	2801      	cmp	r0, #1
 80009d4:	bf08      	it	eq
 80009d6:	f04f 0a04 	moveq.w	sl, #4
 80009da:	2000      	movs	r0, #0
 80009dc:	e019      	b.n	8000a12 <USBPD_PE_SendExtendedMessage+0xd6>
 80009de:	f204 4196 	addw	r1, r4, #1174	; 0x496
 80009e2:	200d      	movs	r0, #13
 80009e4:	7088      	strb	r0, [r1, #2]
 80009e6:	e7ea      	b.n	80009be <USBPD_PE_SendExtendedMessage+0x82>
 80009e8:	f204 4196 	addw	r1, r4, #1174	; 0x496
 80009ec:	200e      	movs	r0, #14
 80009ee:	e7f9      	b.n	80009e4 <USBPD_PE_SendExtendedMessage+0xa8>
 80009f0:	205b      	movs	r0, #91	; 0x5b
 80009f2:	f204 4196 	addw	r1, r4, #1174	; 0x496
 80009f6:	7088      	strb	r0, [r1, #2]
 80009f8:	e7e5      	b.n	80009c6 <USBPD_PE_SendExtendedMessage+0x8a>
 80009fa:	205c      	movs	r0, #92	; 0x5c
 80009fc:	e7f9      	b.n	80009f2 <USBPD_PE_SendExtendedMessage+0xb6>
 80009fe:	2610      	movs	r6, #16
 8000a00:	e01a      	b.n	8000a38 <USBPD_PE_SendExtendedMessage+0xfc>
 8000a02:	eb0a 0200 	add.w	r2, sl, r0
 8000a06:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8000a0a:	4422      	add	r2, r4
 8000a0c:	1c40      	adds	r0, r0, #1
 8000a0e:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
 8000a12:	42a8      	cmp	r0, r5
 8000a14:	d3f5      	bcc.n	8000a02 <USBPD_PE_SendExtendedMessage+0xc6>
 8000a16:	803d      	strh	r5, [r7, #0]
 8000a18:	e000      	b.n	8000a1c <USBPD_PE_SendExtendedMessage+0xe0>
 8000a1a:	803e      	strh	r6, [r7, #0]
 8000a1c:	f204 206a 	addw	r0, r4, #618	; 0x26a
 8000a20:	2231      	movs	r2, #49	; 0x31
 8000a22:	f880 9001 	strb.w	r9, [r0, #1]
 8000a26:	f89d 1000 	ldrb.w	r1, [sp]
 8000a2a:	f884 1496 	strb.w	r1, [r4, #1174]	; 0x496
 8000a2e:	7002      	strb	r2, [r0, #0]
 8000a30:	4640      	mov	r0, r8
 8000a32:	68a1      	ldr	r1, [r4, #8]
 8000a34:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000a36:	4790      	blx	r2
 8000a38:	4630      	mov	r0, r6
 8000a3a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a3e <USBPD_PE_Send_ExtendeControlMessage>:
 8000a3e:	f8df 2be4 	ldr.w	r2, [pc, #3044]	; 8001624 <.text_80>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	f503 7518 	add.w	r5, r3, #608	; 0x260
 8000a4e:	2410      	movs	r4, #16
 8000a50:	7aaa      	ldrb	r2, [r5, #10]
 8000a52:	b922      	cbnz	r2, 8000a5e <USBPD_PE_Send_ExtendeControlMessage+0x20>
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	6816      	ldr	r6, [r2, #0]
 8000a58:	f3c6 3200 	ubfx	r2, r6, #12, #1
 8000a5c:	b90a      	cbnz	r2, 8000a62 <USBPD_PE_Send_ExtendeControlMessage+0x24>
 8000a5e:	2403      	movs	r4, #3
 8000a60:	e026      	b.n	8000ab0 <USBPD_PE_Send_ExtendeControlMessage+0x72>
 8000a62:	f3c6 2202 	ubfx	r2, r6, #8, #3
 8000a66:	2a03      	cmp	r2, #3
 8000a68:	bf18      	it	ne
 8000a6a:	2402      	movne	r4, #2
 8000a6c:	d120      	bne.n	8000ab0 <USBPD_PE_Send_ExtendeControlMessage+0x72>
 8000a6e:	2901      	cmp	r1, #1
 8000a70:	d002      	beq.n	8000a78 <USBPD_PE_Send_ExtendeControlMessage+0x3a>
 8000a72:	2902      	cmp	r1, #2
 8000a74:	d00a      	beq.n	8000a8c <USBPD_PE_Send_ExtendeControlMessage+0x4e>
 8000a76:	e018      	b.n	8000aaa <USBPD_PE_Send_ExtendeControlMessage+0x6c>
 8000a78:	f3c6 0180 	ubfx	r1, r6, #2, #1
 8000a7c:	b9a9      	cbnz	r1, 8000aaa <USBPD_PE_Send_ExtendeControlMessage+0x6c>
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	890a      	ldrh	r2, [r1, #8]
 8000a82:	f3c2 21c0 	ubfx	r1, r2, #11, #1
 8000a86:	b181      	cbz	r1, 8000aaa <USBPD_PE_Send_ExtendeControlMessage+0x6c>
 8000a88:	2109      	movs	r1, #9
 8000a8a:	e00a      	b.n	8000aa2 <USBPD_PE_Send_ExtendeControlMessage+0x64>
 8000a8c:	f3c6 0180 	ubfx	r1, r6, #2, #1
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf1f      	itttt	ne
 8000a94:	6819      	ldrne	r1, [r3, #0]
 8000a96:	890a      	ldrhne	r2, [r1, #8]
 8000a98:	f3c2 3100 	ubfxne	r1, r2, #12, #1
 8000a9c:	2900      	cmpne	r1, #0
 8000a9e:	d004      	beq.n	8000aaa <USBPD_PE_Send_ExtendeControlMessage+0x6c>
 8000aa0:	210a      	movs	r1, #10
 8000aa2:	22a8      	movs	r2, #168	; 0xa8
 8000aa4:	6029      	str	r1, [r5, #0]
 8000aa6:	72aa      	strb	r2, [r5, #10]
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	6899      	ldr	r1, [r3, #8]
 8000aac:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000aae:	4790      	blx	r2
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}

08000ab4 <PE_Send_RESET>:
 8000ab4:	b538      	push	{r3, r4, r5, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	460d      	mov	r5, r1
 8000aba:	2d05      	cmp	r5, #5
 8000abc:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000ac0:	bf0c      	ite	eq
 8000ac2:	211f      	moveq	r1, #31
 8000ac4:	215e      	movne	r1, #94	; 0x5e
 8000ac6:	f7ff fd6f 	bl	80005a8 <USBPD_PE_Notification>
 8000aca:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000ace:	4629      	mov	r1, r5
 8000ad0:	f005 f905 	bl	8005cde <USBPD_PRL_ResetRequestProcess>
 8000ad4:	f3ef 8010 	mrs	r0, PRIMASK
 8000ad8:	b672      	cpsid	i
 8000ada:	2100      	movs	r1, #0
 8000adc:	f884 1278 	strb.w	r1, [r4, #632]	; 0x278
 8000ae0:	f380 8810 	msr	PRIMASK, r0
 8000ae4:	bd31      	pop	{r0, r4, r5, pc}

08000ae6 <PE_Get_SpecRevision>:
 8000ae6:	f8df 1b3c 	ldr.w	r1, [pc, #2876]	; 8001624 <.text_80>
 8000aea:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000aee:	6841      	ldr	r1, [r0, #4]
 8000af0:	7808      	ldrb	r0, [r1, #0]
 8000af2:	f000 0003 	and.w	r0, r0, #3
 8000af6:	4770      	bx	lr

08000af8 <PE_ChangePowerRole>:
 8000af8:	6842      	ldr	r2, [r0, #4]
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f361 0382 	bfi	r3, r1, #2, #1
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	f890 023f 	ldrb.w	r0, [r0, #575]	; 0x23f
 8000b06:	f004 bd63 	b.w	80055d0 <USBPD_PRL_SetHeaderPowerRole>

08000b0a <PE_Get_RxEvent>:
 8000b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b0e:	4605      	mov	r5, r0
 8000b10:	2414      	movs	r4, #20
 8000b12:	f3ef 8810 	mrs	r8, PRIMASK
 8000b16:	b672      	cpsid	i
 8000b18:	f505 761a 	add.w	r6, r5, #616	; 0x268
 8000b1c:	7c30      	ldrb	r0, [r6, #16]
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d03a      	beq.n	8000b98 <PE_Get_RxEvent+0x8e>
 8000b22:	f505 6791 	add.w	r7, r5, #1160	; 0x488
 8000b26:	5c39      	ldrb	r1, [r7, r0]
 8000b28:	060a      	lsls	r2, r1, #24
 8000b2a:	d52d      	bpl.n	8000b88 <PE_Get_RxEvent+0x7e>
 8000b2c:	f388 8810 	msr	PRIMASK, r8
 8000b30:	f895 023f 	ldrb.w	r0, [r5, #575]	; 0x23f
 8000b34:	f004 fd77 	bl	8005626 <USBPD_PRL_ManageChunkRx>
 8000b38:	2801      	cmp	r0, #1
 8000b3a:	bf08      	it	eq
 8000b3c:	2003      	moveq	r0, #3
 8000b3e:	d02e      	beq.n	8000b9e <PE_Get_RxEvent+0x94>
 8000b40:	b672      	cpsid	i
 8000b42:	7c30      	ldrb	r0, [r6, #16]
 8000b44:	5c39      	ldrb	r1, [r7, r0]
 8000b46:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000b4a:	5439      	strb	r1, [r7, r0]
 8000b4c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000b50:	7c31      	ldrb	r1, [r6, #16]
 8000b52:	4341      	muls	r1, r0
 8000b54:	1868      	adds	r0, r5, r1
 8000b56:	f200 1071 	addw	r0, r0, #369	; 0x171
 8000b5a:	60f0      	str	r0, [r6, #12]
 8000b5c:	7801      	ldrb	r1, [r0, #0]
 8000b5e:	7840      	ldrb	r0, [r0, #1]
 8000b60:	eb01 2200 	add.w	r2, r1, r0, lsl #8
 8000b64:	7c30      	ldrb	r0, [r6, #16]
 8000b66:	8172      	strh	r2, [r6, #10]
 8000b68:	5c39      	ldrb	r1, [r7, r0]
 8000b6a:	f001 011f 	and.w	r1, r1, #31
 8000b6e:	2901      	cmp	r1, #1
 8000b70:	d007      	beq.n	8000b82 <PE_Get_RxEvent+0x78>
 8000b72:	2902      	cmp	r1, #2
 8000b74:	d00d      	beq.n	8000b92 <PE_Get_RxEvent+0x88>
 8000b76:	2904      	cmp	r1, #4
 8000b78:	bf02      	ittt	eq
 8000b7a:	2413      	moveq	r4, #19
 8000b7c:	2102      	moveq	r1, #2
 8000b7e:	7031      	strbeq	r1, [r6, #0]
 8000b80:	e00a      	b.n	8000b98 <PE_Get_RxEvent+0x8e>
 8000b82:	2411      	movs	r4, #17
 8000b84:	2000      	movs	r0, #0
 8000b86:	e006      	b.n	8000b96 <PE_Get_RxEvent+0x8c>
 8000b88:	5c39      	ldrb	r1, [r7, r0]
 8000b8a:	0648      	lsls	r0, r1, #25
 8000b8c:	d4de      	bmi.n	8000b4c <PE_Get_RxEvent+0x42>
 8000b8e:	2403      	movs	r4, #3
 8000b90:	e002      	b.n	8000b98 <PE_Get_RxEvent+0x8e>
 8000b92:	2412      	movs	r4, #18
 8000b94:	2001      	movs	r0, #1
 8000b96:	7030      	strb	r0, [r6, #0]
 8000b98:	f388 8810 	msr	PRIMASK, r8
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ba2 <PE_Clear_RxEvent>:
 8000ba2:	b510      	push	{r4, lr}
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f3ef 8210 	mrs	r2, PRIMASK
 8000baa:	b672      	cpsid	i
 8000bac:	f891 0278 	ldrb.w	r0, [r1, #632]	; 0x278
 8000bb0:	b1b0      	cbz	r0, 8000be0 <PE_Clear_RxEvent+0x3e>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	b2c0      	uxtb	r0, r0
 8000bb6:	f201 4389 	addw	r3, r1, #1161	; 0x489
 8000bba:	2400      	movs	r4, #0
 8000bbc:	541c      	strb	r4, [r3, r0]
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	0fc0      	lsrs	r0, r0, #31
 8000bc4:	5c1b      	ldrb	r3, [r3, r0]
 8000bc6:	065c      	lsls	r4, r3, #25
 8000bc8:	d507      	bpl.n	8000bda <PE_Clear_RxEvent+0x38>
 8000bca:	1c40      	adds	r0, r0, #1
 8000bcc:	f881 0278 	strb.w	r0, [r1, #632]	; 0x278
 8000bd0:	f382 8810 	msr	PRIMASK, r2
 8000bd4:	f891 023f 	ldrb.w	r0, [r1, #575]	; 0x23f
 8000bd8:	e185      	b.n	8000ee6 <.text_44>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f881 0278 	strb.w	r0, [r1, #632]	; 0x278
 8000be0:	f382 8810 	msr	PRIMASK, r2
 8000be4:	bd10      	pop	{r4, pc}

08000be6 <PE_PRL_Control_RxEvent>:
 8000be6:	f8df 1a3c 	ldr.w	r1, [pc, #2620]	; 8001624 <.text_80>
 8000bea:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8000bf4:	b672      	cpsid	i
 8000bf6:	f892 1278 	ldrb.w	r1, [r2, #632]	; 0x278
 8000bfa:	b129      	cbz	r1, 8000c08 <PE_PRL_Control_RxEvent+0x22>
 8000bfc:	4411      	add	r1, r2
 8000bfe:	f891 1488 	ldrb.w	r1, [r1, #1160]	; 0x488
 8000c02:	060a      	lsls	r2, r1, #24
 8000c04:	bf58      	it	pl
 8000c06:	2001      	movpl	r0, #1
 8000c08:	f383 8810 	msr	PRIMASK, r3
 8000c0c:	4770      	bx	lr

08000c0e <PE_PRL_Get_ConnectionStatus>:
 8000c0e:	f8df 1a14 	ldr.w	r1, [pc, #2580]	; 8001624 <.text_80>
 8000c12:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000c16:	6841      	ldr	r1, [r0, #4]
 8000c18:	6808      	ldr	r0, [r1, #0]
 8000c1a:	0b00      	lsrs	r0, r0, #12
 8000c1c:	e1fd      	b.n	800101a <.text_54>

08000c1e <PE_Convert_SOPRxEvent>:
 8000c1e:	b118      	cbz	r0, 8000c28 <PE_Convert_SOPRxEvent+0xa>
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d005      	beq.n	8000c30 <PE_Convert_SOPRxEvent+0x12>
 8000c24:	d302      	bcc.n	8000c2c <PE_Convert_SOPRxEvent+0xe>
 8000c26:	e005      	b.n	8000c34 <PE_Convert_SOPRxEvent+0x16>
 8000c28:	2011      	movs	r0, #17
 8000c2a:	4770      	bx	lr
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	4770      	bx	lr
 8000c30:	2013      	movs	r0, #19
 8000c32:	4770      	bx	lr
 8000c34:	2014      	movs	r0, #20
 8000c36:	4770      	bx	lr

08000c38 <PE_Check_AMSConflict>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	f001 f98d 	bl	8001f5c <PE_GetCtrlMsg>
 8000c42:	280d      	cmp	r0, #13
 8000c44:	f206 243f 	addw	r4, r6, #575	; 0x23f
 8000c48:	d101      	bne.n	8000c4e <PE_Check_AMSConflict+0x16>
 8000c4a:	2010      	movs	r0, #16
 8000c4c:	e01e      	b.n	8000c8c <PE_Check_AMSConflict+0x54>
 8000c4e:	7b60      	ldrb	r0, [r4, #13]
 8000c50:	b198      	cbz	r0, 8000c7a <PE_Check_AMSConflict+0x42>
 8000c52:	1e40      	subs	r0, r0, #1
 8000c54:	2801      	cmp	r0, #1
 8000c56:	d916      	bls.n	8000c86 <PE_Check_AMSConflict+0x4e>
 8000c58:	1e80      	subs	r0, r0, #2
 8000c5a:	d016      	beq.n	8000c8a <PE_Check_AMSConflict+0x52>
 8000c5c:	1e40      	subs	r0, r0, #1
 8000c5e:	d025      	beq.n	8000cac <PE_Check_AMSConflict+0x74>
 8000c60:	1e40      	subs	r0, r0, #1
 8000c62:	2809      	cmp	r0, #9
 8000c64:	bf84      	itt	hi
 8000c66:	380b      	subhi	r0, #11
 8000c68:	2801      	cmphi	r0, #1
 8000c6a:	d90c      	bls.n	8000c86 <PE_Check_AMSConflict+0x4e>
 8000c6c:	1e80      	subs	r0, r0, #2
 8000c6e:	d007      	beq.n	8000c80 <PE_Check_AMSConflict+0x48>
 8000c70:	1f40      	subs	r0, r0, #5
 8000c72:	d008      	beq.n	8000c86 <PE_Check_AMSConflict+0x4e>
 8000c74:	3848      	subs	r0, #72	; 0x48
 8000c76:	d006      	beq.n	8000c86 <PE_Check_AMSConflict+0x4e>
 8000c78:	e00a      	b.n	8000c90 <PE_Check_AMSConflict+0x58>
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	7062      	strb	r2, [r4, #1]
 8000c7e:	e016      	b.n	8000cae <PE_Check_AMSConflict+0x76>
 8000c80:	200f      	movs	r0, #15
 8000c82:	7060      	strb	r0, [r4, #1]
 8000c84:	e013      	b.n	8000cae <PE_Check_AMSConflict+0x76>
 8000c86:	2011      	movs	r0, #17
 8000c88:	e000      	b.n	8000c8c <PE_Check_AMSConflict+0x54>
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	7060      	strb	r0, [r4, #1]
 8000c8e:	e00d      	b.n	8000cac <PE_Check_AMSConflict+0x74>
 8000c90:	7820      	ldrb	r0, [r4, #0]
 8000c92:	215c      	movs	r1, #92	; 0x5c
 8000c94:	f7ff fc88 	bl	80005a8 <USBPD_PE_Notification>
 8000c98:	2003      	movs	r0, #3
 8000c9a:	7060      	strb	r0, [r4, #1]
 8000c9c:	f240 7004 	movw	r0, #1796	; 0x704
 8000ca0:	6871      	ldr	r1, [r6, #4]
 8000ca2:	680a      	ldr	r2, [r1, #0]
 8000ca4:	4002      	ands	r2, r0
 8000ca6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000caa:	d000      	beq.n	8000cae <PE_Check_AMSConflict+0x76>
 8000cac:	2515      	movs	r5, #21
 8000cae:	4628      	mov	r0, r5
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}

08000cb2 <PE_PRL_ResetReceived>:
 8000cb2:	b538      	push	{r3, r4, r5, lr}
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	f8df 096c 	ldr.w	r0, [pc, #2412]	; 8001624 <.text_80>
 8000cba:	4622      	mov	r2, r4
 8000cbc:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000cc0:	2905      	cmp	r1, #5
 8000cc2:	d117      	bne.n	8000cf4 <PE_PRL_ResetReceived+0x42>
 8000cc4:	6868      	ldr	r0, [r5, #4]
 8000cc6:	6801      	ldr	r1, [r0, #0]
 8000cc8:	f021 0110 	bic.w	r1, r1, #16
 8000ccc:	6001      	str	r1, [r0, #0]
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f8d5 1244 	ldr.w	r1, [r5, #580]	; 0x244
 8000cd4:	f360 214a 	bfi	r1, r0, #9, #2
 8000cd8:	f205 206a 	addw	r0, r5, #618	; 0x26a
 8000cdc:	f8c5 1244 	str.w	r1, [r5, #580]	; 0x244
 8000ce0:	2214      	movs	r2, #20
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	7002      	strb	r2, [r0, #0]
 8000ce6:	7383      	strb	r3, [r0, #14]
 8000ce8:	211e      	movs	r1, #30
 8000cea:	f895 023f 	ldrb.w	r0, [r5, #575]	; 0x23f
 8000cee:	f7ff fc5b 	bl	80005a8 <USBPD_PE_Notification>
 8000cf2:	e005      	b.n	8000d00 <PE_PRL_ResetReceived+0x4e>
 8000cf4:	f8d5 0244 	ldr.w	r0, [r5, #580]	; 0x244
 8000cf8:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000cfc:	f8c5 0244 	str.w	r0, [r5, #580]	; 0x244
 8000d00:	4620      	mov	r0, r4
 8000d02:	68a9      	ldr	r1, [r5, #8]
 8000d04:	e179      	b.n	8000ffa <.text_51>

08000d06 <PE_PRL_BistCompleted>:
 8000d06:	4770      	bx	lr

08000d08 <PE_Reset_HardReset>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f894 026a 	ldrb.w	r0, [r4, #618]	; 0x26a
 8000d10:	b120      	cbz	r0, 8000d1c <PE_Reset_HardReset+0x14>
 8000d12:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000d16:	215b      	movs	r1, #91	; 0x5b
 8000d18:	f7ff fc46 	bl	80005a8 <USBPD_PE_Notification>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f000 f83a 	bl	8000d96 <PE_Reset_ZI>
 8000d22:	6860      	ldr	r0, [r4, #4]
 8000d24:	6801      	ldr	r1, [r0, #0]
 8000d26:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	7903      	ldrb	r3, [r0, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	d00a      	beq.n	8000d4c <PE_Reset_HardReset+0x44>
 8000d36:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	f004 fc31 	bl	80055a4 <USBPD_PRL_SetHeader>
 8000d42:	6860      	ldr	r0, [r4, #4]
 8000d44:	7801      	ldrb	r1, [r0, #0]
 8000d46:	f041 0108 	orr.w	r1, r1, #8
 8000d4a:	e009      	b.n	8000d60 <PE_Reset_HardReset+0x58>
 8000d4c:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	f004 fc26 	bl	80055a4 <USBPD_PRL_SetHeader>
 8000d58:	6860      	ldr	r0, [r4, #4]
 8000d5a:	7801      	ldrb	r1, [r0, #0]
 8000d5c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8000d60:	7001      	strb	r1, [r0, #0]
 8000d62:	6820      	ldr	r0, [r4, #0]
 8000d64:	6861      	ldr	r1, [r4, #4]
 8000d66:	7900      	ldrb	r0, [r0, #4]
 8000d68:	780a      	ldrb	r2, [r1, #0]
 8000d6a:	f000 0003 	and.w	r0, r0, #3
 8000d6e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8000d72:	4310      	orrs	r0, r2
 8000d74:	7008      	strb	r0, [r1, #0]
 8000d76:	2101      	movs	r1, #1
 8000d78:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000d7c:	f004 fcaf 	bl	80056de <USBPD_PRL_SOPCapability>
 8000d80:	6860      	ldr	r0, [r4, #4]
 8000d82:	78c1      	ldrb	r1, [r0, #3]
 8000d84:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8000d88:	70c1      	strb	r1, [r0, #3]
 8000d8a:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d92:	f004 bfe0 	b.w	8005d56 <USBPD_PRL_Reset>

08000d96 <PE_Reset_ZI>:
 8000d96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000d98:	4604      	mov	r4, r0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	9001      	str	r0, [sp, #4]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	6860      	ldr	r0, [r4, #4]
 8000da2:	6802      	ldr	r2, [r0, #0]
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	6002      	str	r2, [r0, #0]
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 fb8d 	bl	80014ca <PE_SetPowerNegotiation>
 8000db0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000db4:	f504 7011 	add.w	r0, r4, #580	; 0x244
 8000db8:	f019 fac8 	bl	801a34c <__aeabi_memclr>
 8000dbc:	68a5      	ldr	r5, [r4, #8]
 8000dbe:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000dc2:	69ae      	ldr	r6, [r5, #24]
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	aa01      	add	r2, sp, #4
 8000dc8:	2102      	movs	r1, #2
 8000dca:	47b0      	blx	r6
 8000dcc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000dd0:	9000      	str	r0, [sp, #0]
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	68a5      	ldr	r5, [r4, #8]
 8000dd6:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000dda:	69ae      	ldr	r6, [r5, #24]
 8000ddc:	466a      	mov	r2, sp
 8000dde:	2106      	movs	r1, #6
 8000de0:	47b0      	blx	r6
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	7901      	ldrb	r1, [r0, #4]
 8000de6:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8000dea:	f001 0103 	and.w	r1, r1, #3
 8000dee:	f004 fc0a 	bl	8005606 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	6861      	ldr	r1, [r4, #4]
 8000df6:	7900      	ldrb	r0, [r0, #4]
 8000df8:	78ca      	ldrb	r2, [r1, #3]
 8000dfa:	f000 0003 	and.w	r0, r0, #3
 8000dfe:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 8000e02:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8000e06:	70ca      	strb	r2, [r1, #3]
 8000e08:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000e0a <PE_Reset_Counter>:
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	f200 409c 	addw	r0, r0, #1180	; 0x49c
 8000e10:	f019 ba9c 	b.w	801a34c <__aeabi_memclr>

08000e14 <PE_Reset_StateMachine>:
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4605      	mov	r5, r0
 8000e18:	f205 243f 	addw	r4, r5, #575	; 0x23f
 8000e1c:	f895 026a 	ldrb.w	r0, [r5, #618]	; 0x26a
 8000e20:	b118      	cbz	r0, 8000e2a <PE_Reset_StateMachine+0x16>
 8000e22:	7820      	ldrb	r0, [r4, #0]
 8000e24:	215b      	movs	r1, #91	; 0x5b
 8000e26:	f7ff fbbf 	bl	80005a8 <USBPD_PE_Notification>
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f7ff ffb3 	bl	8000d96 <PE_Reset_ZI>
 8000e30:	2101      	movs	r1, #1
 8000e32:	4628      	mov	r0, r5
 8000e34:	f000 fb49 	bl	80014ca <PE_SetPowerNegotiation>
 8000e38:	7820      	ldrb	r0, [r4, #0]
 8000e3a:	f004 ff8c 	bl	8005d56 <USBPD_PRL_Reset>
 8000e3e:	6868      	ldr	r0, [r5, #4]
 8000e40:	6801      	ldr	r1, [r0, #0]
 8000e42:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000e46:	2800      	cmp	r0, #0
 8000e48:	6868      	ldr	r0, [r5, #4]
 8000e4a:	7800      	ldrb	r0, [r0, #0]
 8000e4c:	f000 0303 	and.w	r3, r0, #3
 8000e50:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 8000e54:	d005      	beq.n	8000e62 <PE_Reset_StateMachine+0x4e>
 8000e56:	7820      	ldrb	r0, [r4, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	f004 fba3 	bl	80055a4 <USBPD_PRL_SetHeader>
 8000e5e:	2002      	movs	r0, #2
 8000e60:	e004      	b.n	8000e6c <PE_Reset_StateMachine+0x58>
 8000e62:	7820      	ldrb	r0, [r4, #0]
 8000e64:	2100      	movs	r1, #0
 8000e66:	f004 fb9d 	bl	80055a4 <USBPD_PRL_SetHeader>
 8000e6a:	203e      	movs	r0, #62	; 0x3e
 8000e6c:	7060      	strb	r0, [r4, #1]
 8000e6e:	bd31      	pop	{r0, r4, r5, pc}

08000e70 <PE_ExtRevisionInteroperability>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	f8df 37b0 	ldr.w	r3, [pc, #1968]	; 8001624 <.text_80>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000e7c:	6865      	ldr	r5, [r4, #4]
 8000e7e:	782c      	ldrb	r4, [r5, #0]
 8000e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e84:	f004 0503 	and.w	r5, r4, #3
 8000e88:	42a9      	cmp	r1, r5
 8000e8a:	bf28      	it	cs
 8000e8c:	4629      	movcs	r1, r5
 8000e8e:	f361 0401 	bfi	r4, r1, #0, #2
 8000e92:	6851      	ldr	r1, [r2, #4]
 8000e94:	700c      	strb	r4, [r1, #0]
 8000e96:	6851      	ldr	r1, [r2, #4]
 8000e98:	780b      	ldrb	r3, [r1, #0]
 8000e9a:	f003 0403 	and.w	r4, r3, #3
 8000e9e:	2c01      	cmp	r4, #1
 8000ea0:	bf0c      	ite	eq
 8000ea2:	2400      	moveq	r4, #0
 8000ea4:	2420      	movne	r4, #32
 8000ea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	700b      	strb	r3, [r1, #0]
 8000eae:	6852      	ldr	r2, [r2, #4]
 8000eb0:	7811      	ldrb	r1, [r2, #0]
 8000eb2:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000eb6:	f001 0103 	and.w	r1, r1, #3
 8000eba:	f004 bb9d 	b.w	80055f8 <USBPD_PRL_SetHeaderSpecification>

08000ebe <PE_PRL_FastRoleSwapReception>:
 8000ebe:	4958      	ldr	r1, [pc, #352]	; (8001020 <.text_55>)
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000ec6:	f501 7211 	add.w	r2, r1, #580	; 0x244
 8000eca:	7a13      	ldrb	r3, [r2, #8]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d100      	bne.n	8000ed2 <PE_PRL_FastRoleSwapReception+0x14>
 8000ed0:	4770      	bx	lr
 8000ed2:	b510      	push	{r4, lr}
 8000ed4:	684b      	ldr	r3, [r1, #4]
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	f044 0410 	orr.w	r4, r4, #16
 8000edc:	601c      	str	r4, [r3, #0]
 8000ede:	6813      	ldr	r3, [r2, #0]
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	6013      	str	r3, [r2, #0]

08000ee6 <.text_44>:
 8000ee6:	6889      	ldr	r1, [r1, #8]
 8000ee8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

08000eee <__iar_annotation$$tailcall>:
 8000eee:	4710      	bx	r2

08000ef0 <PE_PRL_PostReceiveEventAllocate>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	f8df 3730 	ldr.w	r3, [pc, #1840]	; 8001624 <.text_80>
 8000ef6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8000efa:	2000      	movs	r0, #0
 8000efc:	7010      	strb	r0, [r2, #0]
 8000efe:	7815      	ldrb	r5, [r2, #0]
 8000f00:	1966      	adds	r6, r4, r5
 8000f02:	f896 3489 	ldrb.w	r3, [r6, #1161]	; 0x489
 8000f06:	b12b      	cbz	r3, 8000f14 <PE_PRL_PostReceiveEventAllocate+0x24>
 8000f08:	1c6d      	adds	r5, r5, #1
 8000f0a:	7015      	strb	r5, [r2, #0]
 8000f0c:	b2ed      	uxtb	r5, r5
 8000f0e:	2d01      	cmp	r5, #1
 8000f10:	d9f5      	bls.n	8000efe <PE_PRL_PostReceiveEventAllocate+0xe>
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f101 	lsl.w	r1, r0, r1
 8000f1a:	f041 0120 	orr.w	r1, r1, #32
 8000f1e:	f886 1489 	strb.w	r1, [r6, #1161]	; 0x489
 8000f22:	bd70      	pop	{r4, r5, r6, pc}

08000f24 <PE_PRL_PostReceiveEventError>:
 8000f24:	f8df 26fc 	ldr.w	r2, [pc, #1788]	; 8001624 <.text_80>
 8000f28:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	4402      	add	r2, r0
 8000f32:	f892 3489 	ldrb.w	r3, [r2, #1161]	; 0x489
 8000f36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d004      	beq.n	8000f48 <PE_PRL_PostReceiveEventError+0x24>
 8000f3e:	1c49      	adds	r1, r1, #1
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	d3f3      	bcc.n	8000f2e <PE_PRL_PostReceiveEventError+0xa>
 8000f46:	4770      	bx	lr
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f882 0489 	strb.w	r0, [r2, #1161]	; 0x489
 8000f4e:	4770      	bx	lr

08000f50 <PE_PRL_PostReceiveEventEnableChunk>:
 8000f50:	f8df 26d0 	ldr.w	r2, [pc, #1744]	; 8001624 <.text_80>
 8000f54:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000f58:	4408      	add	r0, r1
 8000f5a:	f890 1489 	ldrb.w	r1, [r0, #1161]	; 0x489
 8000f5e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000f62:	f880 1489 	strb.w	r1, [r0, #1161]	; 0x489
 8000f66:	4770      	bx	lr

08000f68 <PE_PRL_PostReceiveEventCopyChunk>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	f8df 66b4 	ldr.w	r6, [pc, #1716]	; 8001624 <.text_80>
 8000f70:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4615      	mov	r5, r2
 8000f78:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000f7c:	221a      	movs	r2, #26
 8000f7e:	435c      	muls	r4, r3
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	fb12 f505 	smulbb	r5, r2, r5
 8000f86:	195c      	adds	r4, r3, r5
 8000f88:	f204 207d 	addw	r0, r4, #637	; 0x27d
 8000f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000f90:	f019 b9df 	b.w	801a352 <__aeabi_memcpy>

08000f94 <PE_PRL_PostReceiveEventCopy>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	460b      	mov	r3, r1
 8000f98:	f8df 4688 	ldr.w	r4, [pc, #1672]	; 8001624 <.text_80>
 8000f9c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000fa6:	4353      	muls	r3, r2
 8000fa8:	442b      	add	r3, r5
 8000faa:	f203 2079 	addw	r0, r3, #633	; 0x279
 8000fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb2:	f019 b9ce 	b.w	801a352 <__aeabi_memcpy>

08000fb6 <PE_PRL_PostReceiveEventComplete>:
 8000fb6:	b538      	push	{r3, r4, r5, lr}
 8000fb8:	f000 f823 	bl	8001002 <.text_52>
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	1854      	adds	r4, r2, r1
 8000fc0:	1c4b      	adds	r3, r1, #1
 8000fc2:	f894 5489 	ldrb.w	r5, [r4, #1161]	; 0x489
 8000fc6:	f005 0560 	and.w	r5, r5, #96	; 0x60
 8000fca:	2d20      	cmp	r5, #32
 8000fcc:	d003      	beq.n	8000fd6 <PE_PRL_PostReceiveEventComplete+0x20>
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	2902      	cmp	r1, #2
 8000fd2:	d3f4      	bcc.n	8000fbe <PE_PRL_PostReceiveEventComplete+0x8>
 8000fd4:	bd31      	pop	{r0, r4, r5, pc}
 8000fd6:	f894 4489 	ldrb.w	r4, [r4, #1161]	; 0x489
 8000fda:	0625      	lsls	r5, r4, #24
 8000fdc:	d407      	bmi.n	8000fee <PE_PRL_PostReceiveEventComplete+0x38>
 8000fde:	1854      	adds	r4, r2, r1
 8000fe0:	4411      	add	r1, r2
 8000fe2:	f894 4489 	ldrb.w	r4, [r4, #1161]	; 0x489
 8000fe6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8000fea:	f881 4489 	strb.w	r4, [r1, #1161]	; 0x489
 8000fee:	f892 1278 	ldrb.w	r1, [r2, #632]	; 0x278
 8000ff2:	b909      	cbnz	r1, 8000ff8 <PE_PRL_PostReceiveEventComplete+0x42>
 8000ff4:	f882 3278 	strb.w	r3, [r2, #632]	; 0x278
 8000ff8:	6891      	ldr	r1, [r2, #8]

08000ffa <.text_51>:
 8000ffa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000ffc:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08001000 <__iar_annotation$$tailcall>:
 8001000:	4710      	bx	r2

08001002 <.text_52>:
 8001002:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 8001624 <.text_80>
 8001006:	4602      	mov	r2, r0
 8001008:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800100c:	4770      	bx	lr

0800100e <PE_Get_UnchunkedSupport>:
 800100e:	4904      	ldr	r1, [pc, #16]	; (8001020 <.text_55>)
 8001010:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001014:	6841      	ldr	r1, [r0, #4]
 8001016:	6808      	ldr	r0, [r1, #0]
 8001018:	0e40      	lsrs	r0, r0, #25

0800101a <.text_54>:
 800101a:	f000 0001 	and.w	r0, r0, #1
 800101e:	4770      	bx	lr

08001020 <.text_55>:
 8001020:	200001fc 	.word	0x200001fc

08001024 <.text_56>:
 8001024:	20000000 	.word	0x20000000

08001028 <.text_57>:
 8001028:	0801b85c 	.word	0x0801b85c

0800102c <PE_SubStateMachine_Generic>:
 800102c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001030:	b08c      	sub	sp, #48	; 0x30
 8001032:	4604      	mov	r4, r0
 8001034:	2000      	movs	r0, #0
 8001036:	f204 263f 	addw	r6, r4, #575	; 0x23f
 800103a:	9003      	str	r0, [sp, #12]
 800103c:	460f      	mov	r7, r1
 800103e:	7872      	ldrb	r2, [r6, #1]
 8001040:	2a01      	cmp	r2, #1
 8001042:	f04f 0802 	mov.w	r8, #2
 8001046:	f204 254e 	addw	r5, r4, #590	; 0x24e
 800104a:	f248 091d 	movw	r9, #32797	; 0x801d
 800104e:	f000 8120 	beq.w	8001292 <PE_SubStateMachine_Generic+0x266>
 8001052:	2a18      	cmp	r2, #24
 8001054:	d03e      	beq.n	80010d4 <PE_SubStateMachine_Generic+0xa8>
 8001056:	2a19      	cmp	r2, #25
 8001058:	d046      	beq.n	80010e8 <PE_SubStateMachine_Generic+0xbc>
 800105a:	2a1d      	cmp	r2, #29
 800105c:	d06f      	beq.n	800113e <PE_SubStateMachine_Generic+0x112>
 800105e:	2a27      	cmp	r2, #39	; 0x27
 8001060:	f000 808b 	beq.w	800117a <PE_SubStateMachine_Generic+0x14e>
 8001064:	2a28      	cmp	r2, #40	; 0x28
 8001066:	f000 8096 	beq.w	8001196 <PE_SubStateMachine_Generic+0x16a>
 800106a:	2a29      	cmp	r2, #41	; 0x29
 800106c:	f000 809d 	beq.w	80011aa <PE_SubStateMachine_Generic+0x17e>
 8001070:	2a2c      	cmp	r2, #44	; 0x2c
 8001072:	f000 81a8 	beq.w	80013c6 <PE_SubStateMachine_Generic+0x39a>
 8001076:	2a30      	cmp	r2, #48	; 0x30
 8001078:	f000 8137 	beq.w	80012ea <PE_SubStateMachine_Generic+0x2be>
 800107c:	2a3a      	cmp	r2, #58	; 0x3a
 800107e:	f000 8193 	beq.w	80013a8 <PE_SubStateMachine_Generic+0x37c>
 8001082:	2a3b      	cmp	r2, #59	; 0x3b
 8001084:	f000 8178 	beq.w	8001378 <PE_SubStateMachine_Generic+0x34c>
 8001088:	2a3c      	cmp	r2, #60	; 0x3c
 800108a:	f000 8167 	beq.w	800135c <PE_SubStateMachine_Generic+0x330>
 800108e:	2a4b      	cmp	r2, #75	; 0x4b
 8001090:	f000 80c4 	beq.w	800121c <PE_SubStateMachine_Generic+0x1f0>
 8001094:	2a63      	cmp	r2, #99	; 0x63
 8001096:	f000 8102 	beq.w	800129e <PE_SubStateMachine_Generic+0x272>
 800109a:	2a64      	cmp	r2, #100	; 0x64
 800109c:	f000 8114 	beq.w	80012c8 <PE_SubStateMachine_Generic+0x29c>
 80010a0:	2a67      	cmp	r2, #103	; 0x67
 80010a2:	f000 80cf 	beq.w	8001244 <PE_SubStateMachine_Generic+0x218>
 80010a6:	2a68      	cmp	r2, #104	; 0x68
 80010a8:	f000 80d9 	beq.w	800125e <PE_SubStateMachine_Generic+0x232>
 80010ac:	2a74      	cmp	r2, #116	; 0x74
 80010ae:	f000 8130 	beq.w	8001312 <PE_SubStateMachine_Generic+0x2e6>
 80010b2:	2a93      	cmp	r2, #147	; 0x93
 80010b4:	f000 807c 	beq.w	80011b0 <PE_SubStateMachine_Generic+0x184>
 80010b8:	2a94      	cmp	r2, #148	; 0x94
 80010ba:	f000 807d 	beq.w	80011b8 <PE_SubStateMachine_Generic+0x18c>
 80010be:	2a95      	cmp	r2, #149	; 0x95
 80010c0:	f000 8087 	beq.w	80011d2 <PE_SubStateMachine_Generic+0x1a6>
 80010c4:	2a99      	cmp	r2, #153	; 0x99
 80010c6:	f040 8183 	bne.w	80013d0 <PE_SubStateMachine_Generic+0x3a4>
 80010ca:	2106      	movs	r1, #6
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fcf1 	bl	8000ab4 <PE_Send_RESET>
 80010d2:	e13e      	b.n	8001352 <PE_SubStateMachine_Generic+0x326>
 80010d4:	2201      	movs	r2, #1
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	2319      	movs	r3, #25
 80010da:	2208      	movs	r2, #8
 80010dc:	f000 f9ad 	bl	800143a <.text_67>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d157      	bne.n	8001194 <PE_SubStateMachine_Generic+0x168>
 80010e4:	2007      	movs	r0, #7
 80010e6:	e0b7      	b.n	8001258 <PE_SubStateMachine_Generic+0x22c>
 80010e8:	7838      	ldrb	r0, [r7, #0]
 80010ea:	2811      	cmp	r0, #17
 80010ec:	d11f      	bne.n	800112e <PE_SubStateMachine_Generic+0x102>
 80010ee:	2104      	movs	r1, #4
 80010f0:	4620      	mov	r0, r4
 80010f2:	f000 ff21 	bl	8001f38 <PE_IsDataMsg>
 80010f6:	b198      	cbz	r0, 8001120 <PE_SubStateMachine_Generic+0xf4>
 80010f8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80010fc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80010fe:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8001102:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001106:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 800110a:	1c82      	adds	r2, r0, #2
 800110c:	7830      	ldrb	r0, [r6, #0]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	2105      	movs	r1, #5
 8001112:	47c8      	blx	r9
 8001114:	f000 f995 	bl	8001442 <.text_68>
 8001118:	7830      	ldrb	r0, [r6, #0]
 800111a:	2107      	movs	r1, #7
 800111c:	f7ff fa44 	bl	80005a8 <USBPD_PE_Notification>
 8001120:	f000 f988 	bl	8001434 <.text_66>
 8001124:	2804      	cmp	r0, #4
 8001126:	d003      	beq.n	8001130 <PE_SubStateMachine_Generic+0x104>
 8001128:	f000 f984 	bl	8001434 <.text_66>
 800112c:	2810      	cmp	r0, #16
 800112e:	d171      	bne.n	8001214 <PE_SubStateMachine_Generic+0x1e8>
 8001130:	f000 f987 	bl	8001442 <.text_68>
 8001134:	7830      	ldrb	r0, [r6, #0]
 8001136:	2108      	movs	r1, #8
 8001138:	f7ff fa36 	bl	80005a8 <USBPD_PE_Notification>
 800113c:	e06a      	b.n	8001214 <PE_SubStateMachine_Generic+0x1e8>
 800113e:	9004      	str	r0, [sp, #16]
 8001140:	ab04      	add	r3, sp, #16
 8001142:	f000 f958 	bl	80013f6 <.text_61>
 8001146:	aa05      	add	r2, sp, #20
 8001148:	2101      	movs	r1, #1
 800114a:	47e0      	blx	ip
 800114c:	9804      	ldr	r0, [sp, #16]
 800114e:	2104      	movs	r1, #4
 8001150:	f000 fa22 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 8001154:	b108      	cbz	r0, 800115a <PE_SubStateMachine_Generic+0x12e>
 8001156:	2003      	movs	r0, #3
 8001158:	e13b      	b.n	80013d2 <PE_SubStateMachine_Generic+0x3a6>
 800115a:	9a04      	ldr	r2, [sp, #16]
 800115c:	2003      	movs	r0, #3
 800115e:	0892      	lsrs	r2, r2, #2
 8001160:	2100      	movs	r1, #0
 8001162:	9001      	str	r0, [sp, #4]
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	9102      	str	r1, [sp, #8]
 8001168:	ab05      	add	r3, sp, #20
 800116a:	2204      	movs	r2, #4
 800116c:	4620      	mov	r0, r4
 800116e:	f000 fa9a 	bl	80016a6 <PE_Send_DataMessage>
 8001172:	2800      	cmp	r0, #0
 8001174:	d10e      	bne.n	8001194 <PE_SubStateMachine_Generic+0x168>
 8001176:	210a      	movs	r1, #10
 8001178:	e0c7      	b.n	800130a <PE_SubStateMachine_Generic+0x2de>
 800117a:	2012      	movs	r0, #18
 800117c:	7370      	strb	r0, [r6, #13]
 800117e:	2105      	movs	r1, #5
 8001180:	7830      	ldrb	r0, [r6, #0]
 8001182:	f004 fddb 	bl	8005d3c <USBDPD_PRL_BistCarrierEyeMode>
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	7070      	strb	r0, [r6, #1]
 800118a:	f248 012d 	movw	r1, #32813	; 0x802d
 800118e:	8029      	strh	r1, [r5, #0]
 8001190:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8001194:	e11e      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 8001196:	f000 f959 	bl	800144c <.text_69>
 800119a:	d1fb      	bne.n	8001194 <PE_SubStateMachine_Generic+0x168>
 800119c:	7830      	ldrb	r0, [r6, #0]
 800119e:	2105      	movs	r1, #5
 80011a0:	f004 fdd2 	bl	8005d48 <USBDPD_PRL_BistCarrierEyeModeExit>
 80011a4:	2000      	movs	r0, #0
 80011a6:	8028      	strh	r0, [r5, #0]
 80011a8:	e0d3      	b.n	8001352 <PE_SubStateMachine_Generic+0x326>
 80011aa:	f000 f94c 	bl	8001446 <.text_68+0x4>
 80011ae:	e111      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 80011b0:	4620      	mov	r0, r4
 80011b2:	f000 f94f 	bl	8001454 <PE_SubStateMachine_ReceiveDRS>
 80011b6:	e10d      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 80011b8:	2001      	movs	r0, #1
 80011ba:	9000      	str	r0, [sp, #0]
 80011bc:	2395      	movs	r3, #149	; 0x95
 80011be:	2209      	movs	r2, #9
 80011c0:	f000 f93b 	bl	800143a <.text_67>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1f6      	bne.n	80011b6 <PE_SubStateMachine_Generic+0x18a>
 80011c8:	2010      	movs	r0, #16
 80011ca:	f000 f90e 	bl	80013ea <.text_60>
 80011ce:	2122      	movs	r1, #34	; 0x22
 80011d0:	e09b      	b.n	800130a <PE_SubStateMachine_Generic+0x2de>
 80011d2:	7838      	ldrb	r0, [r7, #0]
 80011d4:	2814      	cmp	r0, #20
 80011d6:	d01d      	beq.n	8001214 <PE_SubStateMachine_Generic+0x1e8>
 80011d8:	f000 f92c 	bl	8001434 <.text_66>
 80011dc:	2803      	cmp	r0, #3
 80011de:	d006      	beq.n	80011ee <PE_SubStateMachine_Generic+0x1c2>
 80011e0:	2804      	cmp	r0, #4
 80011e2:	bf18      	it	ne
 80011e4:	280c      	cmpne	r0, #12
 80011e6:	d006      	beq.n	80011f6 <PE_SubStateMachine_Generic+0x1ca>
 80011e8:	2810      	cmp	r0, #16
 80011ea:	d00d      	beq.n	8001208 <PE_SubStateMachine_Generic+0x1dc>
 80011ec:	e012      	b.n	8001214 <PE_SubStateMachine_Generic+0x1e8>
 80011ee:	4620      	mov	r0, r4
 80011f0:	f000 f9e1 	bl	80015b6 <PE_SwitchDataRole>
 80011f4:	e00c      	b.n	8001210 <PE_SubStateMachine_Generic+0x1e4>
 80011f6:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 80011fa:	f000 001f 	and.w	r0, r0, #31
 80011fe:	280c      	cmp	r0, #12
 8001200:	bf14      	ite	ne
 8001202:	2127      	movne	r1, #39	; 0x27
 8001204:	2126      	moveq	r1, #38	; 0x26
 8001206:	e000      	b.n	800120a <PE_SubStateMachine_Generic+0x1de>
 8001208:	2128      	movs	r1, #40	; 0x28
 800120a:	7830      	ldrb	r0, [r6, #0]
 800120c:	f7ff f9cc 	bl	80005a8 <USBPD_PE_Notification>
 8001210:	f000 f917 	bl	8001442 <.text_68>
 8001214:	f000 f91a 	bl	800144c <.text_69>
 8001218:	d120      	bne.n	800125c <PE_SubStateMachine_Generic+0x230>
 800121a:	e09a      	b.n	8001352 <PE_SubStateMachine_Generic+0x326>
 800121c:	f000 f8eb 	bl	80013f6 <.text_61>
 8001220:	ab03      	add	r3, sp, #12
 8001222:	aa04      	add	r2, sp, #16
 8001224:	2115      	movs	r1, #21
 8001226:	47e0      	blx	ip
 8001228:	9803      	ldr	r0, [sp, #12]
 800122a:	2800      	cmp	r0, #0
 800122c:	f000 80d0 	beq.w	80013d0 <PE_SubStateMachine_Generic+0x3a4>
 8001230:	9a03      	ldr	r2, [sp, #12]
 8001232:	0892      	lsrs	r2, r2, #2
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	2100      	movs	r1, #0
 8001238:	2003      	movs	r0, #3
 800123a:	9102      	str	r1, [sp, #8]
 800123c:	9001      	str	r0, [sp, #4]
 800123e:	ab04      	add	r3, sp, #16
 8001240:	220c      	movs	r2, #12
 8001242:	e0ad      	b.n	80013a0 <PE_SubStateMachine_Generic+0x374>
 8001244:	2101      	movs	r1, #1
 8001246:	9100      	str	r1, [sp, #0]
 8001248:	2368      	movs	r3, #104	; 0x68
 800124a:	7ee9      	ldrb	r1, [r5, #27]
 800124c:	2218      	movs	r2, #24
 800124e:	f000 f8f5 	bl	800143c <.text_67+0x2>
 8001252:	2800      	cmp	r0, #0
 8001254:	d102      	bne.n	800125c <PE_SubStateMachine_Generic+0x230>
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f8c7 	bl	80013ea <.text_60>
 800125c:	e0ba      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 800125e:	7838      	ldrb	r0, [r7, #0]
 8001260:	2814      	cmp	r0, #20
 8001262:	d011      	beq.n	8001288 <PE_SubStateMachine_Generic+0x25c>
 8001264:	7ea8      	ldrb	r0, [r5, #26]
 8001266:	7ee9      	ldrb	r1, [r5, #27]
 8001268:	4288      	cmp	r0, r1
 800126a:	d10d      	bne.n	8001288 <PE_SubStateMachine_Generic+0x25c>
 800126c:	210c      	movs	r1, #12
 800126e:	4620      	mov	r0, r4
 8001270:	f000 fe62 	bl	8001f38 <PE_IsDataMsg>
 8001274:	b140      	cbz	r0, 8001288 <PE_SubStateMachine_Generic+0x25c>
 8001276:	f000 f8cb 	bl	8001410 <.text_63>
 800127a:	1c82      	adds	r2, r0, #2
 800127c:	7830      	ldrb	r0, [r6, #0]
 800127e:	2304      	movs	r3, #4
 8001280:	2115      	movs	r1, #21
 8001282:	47c8      	blx	r9
 8001284:	f000 f8dd 	bl	8001442 <.text_68>
 8001288:	f000 f8e0 	bl	800144c <.text_69>
 800128c:	d106      	bne.n	800129c <PE_SubStateMachine_Generic+0x270>
 800128e:	2111      	movs	r1, #17
 8001290:	e060      	b.n	8001354 <PE_SubStateMachine_Generic+0x328>
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	2303      	movs	r3, #3
 8001296:	2210      	movs	r2, #16
 8001298:	f000 f8cf 	bl	800143a <.text_67>
 800129c:	e09a      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 800129e:	f000 f8af 	bl	8001400 <.text_62>
 80012a2:	2108      	movs	r1, #8
 80012a4:	47e0      	blx	ip
 80012a6:	9803      	ldr	r0, [sp, #12]
 80012a8:	2119      	movs	r1, #25
 80012aa:	f000 f975 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d113      	bne.n	80012da <PE_SubStateMachine_Generic+0x2ae>
 80012b2:	f000 f8b4 	bl	800141e <.text_64>
 80012b6:	2281      	movs	r2, #129	; 0x81
 80012b8:	2100      	movs	r1, #0
 80012ba:	4620      	mov	r0, r4
 80012bc:	f000 fa15 	bl	80016ea <PE_Send_Message>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1eb      	bne.n	800129c <PE_SubStateMachine_Generic+0x270>
 80012c4:	2148      	movs	r1, #72	; 0x48
 80012c6:	e020      	b.n	800130a <PE_SubStateMachine_Generic+0x2de>
 80012c8:	f000 f89a 	bl	8001400 <.text_62>
 80012cc:	2113      	movs	r1, #19
 80012ce:	47e0      	blx	ip
 80012d0:	9803      	ldr	r0, [sp, #12]
 80012d2:	2118      	movs	r1, #24
 80012d4:	f000 f960 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d179      	bne.n	80013d0 <PE_SubStateMachine_Generic+0x3a4>
 80012dc:	f000 f89f 	bl	800141e <.text_64>
 80012e0:	220f      	movs	r2, #15
 80012e2:	f000 f8a3 	bl	800142c <.text_65>
 80012e6:	2161      	movs	r1, #97	; 0x61
 80012e8:	e00f      	b.n	800130a <PE_SubStateMachine_Generic+0x2de>
 80012ea:	f000 f889 	bl	8001400 <.text_62>
 80012ee:	2109      	movs	r1, #9
 80012f0:	47e0      	blx	ip
 80012f2:	9803      	ldr	r0, [sp, #12]
 80012f4:	2107      	movs	r1, #7
 80012f6:	f000 f94f 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d168      	bne.n	80013d0 <PE_SubStateMachine_Generic+0x3a4>
 80012fe:	f000 f88e 	bl	800141e <.text_64>
 8001302:	2202      	movs	r2, #2
 8001304:	f000 f892 	bl	800142c <.text_65>
 8001308:	214f      	movs	r1, #79	; 0x4f
 800130a:	7830      	ldrb	r0, [r6, #0]
 800130c:	f7ff f94c 	bl	80005a8 <USBPD_PE_Notification>
 8001310:	e060      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 8001312:	7839      	ldrb	r1, [r7, #0]
 8001314:	2914      	cmp	r1, #20
 8001316:	d019      	beq.n	800134c <PE_SubStateMachine_Generic+0x320>
 8001318:	2105      	movs	r1, #5
 800131a:	4620      	mov	r0, r4
 800131c:	f000 fe0c 	bl	8001f38 <PE_IsDataMsg>
 8001320:	b140      	cbz	r0, 8001334 <PE_SubStateMachine_Generic+0x308>
 8001322:	f000 f875 	bl	8001410 <.text_63>
 8001326:	1d02      	adds	r2, r0, #4
 8001328:	7830      	ldrb	r0, [r6, #0]
 800132a:	2304      	movs	r3, #4
 800132c:	210f      	movs	r1, #15
 800132e:	47c8      	blx	r9
 8001330:	f000 f887 	bl	8001442 <.text_68>
 8001334:	f000 f87e 	bl	8001434 <.text_66>
 8001338:	2810      	cmp	r0, #16
 800133a:	d107      	bne.n	800134c <PE_SubStateMachine_Generic+0x320>
 800133c:	7830      	ldrb	r0, [r6, #0]
 800133e:	2159      	movs	r1, #89	; 0x59
 8001340:	f7ff f932 	bl	80005a8 <USBPD_PE_Notification>
 8001344:	2000      	movs	r0, #0
 8001346:	8028      	strh	r0, [r5, #0]
 8001348:	f000 f87b 	bl	8001442 <.text_68>
 800134c:	f000 f87e 	bl	800144c <.text_69>
 8001350:	d140      	bne.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 8001352:	2103      	movs	r1, #3
 8001354:	7071      	strb	r1, [r6, #1]
 8001356:	f04f 0800 	mov.w	r8, #0
 800135a:	e03b      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 800135c:	f000 f850 	bl	8001400 <.text_62>
 8001360:	210d      	movs	r1, #13
 8001362:	47e0      	blx	ip
 8001364:	9803      	ldr	r0, [sp, #12]
 8001366:	2104      	movs	r1, #4
 8001368:	f000 f916 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 800136c:	2800      	cmp	r0, #0
 800136e:	d12f      	bne.n	80013d0 <PE_SubStateMachine_Generic+0x3a4>
 8001370:	f000 f834 	bl	80013dc <.text_59>
 8001374:	2207      	movs	r2, #7
 8001376:	e023      	b.n	80013c0 <PE_SubStateMachine_Generic+0x394>
 8001378:	9004      	str	r0, [sp, #16]
 800137a:	ab03      	add	r3, sp, #12
 800137c:	f000 f83b 	bl	80013f6 <.text_61>
 8001380:	aa04      	add	r2, sp, #16
 8001382:	210f      	movs	r1, #15
 8001384:	47e0      	blx	ip
 8001386:	9803      	ldr	r0, [sp, #12]
 8001388:	2104      	movs	r1, #4
 800138a:	f000 f905 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 800138e:	b9f8      	cbnz	r0, 80013d0 <PE_SubStateMachine_Generic+0x3a4>
 8001390:	2103      	movs	r1, #3
 8001392:	2201      	movs	r2, #1
 8001394:	9101      	str	r1, [sp, #4]
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	9002      	str	r0, [sp, #8]
 800139a:	ab04      	add	r3, sp, #16
 800139c:	2205      	movs	r2, #5
 800139e:	2100      	movs	r1, #0
 80013a0:	4620      	mov	r0, r4
 80013a2:	f000 f980 	bl	80016a6 <PE_Send_DataMessage>
 80013a6:	e015      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 80013a8:	f000 f82a 	bl	8001400 <.text_62>
 80013ac:	2111      	movs	r1, #17
 80013ae:	47e0      	blx	ip
 80013b0:	9803      	ldr	r0, [sp, #12]
 80013b2:	2109      	movs	r1, #9
 80013b4:	f000 f8f0 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 80013b8:	b950      	cbnz	r0, 80013d0 <PE_SubStateMachine_Generic+0x3a4>
 80013ba:	f000 f80f 	bl	80013dc <.text_59>
 80013be:	2205      	movs	r2, #5
 80013c0:	f000 f834 	bl	800142c <.text_65>
 80013c4:	e006      	b.n	80013d4 <PE_SubStateMachine_Generic+0x3a8>
 80013c6:	7830      	ldrb	r0, [r6, #0]
 80013c8:	2150      	movs	r1, #80	; 0x50
 80013ca:	f7ff f8ed 	bl	80005a8 <USBPD_PE_Notification>
 80013ce:	e7c0      	b.n	8001352 <PE_SubStateMachine_Generic+0x326>
 80013d0:	2001      	movs	r0, #1
 80013d2:	7070      	strb	r0, [r6, #1]
 80013d4:	4640      	mov	r0, r8
 80013d6:	b00d      	add	sp, #52	; 0x34
 80013d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080013dc <.text_59>:
 80013dc:	9b03      	ldr	r3, [sp, #12]
 80013de:	2103      	movs	r1, #3
 80013e0:	1d1b      	adds	r3, r3, #4
 80013e2:	9001      	str	r0, [sp, #4]
 80013e4:	9100      	str	r1, [sp, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4770      	bx	lr

080013ea <.text_60>:
 80013ea:	7370      	strb	r0, [r6, #13]
 80013ec:	f8a5 9000 	strh.w	r9, [r5]
 80013f0:	f04f 081d 	mov.w	r8, #29
 80013f4:	4770      	bx	lr

080013f6 <.text_61>:
 80013f6:	68a7      	ldr	r7, [r4, #8]
 80013f8:	7830      	ldrb	r0, [r6, #0]
 80013fa:	f8d7 c014 	ldr.w	ip, [r7, #20]
 80013fe:	4770      	bx	lr

08001400 <.text_62>:
 8001400:	68a7      	ldr	r7, [r4, #8]
 8001402:	7830      	ldrb	r0, [r6, #0]
 8001404:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8001408:	ab03      	add	r3, sp, #12
 800140a:	f104 0214 	add.w	r2, r4, #20
 800140e:	4770      	bx	lr

08001410 <.text_63>:
 8001410:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8001414:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8001418:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800141c:	4770      	bx	lr

0800141e <.text_64>:
 800141e:	2103      	movs	r1, #3
 8001420:	9b03      	ldr	r3, [sp, #12]
 8001422:	9001      	str	r0, [sp, #4]
 8001424:	9100      	str	r1, [sp, #0]
 8001426:	1d1b      	adds	r3, r3, #4
 8001428:	b29b      	uxth	r3, r3
 800142a:	4770      	bx	lr

0800142c <.text_65>:
 800142c:	2100      	movs	r1, #0
 800142e:	4620      	mov	r0, r4
 8001430:	f000 baaa 	b.w	8001988 <PE_Send_ExtendedMessage>

08001434 <.text_66>:
 8001434:	4620      	mov	r0, r4
 8001436:	f000 bd91 	b.w	8001f5c <PE_GetCtrlMsg>

0800143a <.text_67>:
 800143a:	2100      	movs	r1, #0
 800143c:	4620      	mov	r0, r4
 800143e:	f000 b929 	b.w	8001694 <PE_Send_CtrlMessage>

08001442 <.text_68>:
 8001442:	2203      	movs	r2, #3
 8001444:	4639      	mov	r1, r7
 8001446:	4620      	mov	r0, r4
 8001448:	f000 bd68 	b.w	8001f1c <PE_ResetRxEvent>

0800144c <.text_69>:
 800144c:	8828      	ldrh	r0, [r5, #0]
 800144e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001452:	4770      	bx	lr

08001454 <PE_SubStateMachine_ReceiveDRS>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4605      	mov	r5, r0
 8001458:	f205 243f 	addw	r4, r5, #575	; 0x23f
 800145c:	68a9      	ldr	r1, [r5, #8]
 800145e:	7820      	ldrb	r0, [r4, #0]
 8001460:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8001462:	4790      	blx	r2
 8001464:	280a      	cmp	r0, #10
 8001466:	d002      	beq.n	800146e <PE_SubStateMachine_ReceiveDRS+0x1a>
 8001468:	280c      	cmp	r0, #12
 800146a:	d00d      	beq.n	8001488 <PE_SubStateMachine_ReceiveDRS+0x34>
 800146c:	e00e      	b.n	800148c <PE_SubStateMachine_ReceiveDRS+0x38>
 800146e:	2000      	movs	r0, #0
 8001470:	9000      	str	r0, [sp, #0]
 8001472:	2303      	movs	r3, #3
 8001474:	2203      	movs	r2, #3
 8001476:	2100      	movs	r1, #0
 8001478:	4628      	mov	r0, r5
 800147a:	f000 f90b 	bl	8001694 <PE_Send_CtrlMessage>
 800147e:	b980      	cbnz	r0, 80014a2 <PE_SubStateMachine_ReceiveDRS+0x4e>
 8001480:	4628      	mov	r0, r5
 8001482:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8001486:	e096      	b.n	80015b6 <PE_SwitchDataRole>
 8001488:	202a      	movs	r0, #42	; 0x2a
 800148a:	e006      	b.n	800149a <PE_SubStateMachine_ReceiveDRS+0x46>
 800148c:	6868      	ldr	r0, [r5, #4]
 800148e:	7801      	ldrb	r1, [r0, #0]
 8001490:	f001 0103 	and.w	r1, r1, #3
 8001494:	2902      	cmp	r1, #2
 8001496:	d102      	bne.n	800149e <PE_SubStateMachine_ReceiveDRS+0x4a>
 8001498:	2001      	movs	r0, #1
 800149a:	7060      	strb	r0, [r4, #1]
 800149c:	bd31      	pop	{r0, r4, r5, pc}
 800149e:	212a      	movs	r1, #42	; 0x2a
 80014a0:	7061      	strb	r1, [r4, #1]
 80014a2:	bd31      	pop	{r0, r4, r5, pc}

080014a4 <PE_UpdateTimer>:
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4602      	mov	r2, r0
 80014a8:	f3c2 040e 	ubfx	r4, r2, #0, #15
 80014ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014b0:	42a1      	cmp	r1, r4
 80014b2:	bfb8      	it	lt
 80014b4:	1a50      	sublt	r0, r2, r1
 80014b6:	b280      	uxth	r0, r0
 80014b8:	bd10      	pop	{r4, pc}

080014ba <PE_CallHardResetCallback>:
 80014ba:	6883      	ldr	r3, [r0, #8]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf1c      	itt	ne
 80014c2:	f890 023f 	ldrbne.w	r0, [r0, #575]	; 0x23f

080014c6 <__iar_annotation$$tailcall>:
 80014c6:	4718      	bxne	r3
 80014c8:	4770      	bx	lr

080014ca <PE_SetPowerNegotiation>:
 80014ca:	6842      	ldr	r2, [r0, #4]
 80014cc:	6813      	ldr	r3, [r2, #0]
 80014ce:	f3c3 2202 	ubfx	r2, r3, #8, #3
 80014d2:	4291      	cmp	r1, r2
 80014d4:	d008      	beq.n	80014e8 <PE_SetPowerNegotiation+0x1e>
 80014d6:	6842      	ldr	r2, [r0, #4]
 80014d8:	f361 230a 	bfi	r3, r1, #8, #3
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	215a      	movs	r1, #90	; 0x5a
 80014e0:	f890 023f 	ldrb.w	r0, [r0, #575]	; 0x23f
 80014e4:	f7ff b860 	b.w	80005a8 <USBPD_PE_Notification>
 80014e8:	4770      	bx	lr
	...

080014ec <USBPD_PE_ExecFastRoleSwapSignalling>:
 80014ec:	494d      	ldr	r1, [pc, #308]	; (8001624 <.text_80>)
 80014ee:	4602      	mov	r2, r0
 80014f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014f4:	f8d2 1244 	ldr.w	r1, [r2, #580]	; 0x244
 80014f8:	f3c1 4140 	ubfx	r1, r1, #17, #1
 80014fc:	2900      	cmp	r1, #0
 80014fe:	d000      	beq.n	8001502 <USBPD_PE_ExecFastRoleSwapSignalling+0x16>
 8001500:	4770      	bx	lr
 8001502:	b538      	push	{r3, r4, r5, lr}
 8001504:	f8d2 1244 	ldr.w	r1, [r2, #580]	; 0x244
 8001508:	4c47      	ldr	r4, [pc, #284]	; (8001628 <.text_81>)
 800150a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800150e:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 8001512:	6891      	ldr	r1, [r2, #8]
 8001514:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001516:	4790      	blx	r2
 8001518:	200d      	movs	r0, #13
 800151a:	9000      	str	r0, [sp, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	6825      	ldr	r5, [r4, #0]
 8001520:	a342      	add	r3, pc, #264	; (adr r3, 800162c <.text_82>)
 8001522:	2100      	movs	r1, #0
 8001524:	2006      	movs	r0, #6
 8001526:	47a8      	blx	r5
 8001528:	bd31      	pop	{r0, r4, r5, pc}

0800152a <PE_CalculateMinTiming>:
 800152a:	4601      	mov	r1, r0
 800152c:	f201 2152 	addw	r1, r1, #594	; 0x252
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	884a      	ldrh	r2, [r1, #2]
 8001536:	0453      	lsls	r3, r2, #17
 8001538:	bf1c      	itt	ne
 800153a:	8848      	ldrhne	r0, [r1, #2]
 800153c:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 8001540:	894a      	ldrh	r2, [r1, #10]
 8001542:	0453      	lsls	r3, r2, #17
 8001544:	d007      	beq.n	8001556 <PE_CalculateMinTiming+0x2c>
 8001546:	894a      	ldrh	r2, [r1, #10]
 8001548:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800154c:	4290      	cmp	r0, r2
 800154e:	bf24      	itt	cs
 8001550:	8948      	ldrhcs	r0, [r1, #10]
 8001552:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001556:	880a      	ldrh	r2, [r1, #0]
 8001558:	0453      	lsls	r3, r2, #17
 800155a:	d007      	beq.n	800156c <PE_CalculateMinTiming+0x42>
 800155c:	880a      	ldrh	r2, [r1, #0]
 800155e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001562:	4290      	cmp	r0, r2
 8001564:	bf24      	itt	cs
 8001566:	8808      	ldrhcs	r0, [r1, #0]
 8001568:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 800156c:	4770      	bx	lr

0800156e <PE_SetPowerNegociation>:
 800156e:	b538      	push	{r3, r4, r5, lr}
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	6860      	ldr	r0, [r4, #4]
 8001576:	6802      	ldr	r2, [r0, #0]
 8001578:	f3c2 2002 	ubfx	r0, r2, #8, #3
 800157c:	4285      	cmp	r5, r0
 800157e:	d004      	beq.n	800158a <PE_SetPowerNegociation+0x1c>
 8001580:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8001584:	215a      	movs	r1, #90	; 0x5a
 8001586:	f7ff f80f 	bl	80005a8 <USBPD_PE_Notification>
 800158a:	6860      	ldr	r0, [r4, #4]
 800158c:	6801      	ldr	r1, [r0, #0]
 800158e:	f365 210a 	bfi	r1, r5, #8, #3
 8001592:	6001      	str	r1, [r0, #0]
 8001594:	bd31      	pop	{r0, r4, r5, pc}
	...

08001598 <PE_CheckDataSizeFromGetDataInfo>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	2200      	movs	r2, #0
 800159c:	4288      	cmp	r0, r1
 800159e:	d208      	bcs.n	80015b2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80015a0:	2018      	movs	r0, #24
 80015a2:	4c21      	ldr	r4, [pc, #132]	; (8001628 <.text_81>)
 80015a4:	a325      	add	r3, pc, #148	; (adr r3, 800163c <.text_83>)
 80015a6:	6825      	ldr	r5, [r4, #0]
 80015a8:	9000      	str	r0, [sp, #0]
 80015aa:	2100      	movs	r1, #0
 80015ac:	2006      	movs	r0, #6
 80015ae:	47a8      	blx	r5
 80015b0:	2202      	movs	r2, #2
 80015b2:	4610      	mov	r0, r2
 80015b4:	bd32      	pop	{r1, r4, r5, pc}

080015b6 <PE_SwitchDataRole>:
 80015b6:	b510      	push	{r4, lr}
 80015b8:	4604      	mov	r4, r0
 80015ba:	6860      	ldr	r0, [r4, #4]
 80015bc:	7801      	ldrb	r1, [r0, #0]
 80015be:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80015c2:	2800      	cmp	r0, #0
 80015c4:	6860      	ldr	r0, [r4, #4]
 80015c6:	d10a      	bne.n	80015de <PE_SwitchDataRole+0x28>
 80015c8:	f041 0108 	orr.w	r1, r1, #8
 80015cc:	7001      	strb	r1, [r0, #0]
 80015ce:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80015d2:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80015d6:	f004 f802 	bl	80055de <USBPD_PRL_SetHeaderDataRole>
 80015da:	2125      	movs	r1, #37	; 0x25
 80015dc:	e008      	b.n	80015f0 <PE_SwitchDataRole+0x3a>
 80015de:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80015e2:	7001      	strb	r1, [r0, #0]
 80015e4:	2100      	movs	r1, #0
 80015e6:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80015ea:	f003 fff8 	bl	80055de <USBPD_PRL_SetHeaderDataRole>
 80015ee:	2124      	movs	r1, #36	; 0x24
 80015f0:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80015f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f8:	f7fe bfd6 	b.w	80005a8 <USBPD_PE_Notification>

080015fc <PE_DebugState>:
 80015fc:	f200 203f 	addw	r0, r0, #575	; 0x23f
 8001600:	7842      	ldrb	r2, [r0, #1]
 8001602:	7881      	ldrb	r1, [r0, #2]
 8001604:	4291      	cmp	r1, r2
 8001606:	d100      	bne.n	800160a <PE_DebugState+0xe>
 8001608:	4770      	bx	lr
 800160a:	b538      	push	{r3, r4, r5, lr}
 800160c:	2aa8      	cmp	r2, #168	; 0xa8
 800160e:	d008      	beq.n	8001622 <PE_DebugState+0x26>
 8001610:	7082      	strb	r2, [r0, #2]
 8001612:	2400      	movs	r4, #0
 8001614:	9400      	str	r4, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	4c03      	ldr	r4, [pc, #12]	; (8001628 <.text_81>)
 800161a:	7801      	ldrb	r1, [r0, #0]
 800161c:	6825      	ldr	r5, [r4, #0]
 800161e:	2004      	movs	r0, #4
 8001620:	47a8      	blx	r5
 8001622:	bd31      	pop	{r0, r4, r5, pc}

08001624 <.text_80>:
 8001624:	200001fc 	.word	0x200001fc

08001628 <.text_81>:
 8001628:	20000000 	.word	0x20000000

0800162c <.text_82>:
 800162c:	20535246 	.word	0x20535246
 8001630:	6e676973 	.word	0x6e676973
 8001634:	656c6c61 	.word	0x656c6c61
 8001638:	0064      	.short	0x0064
	...

0800163c <.text_83>:
 800163c:	61746144 	.word	0x61746144
 8001640:	7a695320 	.word	0x7a695320
 8001644:	73692065 	.word	0x73692065
 8001648:	746f6e20 	.word	0x746f6e20
 800164c:	726f6320 	.word	0x726f6320
 8001650:	74636572 	.word	0x74636572
 8001654:	00          	.byte	0x00
 8001655:	00          	.byte	0x00
	...

08001658 <USBPD_PE_SetTrace>:
 8001658:	0001      	movs	r1, r0
 800165a:	4906      	ldr	r1, [pc, #24]	; (8001674 <.text_5>)
 800165c:	bf08      	it	eq
 800165e:	f20f 0031 	addweq	r0, pc, #49	; 0x31
 8001662:	6008      	str	r0, [r1, #0]
 8001664:	4770      	bx	lr

08001666 <USBPD_PE_CheckLIB>:
 8001666:	4601      	mov	r1, r0
 8001668:	2000      	movs	r0, #0
 800166a:	4a03      	ldr	r2, [pc, #12]	; (8001678 <.text_6>)
 800166c:	4291      	cmp	r1, r2
 800166e:	bf08      	it	eq
 8001670:	2001      	moveq	r0, #1
 8001672:	4770      	bx	lr

08001674 <.text_5>:
 8001674:	20000000 	.word	0x20000000

08001678 <.text_6>:
 8001678:	30410000 	.word	0x30410000

0800167c <USBPD_PE_GetMemoryConsumption>:
 800167c:	b510      	push	{r4, lr}
 800167e:	f003 ff8e 	bl	800559e <USBPD_PRL_GetMemoryConsumption>
 8001682:	4604      	mov	r4, r0
 8001684:	f7fe fe97 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 8001688:	1904      	adds	r4, r0, r4
 800168a:	f504 605e 	add.w	r0, r4, #3552	; 0xde0
 800168e:	bd10      	pop	{r4, pc}

08001690 <PE_Trace_Empty>:
 8001690:	4770      	bx	lr
	...

08001694 <PE_Send_CtrlMessage>:
 8001694:	b51c      	push	{r2, r3, r4, lr}
 8001696:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	9401      	str	r4, [sp, #4]
 800169e:	2302      	movs	r3, #2
 80016a0:	f000 f823 	bl	80016ea <PE_Send_Message>
 80016a4:	bd16      	pop	{r1, r2, r4, pc}

080016a6 <PE_Send_DataMessage>:
 80016a6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80016a8:	9c08      	ldr	r4, [sp, #32]
 80016aa:	2500      	movs	r5, #0
 80016ac:	e010      	b.n	80016d0 <PE_Send_DataMessage+0x2a>
 80016ae:	2600      	movs	r6, #0
 80016b0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 80016b4:	f8d3 c000 	ldr.w	ip, [r3]
 80016b8:	4437      	add	r7, r6
 80016ba:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80016be:	1c76      	adds	r6, r6, #1
 80016c0:	fa2c fc0e 	lsr.w	ip, ip, lr
 80016c4:	2e04      	cmp	r6, #4
 80016c6:	f887 c012 	strb.w	ip, [r7, #18]
 80016ca:	d3f1      	bcc.n	80016b0 <PE_Send_DataMessage+0xa>
 80016cc:	1d1b      	adds	r3, r3, #4
 80016ce:	1c6d      	adds	r5, r5, #1
 80016d0:	42a5      	cmp	r5, r4
 80016d2:	d3ec      	bcc.n	80016ae <PE_Send_DataMessage+0x8>
 80016d4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80016d8:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	00a4      	lsls	r4, r4, #2
 80016e0:	9500      	str	r5, [sp, #0]
 80016e2:	1ca3      	adds	r3, r4, #2
 80016e4:	f000 f801 	bl	80016ea <PE_Send_Message>
 80016e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080016ea <PE_Send_Message>:
 80016ea:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80016ec:	4604      	mov	r4, r0
 80016ee:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80016f2:	9001      	str	r0, [sp, #4]
 80016f4:	461f      	mov	r7, r3
 80016f6:	b2b8      	uxth	r0, r7
 80016f8:	9000      	str	r0, [sp, #0]
 80016fa:	4616      	mov	r6, r2
 80016fc:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8001700:	460d      	mov	r5, r1
 8001702:	f104 0310 	add.w	r3, r4, #16
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f004 f91e 	bl	8005948 <USBPD_PRL_SendMessage>
 800170c:	2810      	cmp	r0, #16
 800170e:	d00c      	beq.n	800172a <PE_Send_Message+0x40>
 8001710:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8001714:	9100      	str	r1, [sp, #0]
 8001716:	2e0d      	cmp	r6, #13
 8001718:	4603      	mov	r3, r0
 800171a:	bf06      	itte	eq
 800171c:	2f02      	cmpeq	r7, #2
 800171e:	2201      	moveq	r2, #1
 8001720:	2200      	movne	r2, #0
 8001722:	4629      	mov	r1, r5
 8001724:	4620      	mov	r0, r4
 8001726:	f000 fba5 	bl	8001e74 <PE_CheckSendMessageStatus>
 800172a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800172c <PE_Check_ExtendedMessage>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	4606      	mov	r6, r0
 8001730:	f206 253f 	addw	r5, r6, #575	; 0x23f
 8001734:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 8001738:	7881      	ldrb	r1, [r0, #2]
 800173a:	78c2      	ldrb	r2, [r0, #3]
 800173c:	eb01 2702 	add.w	r7, r1, r2, lsl #8
 8001740:	f896 1272 	ldrb.w	r1, [r6, #626]	; 0x272
 8001744:	f001 011f 	and.w	r1, r1, #31
 8001748:	1e49      	subs	r1, r1, #1
 800174a:	2910      	cmp	r1, #16
 800174c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001750:	f200 80ff 	bhi.w	8001952 <PE_Check_ExtendedMessage+0x226>
 8001754:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001758:	00230011 	.word	0x00230011
 800175c:	0049003c 	.word	0x0049003c
 8001760:	00550036 	.word	0x00550036
 8001764:	00790030 	.word	0x00790030
 8001768:	00610086 	.word	0x00610086
 800176c:	00fd006f 	.word	0x00fd006f
 8001770:	00fd00fd 	.word	0x00fd00fd
 8001774:	00c2001a 	.word	0x00c2001a
 8001778:	0093      	.short	0x0093
 800177a:	f000 f900 	bl	800197e <.text_9+0x4>
 800177e:	2319      	movs	r3, #25
 8001780:	2108      	movs	r1, #8
 8001782:	47b0      	blx	r6
 8001784:	2003      	movs	r0, #3
 8001786:	7068      	strb	r0, [r5, #1]
 8001788:	2147      	movs	r1, #71	; 0x47
 800178a:	e010      	b.n	80017ae <PE_Check_ExtendedMessage+0x82>
 800178c:	f000 f8f7 	bl	800197e <.text_9+0x4>
 8001790:	2318      	movs	r3, #24
 8001792:	2113      	movs	r1, #19
 8001794:	47b0      	blx	r6
 8001796:	2003      	movs	r0, #3
 8001798:	7068      	strb	r0, [r5, #1]
 800179a:	2162      	movs	r1, #98	; 0x62
 800179c:	e007      	b.n	80017ae <PE_Check_ExtendedMessage+0x82>
 800179e:	f000 f8ee 	bl	800197e <.text_9+0x4>
 80017a2:	2307      	movs	r3, #7
 80017a4:	2109      	movs	r1, #9
 80017a6:	47b0      	blx	r6
 80017a8:	2003      	movs	r0, #3
 80017aa:	7068      	strb	r0, [r5, #1]
 80017ac:	214e      	movs	r1, #78	; 0x4e
 80017ae:	7828      	ldrb	r0, [r5, #0]
 80017b0:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 80017b4:	f7fe bef8 	b.w	80005a8 <USBPD_PE_Notification>
 80017b8:	f000 f8e1 	bl	800197e <.text_9+0x4>
 80017bc:	231a      	movs	r3, #26
 80017be:	210d      	movs	r1, #13
 80017c0:	47b0      	blx	r6
 80017c2:	e05a      	b.n	800187a <PE_Check_ExtendedMessage+0x14e>
 80017c4:	f000 f8db 	bl	800197e <.text_9+0x4>
 80017c8:	2309      	movs	r3, #9
 80017ca:	2111      	movs	r1, #17
 80017cc:	47b0      	blx	r6
 80017ce:	e054      	b.n	800187a <PE_Check_ExtendedMessage+0x14e>
 80017d0:	6830      	ldr	r0, [r6, #0]
 80017d2:	8901      	ldrh	r1, [r0, #8]
 80017d4:	f3c1 3040 	ubfx	r0, r1, #13, #1
 80017d8:	2800      	cmp	r0, #0
 80017da:	d041      	beq.n	8001860 <PE_Check_ExtendedMessage+0x134>
 80017dc:	f000 f8cd 	bl	800197a <.text_9>
 80017e0:	2301      	movs	r3, #1
 80017e2:	2110      	movs	r1, #16
 80017e4:	47b0      	blx	r6
 80017e6:	203a      	movs	r0, #58	; 0x3a
 80017e8:	e0b4      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 80017ea:	6830      	ldr	r0, [r6, #0]
 80017ec:	8901      	ldrh	r1, [r0, #8]
 80017ee:	f3c1 3040 	ubfx	r0, r1, #13, #1
 80017f2:	b3a8      	cbz	r0, 8001860 <PE_Check_ExtendedMessage+0x134>
 80017f4:	f000 f8c1 	bl	800197a <.text_9>
 80017f8:	2301      	movs	r3, #1
 80017fa:	210e      	movs	r1, #14
 80017fc:	47b0      	blx	r6
 80017fe:	203b      	movs	r0, #59	; 0x3b
 8001800:	e0a8      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 8001802:	6830      	ldr	r0, [r6, #0]
 8001804:	8901      	ldrh	r1, [r0, #8]
 8001806:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800180a:	b348      	cbz	r0, 8001860 <PE_Check_ExtendedMessage+0x134>
 800180c:	f000 f8b5 	bl	800197a <.text_9>
 8001810:	2302      	movs	r3, #2
 8001812:	210c      	movs	r1, #12
 8001814:	47b0      	blx	r6
 8001816:	203c      	movs	r0, #60	; 0x3c
 8001818:	e09c      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 800181a:	6830      	ldr	r0, [r6, #0]
 800181c:	8901      	ldrh	r1, [r0, #8]
 800181e:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001822:	2800      	cmp	r0, #0
 8001824:	bf1e      	ittt	ne
 8001826:	68b0      	ldrne	r0, [r6, #8]
 8001828:	6904      	ldrne	r4, [r0, #16]
 800182a:	2c00      	cmpne	r4, #0
 800182c:	d018      	beq.n	8001860 <PE_Check_ExtendedMessage+0x134>
 800182e:	f000 f89e 	bl	800196e <.text_8>
 8001832:	210a      	movs	r1, #10
 8001834:	e020      	b.n	8001878 <PE_Check_ExtendedMessage+0x14c>
 8001836:	68b1      	ldr	r1, [r6, #8]
 8001838:	690c      	ldr	r4, [r1, #16]
 800183a:	2c00      	cmp	r4, #0
 800183c:	d004      	beq.n	8001848 <PE_Check_ExtendedMessage+0x11c>
 800183e:	1d02      	adds	r2, r0, #4
 8001840:	7828      	ldrb	r0, [r5, #0]
 8001842:	463b      	mov	r3, r7
 8001844:	210b      	movs	r1, #11
 8001846:	47a0      	blx	r4
 8001848:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800184a:	f000 f88a 	bl	8001962 <.text_7>
 800184e:	bf1e      	ittt	ne
 8001850:	68b0      	ldrne	r0, [r6, #8]
 8001852:	6904      	ldrne	r4, [r0, #16]
 8001854:	2c00      	cmpne	r4, #0
 8001856:	d003      	beq.n	8001860 <PE_Check_ExtendedMessage+0x134>
 8001858:	f000 f889 	bl	800196e <.text_8>
 800185c:	2108      	movs	r1, #8
 800185e:	e00b      	b.n	8001878 <PE_Check_ExtendedMessage+0x14c>
 8001860:	2101      	movs	r1, #1
 8001862:	e074      	b.n	800194e <PE_Check_ExtendedMessage+0x222>
 8001864:	f000 f87d 	bl	8001962 <.text_7>
 8001868:	bf1e      	ittt	ne
 800186a:	68b0      	ldrne	r0, [r6, #8]
 800186c:	6904      	ldrne	r4, [r0, #16]
 800186e:	2c00      	cmpne	r4, #0
 8001870:	d071      	beq.n	8001956 <PE_Check_ExtendedMessage+0x22a>
 8001872:	f000 f87c 	bl	800196e <.text_8>
 8001876:	2109      	movs	r1, #9
 8001878:	47a0      	blx	r4
 800187a:	2003      	movs	r0, #3
 800187c:	e06a      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 800187e:	6870      	ldr	r0, [r6, #4]
 8001880:	f000 fae1 	bl	8001e46 <.text_19+0x2>
 8001884:	d166      	bne.n	8001954 <PE_Check_ExtendedMessage+0x228>
 8001886:	f000 f867 	bl	8001958 <.text_6>
 800188a:	b328      	cbz	r0, 80018d8 <PE_Check_ExtendedMessage+0x1ac>
 800188c:	f8b6 0272 	ldrh.w	r0, [r6, #626]	; 0x272
 8001890:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001894:	7828      	ldrb	r0, [r5, #0]
 8001896:	f7ff faeb 	bl	8000e70 <PE_ExtRevisionInteroperability>
 800189a:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 800189e:	68b4      	ldr	r4, [r6, #8]
 80018a0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80018a4:	1d02      	adds	r2, r0, #4
 80018a6:	7828      	ldrb	r0, [r5, #0]
 80018a8:	231c      	movs	r3, #28
 80018aa:	2104      	movs	r1, #4
 80018ac:	47e0      	blx	ip
 80018ae:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 80018b2:	68b4      	ldr	r4, [r6, #8]
 80018b4:	08bf      	lsrs	r7, r7, #2
 80018b6:	1ffb      	subs	r3, r7, #7
 80018b8:	f100 0220 	add.w	r2, r0, #32
 80018bc:	7828      	ldrb	r0, [r5, #0]
 80018be:	69a7      	ldr	r7, [r4, #24]
 80018c0:	2119      	movs	r1, #25
 80018c2:	47b8      	blx	r7
 80018c4:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 80018c8:	1d00      	adds	r0, r0, #4
 80018ca:	f001 f9d7 	bl	8002c7c <PE_SNK_ControlSPRPDO>
 80018ce:	b908      	cbnz	r0, 80018d4 <PE_Check_ExtendedMessage+0x1a8>
 80018d0:	2044      	movs	r0, #68	; 0x44
 80018d2:	e03f      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 80018d4:	210f      	movs	r1, #15
 80018d6:	e03a      	b.n	800194e <PE_Check_ExtendedMessage+0x222>
 80018d8:	200f      	movs	r0, #15
 80018da:	e03b      	b.n	8001954 <PE_Check_ExtendedMessage+0x228>
 80018dc:	7902      	ldrb	r2, [r0, #4]
 80018de:	7940      	ldrb	r0, [r0, #5]
 80018e0:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 80018e4:	f8ad 3000 	strh.w	r3, [sp]
 80018e8:	2101      	movs	r1, #1
 80018ea:	f89d 0000 	ldrb.w	r0, [sp]
 80018ee:	2801      	cmp	r0, #1
 80018f0:	d004      	beq.n	80018fc <PE_Check_ExtendedMessage+0x1d0>
 80018f2:	d32c      	bcc.n	800194e <PE_Check_ExtendedMessage+0x222>
 80018f4:	2803      	cmp	r0, #3
 80018f6:	d01b      	beq.n	8001930 <PE_Check_ExtendedMessage+0x204>
 80018f8:	d313      	bcc.n	8001922 <PE_Check_ExtendedMessage+0x1f6>
 80018fa:	e028      	b.n	800194e <PE_Check_ExtendedMessage+0x222>
 80018fc:	6870      	ldr	r0, [r6, #4]
 80018fe:	6802      	ldr	r2, [r0, #0]
 8001900:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8001904:	2800      	cmp	r0, #0
 8001906:	bf1f      	itttt	ne
 8001908:	6830      	ldrne	r0, [r6, #0]
 800190a:	8902      	ldrhne	r2, [r0, #8]
 800190c:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 8001910:	2800      	cmpne	r0, #0
 8001912:	d01c      	beq.n	800194e <PE_Check_ExtendedMessage+0x222>
 8001914:	f000 f820 	bl	8001958 <.text_6>
 8001918:	b108      	cbz	r0, 800191e <PE_Check_ExtendedMessage+0x1f2>
 800191a:	214c      	movs	r1, #76	; 0x4c
 800191c:	e017      	b.n	800194e <PE_Check_ExtendedMessage+0x222>
 800191e:	2106      	movs	r1, #6
 8001920:	e00f      	b.n	8001942 <PE_Check_ExtendedMessage+0x216>
 8001922:	6830      	ldr	r0, [r6, #0]
 8001924:	8902      	ldrh	r2, [r0, #8]
 8001926:	f3c2 20c0 	ubfx	r0, r2, #11, #1
 800192a:	b180      	cbz	r0, 800194e <PE_Check_ExtendedMessage+0x222>
 800192c:	2107      	movs	r1, #7
 800192e:	e008      	b.n	8001942 <PE_Check_ExtendedMessage+0x216>
 8001930:	6870      	ldr	r0, [r6, #4]
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8001938:	b148      	cbz	r0, 800194e <PE_Check_ExtendedMessage+0x222>
 800193a:	f000 f80d 	bl	8001958 <.text_6>
 800193e:	b128      	cbz	r0, 800194c <PE_Check_ExtendedMessage+0x220>
 8001940:	2108      	movs	r1, #8
 8001942:	4630      	mov	r0, r6
 8001944:	f004 fc14 	bl	8006170 <PE_GENMACH_StateMachine_Init>
 8001948:	21a8      	movs	r1, #168	; 0xa8
 800194a:	e000      	b.n	800194e <PE_Check_ExtendedMessage+0x222>
 800194c:	2111      	movs	r1, #17
 800194e:	7069      	strb	r1, [r5, #1]
 8001950:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001952:	2001      	movs	r0, #1
 8001954:	7068      	strb	r0, [r5, #1]
 8001956:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001958 <.text_6>:
 8001958:	6870      	ldr	r0, [r6, #4]
 800195a:	78c1      	ldrb	r1, [r0, #3]
 800195c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001960:	4770      	bx	lr

08001962 <.text_7>:
 8001962:	6830      	ldr	r0, [r6, #0]
 8001964:	8901      	ldrh	r1, [r0, #8]
 8001966:	f3c1 2040 	ubfx	r0, r1, #9, #1
 800196a:	2800      	cmp	r0, #0
 800196c:	4770      	bx	lr

0800196e <.text_8>:
 800196e:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 8001972:	1d02      	adds	r2, r0, #4
 8001974:	7828      	ldrb	r0, [r5, #0]
 8001976:	463b      	mov	r3, r7
 8001978:	4770      	bx	lr

0800197a <.text_9>:
 800197a:	f8d6 0274 	ldr.w	r0, [r6, #628]	; 0x274
 800197e:	68b4      	ldr	r4, [r6, #8]
 8001980:	69a6      	ldr	r6, [r4, #24]
 8001982:	1d02      	adds	r2, r0, #4
 8001984:	7828      	ldrb	r0, [r5, #0]
 8001986:	4770      	bx	lr

08001988 <PE_Send_ExtendedMessage>:
 8001988:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 800198a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800198e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8001992:	9401      	str	r4, [sp, #4]
 8001994:	9500      	str	r5, [sp, #0]
 8001996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199a:	f7ff fea6 	bl	80016ea <PE_Send_Message>
 800199e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080019a0 <PE_SubStateMachine_ExtendedMessages>:
 80019a0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 80019a2:	4605      	mov	r5, r0
 80019a4:	f505 718c 	add.w	r1, r5, #280	; 0x118
 80019a8:	f8b5 2220 	ldrh.w	r2, [r5, #544]	; 0x220
 80019ac:	f105 0014 	add.w	r0, r5, #20
 80019b0:	f018 fccf 	bl	801a352 <__aeabi_memcpy>
 80019b4:	2101      	movs	r1, #1
 80019b6:	2003      	movs	r0, #3
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	9000      	str	r0, [sp, #0]
 80019bc:	f205 4496 	addw	r4, r5, #1174	; 0x496
 80019c0:	f8b5 3220 	ldrh.w	r3, [r5, #544]	; 0x220
 80019c4:	7822      	ldrb	r2, [r4, #0]
 80019c6:	f895 126b 	ldrb.w	r1, [r5, #619]	; 0x26b
 80019ca:	1d1b      	adds	r3, r3, #4
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff ffda 	bl	8001988 <PE_Send_ExtendedMessage>
 80019d4:	b988      	cbnz	r0, 80019fa <PE_SubStateMachine_ExtendedMessages+0x5a>
 80019d6:	f505 7110 	add.w	r1, r5, #576	; 0x240
 80019da:	6848      	ldr	r0, [r1, #4]
 80019dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80019e0:	b148      	cbz	r0, 80019f6 <PE_SubStateMachine_ExtendedMessages+0x56>
 80019e2:	7820      	ldrb	r0, [r4, #0]
 80019e4:	2804      	cmp	r0, #4
 80019e6:	bf07      	ittee	eq
 80019e8:	2274      	moveq	r2, #116	; 0x74
 80019ea:	700a      	strbeq	r2, [r1, #0]
 80019ec:	2039      	movne	r0, #57	; 0x39
 80019ee:	7008      	strbne	r0, [r1, #0]
 80019f0:	f248 021d 	movw	r2, #32797	; 0x801d
 80019f4:	81ca      	strh	r2, [r1, #14]
 80019f6:	78a0      	ldrb	r0, [r4, #2]
 80019f8:	7308      	strb	r0, [r1, #12]
 80019fa:	2002      	movs	r0, #2
 80019fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080019fe <PE_ManageRXEvent>:
 80019fe:	f500 711a 	add.w	r1, r0, #616	; 0x268
 8001a02:	780a      	ldrb	r2, [r1, #0]
 8001a04:	704a      	strb	r2, [r1, #1]
 8001a06:	894a      	ldrh	r2, [r1, #10]
 8001a08:	0bd1      	lsrs	r1, r2, #15
 8001a0a:	bf18      	it	ne
 8001a0c:	f7ff be8e 	bne.w	800172c <PE_Check_ExtendedMessage>
 8001a10:	f412 4f70 	tst.w	r2, #61440	; 0xf000
 8001a14:	bf08      	it	eq
 8001a16:	f000 b801 	beq.w	8001a1c <PE_Check_ControlMessage>
 8001a1a:	e0ec      	b.n	8001bf6 <PE_Check_DataMessage>

08001a1c <PE_Check_ControlMessage>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	4604      	mov	r4, r0
 8001a20:	f504 7511 	add.w	r5, r4, #580	; 0x244
 8001a24:	f204 263f 	addw	r6, r4, #575	; 0x23f
 8001a28:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 8001a2c:	f000 001f 	and.w	r0, r0, #31
 8001a30:	1e40      	subs	r0, r0, #1
 8001a32:	2817      	cmp	r0, #23
 8001a34:	d85b      	bhi.n	8001aee <PE_Check_ControlMessage+0xd2>
 8001a36:	e8df f000 	tbb	[pc, r0]
 8001a3a:	0cce      	.short	0x0cce
 8001a3c:	c41ec4c4 	.word	0xc41ec4c4
 8001a40:	31435520 	.word	0x31435520
 8001a44:	bf17c43b 	.word	0xbf17c43b
 8001a48:	8a67b9c6 	.word	0x8a67b9c6
 8001a4c:	7caa96b1 	.word	0x7caa96b1
 8001a50:	b5c6      	.short	0xb5c6
 8001a52:	f000 f9f7 	bl	8001e44 <.text_19>
 8001a56:	f040 80be 	bne.w	8001bd6 <PE_Check_ControlMessage+0x1ba>
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	722a      	strb	r2, [r5, #8]
 8001a5e:	212b      	movs	r1, #43	; 0x2b
 8001a60:	f000 f8ba 	bl	8001bd8 <.text_14>
 8001a64:	2198      	movs	r1, #152	; 0x98
 8001a66:	e0b5      	b.n	8001bd4 <PE_Check_ControlMessage+0x1b8>
 8001a68:	2003      	movs	r0, #3
 8001a6a:	7228      	strb	r0, [r5, #8]
 8001a6c:	2132      	movs	r1, #50	; 0x32
 8001a6e:	f000 f8b3 	bl	8001bd8 <.text_14>
 8001a72:	2010      	movs	r0, #16
 8001a74:	e0ab      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001a76:	2133      	movs	r1, #51	; 0x33
 8001a78:	e099      	b.n	8001bae <PE_Check_ControlMessage+0x192>
 8001a7a:	2006      	movs	r0, #6
 8001a7c:	7228      	strb	r0, [r5, #8]
 8001a7e:	f000 f9e1 	bl	8001e44 <.text_19>
 8001a82:	bf01      	itttt	eq
 8001a84:	6820      	ldreq	r0, [r4, #0]
 8001a86:	6841      	ldreq	r1, [r0, #4]
 8001a88:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a8c:	2800      	cmpeq	r0, #0
 8001a8e:	d024      	beq.n	8001ada <PE_Check_ControlMessage+0xbe>
 8001a90:	7830      	ldrb	r0, [r6, #0]
 8001a92:	210c      	movs	r1, #12
 8001a94:	f7fe fd88 	bl	80005a8 <USBPD_PE_Notification>
 8001a98:	204c      	movs	r0, #76	; 0x4c
 8001a9a:	e098      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001a9c:	f000 f89f 	bl	8001bde <.text_15>
 8001aa0:	d01b      	beq.n	8001ada <PE_Check_ControlMessage+0xbe>
 8001aa2:	2008      	movs	r0, #8
 8001aa4:	7228      	strb	r0, [r5, #8]
 8001aa6:	213c      	movs	r1, #60	; 0x3c
 8001aa8:	f000 f896 	bl	8001bd8 <.text_14>
 8001aac:	2022      	movs	r0, #34	; 0x22
 8001aae:	e08e      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001ab0:	68a1      	ldr	r1, [r4, #8]
 8001ab2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d010      	beq.n	8001ada <PE_Check_ControlMessage+0xbe>
 8001ab8:	2111      	movs	r1, #17
 8001aba:	7229      	strb	r1, [r5, #8]
 8001abc:	209d      	movs	r0, #157	; 0x9d
 8001abe:	e086      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001ac0:	7830      	ldrb	r0, [r6, #0]
 8001ac2:	2123      	movs	r1, #35	; 0x23
 8001ac4:	f7fe fd70 	bl	80005a8 <USBPD_PE_Notification>
 8001ac8:	6828      	ldr	r0, [r5, #0]
 8001aca:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001ace:	b108      	cbz	r0, 8001ad4 <PE_Check_ControlMessage+0xb8>
 8001ad0:	200f      	movs	r0, #15
 8001ad2:	e07c      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001ad4:	68a1      	ldr	r1, [r4, #8]
 8001ad6:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d074      	beq.n	8001bc6 <PE_Check_ControlMessage+0x1aa>
 8001adc:	2010      	movs	r0, #16
 8001ade:	7228      	strb	r0, [r5, #8]
 8001ae0:	2193      	movs	r1, #147	; 0x93
 8001ae2:	e077      	b.n	8001bd4 <PE_Check_ControlMessage+0x1b8>
 8001ae4:	6860      	ldr	r0, [r4, #4]
 8001ae6:	6801      	ldr	r1, [r0, #0]
 8001ae8:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001aec:	2803      	cmp	r0, #3
 8001aee:	d16a      	bne.n	8001bc6 <PE_Check_ControlMessage+0x1aa>
 8001af0:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001af4:	b110      	cbz	r0, 8001afc <PE_Check_ControlMessage+0xe0>
 8001af6:	f000 f872 	bl	8001bde <.text_15>
 8001afa:	d064      	beq.n	8001bc6 <PE_Check_ControlMessage+0x1aa>
 8001afc:	2007      	movs	r0, #7
 8001afe:	7228      	strb	r0, [r5, #8]
 8001b00:	211d      	movs	r1, #29
 8001b02:	7071      	strb	r1, [r6, #1]
 8001b04:	2106      	movs	r1, #6
 8001b06:	e052      	b.n	8001bae <PE_Check_ControlMessage+0x192>
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	8901      	ldrh	r1, [r0, #8]
 8001b0c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d05b      	beq.n	8001bcc <PE_Check_ControlMessage+0x1b0>
 8001b14:	f000 f996 	bl	8001e44 <.text_19>
 8001b18:	bf01      	itttt	eq
 8001b1a:	6820      	ldreq	r0, [r4, #0]
 8001b1c:	6841      	ldreq	r1, [r0, #4]
 8001b1e:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001b22:	2800      	cmpeq	r0, #0
 8001b24:	d052      	beq.n	8001bcc <PE_Check_ControlMessage+0x1b0>
 8001b26:	200a      	movs	r0, #10
 8001b28:	7228      	strb	r0, [r5, #8]
 8001b2a:	2163      	movs	r1, #99	; 0x63
 8001b2c:	7071      	strb	r1, [r6, #1]
 8001b2e:	2146      	movs	r1, #70	; 0x46
 8001b30:	e03d      	b.n	8001bae <PE_Check_ControlMessage+0x192>
 8001b32:	6860      	ldr	r0, [r4, #4]
 8001b34:	6801      	ldr	r1, [r0, #0]
 8001b36:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b3a:	b110      	cbz	r0, 8001b42 <PE_Check_ControlMessage+0x126>
 8001b3c:	f000 f84f 	bl	8001bde <.text_15>
 8001b40:	d044      	beq.n	8001bcc <PE_Check_ControlMessage+0x1b0>
 8001b42:	205f      	movs	r0, #95	; 0x5f
 8001b44:	7228      	strb	r0, [r5, #8]
 8001b46:	2164      	movs	r1, #100	; 0x64
 8001b48:	7071      	strb	r1, [r6, #1]
 8001b4a:	2160      	movs	r1, #96	; 0x60
 8001b4c:	e02f      	b.n	8001bae <PE_Check_ControlMessage+0x192>
 8001b4e:	6820      	ldr	r0, [r4, #0]
 8001b50:	8901      	ldrh	r1, [r0, #8]
 8001b52:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001b56:	b318      	cbz	r0, 8001ba0 <PE_Check_ControlMessage+0x184>
 8001b58:	200b      	movs	r0, #11
 8001b5a:	7228      	strb	r0, [r5, #8]
 8001b5c:	214d      	movs	r1, #77	; 0x4d
 8001b5e:	f000 f83b 	bl	8001bd8 <.text_14>
 8001b62:	2030      	movs	r0, #48	; 0x30
 8001b64:	e033      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001b66:	6820      	ldr	r0, [r4, #0]
 8001b68:	8901      	ldrh	r1, [r0, #8]
 8001b6a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d02c      	beq.n	8001bcc <PE_Check_ControlMessage+0x1b0>
 8001b72:	200b      	movs	r0, #11
 8001b74:	7228      	strb	r0, [r5, #8]
 8001b76:	2149      	movs	r1, #73	; 0x49
 8001b78:	f000 f82e 	bl	8001bd8 <.text_14>
 8001b7c:	6860      	ldr	r0, [r4, #4]
 8001b7e:	6801      	ldr	r1, [r0, #0]
 8001b80:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b84:	b108      	cbz	r0, 8001b8a <PE_Check_ControlMessage+0x16e>
 8001b86:	202d      	movs	r0, #45	; 0x2d
 8001b88:	e021      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001b8a:	2111      	movs	r1, #17
 8001b8c:	e022      	b.n	8001bd4 <PE_Check_ControlMessage+0x1b8>
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	8901      	ldrh	r1, [r0, #8]
 8001b92:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001b96:	b118      	cbz	r0, 8001ba0 <PE_Check_ControlMessage+0x184>
 8001b98:	202f      	movs	r0, #47	; 0x2f
 8001b9a:	e018      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001b9c:	2009      	movs	r0, #9
 8001b9e:	7228      	strb	r0, [r5, #8]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	e017      	b.n	8001bd4 <PE_Check_ControlMessage+0x1b8>
 8001ba4:	200f      	movs	r0, #15
 8001ba6:	7228      	strb	r0, [r5, #8]
 8001ba8:	214b      	movs	r1, #75	; 0x4b
 8001baa:	e013      	b.n	8001bd4 <PE_Check_ControlMessage+0x1b8>
 8001bac:	2159      	movs	r1, #89	; 0x59
 8001bae:	7830      	ldrb	r0, [r6, #0]
 8001bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001bb4:	f7fe bcf8 	b.w	80005a8 <USBPD_PE_Notification>
 8001bb8:	f000 f817 	bl	8001bea <.text_16>
 8001bbc:	d109      	bne.n	8001bd2 <PE_Check_ControlMessage+0x1b6>
 8001bbe:	2057      	movs	r0, #87	; 0x57
 8001bc0:	e005      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001bc2:	2011      	movs	r0, #17
 8001bc4:	e003      	b.n	8001bce <PE_Check_ControlMessage+0x1b2>
 8001bc6:	f000 f810 	bl	8001bea <.text_16>
 8001bca:	d102      	bne.n	8001bd2 <PE_Check_ControlMessage+0x1b6>
 8001bcc:	2001      	movs	r0, #1
 8001bce:	7070      	strb	r0, [r6, #1]
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
 8001bd2:	212a      	movs	r1, #42	; 0x2a
 8001bd4:	7071      	strb	r1, [r6, #1]
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}

08001bd8 <.text_14>:
 8001bd8:	7830      	ldrb	r0, [r6, #0]
 8001bda:	f7fe bce5 	b.w	80005a8 <USBPD_PE_Notification>

08001bde <.text_15>:
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	6841      	ldr	r1, [r0, #4]
 8001be2:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001be6:	2800      	cmp	r0, #0
 8001be8:	4770      	bx	lr

08001bea <.text_16>:
 8001bea:	6860      	ldr	r0, [r4, #4]
 8001bec:	7801      	ldrb	r1, [r0, #0]
 8001bee:	f001 0103 	and.w	r1, r1, #3
 8001bf2:	2902      	cmp	r1, #2
 8001bf4:	4770      	bx	lr

08001bf6 <PE_Check_DataMessage>:
 8001bf6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	f505 7612 	add.w	r6, r5, #584	; 0x248
 8001bfe:	2011      	movs	r0, #17
 8001c00:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
 8001c04:	f001 011f 	and.w	r1, r1, #31
 8001c08:	2901      	cmp	r1, #1
 8001c0a:	f205 243f 	addw	r4, r5, #575	; 0x23f
 8001c0e:	d041      	beq.n	8001c94 <PE_Check_DataMessage+0x9e>
 8001c10:	2902      	cmp	r1, #2
 8001c12:	d013      	beq.n	8001c3c <PE_Check_DataMessage+0x46>
 8001c14:	2903      	cmp	r1, #3
 8001c16:	d059      	beq.n	8001ccc <PE_Check_DataMessage+0xd6>
 8001c18:	2906      	cmp	r1, #6
 8001c1a:	f000 809a 	beq.w	8001d52 <PE_Check_DataMessage+0x15c>
 8001c1e:	2907      	cmp	r1, #7
 8001c20:	f000 80a6 	beq.w	8001d70 <PE_Check_DataMessage+0x17a>
 8001c24:	2908      	cmp	r1, #8
 8001c26:	f000 80ac 	beq.w	8001d82 <PE_Check_DataMessage+0x18c>
 8001c2a:	2909      	cmp	r1, #9
 8001c2c:	d015      	beq.n	8001c5a <PE_Check_DataMessage+0x64>
 8001c2e:	290a      	cmp	r1, #10
 8001c30:	f000 80bb 	beq.w	8001daa <PE_Check_DataMessage+0x1b4>
 8001c34:	290f      	cmp	r1, #15
 8001c36:	f000 8088 	beq.w	8001d4a <PE_Check_DataMessage+0x154>
 8001c3a:	e0fc      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001c3c:	f000 f908 	bl	8001e50 <.text_20>
 8001c40:	f000 80fa 	beq.w	8001e38 <PE_Check_DataMessage+0x242>
 8001c44:	f000 f8f9 	bl	8001e3a <.text_18>
 8001c48:	bb58      	cbnz	r0, 8001ca2 <PE_Check_DataMessage+0xac>
 8001c4a:	68ad      	ldr	r5, [r5, #8]
 8001c4c:	7820      	ldrb	r0, [r4, #0]
 8001c4e:	69af      	ldr	r7, [r5, #24]
 8001c50:	2304      	movs	r3, #4
 8001c52:	466a      	mov	r2, sp
 8001c54:	2106      	movs	r1, #6
 8001c56:	47b8      	blx	r7
 8001c58:	e016      	b.n	8001c88 <PE_Check_DataMessage+0x92>
 8001c5a:	f000 f8f9 	bl	8001e50 <.text_20>
 8001c5e:	d077      	beq.n	8001d50 <PE_Check_DataMessage+0x15a>
 8001c60:	f000 f8eb 	bl	8001e3a <.text_18>
 8001c64:	b1e8      	cbz	r0, 8001ca2 <PE_Check_DataMessage+0xac>
 8001c66:	6033      	str	r3, [r6, #0]
 8001c68:	2304      	movs	r3, #4
 8001c6a:	68af      	ldr	r7, [r5, #8]
 8001c6c:	7820      	ldrb	r0, [r4, #0]
 8001c6e:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8001c72:	466a      	mov	r2, sp
 8001c74:	2106      	movs	r1, #6
 8001c76:	47e0      	blx	ip
 8001c78:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c7a:	68ad      	ldr	r5, [r5, #8]
 8001c7c:	69af      	ldr	r7, [r5, #24]
 8001c7e:	1d82      	adds	r2, r0, #6
 8001c80:	7820      	ldrb	r0, [r4, #0]
 8001c82:	2304      	movs	r3, #4
 8001c84:	211b      	movs	r1, #27
 8001c86:	47b8      	blx	r7
 8001c88:	2001      	movs	r0, #1
 8001c8a:	7130      	strb	r0, [r6, #4]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	81b1      	strh	r1, [r6, #12]
 8001c90:	2009      	movs	r0, #9
 8001c92:	e0d0      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001c94:	6868      	ldr	r0, [r5, #4]
 8001c96:	f000 f8d6 	bl	8001e46 <.text_19+0x2>
 8001c9a:	d159      	bne.n	8001d50 <PE_Check_DataMessage+0x15a>
 8001c9c:	f000 f8cd 	bl	8001e3a <.text_18>
 8001ca0:	b108      	cbz	r0, 8001ca6 <PE_Check_DataMessage+0xb0>
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	e0c7      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001ca6:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 8001ca8:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001cac:	7820      	ldrb	r0, [r4, #0]
 8001cae:	f7ff f8df 	bl	8000e70 <PE_ExtRevisionInteroperability>
 8001cb2:	68ad      	ldr	r5, [r5, #8]
 8001cb4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 8001cb6:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001cba:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001cbc:	69ae      	ldr	r6, [r5, #24]
 8001cbe:	1c82      	adds	r2, r0, #2
 8001cc0:	7820      	ldrb	r0, [r4, #0]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	47b0      	blx	r6
 8001cc8:	2044      	movs	r0, #68	; 0x44
 8001cca:	e0b4      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001ccc:	2100      	movs	r1, #0
 8001cce:	9101      	str	r1, [sp, #4]
 8001cd0:	9100      	str	r1, [sp, #0]
 8001cd2:	466b      	mov	r3, sp
 8001cd4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001cd6:	7881      	ldrb	r1, [r0, #2]
 8001cd8:	78c2      	ldrb	r2, [r0, #3]
 8001cda:	68af      	ldr	r7, [r5, #8]
 8001cdc:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8001ce0:	eb01 2602 	add.w	r6, r1, r2, lsl #8
 8001ce4:	7901      	ldrb	r1, [r0, #4]
 8001ce6:	7940      	ldrb	r0, [r0, #5]
 8001ce8:	eb06 4601 	add.w	r6, r6, r1, lsl #16
 8001cec:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8001cf0:	7820      	ldrb	r0, [r4, #0]
 8001cf2:	aa01      	add	r2, sp, #4
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	47e0      	blx	ip
 8001cf8:	9800      	ldr	r0, [sp, #0]
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	f7ff fc4c 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	bf01      	itttt	eq
 8001d04:	6868      	ldreq	r0, [r5, #4]
 8001d06:	6801      	ldreq	r1, [r0, #0]
 8001d08:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001d0c:	2803      	cmpeq	r0, #3
 8001d0e:	d11a      	bne.n	8001d46 <PE_Check_DataMessage+0x150>
 8001d10:	9801      	ldr	r0, [sp, #4]
 8001d12:	f241 3188 	movw	r1, #5000	; 0x1388
 8001d16:	4288      	cmp	r0, r1
 8001d18:	d115      	bne.n	8001d46 <PE_Check_DataMessage+0x150>
 8001d1a:	0f36      	lsrs	r6, r6, #28
 8001d1c:	2e05      	cmp	r6, #5
 8001d1e:	d010      	beq.n	8001d42 <PE_Check_DataMessage+0x14c>
 8001d20:	2e08      	cmp	r6, #8
 8001d22:	d00c      	beq.n	8001d3e <PE_Check_DataMessage+0x148>
 8001d24:	2e09      	cmp	r6, #9
 8001d26:	d004      	beq.n	8001d32 <PE_Check_DataMessage+0x13c>
 8001d28:	2e0a      	cmp	r6, #10
 8001d2a:	d111      	bne.n	8001d50 <PE_Check_DataMessage+0x15a>
 8001d2c:	7820      	ldrb	r0, [r4, #0]
 8001d2e:	2166      	movs	r1, #102	; 0x66
 8001d30:	e001      	b.n	8001d36 <PE_Check_DataMessage+0x140>
 8001d32:	7820      	ldrb	r0, [r4, #0]
 8001d34:	2165      	movs	r1, #101	; 0x65
 8001d36:	f7fe fc37 	bl	80005a8 <USBPD_PE_Notification>
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	e07b      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001d3e:	2129      	movs	r1, #41	; 0x29
 8001d40:	e031      	b.n	8001da6 <PE_Check_DataMessage+0x1b0>
 8001d42:	2027      	movs	r0, #39	; 0x27
 8001d44:	e077      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001d46:	2103      	movs	r1, #3
 8001d48:	e02d      	b.n	8001da6 <PE_Check_DataMessage+0x1b0>
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f003 fa8b 	bl	8005266 <PE_Check_DataMessageVDM>
 8001d50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d52:	6828      	ldr	r0, [r5, #0]
 8001d54:	8901      	ldrh	r1, [r0, #8]
 8001d56:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001d5a:	b180      	cbz	r0, 8001d7e <PE_Check_DataMessage+0x188>
 8001d5c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001d5e:	68ad      	ldr	r5, [r5, #8]
 8001d60:	69ae      	ldr	r6, [r5, #24]
 8001d62:	1c82      	adds	r2, r0, #2
 8001d64:	7820      	ldrb	r0, [r4, #0]
 8001d66:	2304      	movs	r3, #4
 8001d68:	210b      	movs	r1, #11
 8001d6a:	47b0      	blx	r6
 8001d6c:	202c      	movs	r0, #44	; 0x2c
 8001d6e:	e062      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001d70:	6828      	ldr	r0, [r5, #0]
 8001d72:	8901      	ldrh	r1, [r0, #8]
 8001d74:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001d78:	b108      	cbz	r0, 8001d7e <PE_Check_DataMessage+0x188>
 8001d7a:	203d      	movs	r0, #61	; 0x3d
 8001d7c:	e05b      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001d7e:	2101      	movs	r1, #1
 8001d80:	e011      	b.n	8001da6 <PE_Check_DataMessage+0x1b0>
 8001d82:	6868      	ldr	r0, [r5, #4]
 8001d84:	7801      	ldrb	r1, [r0, #0]
 8001d86:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001d8a:	b108      	cbz	r0, 8001d90 <PE_Check_DataMessage+0x19a>
 8001d8c:	202a      	movs	r0, #42	; 0x2a
 8001d8e:	e052      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001d90:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001d92:	68ad      	ldr	r5, [r5, #8]
 8001d94:	69af      	ldr	r7, [r5, #24]
 8001d96:	1c82      	adds	r2, r0, #2
 8001d98:	7820      	ldrb	r0, [r4, #0]
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	47b8      	blx	r7
 8001da0:	2013      	movs	r0, #19
 8001da2:	7130      	strb	r0, [r6, #4]
 8001da4:	214f      	movs	r1, #79	; 0x4f
 8001da6:	7061      	strb	r1, [r4, #1]
 8001da8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001daa:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001dac:	788a      	ldrb	r2, [r1, #2]
 8001dae:	78cb      	ldrb	r3, [r1, #3]
 8001db0:	eb02 2703 	add.w	r7, r2, r3, lsl #8
 8001db4:	790a      	ldrb	r2, [r1, #4]
 8001db6:	7949      	ldrb	r1, [r1, #5]
 8001db8:	eb07 4702 	add.w	r7, r7, r2, lsl #16
 8001dbc:	eb07 6701 	add.w	r7, r7, r1, lsl #24
 8001dc0:	0e3f      	lsrs	r7, r7, #24
 8001dc2:	2f01      	cmp	r7, #1
 8001dc4:	d002      	beq.n	8001dcc <PE_Check_DataMessage+0x1d6>
 8001dc6:	2f05      	cmp	r7, #5
 8001dc8:	d016      	beq.n	8001df8 <PE_Check_DataMessage+0x202>
 8001dca:	e034      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001dcc:	6868      	ldr	r0, [r5, #4]
 8001dce:	f000 f83a 	bl	8001e46 <.text_19+0x2>
 8001dd2:	bf1f      	itttt	ne
 8001dd4:	6828      	ldrne	r0, [r5, #0]
 8001dd6:	8901      	ldrhne	r1, [r0, #8]
 8001dd8:	f3c1 3000 	ubfxne	r0, r1, #12, #1
 8001ddc:	2800      	cmpne	r0, #0
 8001dde:	d009      	beq.n	8001df4 <PE_Check_DataMessage+0x1fe>
 8001de0:	7820      	ldrb	r0, [r4, #0]
 8001de2:	2174      	movs	r1, #116	; 0x74
 8001de4:	f7fe fbe0 	bl	80005a8 <USBPD_PE_Notification>
 8001de8:	2102      	movs	r1, #2
 8001dea:	4628      	mov	r0, r5
 8001dec:	f004 f9c0 	bl	8006170 <PE_GENMACH_StateMachine_Init>
 8001df0:	20a8      	movs	r0, #168	; 0xa8
 8001df2:	e020      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001df4:	2001      	movs	r0, #1
 8001df6:	e01e      	b.n	8001e36 <PE_Check_DataMessage+0x240>
 8001df8:	6869      	ldr	r1, [r5, #4]
 8001dfa:	78ca      	ldrb	r2, [r1, #3]
 8001dfc:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8001e00:	b1c9      	cbz	r1, 8001e36 <PE_Check_DataMessage+0x240>
 8001e02:	7820      	ldrb	r0, [r4, #0]
 8001e04:	2175      	movs	r1, #117	; 0x75
 8001e06:	f7fe fbcf 	bl	80005a8 <USBPD_PE_Notification>
 8001e0a:	6868      	ldr	r0, [r5, #4]
 8001e0c:	78c1      	ldrb	r1, [r0, #3]
 8001e0e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8001e12:	70c1      	strb	r1, [r0, #3]
 8001e14:	2017      	movs	r0, #23
 8001e16:	6831      	ldr	r1, [r6, #0]
 8001e18:	7130      	strb	r0, [r6, #4]
 8001e1a:	0f09      	lsrs	r1, r1, #28
 8001e1c:	2908      	cmp	r1, #8
 8001e1e:	bf28      	it	cs
 8001e20:	200f      	movcs	r0, #15
 8001e22:	d208      	bcs.n	8001e36 <PE_Check_DataMessage+0x240>
 8001e24:	6868      	ldr	r0, [r5, #4]
 8001e26:	f000 f80e 	bl	8001e46 <.text_19+0x2>
 8001e2a:	bf11      	iteee	ne
 8001e2c:	2007      	movne	r0, #7
 8001e2e:	f248 10f4 	movweq	r0, #33268	; 0x81f4
 8001e32:	80f0      	strheq	r0, [r6, #6]
 8001e34:	2043      	moveq	r0, #67	; 0x43
 8001e36:	7060      	strb	r0, [r4, #1]
 8001e38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001e3a <.text_18>:
 8001e3a:	6868      	ldr	r0, [r5, #4]
 8001e3c:	78c1      	ldrb	r1, [r0, #3]
 8001e3e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001e42:	4770      	bx	lr

08001e44 <.text_19>:
 8001e44:	6860      	ldr	r0, [r4, #4]
 8001e46:	6801      	ldr	r1, [r0, #0]
 8001e48:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	4770      	bx	lr

08001e50 <.text_20>:
 8001e50:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001e52:	7881      	ldrb	r1, [r0, #2]
 8001e54:	78c2      	ldrb	r2, [r0, #3]
 8001e56:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001e5a:	7901      	ldrb	r1, [r0, #4]
 8001e5c:	7940      	ldrb	r0, [r0, #5]
 8001e5e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001e62:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6868      	ldr	r0, [r5, #4]
 8001e6a:	6801      	ldr	r1, [r0, #0]
 8001e6c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001e70:	2800      	cmp	r0, #0
 8001e72:	4770      	bx	lr

08001e74 <PE_CheckSendMessageStatus>:
 8001e74:	b530      	push	{r4, r5, lr}
 8001e76:	2410      	movs	r4, #16
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	f500 7510 	add.w	r5, r0, #576	; 0x240
 8001e7e:	d007      	beq.n	8001e90 <PE_CheckSendMessageStatus+0x1c>
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d00c      	beq.n	8001e9e <PE_CheckSendMessageStatus+0x2a>
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	d00f      	beq.n	8001ea8 <PE_CheckSendMessageStatus+0x34>
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	bf08      	it	eq
 8001e8c:	2409      	moveq	r4, #9
 8001e8e:	e02a      	b.n	8001ee6 <PE_CheckSendMessageStatus+0x72>
 8001e90:	9803      	ldr	r0, [sp, #12]
 8001e92:	7028      	strb	r0, [r5, #0]
 8001e94:	2400      	movs	r4, #0
 8001e96:	6868      	ldr	r0, [r5, #4]
 8001e98:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8001e9c:	e002      	b.n	8001ea4 <PE_CheckSendMessageStatus+0x30>
 8001e9e:	6868      	ldr	r0, [r5, #4]
 8001ea0:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001ea4:	6068      	str	r0, [r5, #4]
 8001ea6:	e01e      	b.n	8001ee6 <PE_CheckSendMessageStatus+0x72>
 8001ea8:	b129      	cbz	r1, 8001eb6 <PE_CheckSendMessageStatus+0x42>
 8001eaa:	2a01      	cmp	r2, #1
 8001eac:	bf08      	it	eq
 8001eae:	2099      	moveq	r0, #153	; 0x99
 8001eb0:	d018      	beq.n	8001ee4 <PE_CheckSendMessageStatus+0x70>
 8001eb2:	2407      	movs	r4, #7
 8001eb4:	e017      	b.n	8001ee6 <PE_CheckSendMessageStatus+0x72>
 8001eb6:	7b29      	ldrb	r1, [r5, #12]
 8001eb8:	2918      	cmp	r1, #24
 8001eba:	d007      	beq.n	8001ecc <PE_CheckSendMessageStatus+0x58>
 8001ebc:	6841      	ldr	r1, [r0, #4]
 8001ebe:	680b      	ldr	r3, [r1, #0]
 8001ec0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001ec4:	2904      	cmp	r1, #4
 8001ec6:	d003      	beq.n	8001ed0 <PE_CheckSendMessageStatus+0x5c>
 8001ec8:	2a01      	cmp	r2, #1
 8001eca:	d10a      	bne.n	8001ee2 <PE_CheckSendMessageStatus+0x6e>
 8001ecc:	200f      	movs	r0, #15
 8001ece:	e009      	b.n	8001ee4 <PE_CheckSendMessageStatus+0x70>
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	d1fb      	bne.n	8001ecc <PE_CheckSendMessageStatus+0x58>
 8001ed4:	6881      	ldr	r1, [r0, #8]
 8001ed6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d0f7      	beq.n	8001ecc <PE_CheckSendMessageStatus+0x58>
 8001edc:	2192      	movs	r1, #146	; 0x92
 8001ede:	7029      	strb	r1, [r5, #0]
 8001ee0:	e001      	b.n	8001ee6 <PE_CheckSendMessageStatus+0x72>
 8001ee2:	2011      	movs	r0, #17
 8001ee4:	7028      	strb	r0, [r5, #0]
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	bd30      	pop	{r4, r5, pc}

08001eea <USBPD_PE_FormatExtendedCtrlMsg>:
 8001eea:	b578      	push	{r3, r4, r5, r6, lr}
 8001eec:	f88d 1000 	strb.w	r1, [sp]
 8001ef0:	f88d 2001 	strb.w	r2, [sp, #1]
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	f8bd 1000 	ldrh.w	r1, [sp]
 8001efa:	00e6      	lsls	r6, r4, #3
 8001efc:	fa21 f506 	lsr.w	r5, r1, r6
 8001f00:	1906      	adds	r6, r0, r4
 8001f02:	1c64      	adds	r4, r4, #1
 8001f04:	2c02      	cmp	r4, #2
 8001f06:	7535      	strb	r5, [r6, #20]
 8001f08:	d3f7      	bcc.n	8001efa <USBPD_PE_FormatExtendedCtrlMsg+0x10>
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	e003      	b.n	8001f16 <USBPD_PE_FormatExtendedCtrlMsg+0x2c>
 8001f0e:	5c5c      	ldrb	r4, [r3, r1]
 8001f10:	1845      	adds	r5, r0, r1
 8001f12:	1c49      	adds	r1, r1, #1
 8001f14:	75ac      	strb	r4, [r5, #22]
 8001f16:	4291      	cmp	r1, r2
 8001f18:	dbf9      	blt.n	8001f0e <USBPD_PE_FormatExtendedCtrlMsg+0x24>
 8001f1a:	bd71      	pop	{r0, r4, r5, r6, pc}

08001f1c <PE_ResetRxEvent>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	4615      	mov	r5, r2
 8001f20:	780a      	ldrb	r2, [r1, #0]
 8001f22:	2a14      	cmp	r2, #20
 8001f24:	4604      	mov	r4, r0
 8001f26:	d004      	beq.n	8001f32 <PE_ResetRxEvent+0x16>
 8001f28:	2014      	movs	r0, #20
 8001f2a:	7008      	strb	r0, [r1, #0]
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7fe fe38 	bl	8000ba2 <PE_Clear_RxEvent>
 8001f32:	f884 5240 	strb.w	r5, [r4, #576]	; 0x240
 8001f36:	bd31      	pop	{r0, r4, r5, pc}

08001f38 <PE_IsDataMsg>:
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f8b3 4272 	ldrh.w	r4, [r3, #626]	; 0x272
 8001f42:	0be2      	lsrs	r2, r4, #15
 8001f44:	d109      	bne.n	8001f5a <PE_IsDataMsg+0x22>
 8001f46:	f3c4 3202 	ubfx	r2, r4, #12, #3
 8001f4a:	b132      	cbz	r2, 8001f5a <PE_IsDataMsg+0x22>
 8001f4c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	4291      	cmp	r1, r2
 8001f56:	bf08      	it	eq
 8001f58:	2001      	moveq	r0, #1
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <PE_GetCtrlMsg>:
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f62:	f8b1 1272 	ldrh.w	r1, [r1, #626]	; 0x272
 8001f66:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 8001f6a:	bf08      	it	eq
 8001f6c:	f001 001f 	andeq.w	r0, r1, #31
 8001f70:	4770      	bx	lr
	...

08001f74 <USBPD_PE_StateMachine_SNK>:
 8001f74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f78:	b08c      	sub	sp, #48	; 0x30
 8001f7a:	f8df 0b00 	ldr.w	r0, [pc, #2816]	; 8002a7c <.text_3>
 8001f7e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8001f82:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8001f86:	f204 263f 	addw	r6, r4, #575	; 0x23f
 8001f8a:	7870      	ldrb	r0, [r6, #1]
 8001f8c:	2848      	cmp	r0, #72	; 0x48
 8001f8e:	d12a      	bne.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x72>
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7fe ff00 	bl	8000d96 <PE_Reset_ZI>
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe ff37 	bl	8000e0a <PE_Reset_Counter>
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	7903      	ldrb	r3, [r0, #4]
 8001fa0:	7830      	ldrb	r0, [r6, #0]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f003 fafb 	bl	80055a4 <USBPD_PRL_SetHeader>
 8001fae:	6860      	ldr	r0, [r4, #4]
 8001fb0:	7801      	ldrb	r1, [r0, #0]
 8001fb2:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8001fb6:	7001      	strb	r1, [r0, #0]
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	7901      	ldrb	r1, [r0, #4]
 8001fbc:	6860      	ldr	r0, [r4, #4]
 8001fbe:	7802      	ldrb	r2, [r0, #0]
 8001fc0:	f361 0201 	bfi	r2, r1, #0, #2
 8001fc4:	7002      	strb	r2, [r0, #0]
 8001fc6:	6860      	ldr	r0, [r4, #4]
 8001fc8:	78c1      	ldrb	r1, [r0, #3]
 8001fca:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8001fce:	70c1      	strb	r1, [r0, #3]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	7830      	ldrb	r0, [r6, #0]
 8001fd4:	f003 fb83 	bl	80056de <USBPD_PRL_SOPCapability>
 8001fd8:	7830      	ldrb	r0, [r6, #0]
 8001fda:	f003 febc 	bl	8005d56 <USBPD_PRL_Reset>
 8001fde:	203e      	movs	r0, #62	; 0x3e
 8001fe0:	7070      	strb	r0, [r6, #1]
 8001fe2:	f000 fd98 	bl	8002b16 <.text_19+0x4>
 8001fe6:	f504 7711 	add.w	r7, r4, #580	; 0x244
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001ff0:	b130      	cbz	r0, 8002000 <USBPD_PE_StateMachine_SNK+0x8c>
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001ff8:	6038      	str	r0, [r7, #0]
 8001ffa:	2164      	movs	r1, #100	; 0x64
 8001ffc:	f000 fd7b 	bl	8002af6 <.text_15>
 8002000:	4620      	mov	r0, r4
 8002002:	f7fe fd82 	bl	8000b0a <PE_Get_RxEvent>
 8002006:	2803      	cmp	r0, #3
 8002008:	f88d 000c 	strb.w	r0, [sp, #12]
 800200c:	f204 4b97 	addw	fp, r4, #1175	; 0x497
 8002010:	bf08      	it	eq
 8002012:	2501      	moveq	r5, #1
 8002014:	f000 852e 	beq.w	8002a74 <USBPD_PE_StateMachine_SNK+0xb00>
 8002018:	6860      	ldr	r0, [r4, #4]
 800201a:	6801      	ldr	r1, [r0, #0]
 800201c:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002020:	2800      	cmp	r0, #0
 8002022:	f000 80f0 	beq.w	8002206 <USBPD_PE_StateMachine_SNK+0x292>
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	2502      	movs	r5, #2
 800202a:	f504 7a1a 	add.w	sl, r4, #616	; 0x268
 800202e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002032:	b140      	cbz	r0, 8002046 <USBPD_PE_StateMachine_SNK+0xd2>
 8002034:	20a7      	movs	r0, #167	; 0xa7
 8002036:	7070      	strb	r0, [r6, #1]
 8002038:	2000      	movs	r0, #0
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	f000 fd66 	bl	8002b12 <.text_19>
 8002046:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800204a:	2a0f      	cmp	r2, #15
 800204c:	bf18      	it	ne
 800204e:	2a14      	cmpne	r2, #20
 8002050:	d104      	bne.n	800205c <USBPD_PE_StateMachine_SNK+0xe8>
 8002052:	f000 fd6b 	bl	8002b2c <.text_21+0x6>
 8002056:	2000      	movs	r0, #0
 8002058:	f000 fd5b 	bl	8002b12 <.text_19>
 800205c:	f000 fd2a 	bl	8002ab4 <.text_9>
 8002060:	d10e      	bne.n	8002080 <USBPD_PE_StateMachine_SNK+0x10c>
 8002062:	6860      	ldr	r0, [r4, #4]
 8002064:	7801      	ldrb	r1, [r0, #0]
 8002066:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 800206a:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800206e:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002072:	4288      	cmp	r0, r1
 8002074:	d104      	bne.n	8002080 <USBPD_PE_StateMachine_SNK+0x10c>
 8002076:	2292      	movs	r2, #146	; 0x92
 8002078:	f000 fd58 	bl	8002b2c <.text_21+0x6>
 800207c:	f000 fd4b 	bl	8002b16 <.text_19+0x4>
 8002080:	7870      	ldrb	r0, [r6, #1]
 8002082:	0002      	movs	r2, r0
 8002084:	f504 7112 	add.w	r1, r4, #584	; 0x248
 8002088:	f248 18f4 	movw	r8, #33268	; 0x81f4
 800208c:	f248 091d 	movw	r9, #32797	; 0x801d
 8002090:	f000 80bd 	beq.w	800220e <USBPD_PE_StateMachine_SNK+0x29a>
 8002094:	1e42      	subs	r2, r0, #1
 8002096:	d039      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 8002098:	1e92      	subs	r2, r2, #2
 800209a:	2a01      	cmp	r2, #1
 800209c:	f240 832c 	bls.w	80026f8 <USBPD_PE_StateMachine_SNK+0x784>
 80020a0:	1e92      	subs	r2, r2, #2
 80020a2:	f000 8233 	beq.w	800250c <USBPD_PE_StateMachine_SNK+0x598>
 80020a6:	3a0a      	subs	r2, #10
 80020a8:	f000 8235 	beq.w	8002516 <USBPD_PE_StateMachine_SNK+0x5a2>
 80020ac:	1e52      	subs	r2, r2, #1
 80020ae:	f000 82c6 	beq.w	800263e <USBPD_PE_StateMachine_SNK+0x6ca>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	f000 82cd 	beq.w	8002652 <USBPD_PE_StateMachine_SNK+0x6de>
 80020b8:	1ed2      	subs	r2, r2, #3
 80020ba:	f000 8266 	beq.w	800258a <USBPD_PE_StateMachine_SNK+0x616>
 80020be:	1f12      	subs	r2, r2, #4
 80020c0:	2a01      	cmp	r2, #1
 80020c2:	d923      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80020c4:	1e92      	subs	r2, r2, #2
 80020c6:	f000 82f4 	beq.w	80026b2 <USBPD_PE_StateMachine_SNK+0x73e>
 80020ca:	1ed2      	subs	r2, r2, #3
 80020cc:	d01e      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80020ce:	1e52      	subs	r2, r2, #1
 80020d0:	f000 83b5 	beq.w	800283e <USBPD_PE_StateMachine_SNK+0x8ca>
 80020d4:	1f12      	subs	r2, r2, #4
 80020d6:	f000 8325 	beq.w	8002724 <USBPD_PE_StateMachine_SNK+0x7b0>
 80020da:	1f52      	subs	r2, r2, #5
 80020dc:	2a02      	cmp	r2, #2
 80020de:	d915      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80020e0:	1ed2      	subs	r2, r2, #3
 80020e2:	f000 8302 	beq.w	80026ea <USBPD_PE_StateMachine_SNK+0x776>
 80020e6:	1e52      	subs	r2, r2, #1
 80020e8:	f000 83ff 	beq.w	80028ea <USBPD_PE_StateMachine_SNK+0x976>
 80020ec:	1e52      	subs	r2, r2, #1
 80020ee:	d00d      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80020f0:	1e92      	subs	r2, r2, #2
 80020f2:	f000 843d 	beq.w	8002970 <USBPD_PE_StateMachine_SNK+0x9fc>
 80020f6:	1e52      	subs	r2, r2, #1
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d907      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80020fc:	1e92      	subs	r2, r2, #2
 80020fe:	f000 8465 	beq.w	80029cc <USBPD_PE_StateMachine_SNK+0xa58>
 8002102:	3a08      	subs	r2, #8
 8002104:	f000 8444 	beq.w	8002990 <USBPD_PE_StateMachine_SNK+0xa1c>
 8002108:	1e52      	subs	r2, r2, #1
 800210a:	2a03      	cmp	r2, #3
 800210c:	f240 8462 	bls.w	80029d4 <USBPD_PE_StateMachine_SNK+0xa60>
 8002110:	1f12      	subs	r2, r2, #4
 8002112:	f000 808d 	beq.w	8002230 <USBPD_PE_StateMachine_SNK+0x2bc>
 8002116:	1e92      	subs	r2, r2, #2
 8002118:	f000 8262 	beq.w	80025e0 <USBPD_PE_StateMachine_SNK+0x66c>
 800211c:	1ed2      	subs	r2, r2, #3
 800211e:	f000 809a 	beq.w	8002256 <USBPD_PE_StateMachine_SNK+0x2e2>
 8002122:	1e52      	subs	r2, r2, #1
 8002124:	f000 811e 	beq.w	8002364 <USBPD_PE_StateMachine_SNK+0x3f0>
 8002128:	1e52      	subs	r2, r2, #1
 800212a:	f000 8128 	beq.w	800237e <USBPD_PE_StateMachine_SNK+0x40a>
 800212e:	1e52      	subs	r2, r2, #1
 8002130:	f000 8163 	beq.w	80023fa <USBPD_PE_StateMachine_SNK+0x486>
 8002134:	1e52      	subs	r2, r2, #1
 8002136:	f000 81bc 	beq.w	80024b2 <USBPD_PE_StateMachine_SNK+0x53e>
 800213a:	1e92      	subs	r2, r2, #2
 800213c:	d0ae      	beq.n	800209c <USBPD_PE_StateMachine_SNK+0x128>
 800213e:	1e92      	subs	r2, r2, #2
 8002140:	d0e4      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 8002142:	1e52      	subs	r2, r2, #1
 8002144:	f000 83b6 	beq.w	80028b4 <USBPD_PE_StateMachine_SNK+0x940>
 8002148:	1e52      	subs	r2, r2, #1
 800214a:	2a02      	cmp	r2, #2
 800214c:	f240 8469 	bls.w	8002a22 <USBPD_PE_StateMachine_SNK+0xaae>
 8002150:	1ed2      	subs	r2, r2, #3
 8002152:	f000 8296 	beq.w	8002682 <USBPD_PE_StateMachine_SNK+0x70e>
 8002156:	1e92      	subs	r2, r2, #2
 8002158:	d00f      	beq.n	800217a <USBPD_PE_StateMachine_SNK+0x206>
 800215a:	1e52      	subs	r2, r2, #1
 800215c:	f000 8330 	beq.w	80027c0 <USBPD_PE_StateMachine_SNK+0x84c>
 8002160:	1e52      	subs	r2, r2, #1
 8002162:	2a03      	cmp	r2, #3
 8002164:	d909      	bls.n	800217a <USBPD_PE_StateMachine_SNK+0x206>
 8002166:	1f12      	subs	r2, r2, #4
 8002168:	f000 8377 	beq.w	800285a <USBPD_PE_StateMachine_SNK+0x8e6>
 800216c:	1e52      	subs	r2, r2, #1
 800216e:	f000 8305 	beq.w	800277c <USBPD_PE_StateMachine_SNK+0x808>
 8002172:	1e52      	subs	r2, r2, #1
 8002174:	d001      	beq.n	800217a <USBPD_PE_StateMachine_SNK+0x206>
 8002176:	1e92      	subs	r2, r2, #2
 8002178:	2a02      	cmp	r2, #2
 800217a:	f240 8457 	bls.w	8002a2c <USBPD_PE_StateMachine_SNK+0xab8>
 800217e:	1f92      	subs	r2, r2, #6
 8002180:	2a02      	cmp	r2, #2
 8002182:	d9c3      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 8002184:	1ed2      	subs	r2, r2, #3
 8002186:	f000 83c1 	beq.w	800290c <USBPD_PE_StateMachine_SNK+0x998>
 800218a:	1e52      	subs	r2, r2, #1
 800218c:	f000 83cf 	beq.w	800292e <USBPD_PE_StateMachine_SNK+0x9ba>
 8002190:	1e52      	subs	r2, r2, #1
 8002192:	2a01      	cmp	r2, #1
 8002194:	d9ba      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 8002196:	3a0d      	subs	r2, #13
 8002198:	d0b8      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 800219a:	3a12      	subs	r2, #18
 800219c:	f000 842f 	beq.w	80029fe <USBPD_PE_StateMachine_SNK+0xa8a>
 80021a0:	3a0c      	subs	r2, #12
 80021a2:	d03c      	beq.n	800221e <USBPD_PE_StateMachine_SNK+0x2aa>
 80021a4:	1e52      	subs	r2, r2, #1
 80021a6:	2a02      	cmp	r2, #2
 80021a8:	d9b0      	bls.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80021aa:	1f52      	subs	r2, r2, #5
 80021ac:	f000 828e 	beq.w	80026cc <USBPD_PE_StateMachine_SNK+0x758>
 80021b0:	1e52      	subs	r2, r2, #1
 80021b2:	d0ab      	beq.n	800210c <USBPD_PE_StateMachine_SNK+0x198>
 80021b4:	1e52      	subs	r2, r2, #1
 80021b6:	f000 81a9 	beq.w	800250c <USBPD_PE_StateMachine_SNK+0x598>
 80021ba:	1e52      	subs	r2, r2, #1
 80021bc:	f000 81f8 	beq.w	80025b0 <USBPD_PE_StateMachine_SNK+0x63c>
 80021c0:	1e52      	subs	r2, r2, #1
 80021c2:	2a08      	cmp	r2, #8
 80021c4:	f240 840b 	bls.w	80029de <USBPD_PE_StateMachine_SNK+0xa6a>
 80021c8:	3a0b      	subs	r2, #11
 80021ca:	f000 841e 	beq.w	8002a0a <USBPD_PE_StateMachine_SNK+0xa96>
 80021ce:	1e52      	subs	r2, r2, #1
 80021d0:	a903      	add	r1, sp, #12
 80021d2:	4620      	mov	r0, r4
 80021d4:	f000 842f 	beq.w	8002a36 <USBPD_PE_StateMachine_SNK+0xac2>
 80021d8:	f002 fa7a 	bl	80046d0 <PE_StateMachine_VDM>
 80021dc:	4605      	mov	r5, r0
 80021de:	f000 fc9a 	bl	8002b16 <.text_19+0x4>
 80021e2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80021e6:	2814      	cmp	r0, #20
 80021e8:	f000 8428 	beq.w	8002a3c <USBPD_PE_StateMachine_SNK+0xac8>
 80021ec:	4620      	mov	r0, r4
 80021ee:	f7fe fd23 	bl	8000c38 <PE_Check_AMSConflict>
 80021f2:	2815      	cmp	r0, #21
 80021f4:	d102      	bne.n	80021fc <USBPD_PE_StateMachine_SNK+0x288>
 80021f6:	7872      	ldrb	r2, [r6, #1]
 80021f8:	f000 fc98 	bl	8002b2c <.text_21+0x6>
 80021fc:	f000 fc8b 	bl	8002b16 <.text_19+0x4>
 8002200:	2500      	movs	r5, #0
 8002202:	f000 bc30 	b.w	8002a66 <USBPD_PE_StateMachine_SNK+0xaf2>
 8002206:	f04f 35ff 	mov.w	r5, #4294967295
 800220a:	f000 bc33 	b.w	8002a74 <USBPD_PE_StateMachine_SNK+0xb00>
 800220e:	f000 fc61 	bl	8002ad4 <.text_12>
 8002212:	215f      	movs	r1, #95	; 0x5f
 8002214:	f000 fc6f 	bl	8002af6 <.text_15>
 8002218:	f04f 35ff 	mov.w	r5, #4294967295
 800221c:	e7df      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 800221e:	f000 fc59 	bl	8002ad4 <.text_12>
 8002222:	68a0      	ldr	r0, [r4, #8]
 8002224:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002226:	2900      	cmp	r1, #0
 8002228:	d0f6      	beq.n	8002218 <USBPD_PE_StateMachine_SNK+0x2a4>
 800222a:	7830      	ldrb	r0, [r6, #0]
 800222c:	4788      	blx	r1
 800222e:	e7f3      	b.n	8002218 <USBPD_PE_StateMachine_SNK+0x2a4>
 8002230:	6860      	ldr	r0, [r4, #4]
 8002232:	7801      	ldrb	r1, [r0, #0]
 8002234:	f001 0203 	and.w	r2, r1, #3
 8002238:	2a01      	cmp	r2, #1
 800223a:	bf0c      	ite	eq
 800223c:	2200      	moveq	r2, #0
 800223e:	2220      	movne	r2, #32
 8002240:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8002244:	4311      	orrs	r1, r2
 8002246:	7001      	strb	r1, [r0, #0]
 8002248:	f8a7 800a 	strh.w	r8, [r7, #10]
 800224c:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8002250:	2043      	movs	r0, #67	; 0x43
 8002252:	7070      	strb	r0, [r6, #1]
 8002254:	e7c3      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 8002256:	f000 fc3d 	bl	8002ad4 <.text_12>
 800225a:	f000 fc2b 	bl	8002ab4 <.text_9>
 800225e:	d17a      	bne.n	8002356 <USBPD_PE_StateMachine_SNK+0x3e2>
 8002260:	f000 fc3e 	bl	8002ae0 <.text_13>
 8002264:	d034      	beq.n	80022d0 <USBPD_PE_StateMachine_SNK+0x35c>
 8002266:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800226a:	0bc8      	lsrs	r0, r1, #15
 800226c:	d02d      	beq.n	80022ca <USBPD_PE_StateMachine_SNK+0x356>
 800226e:	f001 011f 	and.w	r1, r1, #31
 8002272:	2911      	cmp	r1, #17
 8002274:	d129      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x356>
 8002276:	f8da 000c 	ldr.w	r0, [sl, #12]
 800227a:	1d00      	adds	r0, r0, #4
 800227c:	f000 fcfe 	bl	8002c7c <PE_SNK_ControlSPRPDO>
 8002280:	b118      	cbz	r0, 800228a <USBPD_PE_StateMachine_SNK+0x316>
 8002282:	200f      	movs	r0, #15
 8002284:	7070      	strb	r0, [r6, #1]
 8002286:	2500      	movs	r5, #0
 8002288:	e01f      	b.n	80022ca <USBPD_PE_StateMachine_SNK+0x356>
 800228a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800228e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002292:	7830      	ldrb	r0, [r6, #0]
 8002294:	f8dc 8018 	ldr.w	r8, [ip, #24]
 8002298:	1d0a      	adds	r2, r1, #4
 800229a:	231c      	movs	r3, #28
 800229c:	2104      	movs	r1, #4
 800229e:	47c0      	blx	r8
 80022a0:	f8da 000c 	ldr.w	r0, [sl, #12]
 80022a4:	7881      	ldrb	r1, [r0, #2]
 80022a6:	78c2      	ldrb	r2, [r0, #3]
 80022a8:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80022ac:	f8dc 8018 	ldr.w	r8, [ip, #24]
 80022b0:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	f100 0220 	add.w	r2, r0, #32
 80022bc:	1fdb      	subs	r3, r3, #7
 80022be:	7830      	ldrb	r0, [r6, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	2119      	movs	r1, #25
 80022c4:	47c0      	blx	r8
 80022c6:	f000 fc2e 	bl	8002b26 <.text_21>
 80022ca:	f000 fc09 	bl	8002ae0 <.text_13>
 80022ce:	d142      	bne.n	8002356 <USBPD_PE_StateMachine_SNK+0x3e2>
 80022d0:	2101      	movs	r1, #1
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff fe30 	bl	8001f38 <PE_IsDataMsg>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d03c      	beq.n	8002356 <USBPD_PE_StateMachine_SNK+0x3e2>
 80022dc:	2000      	movs	r0, #0
 80022de:	f88b 0005 	strb.w	r0, [fp, #5]
 80022e2:	6839      	ldr	r1, [r7, #0]
 80022e4:	f041 0104 	orr.w	r1, r1, #4
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	f8da 100c 	ldr.w	r1, [sl, #12]
 80022ee:	7888      	ldrb	r0, [r1, #2]
 80022f0:	78ca      	ldrb	r2, [r1, #3]
 80022f2:	790b      	ldrb	r3, [r1, #4]
 80022f4:	7949      	ldrb	r1, [r1, #5]
 80022f6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80022fa:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80022fe:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8002302:	6861      	ldr	r1, [r4, #4]
 8002304:	680a      	ldr	r2, [r1, #0]
 8002306:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800230a:	600a      	str	r2, [r1, #0]
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	7a0a      	ldrb	r2, [r1, #8]
 8002310:	07d1      	lsls	r1, r2, #31
 8002312:	d507      	bpl.n	8002324 <USBPD_PE_StateMachine_SNK+0x3b0>
 8002314:	f3c0 6000 	ubfx	r0, r0, #24, #1
 8002318:	b120      	cbz	r0, 8002324 <USBPD_PE_StateMachine_SNK+0x3b0>
 800231a:	6860      	ldr	r0, [r4, #4]
 800231c:	6801      	ldr	r1, [r0, #0]
 800231e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002322:	6001      	str	r1, [r0, #0]
 8002324:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 8002328:	f3c0 1181 	ubfx	r1, r0, #6, #2
 800232c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8002330:	f7fe fd9e 	bl	8000e70 <PE_ExtRevisionInteroperability>
 8002334:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002338:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 800233c:	f8dc 8018 	ldr.w	r8, [ip, #24]
 8002340:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002344:	f8da 000c 	ldr.w	r0, [sl, #12]
 8002348:	1c82      	adds	r2, r0, #2
 800234a:	7830      	ldrb	r0, [r6, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	2104      	movs	r1, #4
 8002350:	47c0      	blx	r8
 8002352:	f000 fbe8 	bl	8002b26 <.text_21>
 8002356:	f000 fba9 	bl	8002aac <.text_8>
 800235a:	d102      	bne.n	8002362 <USBPD_PE_StateMachine_SNK+0x3ee>
 800235c:	210f      	movs	r1, #15
 800235e:	7071      	strb	r1, [r6, #1]
 8002360:	2500      	movs	r5, #0
 8002362:	e73c      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 8002364:	68a3      	ldr	r3, [r4, #8]
 8002366:	7830      	ldrb	r0, [r6, #0]
 8002368:	6a1d      	ldr	r5, [r3, #32]
 800236a:	466a      	mov	r2, sp
 800236c:	47a8      	blx	r5
 800236e:	9800      	ldr	r0, [sp, #0]
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	f360 01c4 	bfi	r1, r0, #3, #2
 8002376:	6039      	str	r1, [r7, #0]
 8002378:	2245      	movs	r2, #69	; 0x45
 800237a:	7072      	strb	r2, [r6, #1]
 800237c:	e7f0      	b.n	8002360 <USBPD_PE_StateMachine_SNK+0x3ec>
 800237e:	6860      	ldr	r0, [r4, #4]
 8002380:	78c2      	ldrb	r2, [r0, #3]
 8002382:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8002386:	b1f8      	cbz	r0, 80023c8 <USBPD_PE_StateMachine_SNK+0x454>
 8002388:	2000      	movs	r0, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	00c2      	lsls	r2, r0, #3
 800238e:	40d1      	lsrs	r1, r2
 8002390:	1822      	adds	r2, r4, r0
 8002392:	1c40      	adds	r0, r0, #1
 8002394:	2804      	cmp	r0, #4
 8002396:	7491      	strb	r1, [r2, #18]
 8002398:	d3f7      	bcc.n	800238a <USBPD_PE_StateMachine_SNK+0x416>
 800239a:	f000 fb7c 	bl	8002a96 <.text_6>
 800239e:	ab02      	add	r3, sp, #8
 80023a0:	f104 0216 	add.w	r2, r4, #22
 80023a4:	211c      	movs	r1, #28
 80023a6:	47c0      	blx	r8
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	0bc0      	lsrs	r0, r0, #15
 80023ac:	f000 0001 	and.w	r0, r0, #1
 80023b0:	2146      	movs	r1, #70	; 0x46
 80023b2:	9001      	str	r0, [sp, #4]
 80023b4:	9100      	str	r1, [sp, #0]
 80023b6:	230a      	movs	r3, #10
 80023b8:	2209      	movs	r2, #9
 80023ba:	2100      	movs	r1, #0
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff f994 	bl	80016ea <PE_Send_Message>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d118      	bne.n	80023f8 <USBPD_PE_StateMachine_SNK+0x484>
 80023c6:	e010      	b.n	80023ea <USBPD_PE_StateMachine_SNK+0x476>
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	0bc0      	lsrs	r0, r0, #15
 80023cc:	f000 0001 	and.w	r0, r0, #1
 80023d0:	9002      	str	r0, [sp, #8]
 80023d2:	2246      	movs	r2, #70	; 0x46
 80023d4:	2001      	movs	r0, #1
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	9000      	str	r0, [sp, #0]
 80023da:	460b      	mov	r3, r1
 80023dc:	2202      	movs	r2, #2
 80023de:	2100      	movs	r1, #0
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff f960 	bl	80016a6 <PE_Send_DataMessage>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d106      	bne.n	80023f8 <USBPD_PE_StateMachine_SNK+0x484>
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80023f0:	6038      	str	r0, [r7, #0]
 80023f2:	f8a7 900a 	strh.w	r9, [r7, #10]
 80023f6:	251d      	movs	r5, #29
 80023f8:	e6f1      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 80023fa:	f000 fb5b 	bl	8002ab4 <.text_9>
 80023fe:	d154      	bne.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 8002400:	f000 fb84 	bl	8002b0c <.text_18>
 8002404:	2802      	cmp	r0, #2
 8002406:	bf18      	it	ne
 8002408:	2803      	cmpne	r0, #3
 800240a:	4681      	mov	r9, r0
 800240c:	d023      	beq.n	8002456 <USBPD_PE_StateMachine_SNK+0x4e2>
 800240e:	2804      	cmp	r0, #4
 8002410:	bf18      	it	ne
 8002412:	280c      	cmpne	r0, #12
 8002414:	d134      	bne.n	8002480 <USBPD_PE_StateMachine_SNK+0x50c>
 8002416:	6860      	ldr	r0, [r4, #4]
 8002418:	6801      	ldr	r1, [r0, #0]
 800241a:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800241e:	2803      	cmp	r0, #3
 8002420:	d012      	beq.n	8002448 <USBPD_PE_StateMachine_SNK+0x4d4>
 8002422:	2043      	movs	r0, #67	; 0x43
 8002424:	7070      	strb	r0, [r6, #1]
 8002426:	f8a7 800a 	strh.w	r8, [r7, #10]
 800242a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800242e:	6860      	ldr	r0, [r4, #4]
 8002430:	78c1      	ldrb	r1, [r0, #3]
 8002432:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8002436:	b128      	cbz	r0, 8002444 <USBPD_PE_StateMachine_SNK+0x4d0>
 8002438:	f1b9 0f0c 	cmp.w	r9, #12
 800243c:	d102      	bne.n	8002444 <USBPD_PE_StateMachine_SNK+0x4d0>
 800243e:	200f      	movs	r0, #15
 8002440:	7070      	strb	r0, [r6, #1]
 8002442:	2500      	movs	r5, #0
 8002444:	7872      	ldrb	r2, [r6, #1]
 8002446:	e019      	b.n	800247c <USBPD_PE_StateMachine_SNK+0x508>
 8002448:	f1b9 0f0c 	cmp.w	r9, #12
 800244c:	d1f8      	bne.n	8002440 <USBPD_PE_StateMachine_SNK+0x4cc>
 800244e:	2049      	movs	r0, #73	; 0x49
 8002450:	7070      	strb	r0, [r6, #1]
 8002452:	2500      	movs	r5, #0
 8002454:	e7eb      	b.n	800242e <USBPD_PE_StateMachine_SNK+0x4ba>
 8002456:	6860      	ldr	r0, [r4, #4]
 8002458:	78c1      	ldrb	r1, [r0, #3]
 800245a:	f3c1 1040 	ubfx	r0, r1, #5, #1
 800245e:	b108      	cbz	r0, 8002464 <USBPD_PE_StateMachine_SNK+0x4f0>
 8002460:	f248 389d 	movw	r8, #33693	; 0x839d
 8002464:	f8a7 800a 	strh.w	r8, [r7, #10]
 8002468:	f000 fb3a 	bl	8002ae0 <.text_13>
 800246c:	bf0c      	ite	eq
 800246e:	f44f 75fa 	moveq.w	r5, #500	; 0x1f4
 8002472:	f240 359d 	movwne	r5, #925	; 0x39d
 8002476:	f000 fb41 	bl	8002afc <.text_16>
 800247a:	2247      	movs	r2, #71	; 0x47
 800247c:	f000 fb56 	bl	8002b2c <.text_21+0x6>
 8002480:	f1b9 0f02 	cmp.w	r9, #2
 8002484:	d00c      	beq.n	80024a0 <USBPD_PE_StateMachine_SNK+0x52c>
 8002486:	f1b9 0f03 	cmp.w	r9, #3
 800248a:	d00b      	beq.n	80024a4 <USBPD_PE_StateMachine_SNK+0x530>
 800248c:	f1b9 0f04 	cmp.w	r9, #4
 8002490:	d004      	beq.n	800249c <USBPD_PE_StateMachine_SNK+0x528>
 8002492:	f1b9 0f0c 	cmp.w	r9, #12
 8002496:	d108      	bne.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 8002498:	2103      	movs	r1, #3
 800249a:	e004      	b.n	80024a6 <USBPD_PE_StateMachine_SNK+0x532>
 800249c:	2102      	movs	r1, #2
 800249e:	e002      	b.n	80024a6 <USBPD_PE_StateMachine_SNK+0x532>
 80024a0:	2104      	movs	r1, #4
 80024a2:	e000      	b.n	80024a6 <USBPD_PE_StateMachine_SNK+0x532>
 80024a4:	2101      	movs	r1, #1
 80024a6:	f000 fb26 	bl	8002af6 <.text_15>
 80024aa:	f000 faff 	bl	8002aac <.text_8>
 80024ae:	d151      	bne.n	8002554 <USBPD_PE_StateMachine_SNK+0x5e0>
 80024b0:	e754      	b.n	800235c <USBPD_PE_StateMachine_SNK+0x3e8>
 80024b2:	f000 faff 	bl	8002ab4 <.text_9>
 80024b6:	d1f8      	bne.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 80024b8:	f000 fb28 	bl	8002b0c <.text_18>
 80024bc:	2806      	cmp	r0, #6
 80024be:	d1f4      	bne.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 80024c0:	2103      	movs	r1, #3
 80024c2:	f000 fb1c 	bl	8002afe <.text_16+0x2>
 80024c6:	7830      	ldrb	r0, [r6, #0]
 80024c8:	2110      	movs	r1, #16
 80024ca:	f7fe f86d 	bl	80005a8 <USBPD_PE_Notification>
 80024ce:	f000 fafb 	bl	8002ac8 <.text_11>
 80024d2:	bf1a      	itte	ne
 80024d4:	6820      	ldrne	r0, [r4, #0]
 80024d6:	6801      	ldrne	r1, [r0, #0]
 80024d8:	2101      	moveq	r1, #1
 80024da:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80024de:	f003 f8fe 	bl	80056de <USBPD_PRL_SOPCapability>
 80024e2:	2000      	movs	r0, #0
 80024e4:	8238      	strh	r0, [r7, #16]
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80024ec:	2803      	cmp	r0, #3
 80024ee:	bf01      	itttt	eq
 80024f0:	6860      	ldreq	r0, [r4, #4]
 80024f2:	78c1      	ldrbeq	r1, [r0, #3]
 80024f4:	f3c1 1040 	ubfxeq	r0, r1, #5, #1
 80024f8:	2800      	cmpeq	r0, #0
 80024fa:	bf04      	itt	eq
 80024fc:	f24a 3028 	movweq	r0, #41768	; 0xa328
 8002500:	8238      	strheq	r0, [r7, #16]
 8002502:	2203      	movs	r2, #3
 8002504:	f000 fb12 	bl	8002b2c <.text_21+0x6>
 8002508:	2500      	movs	r5, #0
 800250a:	e7ce      	b.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 800250c:	a903      	add	r1, sp, #12
 800250e:	4620      	mov	r0, r4
 8002510:	f001 fcbb 	bl	8003e8a <PE_StateMachine_VDMCable>
 8002514:	e662      	b.n	80021dc <USBPD_PE_StateMachine_SNK+0x268>
 8002516:	f000 fad7 	bl	8002ac8 <.text_11>
 800251a:	bf1e      	ittt	ne
 800251c:	68a0      	ldrne	r0, [r4, #8]
 800251e:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 8002520:	2a00      	cmpne	r2, #0
 8002522:	d002      	beq.n	800252a <USBPD_PE_StateMachine_SNK+0x5b6>
 8002524:	7830      	ldrb	r0, [r6, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4790      	blx	r2
 800252a:	f000 fad3 	bl	8002ad4 <.text_12>
 800252e:	4620      	mov	r0, r4
 8002530:	2101      	movs	r1, #1
 8002532:	f7fe ffca 	bl	80014ca <PE_SetPowerNegotiation>
 8002536:	f89b 0005 	ldrb.w	r0, [fp, #5]
 800253a:	2803      	cmp	r0, #3
 800253c:	d30b      	bcc.n	8002556 <USBPD_PE_StateMachine_SNK+0x5e2>
 800253e:	6838      	ldr	r0, [r7, #0]
 8002540:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002544:	2800      	cmp	r0, #0
 8002546:	bf1e      	ittt	ne
 8002548:	68a1      	ldrne	r1, [r4, #8]
 800254a:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 800254c:	2800      	cmpne	r0, #0
 800254e:	d171      	bne.n	8002634 <USBPD_PE_StateMachine_SNK+0x6c0>
 8002550:	2100      	movs	r1, #0
 8002552:	7071      	strb	r1, [r6, #1]
 8002554:	e643      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 8002556:	1c40      	adds	r0, r0, #1
 8002558:	f88b 0005 	strb.w	r0, [fp, #5]
 800255c:	2105      	movs	r1, #5
 800255e:	4620      	mov	r0, r4
 8002560:	f7fe faa8 	bl	8000ab4 <PE_Send_RESET>
 8002564:	f248 30e8 	movw	r0, #33768	; 0x83e8
 8002568:	8178      	strh	r0, [r7, #10]
 800256a:	2201      	movs	r2, #1
 800256c:	f000 faca 	bl	8002b04 <.text_17>
 8002570:	209b      	movs	r0, #155	; 0x9b
 8002572:	7070      	strb	r0, [r6, #1]
 8002574:	2101      	movs	r1, #1
 8002576:	f000 fa89 	bl	8002a8c <.text_5>
 800257a:	4798      	blx	r3
 800257c:	2500      	movs	r5, #0
 800257e:	2801      	cmp	r0, #1
 8002580:	d102      	bne.n	8002588 <USBPD_PE_StateMachine_SNK+0x614>
 8002582:	2203      	movs	r2, #3
 8002584:	f000 fabe 	bl	8002b04 <.text_17>
 8002588:	e629      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 800258a:	f000 fa9d 	bl	8002ac8 <.text_11>
 800258e:	bf1e      	ittt	ne
 8002590:	68a0      	ldrne	r0, [r4, #8]
 8002592:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 8002594:	2a00      	cmpne	r2, #0
 8002596:	d002      	beq.n	800259e <USBPD_PE_StateMachine_SNK+0x62a>
 8002598:	7830      	ldrb	r0, [r6, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4790      	blx	r2
 800259e:	2200      	movs	r2, #0
 80025a0:	f000 fab0 	bl	8002b04 <.text_17>
 80025a4:	f248 30e8 	movw	r0, #33768	; 0x83e8
 80025a8:	8178      	strh	r0, [r7, #10]
 80025aa:	219b      	movs	r1, #155	; 0x9b
 80025ac:	7071      	strb	r1, [r6, #1]
 80025ae:	e7e1      	b.n	8002574 <USBPD_PE_StateMachine_SNK+0x600>
 80025b0:	f000 fa6c 	bl	8002a8c <.text_5>
 80025b4:	2100      	movs	r1, #0
 80025b6:	4798      	blx	r3
 80025b8:	2801      	cmp	r0, #1
 80025ba:	d10d      	bne.n	80025d8 <USBPD_PE_StateMachine_SNK+0x664>
 80025bc:	f648 00e3 	movw	r0, #35043	; 0x88e3
 80025c0:	8178      	strh	r0, [r7, #10]
 80025c2:	2169      	movs	r1, #105	; 0x69
 80025c4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80025c8:	f7fd ffee 	bl	80005a8 <USBPD_PE_Notification>
 80025cc:	2040      	movs	r0, #64	; 0x40
 80025ce:	7070      	strb	r0, [r6, #1]
 80025d0:	2113      	movs	r1, #19
 80025d2:	f000 fa90 	bl	8002af6 <.text_15>
 80025d6:	2500      	movs	r5, #0
 80025d8:	f000 fa68 	bl	8002aac <.text_8>
 80025dc:	d1d4      	bne.n	8002588 <USBPD_PE_StateMachine_SNK+0x614>
 80025de:	e019      	b.n	8002614 <USBPD_PE_StateMachine_SNK+0x6a0>
 80025e0:	f000 fa54 	bl	8002a8c <.text_5>
 80025e4:	2101      	movs	r1, #1
 80025e6:	4798      	blx	r3
 80025e8:	2801      	cmp	r0, #1
 80025ea:	d110      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x69a>
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7fe fb8b 	bl	8000d08 <PE_Reset_HardReset>
 80025f2:	2205      	movs	r2, #5
 80025f4:	f000 fa86 	bl	8002b04 <.text_17>
 80025f8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80025fc:	2168      	movs	r1, #104	; 0x68
 80025fe:	f7fd ffd3 	bl	80005a8 <USBPD_PE_Notification>
 8002602:	f8a7 800a 	strh.w	r8, [r7, #10]
 8002606:	2043      	movs	r0, #67	; 0x43
 8002608:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800260c:	7070      	strb	r0, [r6, #1]
 800260e:	f000 fa4d 	bl	8002aac <.text_8>
 8002612:	d135      	bne.n	8002680 <USBPD_PE_StateMachine_SNK+0x70c>
 8002614:	2206      	movs	r2, #6
 8002616:	f000 fa75 	bl	8002b04 <.text_17>
 800261a:	f89b 0005 	ldrb.w	r0, [fp, #5]
 800261e:	2803      	cmp	r0, #3
 8002620:	f4ff ae9c 	bcc.w	800235c <USBPD_PE_StateMachine_SNK+0x3e8>
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800262a:	2800      	cmp	r0, #0
 800262c:	bf1e      	ittt	ne
 800262e:	68a1      	ldrne	r1, [r4, #8]
 8002630:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 8002632:	2800      	cmpne	r0, #0
 8002634:	f040 80c2 	bne.w	80027bc <USBPD_PE_StateMachine_SNK+0x848>
 8002638:	2100      	movs	r1, #0
 800263a:	7071      	strb	r1, [r6, #1]
 800263c:	e690      	b.n	8002360 <USBPD_PE_StateMachine_SNK+0x3ec>
 800263e:	2000      	movs	r0, #0
 8002640:	9000      	str	r0, [sp, #0]
 8002642:	2303      	movs	r3, #3
 8002644:	f000 fa6a 	bl	8002b1c <.text_20>
 8002648:	2800      	cmp	r0, #0
 800264a:	d119      	bne.n	8002680 <USBPD_PE_StateMachine_SNK+0x70c>
 800264c:	2001      	movs	r0, #1
 800264e:	7238      	strb	r0, [r7, #8]
 8002650:	e5fa      	b.n	8002248 <USBPD_PE_StateMachine_SNK+0x2d4>
 8002652:	6860      	ldr	r0, [r4, #4]
 8002654:	6801      	ldr	r1, [r0, #0]
 8002656:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800265a:	2804      	cmp	r0, #4
 800265c:	f43f ae7e 	beq.w	800235c <USBPD_PE_StateMachine_SNK+0x3e8>
 8002660:	2000      	movs	r0, #0
 8002662:	9000      	str	r0, [sp, #0]
 8002664:	2350      	movs	r3, #80	; 0x50
 8002666:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800266a:	220d      	movs	r2, #13
 800266c:	f000 fa58 	bl	8002b20 <.text_20+0x4>
 8002670:	2800      	cmp	r0, #0
 8002672:	d105      	bne.n	8002680 <USBPD_PE_StateMachine_SNK+0x70c>
 8002674:	2003      	movs	r0, #3
 8002676:	f000 fa14 	bl	8002aa2 <.text_7>
 800267a:	2130      	movs	r1, #48	; 0x30
 800267c:	f000 fa3b 	bl	8002af6 <.text_15>
 8002680:	e5ad      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 8002682:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002686:	2814      	cmp	r0, #20
 8002688:	d012      	beq.n	80026b0 <USBPD_PE_StateMachine_SNK+0x73c>
 800268a:	f89a 1000 	ldrb.w	r1, [sl]
 800268e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8002692:	4281      	cmp	r1, r0
 8002694:	d10c      	bne.n	80026b0 <USBPD_PE_StateMachine_SNK+0x73c>
 8002696:	f000 fa39 	bl	8002b0c <.text_18>
 800269a:	2803      	cmp	r0, #3
 800269c:	d108      	bne.n	80026b0 <USBPD_PE_StateMachine_SNK+0x73c>
 800269e:	2001      	movs	r0, #1
 80026a0:	7238      	strb	r0, [r7, #8]
 80026a2:	f8a7 800a 	strh.w	r8, [r7, #10]
 80026a6:	2243      	movs	r2, #67	; 0x43
 80026a8:	f000 fa40 	bl	8002b2c <.text_21+0x6>
 80026ac:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 80026b0:	e6fb      	b.n	80024aa <USBPD_PE_StateMachine_SNK+0x536>
 80026b2:	2101      	movs	r1, #1
 80026b4:	9100      	str	r1, [sp, #0]
 80026b6:	2343      	movs	r3, #67	; 0x43
 80026b8:	2207      	movs	r2, #7
 80026ba:	f000 fa30 	bl	8002b1e <.text_20+0x2>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d112      	bne.n	80026e8 <USBPD_PE_StateMachine_SNK+0x774>
 80026c2:	2006      	movs	r0, #6
 80026c4:	f000 f9ed 	bl	8002aa2 <.text_7>
 80026c8:	210b      	movs	r1, #11
 80026ca:	e7d7      	b.n	800267c <USBPD_PE_StateMachine_SNK+0x708>
 80026cc:	f000 f9f2 	bl	8002ab4 <.text_9>
 80026d0:	d10a      	bne.n	80026e8 <USBPD_PE_StateMachine_SNK+0x774>
 80026d2:	f000 fa1b 	bl	8002b0c <.text_18>
 80026d6:	2806      	cmp	r0, #6
 80026d8:	d106      	bne.n	80026e8 <USBPD_PE_StateMachine_SNK+0x774>
 80026da:	7830      	ldrb	r0, [r6, #0]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	f7fd ff63 	bl	80005a8 <USBPD_PE_Notification>
 80026e2:	2203      	movs	r2, #3
 80026e4:	f000 fa22 	bl	8002b2c <.text_21+0x6>
 80026e8:	e579      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 80026ea:	2000      	movs	r0, #0
 80026ec:	9000      	str	r0, [sp, #0]
 80026ee:	2303      	movs	r3, #3
 80026f0:	2204      	movs	r2, #4
 80026f2:	f000 fa14 	bl	8002b1e <.text_20+0x2>
 80026f6:	e572      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 80026f8:	2804      	cmp	r0, #4
 80026fa:	d00e      	beq.n	800271a <USBPD_PE_StateMachine_SNK+0x7a6>
 80026fc:	2000      	movs	r0, #0
 80026fe:	7238      	strb	r0, [r7, #8]
 8002700:	2104      	movs	r1, #4
 8002702:	7071      	strb	r1, [r6, #1]
 8002704:	2120      	movs	r1, #32
 8002706:	f000 f9f6 	bl	8002af6 <.text_15>
 800270a:	f000 f9e9 	bl	8002ae0 <.text_13>
 800270e:	bf19      	ittee	ne
 8002710:	f248 10db 	movwne	r0, #33243	; 0x81db
 8002714:	8338      	strhne	r0, [r7, #24]
 8002716:	2100      	moveq	r1, #0
 8002718:	8339      	strheq	r1, [r7, #24]
 800271a:	a903      	add	r1, sp, #12
 800271c:	4620      	mov	r0, r4
 800271e:	f000 fa09 	bl	8002b34 <PE_StateMachine_SNK_ReadyWait>
 8002722:	e55b      	b.n	80021dc <USBPD_PE_StateMachine_SNK+0x268>
 8002724:	68a0      	ldr	r0, [r4, #8]
 8002726:	6881      	ldr	r1, [r0, #8]
 8002728:	b329      	cbz	r1, 8002776 <USBPD_PE_StateMachine_SNK+0x802>
 800272a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 800272e:	4788      	blx	r1
 8002730:	280a      	cmp	r0, #10
 8002732:	d002      	beq.n	800273a <USBPD_PE_StateMachine_SNK+0x7c6>
 8002734:	280d      	cmp	r0, #13
 8002736:	d019      	beq.n	800276c <USBPD_PE_StateMachine_SNK+0x7f8>
 8002738:	e01d      	b.n	8002776 <USBPD_PE_StateMachine_SNK+0x802>
 800273a:	f000 f9d7 	bl	8002aec <.text_14>
 800273e:	2201      	movs	r2, #1
 8002740:	2100      	movs	r1, #0
 8002742:	47e0      	blx	ip
 8002744:	2000      	movs	r0, #0
 8002746:	9000      	str	r0, [sp, #0]
 8002748:	2359      	movs	r3, #89	; 0x59
 800274a:	f000 f9e7 	bl	8002b1c <.text_20>
 800274e:	2800      	cmp	r0, #0
 8002750:	d10b      	bne.n	800276a <USBPD_PE_StateMachine_SNK+0x7f6>
 8002752:	2008      	movs	r0, #8
 8002754:	7238      	strb	r0, [r7, #8]
 8002756:	2206      	movs	r2, #6
 8002758:	f000 f9b0 	bl	8002abc <.text_10>
 800275c:	2100      	movs	r1, #0
 800275e:	68a3      	ldr	r3, [r4, #8]
 8002760:	7830      	ldrb	r0, [r6, #0]
 8002762:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002764:	47a8      	blx	r5
 8002766:	f000 f98b 	bl	8002a80 <.text_4>
 800276a:	e538      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 800276c:	2000      	movs	r0, #0
 800276e:	9000      	str	r0, [sp, #0]
 8002770:	2303      	movs	r3, #3
 8002772:	220c      	movs	r2, #12
 8002774:	e7bd      	b.n	80026f2 <USBPD_PE_StateMachine_SNK+0x77e>
 8002776:	202a      	movs	r0, #42	; 0x2a
 8002778:	7070      	strb	r0, [r6, #1]
 800277a:	e5f1      	b.n	8002360 <USBPD_PE_StateMachine_SNK+0x3ec>
 800277c:	f000 f99a 	bl	8002ab4 <.text_9>
 8002780:	d10e      	bne.n	80027a0 <USBPD_PE_StateMachine_SNK+0x82c>
 8002782:	f000 f9c3 	bl	8002b0c <.text_18>
 8002786:	2806      	cmp	r0, #6
 8002788:	d10a      	bne.n	80027a0 <USBPD_PE_StateMachine_SNK+0x82c>
 800278a:	7a38      	ldrb	r0, [r7, #8]
 800278c:	2809      	cmp	r0, #9
 800278e:	d004      	beq.n	800279a <USBPD_PE_StateMachine_SNK+0x826>
 8002790:	f000 f9ac 	bl	8002aec <.text_14>
 8002794:	2209      	movs	r2, #9
 8002796:	2100      	movs	r1, #0
 8002798:	47e0      	blx	ip
 800279a:	2253      	movs	r2, #83	; 0x53
 800279c:	f000 f9c6 	bl	8002b2c <.text_21+0x6>
 80027a0:	f000 f984 	bl	8002aac <.text_8>
 80027a4:	d1e1      	bne.n	800276a <USBPD_PE_StateMachine_SNK+0x7f6>
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	7830      	ldrb	r0, [r6, #0]
 80027aa:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80027ac:	220f      	movs	r2, #15
 80027ae:	2100      	movs	r1, #0
 80027b0:	47a8      	blx	r5
 80027b2:	68a1      	ldr	r1, [r4, #8]
 80027b4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f43f add0 	beq.w	800235c <USBPD_PE_StateMachine_SNK+0x3e8>
 80027bc:	2192      	movs	r1, #146	; 0x92
 80027be:	e5ce      	b.n	800235e <USBPD_PE_StateMachine_SNK+0x3ea>
 80027c0:	f000 f99c 	bl	8002afc <.text_16>
 80027c4:	f000 f992 	bl	8002aec <.text_14>
 80027c8:	220a      	movs	r2, #10
 80027ca:	2100      	movs	r1, #0
 80027cc:	47e0      	blx	ip
 80027ce:	6860      	ldr	r0, [r4, #4]
 80027d0:	7801      	ldrb	r1, [r0, #0]
 80027d2:	f001 0103 	and.w	r1, r1, #3
 80027d6:	2902      	cmp	r1, #2
 80027d8:	bf04      	itt	eq
 80027da:	7830      	ldrbeq	r0, [r6, #0]
 80027dc:	f002 ff6c 	bleq	80056b8 <USBPD_PRL_SRCSetSinkNG>
 80027e0:	2101      	movs	r1, #1
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe f988 	bl	8000af8 <PE_ChangePowerRole>
 80027e8:	7a38      	ldrb	r0, [r7, #8]
 80027ea:	2809      	cmp	r0, #9
 80027ec:	d004      	beq.n	80027f8 <USBPD_PE_StateMachine_SNK+0x884>
 80027ee:	f000 f97d 	bl	8002aec <.text_14>
 80027f2:	220b      	movs	r2, #11
 80027f4:	2101      	movs	r1, #1
 80027f6:	47e0      	blx	ip
 80027f8:	2000      	movs	r0, #0
 80027fa:	9000      	str	r0, [sp, #0]
 80027fc:	235b      	movs	r3, #91	; 0x5b
 80027fe:	2206      	movs	r2, #6
 8002800:	f000 f98d 	bl	8002b1e <.text_20+0x2>
 8002804:	b948      	cbnz	r0, 800281a <USBPD_PE_StateMachine_SNK+0x8a6>
 8002806:	68a3      	ldr	r3, [r4, #8]
 8002808:	7830      	ldrb	r0, [r6, #0]
 800280a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800280c:	220c      	movs	r2, #12
 800280e:	2100      	movs	r1, #0
 8002810:	47a8      	blx	r5
 8002812:	f248 0014 	movw	r0, #32788	; 0x8014
 8002816:	8178      	strh	r0, [r7, #10]
 8002818:	2514      	movs	r5, #20
 800281a:	7870      	ldrb	r0, [r6, #1]
 800281c:	285b      	cmp	r0, #91	; 0x5b
 800281e:	d00d      	beq.n	800283c <USBPD_PE_StateMachine_SNK+0x8c8>
 8002820:	2100      	movs	r1, #0
 8002822:	4620      	mov	r0, r4
 8002824:	f7fe f968 	bl	8000af8 <PE_ChangePowerRole>
 8002828:	f000 f960 	bl	8002aec <.text_14>
 800282c:	2206      	movs	r2, #6
 800282e:	2101      	movs	r1, #1
 8002830:	47e0      	blx	ip
 8002832:	2207      	movs	r2, #7
 8002834:	f000 f95a 	bl	8002aec <.text_14>
 8002838:	2100      	movs	r1, #0
 800283a:	47e0      	blx	ip
 800283c:	e4cf      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 800283e:	2001      	movs	r0, #1
 8002840:	9000      	str	r0, [sp, #0]
 8002842:	2358      	movs	r3, #88	; 0x58
 8002844:	220a      	movs	r2, #10
 8002846:	f000 f96a 	bl	8002b1e <.text_20+0x2>
 800284a:	b920      	cbnz	r0, 8002856 <USBPD_PE_StateMachine_SNK+0x8e2>
 800284c:	2008      	movs	r0, #8
 800284e:	f000 f928 	bl	8002aa2 <.text_7>
 8002852:	2202      	movs	r2, #2
 8002854:	e7ee      	b.n	8002834 <USBPD_PE_StateMachine_SNK+0x8c0>
 8002856:	220f      	movs	r2, #15
 8002858:	e7ec      	b.n	8002834 <USBPD_PE_StateMachine_SNK+0x8c0>
 800285a:	f000 f92b 	bl	8002ab4 <.text_9>
 800285e:	d109      	bne.n	8002874 <USBPD_PE_StateMachine_SNK+0x900>
 8002860:	f000 f954 	bl	8002b0c <.text_18>
 8002864:	2803      	cmp	r0, #3
 8002866:	d006      	beq.n	8002876 <USBPD_PE_StateMachine_SNK+0x902>
 8002868:	2804      	cmp	r0, #4
 800286a:	d01a      	beq.n	80028a2 <USBPD_PE_StateMachine_SNK+0x92e>
 800286c:	280c      	cmp	r0, #12
 800286e:	d016      	beq.n	800289e <USBPD_PE_StateMachine_SNK+0x92a>
 8002870:	2810      	cmp	r0, #16
 8002872:	d018      	beq.n	80028a6 <USBPD_PE_StateMachine_SNK+0x932>
 8002874:	e078      	b.n	8002968 <USBPD_PE_StateMachine_SNK+0x9f4>
 8002876:	f000 f921 	bl	8002abc <.text_10>
 800287a:	f000 f901 	bl	8002a80 <.text_4>
 800287e:	7a38      	ldrb	r0, [r7, #8]
 8002880:	2809      	cmp	r0, #9
 8002882:	d004      	beq.n	800288e <USBPD_PE_StateMachine_SNK+0x91a>
 8002884:	f000 f932 	bl	8002aec <.text_14>
 8002888:	2206      	movs	r2, #6
 800288a:	2100      	movs	r1, #0
 800288c:	47e0      	blx	ip
 800288e:	f000 f935 	bl	8002afc <.text_16>
 8002892:	7830      	ldrb	r0, [r6, #0]
 8002894:	213a      	movs	r1, #58	; 0x3a
 8002896:	f7fd fe87 	bl	80005a8 <USBPD_PE_Notification>
 800289a:	2259      	movs	r2, #89	; 0x59
 800289c:	e007      	b.n	80028ae <USBPD_PE_StateMachine_SNK+0x93a>
 800289e:	213b      	movs	r1, #59	; 0x3b
 80028a0:	e002      	b.n	80028a8 <USBPD_PE_StateMachine_SNK+0x934>
 80028a2:	2116      	movs	r1, #22
 80028a4:	e000      	b.n	80028a8 <USBPD_PE_StateMachine_SNK+0x934>
 80028a6:	2117      	movs	r1, #23
 80028a8:	f000 f925 	bl	8002af6 <.text_15>
 80028ac:	2203      	movs	r2, #3
 80028ae:	f000 f93d 	bl	8002b2c <.text_21+0x6>
 80028b2:	e059      	b.n	8002968 <USBPD_PE_StateMachine_SNK+0x9f4>
 80028b4:	2100      	movs	r1, #0
 80028b6:	9104      	str	r1, [sp, #16]
 80028b8:	ab04      	add	r3, sp, #16
 80028ba:	f000 f8ec 	bl	8002a96 <.text_6>
 80028be:	aa05      	add	r2, sp, #20
 80028c0:	47c0      	blx	r8
 80028c2:	9804      	ldr	r0, [sp, #16]
 80028c4:	2104      	movs	r1, #4
 80028c6:	f7fe fe67 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 80028ca:	b108      	cbz	r0, 80028d0 <USBPD_PE_StateMachine_SNK+0x95c>
 80028cc:	2003      	movs	r0, #3
 80028ce:	e4c0      	b.n	8002252 <USBPD_PE_StateMachine_SNK+0x2de>
 80028d0:	9a04      	ldr	r2, [sp, #16]
 80028d2:	2003      	movs	r0, #3
 80028d4:	0892      	lsrs	r2, r2, #2
 80028d6:	2100      	movs	r1, #0
 80028d8:	9001      	str	r0, [sp, #4]
 80028da:	9200      	str	r2, [sp, #0]
 80028dc:	9102      	str	r1, [sp, #8]
 80028de:	ab05      	add	r3, sp, #20
 80028e0:	2201      	movs	r2, #1
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7fe fedf 	bl	80016a6 <PE_Send_DataMessage>
 80028e8:	e479      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 80028ea:	2000      	movs	r0, #0
 80028ec:	2103      	movs	r1, #3
 80028ee:	2201      	movs	r2, #1
 80028f0:	9002      	str	r0, [sp, #8]
 80028f2:	9101      	str	r1, [sp, #4]
 80028f4:	9200      	str	r2, [sp, #0]
 80028f6:	f504 7319 	add.w	r3, r4, #612	; 0x264
 80028fa:	2206      	movs	r2, #6
 80028fc:	2100      	movs	r1, #0
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe fed1 	bl	80016a6 <PE_Send_DataMessage>
 8002904:	2800      	cmp	r0, #0
 8002906:	d1ef      	bne.n	80028e8 <USBPD_PE_StateMachine_SNK+0x974>
 8002908:	215d      	movs	r1, #93	; 0x5d
 800290a:	e6b7      	b.n	800267c <USBPD_PE_StateMachine_SNK+0x708>
 800290c:	2001      	movs	r0, #1
 800290e:	9000      	str	r0, [sp, #0]
 8002910:	2366      	movs	r3, #102	; 0x66
 8002912:	2214      	movs	r2, #20
 8002914:	f000 f903 	bl	8002b1e <.text_20+0x2>
 8002918:	2800      	cmp	r0, #0
 800291a:	d107      	bne.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 800291c:	f8a7 900a 	strh.w	r9, [r7, #10]
 8002920:	214a      	movs	r1, #74	; 0x4a
 8002922:	f000 f8e8 	bl	8002af6 <.text_15>
 8002926:	200b      	movs	r0, #11
 8002928:	251d      	movs	r5, #29
 800292a:	7238      	strb	r0, [r7, #8]
 800292c:	e457      	b.n	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 800292e:	f000 f8c1 	bl	8002ab4 <.text_9>
 8002932:	d119      	bne.n	8002968 <USBPD_PE_StateMachine_SNK+0x9f4>
 8002934:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8002938:	0bc8      	lsrs	r0, r1, #15
 800293a:	d015      	beq.n	8002968 <USBPD_PE_StateMachine_SNK+0x9f4>
 800293c:	f001 011f 	and.w	r1, r1, #31
 8002940:	290c      	cmp	r1, #12
 8002942:	d111      	bne.n	8002968 <USBPD_PE_StateMachine_SNK+0x9f4>
 8002944:	f8da 000c 	ldr.w	r0, [sl, #12]
 8002948:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800294c:	f8dc 8018 	ldr.w	r8, [ip, #24]
 8002950:	1d02      	adds	r2, r0, #4
 8002952:	7830      	ldrb	r0, [r6, #0]
 8002954:	2304      	movs	r3, #4
 8002956:	210a      	movs	r1, #10
 8002958:	47c0      	blx	r8
 800295a:	2203      	movs	r2, #3
 800295c:	f000 f8e6 	bl	8002b2c <.text_21+0x6>
 8002960:	7830      	ldrb	r0, [r6, #0]
 8002962:	214b      	movs	r1, #75	; 0x4b
 8002964:	f7fd fe20 	bl	80005a8 <USBPD_PE_Notification>
 8002968:	f000 f8a0 	bl	8002aac <.text_8>
 800296c:	d1de      	bne.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 800296e:	e02b      	b.n	80029c8 <USBPD_PE_StateMachine_SNK+0xa54>
 8002970:	2101      	movs	r1, #1
 8002972:	9100      	str	r1, [sp, #0]
 8002974:	2339      	movs	r3, #57	; 0x39
 8002976:	f89b 2000 	ldrb.w	r2, [fp]
 800297a:	f000 f8d0 	bl	8002b1e <.text_20+0x2>
 800297e:	2800      	cmp	r0, #0
 8002980:	d1d4      	bne.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 8002982:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8002986:	7238      	strb	r0, [r7, #8]
 8002988:	2144      	movs	r1, #68	; 0x44
 800298a:	f000 f8b4 	bl	8002af6 <.text_15>
 800298e:	e530      	b.n	80023f2 <USBPD_PE_StateMachine_SNK+0x47e>
 8002990:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002994:	2814      	cmp	r0, #20
 8002996:	d014      	beq.n	80029c2 <USBPD_PE_StateMachine_SNK+0xa4e>
 8002998:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 800299c:	0bc0      	lsrs	r0, r0, #15
 800299e:	d007      	beq.n	80029b0 <USBPD_PE_StateMachine_SNK+0xa3c>
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe fec3 	bl	800172c <PE_Check_ExtendedMessage>
 80029a6:	7872      	ldrb	r2, [r6, #1]
 80029a8:	f000 f8c0 	bl	8002b2c <.text_21+0x6>
 80029ac:	2000      	movs	r0, #0
 80029ae:	8178      	strh	r0, [r7, #10]
 80029b0:	f000 f8ac 	bl	8002b0c <.text_18>
 80029b4:	2810      	cmp	r0, #16
 80029b6:	d104      	bne.n	80029c2 <USBPD_PE_StateMachine_SNK+0xa4e>
 80029b8:	2203      	movs	r2, #3
 80029ba:	f000 f8b7 	bl	8002b2c <.text_21+0x6>
 80029be:	2000      	movs	r0, #0
 80029c0:	8178      	strh	r0, [r7, #10]
 80029c2:	f000 f873 	bl	8002aac <.text_8>
 80029c6:	d1b1      	bne.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 80029c8:	2103      	movs	r1, #3
 80029ca:	e4c8      	b.n	800235e <USBPD_PE_StateMachine_SNK+0x3ea>
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7fe ffe7 	bl	80019a0 <PE_SubStateMachine_ExtendedMessages>
 80029d2:	e6a6      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0x7ae>
 80029d4:	a903      	add	r1, sp, #12
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7fe fb28 	bl	800102c <PE_SubStateMachine_Generic>
 80029dc:	e6a1      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0x7ae>
 80029de:	a903      	add	r1, sp, #12
 80029e0:	4620      	mov	r0, r4
 80029e2:	f001 fb50 	bl	8004086 <PE_SubStateMachine_VconnSwap>
 80029e6:	4605      	mov	r5, r0
 80029e8:	f000 f86e 	bl	8002ac8 <.text_11>
 80029ec:	bf0e      	itee	eq
 80029ee:	2101      	moveq	r1, #1
 80029f0:	6820      	ldrne	r0, [r4, #0]
 80029f2:	6801      	ldrne	r1, [r0, #0]
 80029f4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80029f8:	f002 fe71 	bl	80056de <USBPD_PRL_SOPCapability>
 80029fc:	e796      	b.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 80029fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002a02:	4620      	mov	r0, r4
 8002a04:	f002 fbe4 	bl	80051d0 <PE_StateMachine_UVDM>
 8002a08:	e790      	b.n	800292c <USBPD_PE_StateMachine_SNK+0x9b8>
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	9000      	str	r0, [sp, #0]
 8002a0e:	2358      	movs	r3, #88	; 0x58
 8002a10:	2213      	movs	r2, #19
 8002a12:	f000 f884 	bl	8002b1e <.text_20+0x2>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	f47f abe1 	bne.w	80021de <USBPD_PE_StateMachine_SNK+0x26a>
 8002a1c:	2009      	movs	r0, #9
 8002a1e:	7238      	strb	r0, [r7, #8]
 8002a20:	e4e7      	b.n	80023f2 <USBPD_PE_StateMachine_SNK+0x47e>
 8002a22:	a903      	add	r1, sp, #12
 8002a24:	4620      	mov	r0, r4
 8002a26:	f001 f8c5 	bl	8003bb4 <DATAUSB_StateMachine_EnterUSB>
 8002a2a:	e67a      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0x7ae>
 8002a2c:	a903      	add	r1, sp, #12
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f001 f931 	bl	8003c96 <DATAUSB_StateMachine_DataReset>
 8002a34:	e675      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0x7ae>
 8002a36:	f003 fbc0 	bl	80061ba <PE_GENMACH_StateMachine_Run>
 8002a3a:	e672      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0x7ae>
 8002a3c:	6838      	ldr	r0, [r7, #0]
 8002a3e:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8002a42:	b180      	cbz	r0, 8002a66 <USBPD_PE_StateMachine_SNK+0xaf2>
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002a4a:	b138      	cbz	r0, 8002a5c <USBPD_PE_StateMachine_SNK+0xae8>
 8002a4c:	7830      	ldrb	r0, [r6, #0]
 8002a4e:	215b      	movs	r1, #91	; 0x5b
 8002a50:	f7fd fdaa 	bl	80005a8 <USBPD_PE_Notification>
 8002a54:	6838      	ldr	r0, [r7, #0]
 8002a56:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8002a5a:	6038      	str	r0, [r7, #0]
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	7071      	strb	r1, [r6, #1]
 8002a60:	f000 f859 	bl	8002b16 <.text_19+0x4>
 8002a64:	2501      	movs	r5, #1
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	6038      	str	r0, [r7, #0]
 8002a70:	f43f aad2 	beq.w	8002018 <USBPD_PE_StateMachine_SNK+0xa4>
 8002a74:	4628      	mov	r0, r5
 8002a76:	b00d      	add	sp, #52	; 0x34
 8002a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a7c <.text_3>:
 8002a7c:	200001fc 	.word	0x200001fc

08002a80 <.text_4>:
 8002a80:	f248 3084 	movw	r0, #33668	; 0x8384
 8002a84:	8178      	strh	r0, [r7, #10]
 8002a86:	f44f 7561 	mov.w	r5, #900	; 0x384
 8002a8a:	4770      	bx	lr

08002a8c <.text_5>:
 8002a8c:	68a2      	ldr	r2, [r4, #8]
 8002a8e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8002a92:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002a94:	4770      	bx	lr

08002a96 <.text_6>:
 8002a96:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8002a9a:	7830      	ldrb	r0, [r6, #0]
 8002a9c:	f8dc 8014 	ldr.w	r8, [ip, #20]
 8002aa0:	4770      	bx	lr

08002aa2 <.text_7>:
 8002aa2:	7238      	strb	r0, [r7, #8]
 8002aa4:	f8a7 900a 	strh.w	r9, [r7, #10]
 8002aa8:	251d      	movs	r5, #29
 8002aaa:	4770      	bx	lr

08002aac <.text_8>:
 8002aac:	8978      	ldrh	r0, [r7, #10]
 8002aae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ab2:	4770      	bx	lr

08002ab4 <.text_9>:
 8002ab4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ab8:	2811      	cmp	r0, #17
 8002aba:	4770      	bx	lr

08002abc <.text_10>:
 8002abc:	6860      	ldr	r0, [r4, #4]
 8002abe:	6801      	ldr	r1, [r0, #0]
 8002ac0:	f041 0110 	orr.w	r1, r1, #16
 8002ac4:	6001      	str	r1, [r0, #0]
 8002ac6:	4770      	bx	lr

08002ac8 <.text_11>:
 8002ac8:	6860      	ldr	r0, [r4, #4]
 8002aca:	6801      	ldr	r1, [r0, #0]
 8002acc:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	4770      	bx	lr

08002ad4 <.text_12>:
 8002ad4:	6860      	ldr	r0, [r4, #4]
 8002ad6:	6801      	ldr	r1, [r0, #0]
 8002ad8:	f021 0110 	bic.w	r1, r1, #16
 8002adc:	6001      	str	r1, [r0, #0]
 8002ade:	4770      	bx	lr

08002ae0 <.text_13>:
 8002ae0:	6860      	ldr	r0, [r4, #4]
 8002ae2:	78c1      	ldrb	r1, [r0, #3]
 8002ae4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	4770      	bx	lr

08002aec <.text_14>:
 8002aec:	68a3      	ldr	r3, [r4, #8]
 8002aee:	7830      	ldrb	r0, [r6, #0]
 8002af0:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8002af4:	4770      	bx	lr

08002af6 <.text_15>:
 8002af6:	7830      	ldrb	r0, [r6, #0]
 8002af8:	f7fd bd56 	b.w	80005a8 <USBPD_PE_Notification>

08002afc <.text_16>:
 8002afc:	2104      	movs	r1, #4
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7fe bce3 	b.w	80014ca <PE_SetPowerNegotiation>

08002b04 <.text_17>:
 8002b04:	2100      	movs	r1, #0
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7fe bcd7 	b.w	80014ba <PE_CallHardResetCallback>

08002b0c <.text_18>:
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ba25 	b.w	8001f5c <PE_GetCtrlMsg>

08002b12 <.text_19>:
 8002b12:	f88a 0002 	strb.w	r0, [sl, #2]
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7fe bd70 	b.w	80015fc <PE_DebugState>

08002b1c <.text_20>:
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7fe bdb7 	b.w	8001694 <PE_Send_CtrlMessage>

08002b26 <.text_21>:
 8002b26:	2001      	movs	r0, #1
 8002b28:	7238      	strb	r0, [r7, #8]
 8002b2a:	2244      	movs	r2, #68	; 0x44
 8002b2c:	a903      	add	r1, sp, #12
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff b9f4 	b.w	8001f1c <PE_ResetRxEvent>

08002b34 <PE_StateMachine_SNK_ReadyWait>:
 8002b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b38:	460f      	mov	r7, r1
 8002b3a:	2402      	movs	r4, #2
 8002b3c:	4681      	mov	r9, r0
 8002b3e:	7838      	ldrb	r0, [r7, #0]
 8002b40:	2814      	cmp	r0, #20
 8002b42:	f209 263f 	addw	r6, r9, #575	; 0x23f
 8002b46:	d008      	beq.n	8002b5a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002b48:	4648      	mov	r0, r9
 8002b4a:	f7fe ff58 	bl	80019fe <PE_ManageRXEvent>
 8002b4e:	7872      	ldrb	r2, [r6, #1]
 8002b50:	4639      	mov	r1, r7
 8002b52:	4648      	mov	r0, r9
 8002b54:	f7ff f9e2 	bl	8001f1c <PE_ResetRxEvent>
 8002b58:	e08a      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002b5a:	f509 7711 	add.w	r7, r9, #580	; 0x244
 8002b5e:	f209 489c 	addw	r8, r9, #1180	; 0x49c
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	0cc8      	lsrs	r0, r1, #19
 8002b66:	d021      	beq.n	8002bac <PE_StateMachine_SNK_ReadyWait+0x78>
 8002b68:	89b8      	ldrh	r0, [r7, #12]
 8002b6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b6e:	d110      	bne.n	8002b92 <PE_StateMachine_SNK_ReadyWait+0x5e>
 8002b70:	210f      	movs	r1, #15
 8002b72:	7071      	strb	r1, [r6, #1]
 8002b74:	2000      	movs	r0, #0
 8002b76:	9000      	str	r0, [sp, #0]
 8002b78:	7831      	ldrb	r1, [r6, #0]
 8002b7a:	4d3f      	ldr	r5, [pc, #252]	; (8002c78 <.text_23>)
 8002b7c:	682e      	ldr	r6, [r5, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2278      	movs	r2, #120	; 0x78
 8002b82:	2009      	movs	r0, #9
 8002b84:	47b0      	blx	r6
 8002b86:	f898 0000 	ldrb.w	r0, [r8]
 8002b8a:	1c40      	adds	r0, r0, #1
 8002b8c:	f888 0000 	strb.w	r0, [r8]
 8002b90:	e06e      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002b92:	f8b9 0272 	ldrh.w	r0, [r9, #626]	; 0x272
 8002b96:	f3c0 2042 	ubfx	r0, r0, #9, #3
 8002b9a:	eb00 40d1 	add.w	r0, r0, r1, lsr #19
 8002b9e:	2233      	movs	r2, #51	; 0x33
 8002ba0:	fb10 f002 	smulbb	r0, r0, r2
 8002ba4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002ba8:	81b8      	strh	r0, [r7, #12]
 8002baa:	e061      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002bac:	8b38      	ldrh	r0, [r7, #24]
 8002bae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bb2:	d107      	bne.n	8002bc4 <PE_StateMachine_SNK_ReadyWait+0x90>
 8002bb4:	21a8      	movs	r1, #168	; 0xa8
 8002bb6:	7071      	strb	r1, [r6, #1]
 8002bb8:	4648      	mov	r0, r9
 8002bba:	2105      	movs	r1, #5
 8002bbc:	f003 fad8 	bl	8006170 <PE_GENMACH_StateMachine_Init>
 8002bc0:	2400      	movs	r4, #0
 8002bc2:	e055      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002bc4:	8a38      	ldrh	r0, [r7, #16]
 8002bc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002bca:	d106      	bne.n	8002bda <PE_StateMachine_SNK_ReadyWait+0xa6>
 8002bcc:	2245      	movs	r2, #69	; 0x45
 8002bce:	7072      	strb	r2, [r6, #1]
 8002bd0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002bd4:	2400      	movs	r4, #0
 8002bd6:	6039      	str	r1, [r7, #0]
 8002bd8:	e04a      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002bda:	7830      	ldrb	r0, [r6, #0]
 8002bdc:	f7fe f803 	bl	8000be6 <PE_PRL_Control_RxEvent>
 8002be0:	f209 2569 	addw	r5, r9, #617	; 0x269
 8002be4:	bb68      	cbnz	r0, 8002c42 <PE_StateMachine_SNK_ReadyWait+0x10e>
 8002be6:	7868      	ldrb	r0, [r5, #1]
 8002be8:	b358      	cbz	r0, 8002c42 <PE_StateMachine_SNK_ReadyWait+0x10e>
 8002bea:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002bee:	7800      	ldrb	r0, [r0, #0]
 8002bf0:	f000 0103 	and.w	r1, r0, #3
 8002bf4:	2901      	cmp	r1, #1
 8002bf6:	d008      	beq.n	8002c0a <PE_StateMachine_SNK_ReadyWait+0xd6>
 8002bf8:	f000 0003 	and.w	r0, r0, #3
 8002bfc:	2802      	cmp	r0, #2
 8002bfe:	d120      	bne.n	8002c42 <PE_StateMachine_SNK_ReadyWait+0x10e>
 8002c00:	7830      	ldrb	r0, [r6, #0]
 8002c02:	f002 fd66 	bl	80056d2 <USBPD_PRL_IsResistor_SinkTxOK>
 8002c06:	2801      	cmp	r0, #1
 8002c08:	d11b      	bne.n	8002c42 <PE_StateMachine_SNK_ReadyWait+0x10e>
 8002c0a:	78a8      	ldrb	r0, [r5, #2]
 8002c0c:	7028      	strb	r0, [r5, #0]
 8002c0e:	7868      	ldrb	r0, [r5, #1]
 8002c10:	7070      	strb	r0, [r6, #1]
 8002c12:	2845      	cmp	r0, #69	; 0x45
 8002c14:	d104      	bne.n	8002c20 <PE_StateMachine_SNK_ReadyWait+0xec>
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002c1c:	6038      	str	r0, [r7, #0]
 8002c1e:	e006      	b.n	8002c2e <PE_StateMachine_SNK_ReadyWait+0xfa>
 8002c20:	28a8      	cmp	r0, #168	; 0xa8
 8002c22:	d104      	bne.n	8002c2e <PE_StateMachine_SNK_ReadyWait+0xfa>
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	b2c9      	uxtb	r1, r1
 8002c28:	4648      	mov	r0, r9
 8002c2a:	f003 faa1 	bl	8006170 <PE_GENMACH_StateMachine_Init>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	7068      	strb	r0, [r5, #1]
 8002c32:	2400      	movs	r4, #0
 8002c34:	6838      	ldr	r0, [r7, #0]
 8002c36:	69f9      	ldr	r1, [r7, #28]
 8002c38:	6239      	str	r1, [r7, #32]
 8002c3a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8002c3e:	6038      	str	r0, [r7, #0]
 8002c40:	e016      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002c42:	89f8      	ldrh	r0, [r7, #14]
 8002c44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002c48:	d109      	bne.n	8002c5e <PE_StateMachine_SNK_ReadyWait+0x12a>
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	81f9      	strh	r1, [r7, #14]
 8002c4e:	2105      	movs	r1, #5
 8002c50:	f898 0002 	ldrb.w	r0, [r8, #2]
 8002c54:	1c40      	adds	r0, r0, #1
 8002c56:	f888 0002 	strb.w	r0, [r8, #2]
 8002c5a:	7071      	strb	r1, [r6, #1]
 8002c5c:	e008      	b.n	8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002c5e:	4648      	mov	r0, r9
 8002c60:	f7fe fc63 	bl	800152a <PE_CalculateMinTiming>
 8002c64:	4604      	mov	r4, r0
 8002c66:	7868      	ldrb	r0, [r5, #1]
 8002c68:	b110      	cbz	r0, 8002c70 <PE_StateMachine_SNK_ReadyWait+0x13c>
 8002c6a:	2c02      	cmp	r4, #2
 8002c6c:	bf28      	it	cs
 8002c6e:	2402      	movcs	r4, #2
 8002c70:	4620      	mov	r0, r4
 8002c72:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08002c78 <.text_23>:
 8002c78:	20000000 	.word	0x20000000

08002c7c <PE_SNK_ControlSPRPDO>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2300      	movs	r3, #0
 8002c82:	18c4      	adds	r4, r0, r3
 8002c84:	5cc1      	ldrb	r1, [r0, r3]
 8002c86:	7865      	ldrb	r5, [r4, #1]
 8002c88:	18c6      	adds	r6, r0, r3
 8002c8a:	eb01 2405 	add.w	r4, r1, r5, lsl #8
 8002c8e:	18c5      	adds	r5, r0, r3
 8002c90:	78b1      	ldrb	r1, [r6, #2]
 8002c92:	78ee      	ldrb	r6, [r5, #3]
 8002c94:	eb04 4401 	add.w	r4, r4, r1, lsl #16
 8002c98:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8002c9c:	0fa1      	lsrs	r1, r4, #30
 8002c9e:	d106      	bne.n	8002cae <PE_SNK_ControlSPRPDO+0x32>
 8002ca0:	f3c4 2189 	ubfx	r1, r4, #10, #10
 8002ca4:	f240 1491 	movw	r4, #401	; 0x191
 8002ca8:	42a1      	cmp	r1, r4
 8002caa:	bfa8      	it	ge
 8002cac:	2202      	movge	r2, #2
 8002cae:	1d1b      	adds	r3, r3, #4
 8002cb0:	2b1c      	cmp	r3, #28
 8002cb2:	dbe6      	blt.n	8002c82 <PE_SNK_ControlSPRPDO+0x6>
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}

08002cb8 <USBPD_PE_StateMachine_SRC>:
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	4829      	ldr	r0, [pc, #164]	; (8002d64 <USBPD_PE_StateMachine_SRC+0xac>)
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 8002cc8:	f207 223f 	addw	r2, r7, #575	; 0x23f
 8002ccc:	7850      	ldrb	r0, [r2, #1]
 8002cce:	2848      	cmp	r0, #72	; 0x48
 8002cd0:	d12c      	bne.n	8002d2c <USBPD_PE_StateMachine_SRC+0x74>
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	f7fe f85f 	bl	8000d96 <PE_Reset_ZI>
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f7fe f896 	bl	8000e0a <PE_Reset_Counter>
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	7903      	ldrb	r3, [r0, #4]
 8002ce2:	f207 253f 	addw	r5, r7, #575	; 0x23f
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	7828      	ldrb	r0, [r5, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f002 fc58 	bl	80055a4 <USBPD_PRL_SetHeader>
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	7801      	ldrb	r1, [r0, #0]
 8002cf8:	f041 0108 	orr.w	r1, r1, #8
 8002cfc:	7001      	strb	r1, [r0, #0]
 8002cfe:	6838      	ldr	r0, [r7, #0]
 8002d00:	7901      	ldrb	r1, [r0, #4]
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	7802      	ldrb	r2, [r0, #0]
 8002d06:	f361 0201 	bfi	r2, r1, #0, #2
 8002d0a:	7002      	strb	r2, [r0, #0]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	78c1      	ldrb	r1, [r0, #3]
 8002d10:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8002d14:	70c1      	strb	r1, [r0, #3]
 8002d16:	2101      	movs	r1, #1
 8002d18:	7828      	ldrb	r0, [r5, #0]
 8002d1a:	f002 fce0 	bl	80056de <USBPD_PRL_SOPCapability>
 8002d1e:	7828      	ldrb	r0, [r5, #0]
 8002d20:	f003 f819 	bl	8005d56 <USBPD_PRL_Reset>
 8002d24:	2002      	movs	r0, #2
 8002d26:	7068      	strb	r0, [r5, #1]
 8002d28:	f000 fedc 	bl	8003ae4 <.text_23>
 8002d2c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d30:	f207 263f 	addw	r6, r7, #575	; 0x23f
 8002d34:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8002d38:	b140      	cbz	r0, 8002d4c <USBPD_PE_StateMachine_SRC+0x94>
 8002d3a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d3e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002d42:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
 8002d46:	2164      	movs	r1, #100	; 0x64
 8002d48:	f000 fea2 	bl	8003a90 <.text_14>
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	f7fd fedc 	bl	8000b0a <PE_Get_RxEvent>
 8002d52:	2803      	cmp	r0, #3
 8002d54:	f88d 000c 	strb.w	r0, [sp, #12]
 8002d58:	d106      	bne.n	8002d68 <USBPD_PE_StateMachine_SRC+0xb0>
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	b005      	add	sp, #20
 8002d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d62:	bf00      	nop
 8002d64:	200001fc 	.word	0x200001fc
 8002d68:	f88d 400d 	strb.w	r4, [sp, #13]
 8002d6c:	f507 791a 	add.w	r9, r7, #616	; 0x268
 8002d70:	f507 7411 	add.w	r4, r7, #580	; 0x244
 8002d74:	f248 0a1d 	movw	sl, #32797	; 0x801d
 8002d78:	f248 0b1e 	movw	fp, #32798	; 0x801e
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	6801      	ldr	r1, [r0, #0]
 8002d80:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002d84:	2800      	cmp	r0, #0
 8002d86:	f000 8112 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x2f6>
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002d90:	b198      	cbz	r0, 8002dba <USBPD_PE_StateMachine_SRC+0x102>
 8002d92:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002d96:	f002 fc9e 	bl	80056d6 <USBPD_PRL_FastRoleSwapSignalling>
 8002d9a:	20a6      	movs	r0, #166	; 0xa6
 8002d9c:	7070      	strb	r0, [r6, #1]
 8002d9e:	2109      	movs	r1, #9
 8002da0:	7221      	strb	r1, [r4, #8]
 8002da2:	2000      	movs	r0, #0
 8002da4:	f889 0002 	strb.w	r0, [r9, #2]
 8002da8:	f248 0011 	movw	r0, #32785	; 0x8011
 8002dac:	6821      	ldr	r1, [r4, #0]
 8002dae:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002db2:	6021      	str	r1, [r4, #0]
 8002db4:	82e0      	strh	r0, [r4, #22]
 8002db6:	f000 fe95 	bl	8003ae4 <.text_23>
 8002dba:	f899 2002 	ldrb.w	r2, [r9, #2]
 8002dbe:	2a0f      	cmp	r2, #15
 8002dc0:	bf18      	it	ne
 8002dc2:	2a14      	cmpne	r2, #20
 8002dc4:	f04f 0802 	mov.w	r8, #2
 8002dc8:	d107      	bne.n	8002dda <USBPD_PE_StateMachine_SRC+0x122>
 8002dca:	f000 fe8f 	bl	8003aec <.text_24+0x2>
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f889 0002 	strb.w	r0, [r9, #2]
 8002dd4:	6220      	str	r0, [r4, #32]
 8002dd6:	f000 fe85 	bl	8003ae4 <.text_23>
 8002dda:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002dde:	2811      	cmp	r0, #17
 8002de0:	d10e      	bne.n	8002e00 <USBPD_PE_StateMachine_SRC+0x148>
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	7801      	ldrb	r1, [r0, #0]
 8002de6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002dea:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8002dee:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002df2:	4288      	cmp	r0, r1
 8002df4:	d104      	bne.n	8002e00 <USBPD_PE_StateMachine_SRC+0x148>
 8002df6:	2292      	movs	r2, #146	; 0x92
 8002df8:	f000 fe78 	bl	8003aec <.text_24+0x2>
 8002dfc:	f000 fe72 	bl	8003ae4 <.text_23>
 8002e00:	7870      	ldrb	r0, [r6, #1]
 8002e02:	0001      	movs	r1, r0
 8002e04:	f207 4597 	addw	r5, r7, #1175	; 0x497
 8002e08:	f000 80d5 	beq.w	8002fb6 <USBPD_PE_StateMachine_SRC+0x2fe>
 8002e0c:	1e41      	subs	r1, r0, #1
 8002e0e:	d06f      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002e10:	1e49      	subs	r1, r1, #1
 8002e12:	f000 80e1 	beq.w	8002fd8 <USBPD_PE_StateMachine_SRC+0x320>
 8002e16:	1e49      	subs	r1, r1, #1
 8002e18:	2901      	cmp	r1, #1
 8002e1a:	f240 84b3 	bls.w	8003784 <USBPD_PE_StateMachine_SRC+0xacc>
 8002e1e:	1e89      	subs	r1, r1, #2
 8002e20:	f000 8118 	beq.w	8003054 <USBPD_PE_StateMachine_SRC+0x39c>
 8002e24:	1e49      	subs	r1, r1, #1
 8002e26:	f000 811a 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x3a6>
 8002e2a:	1e49      	subs	r1, r1, #1
 8002e2c:	f000 811f 	beq.w	800306e <USBPD_PE_StateMachine_SRC+0x3b6>
 8002e30:	1e49      	subs	r1, r1, #1
 8002e32:	f000 8190 	beq.w	8003156 <USBPD_PE_StateMachine_SRC+0x49e>
 8002e36:	1e49      	subs	r1, r1, #1
 8002e38:	f000 8206 	beq.w	8003248 <USBPD_PE_StateMachine_SRC+0x590>
 8002e3c:	1ec9      	subs	r1, r1, #3
 8002e3e:	f000 824c 	beq.w	80032da <USBPD_PE_StateMachine_SRC+0x622>
 8002e42:	1e49      	subs	r1, r1, #1
 8002e44:	f000 8259 	beq.w	80032fa <USBPD_PE_StateMachine_SRC+0x642>
 8002e48:	1e49      	subs	r1, r1, #1
 8002e4a:	f000 80b9 	beq.w	8002fc0 <USBPD_PE_StateMachine_SRC+0x308>
 8002e4e:	1e49      	subs	r1, r1, #1
 8002e50:	f000 82cc 	beq.w	80033ec <USBPD_PE_StateMachine_SRC+0x734>
 8002e54:	1e49      	subs	r1, r1, #1
 8002e56:	f000 8293 	beq.w	8003380 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002e5a:	1e49      	subs	r1, r1, #1
 8002e5c:	f000 8295 	beq.w	800338a <USBPD_PE_StateMachine_SRC+0x6d2>
 8002e60:	1e49      	subs	r1, r1, #1
 8002e62:	f000 82a0 	beq.w	80033a6 <USBPD_PE_StateMachine_SRC+0x6ee>
 8002e66:	1e49      	subs	r1, r1, #1
 8002e68:	f000 832d 	beq.w	80034c6 <USBPD_PE_StateMachine_SRC+0x80e>
 8002e6c:	1e49      	subs	r1, r1, #1
 8002e6e:	f000 82e8 	beq.w	8003442 <USBPD_PE_StateMachine_SRC+0x78a>
 8002e72:	1e49      	subs	r1, r1, #1
 8002e74:	f000 82ef 	beq.w	8003456 <USBPD_PE_StateMachine_SRC+0x79e>
 8002e78:	1e49      	subs	r1, r1, #1
 8002e7a:	f000 8180 	beq.w	800317e <USBPD_PE_StateMachine_SRC+0x4c6>
 8002e7e:	1e49      	subs	r1, r1, #1
 8002e80:	f000 8304 	beq.w	800348c <USBPD_PE_StateMachine_SRC+0x7d4>
 8002e84:	1e49      	subs	r1, r1, #1
 8002e86:	2901      	cmp	r1, #1
 8002e88:	d932      	bls.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002e8a:	1e89      	subs	r1, r1, #2
 8002e8c:	f000 8340 	beq.w	8003510 <USBPD_PE_StateMachine_SRC+0x858>
 8002e90:	1e49      	subs	r1, r1, #1
 8002e92:	f000 834a 	beq.w	800352a <USBPD_PE_StateMachine_SRC+0x872>
 8002e96:	1e89      	subs	r1, r1, #2
 8002e98:	d02a      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002e9a:	1e49      	subs	r1, r1, #1
 8002e9c:	f000 83e7 	beq.w	800366e <USBPD_PE_StateMachine_SRC+0x9b6>
 8002ea0:	1e49      	subs	r1, r1, #1
 8002ea2:	f000 83f7 	beq.w	8003694 <USBPD_PE_StateMachine_SRC+0x9dc>
 8002ea6:	1e49      	subs	r1, r1, #1
 8002ea8:	f000 841f 	beq.w	80036ea <USBPD_PE_StateMachine_SRC+0xa32>
 8002eac:	1e49      	subs	r1, r1, #1
 8002eae:	f000 843f 	beq.w	8003730 <USBPD_PE_StateMachine_SRC+0xa78>
 8002eb2:	1e49      	subs	r1, r1, #1
 8002eb4:	f000 8368 	beq.w	8003588 <USBPD_PE_StateMachine_SRC+0x8d0>
 8002eb8:	1e89      	subs	r1, r1, #2
 8002eba:	f000 8388 	beq.w	80035ce <USBPD_PE_StateMachine_SRC+0x916>
 8002ebe:	1e49      	subs	r1, r1, #1
 8002ec0:	f000 839e 	beq.w	8003600 <USBPD_PE_StateMachine_SRC+0x948>
 8002ec4:	1e49      	subs	r1, r1, #1
 8002ec6:	f000 83b3 	beq.w	8003630 <USBPD_PE_StateMachine_SRC+0x978>
 8002eca:	1e49      	subs	r1, r1, #1
 8002ecc:	2902      	cmp	r1, #2
 8002ece:	d90f      	bls.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002ed0:	1ec9      	subs	r1, r1, #3
 8002ed2:	f000 8378 	beq.w	80035c6 <USBPD_PE_StateMachine_SRC+0x90e>
 8002ed6:	1e49      	subs	r1, r1, #1
 8002ed8:	f000 84df 	beq.w	800389a <USBPD_PE_StateMachine_SRC+0xbe2>
 8002edc:	1e49      	subs	r1, r1, #1
 8002ede:	d007      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002ee0:	1e49      	subs	r1, r1, #1
 8002ee2:	f000 84eb 	beq.w	80038bc <USBPD_PE_StateMachine_SRC+0xc04>
 8002ee6:	1e49      	subs	r1, r1, #1
 8002ee8:	f000 850a 	beq.w	8003900 <USBPD_PE_StateMachine_SRC+0xc48>
 8002eec:	1e49      	subs	r1, r1, #1
 8002eee:	2901      	cmp	r1, #1
 8002ef0:	f240 853b 	bls.w	800396a <USBPD_PE_StateMachine_SRC+0xcb2>
 8002ef4:	1e89      	subs	r1, r1, #2
 8002ef6:	f000 8534 	beq.w	8003962 <USBPD_PE_StateMachine_SRC+0xcaa>
 8002efa:	3908      	subs	r1, #8
 8002efc:	f000 8510 	beq.w	8003920 <USBPD_PE_StateMachine_SRC+0xc68>
 8002f00:	1e49      	subs	r1, r1, #1
 8002f02:	2903      	cmp	r1, #3
 8002f04:	d9f4      	bls.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f06:	3911      	subs	r1, #17
 8002f08:	d0f2      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f0a:	1e49      	subs	r1, r1, #1
 8002f0c:	f000 80fb 	beq.w	8003106 <USBPD_PE_StateMachine_SRC+0x44e>
 8002f10:	1e49      	subs	r1, r1, #1
 8002f12:	2902      	cmp	r1, #2
 8002f14:	f240 8558 	bls.w	80039c8 <USBPD_PE_StateMachine_SRC+0xd10>
 8002f18:	1f49      	subs	r1, r1, #5
 8002f1a:	d009      	beq.n	8002f30 <USBPD_PE_StateMachine_SRC+0x278>
 8002f1c:	1e89      	subs	r1, r1, #2
 8002f1e:	2903      	cmp	r1, #3
 8002f20:	d906      	bls.n	8002f30 <USBPD_PE_StateMachine_SRC+0x278>
 8002f22:	1f89      	subs	r1, r1, #6
 8002f24:	d004      	beq.n	8002f30 <USBPD_PE_StateMachine_SRC+0x278>
 8002f26:	1e49      	subs	r1, r1, #1
 8002f28:	f000 8416 	beq.w	8003758 <USBPD_PE_StateMachine_SRC+0xaa0>
 8002f2c:	1e49      	subs	r1, r1, #1
 8002f2e:	2902      	cmp	r1, #2
 8002f30:	f240 854f 	bls.w	80039d2 <USBPD_PE_StateMachine_SRC+0xd1a>
 8002f34:	1f89      	subs	r1, r1, #6
 8002f36:	2901      	cmp	r1, #1
 8002f38:	bf84      	itt	hi
 8002f3a:	1f49      	subhi	r1, r1, #5
 8002f3c:	2901      	cmphi	r1, #1
 8002f3e:	d9d7      	bls.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f40:	390d      	subs	r1, #13
 8002f42:	d0d5      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f44:	3912      	subs	r1, #18
 8002f46:	f000 8539 	beq.w	80039bc <USBPD_PE_StateMachine_SRC+0xd04>
 8002f4a:	390c      	subs	r1, #12
 8002f4c:	d03b      	beq.n	8002fc6 <USBPD_PE_StateMachine_SRC+0x30e>
 8002f4e:	1e49      	subs	r1, r1, #1
 8002f50:	2902      	cmp	r1, #2
 8002f52:	d9cd      	bls.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f54:	1ec9      	subs	r1, r1, #3
 8002f56:	f000 81ef 	beq.w	8003338 <USBPD_PE_StateMachine_SRC+0x680>
 8002f5a:	1e49      	subs	r1, r1, #1
 8002f5c:	f000 81ff 	beq.w	800335e <USBPD_PE_StateMachine_SRC+0x6a6>
 8002f60:	1e89      	subs	r1, r1, #2
 8002f62:	d0c5      	beq.n	8002ef0 <USBPD_PE_StateMachine_SRC+0x238>
 8002f64:	1e49      	subs	r1, r1, #1
 8002f66:	d075      	beq.n	8003054 <USBPD_PE_StateMachine_SRC+0x39c>
 8002f68:	1e89      	subs	r1, r1, #2
 8002f6a:	2908      	cmp	r1, #8
 8002f6c:	f240 8502 	bls.w	8003974 <USBPD_PE_StateMachine_SRC+0xcbc>
 8002f70:	390a      	subs	r1, #10
 8002f72:	f000 850f 	beq.w	8003994 <USBPD_PE_StateMachine_SRC+0xcdc>
 8002f76:	1e89      	subs	r1, r1, #2
 8002f78:	a903      	add	r1, sp, #12
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	f000 852e 	beq.w	80039dc <USBPD_PE_StateMachine_SRC+0xd24>
 8002f80:	f001 fba6 	bl	80046d0 <PE_StateMachine_VDM>
 8002f84:	4680      	mov	r8, r0
 8002f86:	f000 fdad 	bl	8003ae4 <.text_23>
 8002f8a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002f8e:	2814      	cmp	r0, #20
 8002f90:	f000 8528 	beq.w	80039e4 <USBPD_PE_StateMachine_SRC+0xd2c>
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7fd fe4f 	bl	8000c38 <PE_Check_AMSConflict>
 8002f9a:	2815      	cmp	r0, #21
 8002f9c:	d101      	bne.n	8002fa2 <USBPD_PE_StateMachine_SRC+0x2ea>
 8002f9e:	f000 fda4 	bl	8003aea <.text_24>
 8002fa2:	f000 fd9f 	bl	8003ae4 <.text_23>
 8002fa6:	f04f 0800 	mov.w	r8, #0
 8002faa:	f000 bd31 	b.w	8003a10 <USBPD_PE_StateMachine_SRC+0xd58>
 8002fae:	f04f 38ff 	mov.w	r8, #4294967295
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	e6d2      	b.n	8002d5c <USBPD_PE_StateMachine_SRC+0xa4>
 8002fb6:	f000 fd7f 	bl	8003ab8 <.text_18>
 8002fba:	215f      	movs	r1, #95	; 0x5f
 8002fbc:	f000 fd68 	bl	8003a90 <.text_14>
 8002fc0:	f04f 38ff 	mov.w	r8, #4294967295
 8002fc4:	e7df      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8002fc6:	f000 fd77 	bl	8003ab8 <.text_18>
 8002fca:	68b8      	ldr	r0, [r7, #8]
 8002fcc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d0f6      	beq.n	8002fc0 <USBPD_PE_StateMachine_SRC+0x308>
 8002fd2:	7830      	ldrb	r0, [r6, #0]
 8002fd4:	4788      	blx	r1
 8002fd6:	e7f3      	b.n	8002fc0 <USBPD_PE_StateMachine_SRC+0x308>
 8002fd8:	f000 fd63 	bl	8003aa2 <.text_16>
 8002fdc:	bf1a      	itte	ne
 8002fde:	6838      	ldrne	r0, [r7, #0]
 8002fe0:	6801      	ldrne	r1, [r0, #0]
 8002fe2:	2101      	moveq	r1, #1
 8002fe4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002fe8:	f002 fb79 	bl	80056de <USBPD_PRL_SOPCapability>
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	7801      	ldrb	r1, [r0, #0]
 8002ff0:	f001 0203 	and.w	r2, r1, #3
 8002ff4:	2a01      	cmp	r2, #1
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2200      	moveq	r2, #0
 8002ffa:	2220      	movne	r2, #32
 8002ffc:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 8003000:	4311      	orrs	r1, r2
 8003002:	7001      	strb	r1, [r0, #0]
 8003004:	2000      	movs	r0, #0
 8003006:	71a8      	strb	r0, [r5, #6]
 8003008:	2101      	movs	r1, #1
 800300a:	f000 fd60 	bl	8003ace <.text_20+0x2>
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	6801      	ldr	r1, [r0, #0]
 8003012:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8003016:	b138      	cbz	r0, 8003028 <USBPD_PE_StateMachine_SRC+0x370>
 8003018:	f248 0014 	movw	r0, #32788	; 0x8014
 800301c:	8160      	strh	r0, [r4, #10]
 800301e:	f04f 0814 	mov.w	r8, #20
 8003022:	2106      	movs	r1, #6
 8003024:	7071      	strb	r1, [r6, #1]
 8003026:	e7ae      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003028:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 800302c:	2800      	cmp	r0, #0
 800302e:	d00a      	beq.n	8003046 <USBPD_PE_StateMachine_SRC+0x38e>
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	7801      	ldrb	r1, [r0, #0]
 8003034:	078a      	lsls	r2, r1, #30
 8003036:	f140 80a0 	bpl.w	800317a <USBPD_PE_StateMachine_SRC+0x4c2>
 800303a:	79e9      	ldrb	r1, [r5, #7]
 800303c:	2914      	cmp	r1, #20
 800303e:	f080 809c 	bcs.w	800317a <USBPD_PE_StateMachine_SRC+0x4c2>
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	2800      	cmp	r0, #0
 8003046:	f000 8098 	beq.w	800317a <USBPD_PE_StateMachine_SRC+0x4c2>
 800304a:	1c49      	adds	r1, r1, #1
 800304c:	71e9      	strb	r1, [r5, #7]
 800304e:	2005      	movs	r0, #5
 8003050:	7070      	strb	r0, [r6, #1]
 8003052:	e798      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003054:	a903      	add	r1, sp, #12
 8003056:	4638      	mov	r0, r7
 8003058:	f000 ff17 	bl	8003e8a <PE_StateMachine_VDMCable>
 800305c:	e792      	b.n	8002f84 <USBPD_PE_StateMachine_SRC+0x2cc>
 800305e:	f000 fd07 	bl	8003a70 <.text_11>
 8003062:	d190      	bne.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003064:	2107      	movs	r1, #7
 8003066:	7071      	strb	r1, [r6, #1]
 8003068:	f04f 0800 	mov.w	r8, #0
 800306c:	e78b      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 800306e:	6820      	ldr	r0, [r4, #0]
 8003070:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003074:	b118      	cbz	r0, 800307e <USBPD_PE_StateMachine_SRC+0x3c6>
 8003076:	7a20      	ldrb	r0, [r4, #8]
 8003078:	1e41      	subs	r1, r0, #1
 800307a:	4189      	sbcs	r1, r1
 800307c:	0fc9      	lsrs	r1, r1, #31
 800307e:	4638      	mov	r0, r7
 8003080:	f000 fd3d 	bl	8003afe <PE_Send_SRCCapabilities>
 8003084:	2805      	cmp	r0, #5
 8003086:	d004      	beq.n	8003092 <USBPD_PE_StateMachine_SRC+0x3da>
 8003088:	2809      	cmp	r0, #9
 800308a:	bf18      	it	ne
 800308c:	281c      	cmpne	r0, #28
 800308e:	d0ed      	beq.n	800306c <USBPD_PE_StateMachine_SRC+0x3b4>
 8003090:	e012      	b.n	80030b8 <USBPD_PE_StateMachine_SRC+0x400>
 8003092:	2001      	movs	r0, #1
 8003094:	7220      	strb	r0, [r4, #8]
 8003096:	2000      	movs	r0, #0
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	f041 0104 	orr.w	r1, r1, #4
 800309e:	6021      	str	r1, [r4, #0]
 80030a0:	71a8      	strb	r0, [r5, #6]
 80030a2:	7168      	strb	r0, [r5, #5]
 80030a4:	f8a4 a00a 	strh.w	sl, [r4, #10]
 80030a8:	2016      	movs	r0, #22
 80030aa:	f04f 081d 	mov.w	r8, #29
 80030ae:	7070      	strb	r0, [r6, #1]
 80030b0:	210f      	movs	r1, #15
 80030b2:	f000 fced 	bl	8003a90 <.text_14>
 80030b6:	e766      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030be:	b980      	cbnz	r0, 80030e2 <USBPD_PE_StateMachine_SRC+0x42a>
 80030c0:	79a8      	ldrb	r0, [r5, #6]
 80030c2:	2833      	cmp	r0, #51	; 0x33
 80030c4:	d219      	bcs.n	80030fa <USBPD_PE_StateMachine_SRC+0x442>
 80030c6:	f248 0196 	movw	r1, #32918	; 0x8096
 80030ca:	8161      	strh	r1, [r4, #10]
 80030cc:	2008      	movs	r0, #8
 80030ce:	7070      	strb	r0, [r6, #1]
 80030d0:	f04f 0896 	mov.w	r8, #150	; 0x96
 80030d4:	89e1      	ldrh	r1, [r4, #14]
 80030d6:	0448      	lsls	r0, r1, #17
 80030d8:	d002      	beq.n	80030e0 <USBPD_PE_StateMachine_SRC+0x428>
 80030da:	89e0      	ldrh	r0, [r4, #14]
 80030dc:	f3c0 080e 	ubfx	r8, r0, #0, #15
 80030e0:	e751      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	7801      	ldrb	r1, [r0, #0]
 80030e6:	f001 0103 	and.w	r1, r1, #3
 80030ea:	2902      	cmp	r1, #2
 80030ec:	bf04      	itt	eq
 80030ee:	7830      	ldrbeq	r0, [r6, #0]
 80030f0:	f002 fae4 	bleq	80056bc <USBPD_PRL_SRCReleaseSinkNG>
 80030f4:	2011      	movs	r0, #17
 80030f6:	7070      	strb	r0, [r6, #1]
 80030f8:	e7b6      	b.n	8003068 <USBPD_PE_StateMachine_SRC+0x3b0>
 80030fa:	7830      	ldrb	r0, [r6, #0]
 80030fc:	2121      	movs	r1, #33	; 0x21
 80030fe:	f7fd fa53 	bl	80005a8 <USBPD_PE_Notification>
 8003102:	2000      	movs	r0, #0
 8003104:	e7a4      	b.n	8003050 <USBPD_PE_StateMachine_SRC+0x398>
 8003106:	4638      	mov	r0, r7
 8003108:	f000 fcf9 	bl	8003afe <PE_Send_SRCCapabilities>
 800310c:	2805      	cmp	r0, #5
 800310e:	d002      	beq.n	8003116 <USBPD_PE_StateMachine_SRC+0x45e>
 8003110:	281c      	cmp	r0, #28
 8003112:	d0e5      	beq.n	80030e0 <USBPD_PE_StateMachine_SRC+0x428>
 8003114:	e01b      	b.n	800314e <USBPD_PE_StateMachine_SRC+0x496>
 8003116:	f000 fcca 	bl	8003aae <.text_17>
 800311a:	b168      	cbz	r0, 8003138 <USBPD_PE_StateMachine_SRC+0x480>
 800311c:	f899 000a 	ldrb.w	r0, [r9, #10]
 8003120:	f000 001f 	and.w	r0, r0, #31
 8003124:	2807      	cmp	r0, #7
 8003126:	d107      	bne.n	8003138 <USBPD_PE_StateMachine_SRC+0x480>
 8003128:	7830      	ldrb	r0, [r6, #0]
 800312a:	210f      	movs	r1, #15
 800312c:	f7fd fa3c 	bl	80005a8 <USBPD_PE_Notification>
 8003130:	2000      	movs	r0, #0
 8003132:	7220      	strb	r0, [r4, #8]
 8003134:	2103      	movs	r1, #3
 8003136:	e775      	b.n	8003024 <USBPD_PE_StateMachine_SRC+0x36c>
 8003138:	f000 fcc8 	bl	8003acc <.text_20>
 800313c:	f8a4 a00a 	strh.w	sl, [r4, #10]
 8003140:	210f      	movs	r1, #15
 8003142:	f000 fca5 	bl	8003a90 <.text_14>
 8003146:	2001      	movs	r0, #1
 8003148:	7220      	strb	r0, [r4, #8]
 800314a:	2116      	movs	r1, #22
 800314c:	e76a      	b.n	8003024 <USBPD_PE_StateMachine_SRC+0x36c>
 800314e:	2000      	movs	r0, #0
 8003150:	7220      	strb	r0, [r4, #8]
 8003152:	2111      	movs	r1, #17
 8003154:	e766      	b.n	8003024 <USBPD_PE_StateMachine_SRC+0x36c>
 8003156:	89e0      	ldrh	r0, [r4, #14]
 8003158:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800315c:	d102      	bne.n	8003164 <USBPD_PE_StateMachine_SRC+0x4ac>
 800315e:	f000 fc77 	bl	8003a50 <.text_8>
 8003162:	7071      	strb	r1, [r6, #1]
 8003164:	f000 fc84 	bl	8003a70 <.text_11>
 8003168:	d1ba      	bne.n	80030e0 <USBPD_PE_StateMachine_SRC+0x428>
 800316a:	6838      	ldr	r0, [r7, #0]
 800316c:	6841      	ldr	r1, [r0, #4]
 800316e:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8003172:	b110      	cbz	r0, 800317a <USBPD_PE_StateMachine_SRC+0x4c2>
 8003174:	79a8      	ldrb	r0, [r5, #6]
 8003176:	1c40      	adds	r0, r0, #1
 8003178:	71a8      	strb	r0, [r5, #6]
 800317a:	2007      	movs	r0, #7
 800317c:	e768      	b.n	8003050 <USBPD_PE_StateMachine_SRC+0x398>
 800317e:	f000 fc73 	bl	8003a68 <.text_10>
 8003182:	f040 812f 	bne.w	80033e4 <USBPD_PE_StateMachine_SRC+0x72c>
 8003186:	f000 fc9d 	bl	8003ac4 <.text_19>
 800318a:	2500      	movs	r5, #0
 800318c:	b118      	cbz	r0, 8003196 <USBPD_PE_StateMachine_SRC+0x4de>
 800318e:	f000 fc8e 	bl	8003aae <.text_17>
 8003192:	b900      	cbnz	r0, 8003196 <USBPD_PE_StateMachine_SRC+0x4de>
 8003194:	2502      	movs	r5, #2
 8003196:	2109      	movs	r1, #9
 8003198:	f000 fc95 	bl	8003ac6 <.text_19+0x2>
 800319c:	2800      	cmp	r0, #0
 800319e:	bf1f      	itttt	ne
 80031a0:	6878      	ldrne	r0, [r7, #4]
 80031a2:	78c1      	ldrbne	r1, [r0, #3]
 80031a4:	f3c1 1040 	ubfxne	r0, r1, #5, #1
 80031a8:	2800      	cmpne	r0, #0
 80031aa:	bf18      	it	ne
 80031ac:	2502      	movne	r5, #2
 80031ae:	d101      	bne.n	80031b4 <USBPD_PE_StateMachine_SRC+0x4fc>
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d03e      	beq.n	8003232 <USBPD_PE_StateMachine_SRC+0x57a>
 80031b4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80031b8:	194a      	adds	r2, r1, r5
 80031ba:	1cc9      	adds	r1, r1, #3
 80031bc:	7810      	ldrb	r0, [r2, #0]
 80031be:	7853      	ldrb	r3, [r2, #1]
 80031c0:	7892      	ldrb	r2, [r2, #2]
 80031c2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80031c6:	5d4b      	ldrb	r3, [r1, r5]
 80031c8:	eb00 4002 	add.w	r0, r0, r2, lsl #16
 80031cc:	eb00 6003 	add.w	r0, r0, r3, lsl #24
 80031d0:	6060      	str	r0, [r4, #4]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	7a0a      	ldrb	r2, [r1, #8]
 80031d6:	07d1      	lsls	r1, r2, #31
 80031d8:	d507      	bpl.n	80031ea <USBPD_PE_StateMachine_SRC+0x532>
 80031da:	f3c0 50c0 	ubfx	r0, r0, #23, #1
 80031de:	b120      	cbz	r0, 80031ea <USBPD_PE_StateMachine_SRC+0x532>
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	6801      	ldr	r1, [r0, #0]
 80031e4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80031e8:	e003      	b.n	80031f2 <USBPD_PE_StateMachine_SRC+0x53a>
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	6801      	ldr	r1, [r0, #0]
 80031ee:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 80031f2:	6001      	str	r1, [r0, #0]
 80031f4:	f8b9 000a 	ldrh.w	r0, [r9, #10]
 80031f8:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80031fc:	7830      	ldrb	r0, [r6, #0]
 80031fe:	f7fd fe37 	bl	8000e70 <PE_ExtRevisionInteroperability>
 8003202:	68bd      	ldr	r5, [r7, #8]
 8003204:	7830      	ldrb	r0, [r6, #0]
 8003206:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800320a:	2304      	movs	r3, #4
 800320c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003210:	2106      	movs	r1, #6
 8003212:	47e0      	blx	ip
 8003214:	f000 fc4b 	bl	8003aae <.text_17>
 8003218:	b148      	cbz	r0, 800322e <USBPD_PE_StateMachine_SRC+0x576>
 800321a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800321e:	68bd      	ldr	r5, [r7, #8]
 8003220:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8003224:	1d82      	adds	r2, r0, #6
 8003226:	7830      	ldrb	r0, [r6, #0]
 8003228:	2304      	movs	r3, #4
 800322a:	211b      	movs	r1, #27
 800322c:	47e0      	blx	ip
 800322e:	2209      	movs	r2, #9
 8003230:	e0d6      	b.n	80033e0 <USBPD_PE_StateMachine_SRC+0x728>
 8003232:	f000 fc47 	bl	8003ac4 <.text_19>
 8003236:	b928      	cbnz	r0, 8003244 <USBPD_PE_StateMachine_SRC+0x58c>
 8003238:	2109      	movs	r1, #9
 800323a:	f000 fc44 	bl	8003ac6 <.text_19+0x2>
 800323e:	2800      	cmp	r0, #0
 8003240:	f000 80d0 	beq.w	80033e4 <USBPD_PE_StateMachine_SRC+0x72c>
 8003244:	220f      	movs	r2, #15
 8003246:	e0cb      	b.n	80033e0 <USBPD_PE_StateMachine_SRC+0x728>
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	7830      	ldrb	r0, [r6, #0]
 800324c:	69d3      	ldr	r3, [r2, #28]
 800324e:	a901      	add	r1, sp, #4
 8003250:	4798      	blx	r3
 8003252:	280a      	cmp	r0, #10
 8003254:	d012      	beq.n	800327c <USBPD_PE_StateMachine_SRC+0x5c4>
 8003256:	280b      	cmp	r0, #11
 8003258:	d032      	beq.n	80032c0 <USBPD_PE_StateMachine_SRC+0x608>
 800325a:	280d      	cmp	r0, #13
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	6801      	ldr	r1, [r0, #0]
 8003260:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8003264:	d131      	bne.n	80032ca <USBPD_PE_StateMachine_SRC+0x612>
 8003266:	2803      	cmp	r0, #3
 8003268:	bf0c      	ite	eq
 800326a:	2303      	moveq	r3, #3
 800326c:	230e      	movne	r3, #14
 800326e:	2000      	movs	r0, #0
 8003270:	9000      	str	r0, [sp, #0]
 8003272:	220c      	movs	r2, #12
 8003274:	2100      	movs	r1, #0
 8003276:	f000 fc3f 	bl	8003af8 <.text_25+0x4>
 800327a:	e684      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 800327c:	f8a4 b00a 	strh.w	fp, [r4, #10]
 8003280:	f04f 081e 	mov.w	r8, #30
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	6801      	ldr	r1, [r0, #0]
 8003288:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800328c:	2801      	cmp	r0, #1
 800328e:	d00c      	beq.n	80032aa <USBPD_PE_StateMachine_SRC+0x5f2>
 8003290:	9801      	ldr	r0, [sp, #4]
 8003292:	2803      	cmp	r0, #3
 8003294:	bf02      	ittt	eq
 8003296:	6820      	ldreq	r0, [r4, #0]
 8003298:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 800329c:	2803      	cmpeq	r0, #3
 800329e:	d104      	bne.n	80032aa <USBPD_PE_StateMachine_SRC+0x5f2>
 80032a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032a4:	8160      	strh	r0, [r4, #10]
 80032a6:	f04f 0800 	mov.w	r8, #0
 80032aa:	2000      	movs	r0, #0
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	230c      	movs	r3, #12
 80032b0:	f000 fc20 	bl	8003af4 <.text_25>
 80032b4:	9801      	ldr	r0, [sp, #4]
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	f360 01c4 	bfi	r1, r0, #3, #2
 80032bc:	6021      	str	r1, [r4, #0]
 80032be:	e662      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 80032c0:	2200      	movs	r2, #0
 80032c2:	9200      	str	r2, [sp, #0]
 80032c4:	230c      	movs	r3, #12
 80032c6:	2202      	movs	r2, #2
 80032c8:	e7d4      	b.n	8003274 <USBPD_PE_StateMachine_SRC+0x5bc>
 80032ca:	2803      	cmp	r0, #3
 80032cc:	bf0c      	ite	eq
 80032ce:	2303      	moveq	r3, #3
 80032d0:	230e      	movne	r3, #14
 80032d2:	2000      	movs	r0, #0
 80032d4:	9000      	str	r0, [sp, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	e7cc      	b.n	8003274 <USBPD_PE_StateMachine_SRC+0x5bc>
 80032da:	f000 fbc9 	bl	8003a70 <.text_11>
 80032de:	d1ee      	bne.n	80032be <USBPD_PE_StateMachine_SRC+0x606>
 80032e0:	f000 fbf4 	bl	8003acc <.text_20>
 80032e4:	68b8      	ldr	r0, [r7, #8]
 80032e6:	6801      	ldr	r1, [r0, #0]
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d0e8      	beq.n	80032be <USBPD_PE_StateMachine_SRC+0x606>
 80032ec:	7830      	ldrb	r0, [r6, #0]
 80032ee:	4788      	blx	r1
 80032f0:	2800      	cmp	r0, #0
 80032f2:	f040 822f 	bne.w	8003754 <USBPD_PE_StateMachine_SRC+0xa9c>
 80032f6:	200d      	movs	r0, #13
 80032f8:	e6aa      	b.n	8003050 <USBPD_PE_StateMachine_SRC+0x398>
 80032fa:	9100      	str	r1, [sp, #0]
 80032fc:	2303      	movs	r3, #3
 80032fe:	2206      	movs	r2, #6
 8003300:	f000 fbfa 	bl	8003af8 <.text_25+0x4>
 8003304:	2800      	cmp	r0, #0
 8003306:	d116      	bne.n	8003336 <USBPD_PE_StateMachine_SRC+0x67e>
 8003308:	2103      	movs	r1, #3
 800330a:	f000 fbe0 	bl	8003ace <.text_20+0x2>
 800330e:	7830      	ldrb	r0, [r6, #0]
 8003310:	2110      	movs	r1, #16
 8003312:	f7fd f949 	bl	80005a8 <USBPD_PE_Notification>
 8003316:	2000      	movs	r0, #0
 8003318:	8220      	strh	r0, [r4, #16]
 800331a:	6820      	ldr	r0, [r4, #0]
 800331c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003320:	2803      	cmp	r0, #3
 8003322:	bf01      	itttt	eq
 8003324:	6878      	ldreq	r0, [r7, #4]
 8003326:	78c1      	ldrbeq	r1, [r0, #3]
 8003328:	f3c1 1040 	ubfxeq	r0, r1, #5, #1
 800332c:	2800      	cmpeq	r0, #0
 800332e:	d102      	bne.n	8003336 <USBPD_PE_StateMachine_SRC+0x67e>
 8003330:	f24b 60b0 	movw	r0, #46768	; 0xb6b0
 8003334:	8220      	strh	r0, [r4, #16]
 8003336:	e626      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003338:	2101      	movs	r1, #1
 800333a:	9100      	str	r1, [sp, #0]
 800333c:	2397      	movs	r3, #151	; 0x97
 800333e:	2202      	movs	r2, #2
 8003340:	f000 fbd9 	bl	8003af6 <.text_25+0x2>
 8003344:	2800      	cmp	r0, #0
 8003346:	d1f6      	bne.n	8003336 <USBPD_PE_StateMachine_SRC+0x67e>
 8003348:	f884 8008 	strb.w	r8, [r4, #8]
 800334c:	2129      	movs	r1, #41	; 0x29
 800334e:	f000 fb9f 	bl	8003a90 <.text_14>
 8003352:	f248 2026 	movw	r0, #33318	; 0x8226
 8003356:	8160      	strh	r0, [r4, #10]
 8003358:	f240 2826 	movw	r8, #550	; 0x226
 800335c:	e613      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 800335e:	f000 fb87 	bl	8003a70 <.text_11>
 8003362:	d1fb      	bne.n	800335c <USBPD_PE_StateMachine_SRC+0x6a4>
 8003364:	7830      	ldrb	r0, [r6, #0]
 8003366:	212a      	movs	r1, #42	; 0x2a
 8003368:	f7fd f91e 	bl	80005a8 <USBPD_PE_Notification>
 800336c:	2000      	movs	r0, #0
 800336e:	9000      	str	r0, [sp, #0]
 8003370:	2303      	movs	r3, #3
 8003372:	2206      	movs	r2, #6
 8003374:	f000 fbbf 	bl	8003af6 <.text_25+0x2>
 8003378:	2800      	cmp	r0, #0
 800337a:	d1ef      	bne.n	800335c <USBPD_PE_StateMachine_SRC+0x6a4>
 800337c:	212e      	movs	r1, #46	; 0x2e
 800337e:	e698      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x3fa>
 8003380:	2000      	movs	r0, #0
 8003382:	9000      	str	r0, [sp, #0]
 8003384:	2307      	movs	r3, #7
 8003386:	2203      	movs	r2, #3
 8003388:	e775      	b.n	8003276 <USBPD_PE_StateMachine_SRC+0x5be>
 800338a:	2000      	movs	r0, #0
 800338c:	9000      	str	r0, [sp, #0]
 800338e:	2312      	movs	r3, #18
 8003390:	f899 1001 	ldrb.w	r1, [r9, #1]
 8003394:	220d      	movs	r2, #13
 8003396:	f000 fbaf 	bl	8003af8 <.text_25+0x4>
 800339a:	2800      	cmp	r0, #0
 800339c:	d1de      	bne.n	800335c <USBPD_PE_StateMachine_SRC+0x6a4>
 800339e:	f000 fb5e 	bl	8003a5e <.text_9+0x2>
 80033a2:	2130      	movs	r1, #48	; 0x30
 80033a4:	e685      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x3fa>
 80033a6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80033aa:	2814      	cmp	r0, #20
 80033ac:	d01a      	beq.n	80033e4 <USBPD_PE_StateMachine_SRC+0x72c>
 80033ae:	f899 1000 	ldrb.w	r1, [r9]
 80033b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80033b6:	4281      	cmp	r1, r0
 80033b8:	d114      	bne.n	80033e4 <USBPD_PE_StateMachine_SRC+0x72c>
 80033ba:	f000 fb8b 	bl	8003ad4 <.text_21>
 80033be:	2803      	cmp	r0, #3
 80033c0:	d110      	bne.n	80033e4 <USBPD_PE_StateMachine_SRC+0x72c>
 80033c2:	7830      	ldrb	r0, [r6, #0]
 80033c4:	2131      	movs	r1, #49	; 0x31
 80033c6:	f7fd f8ef 	bl	80005a8 <USBPD_PE_Notification>
 80033ca:	f899 0000 	ldrb.w	r0, [r9]
 80033ce:	b910      	cbnz	r0, 80033d6 <USBPD_PE_StateMachine_SRC+0x71e>
 80033d0:	2107      	movs	r1, #7
 80033d2:	7071      	strb	r1, [r6, #1]
 80033d4:	e003      	b.n	80033de <USBPD_PE_StateMachine_SRC+0x726>
 80033d6:	2003      	movs	r0, #3
 80033d8:	7070      	strb	r0, [r6, #1]
 80033da:	f04f 0800 	mov.w	r8, #0
 80033de:	7872      	ldrb	r2, [r6, #1]
 80033e0:	f000 fb84 	bl	8003aec <.text_24+0x2>
 80033e4:	f000 fb44 	bl	8003a70 <.text_11>
 80033e8:	d1b8      	bne.n	800335c <USBPD_PE_StateMachine_SRC+0x6a4>
 80033ea:	e1b3      	b.n	8003754 <USBPD_PE_StateMachine_SRC+0xa9c>
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	7801      	ldrb	r1, [r0, #0]
 80033f0:	f001 0103 	and.w	r1, r1, #3
 80033f4:	2902      	cmp	r1, #2
 80033f6:	bf04      	itt	eq
 80033f8:	7830      	ldrbeq	r0, [r6, #0]
 80033fa:	f002 f95f 	bleq	80056bc <USBPD_PRL_SRCReleaseSinkNG>
 80033fe:	2105      	movs	r1, #5
 8003400:	4638      	mov	r0, r7
 8003402:	f7fd fb57 	bl	8000ab4 <PE_Send_RESET>
 8003406:	f000 fb57 	bl	8003ab8 <.text_18>
 800340a:	2100      	movs	r1, #0
 800340c:	7968      	ldrb	r0, [r5, #5]
 800340e:	1c40      	adds	r0, r0, #1
 8003410:	7168      	strb	r0, [r5, #5]
 8003412:	2202      	movs	r2, #2
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 800341a:	6020      	str	r0, [r4, #0]
 800341c:	f889 1002 	strb.w	r1, [r9, #2]
 8003420:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 8003424:	6020      	str	r0, [r4, #0]
 8003426:	f000 fb59 	bl	8003adc <.text_22+0x2>
 800342a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800342e:	2169      	movs	r1, #105	; 0x69
 8003430:	f7fd f8ba 	bl	80005a8 <USBPD_PE_Notification>
 8003434:	f248 001b 	movw	r0, #32795	; 0x801b
 8003438:	8160      	strh	r0, [r4, #10]
 800343a:	f04f 081b 	mov.w	r8, #27
 800343e:	2115      	movs	r1, #21
 8003440:	e5f0      	b.n	8003024 <USBPD_PE_StateMachine_SRC+0x36c>
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	7801      	ldrb	r1, [r0, #0]
 8003446:	f001 0103 	and.w	r1, r1, #3
 800344a:	2902      	cmp	r1, #2
 800344c:	bf04      	itt	eq
 800344e:	7830      	ldrbeq	r0, [r6, #0]
 8003450:	f002 f934 	bleq	80056bc <USBPD_PRL_SRCReleaseSinkNG>
 8003454:	e7e9      	b.n	800342a <USBPD_PE_StateMachine_SRC+0x772>
 8003456:	f000 fb0b 	bl	8003a70 <.text_11>
 800345a:	d158      	bne.n	800350e <USBPD_PE_StateMachine_SRC+0x856>
 800345c:	7969      	ldrb	r1, [r5, #5]
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	2903      	cmp	r1, #3
 8003462:	d303      	bcc.n	800346c <USBPD_PE_StateMachine_SRC+0x7b4>
 8003464:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003468:	bb38      	cbnz	r0, 80034ba <USBPD_PE_StateMachine_SRC+0x802>
 800346a:	e02a      	b.n	80034c2 <USBPD_PE_StateMachine_SRC+0x80a>
 800346c:	f248 218a 	movw	r1, #33418	; 0x828a
 8003470:	8161      	strh	r1, [r4, #10]
 8003472:	2217      	movs	r2, #23
 8003474:	7072      	strb	r2, [r6, #1]
 8003476:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800347a:	1e42      	subs	r2, r0, #1
 800347c:	4192      	sbcs	r2, r2
 800347e:	0fd2      	lsrs	r2, r2, #31
 8003480:	f000 fb2c 	bl	8003adc <.text_22+0x2>
 8003484:	2203      	movs	r2, #3
 8003486:	f000 fb29 	bl	8003adc <.text_22+0x2>
 800348a:	e5ed      	b.n	8003068 <USBPD_PE_StateMachine_SRC+0x3b0>
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003492:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003494:	4798      	blx	r3
 8003496:	2801      	cmp	r0, #1
 8003498:	d106      	bne.n	80034a8 <USBPD_PE_StateMachine_SRC+0x7f0>
 800349a:	f248 3020 	movw	r0, #33568	; 0x8320
 800349e:	8160      	strh	r0, [r4, #10]
 80034a0:	2113      	movs	r1, #19
 80034a2:	f44f 7848 	mov.w	r8, #800	; 0x320
 80034a6:	7071      	strb	r1, [r6, #1]
 80034a8:	f000 fae2 	bl	8003a70 <.text_11>
 80034ac:	d12f      	bne.n	800350e <USBPD_PE_StateMachine_SRC+0x856>
 80034ae:	f000 fb14 	bl	8003ada <.text_22>
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80034b8:	b118      	cbz	r0, 80034c2 <USBPD_PE_StateMachine_SRC+0x80a>
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80034be:	2800      	cmp	r0, #0
 80034c0:	d120      	bne.n	8003504 <USBPD_PE_StateMachine_SRC+0x84c>
 80034c2:	2100      	movs	r1, #0
 80034c4:	e5ae      	b.n	8003024 <USBPD_PE_StateMachine_SRC+0x36c>
 80034c6:	f000 fad3 	bl	8003a70 <.text_11>
 80034ca:	d120      	bne.n	800350e <USBPD_PE_StateMachine_SRC+0x856>
 80034cc:	2204      	movs	r2, #4
 80034ce:	f000 fb05 	bl	8003adc <.text_22+0x2>
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80034d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80034da:	2101      	movs	r1, #1
 80034dc:	4798      	blx	r3
 80034de:	2801      	cmp	r0, #1
 80034e0:	d10b      	bne.n	80034fa <USBPD_PE_StateMachine_SRC+0x842>
 80034e2:	4638      	mov	r0, r7
 80034e4:	f7fd fc10 	bl	8000d08 <PE_Reset_HardReset>
 80034e8:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80034ec:	2168      	movs	r1, #104	; 0x68
 80034ee:	f7fd f85b 	bl	80005a8 <USBPD_PE_Notification>
 80034f2:	2205      	movs	r2, #5
 80034f4:	f000 faf2 	bl	8003adc <.text_22+0x2>
 80034f8:	e63f      	b.n	800317a <USBPD_PE_StateMachine_SRC+0x4c2>
 80034fa:	f000 faee 	bl	8003ada <.text_22>
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003502:	2800      	cmp	r0, #0
 8003504:	f040 8258 	bne.w	80039b8 <USBPD_PE_StateMachine_SRC+0xd00>
 8003508:	2100      	movs	r1, #0
 800350a:	7071      	strb	r1, [r6, #1]
 800350c:	4688      	mov	r8, r1
 800350e:	e53a      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003510:	2001      	movs	r0, #1
 8003512:	9000      	str	r0, [sp, #0]
 8003514:	231b      	movs	r3, #27
 8003516:	2207      	movs	r2, #7
 8003518:	f000 faee 	bl	8003af8 <.text_25+0x4>
 800351c:	2800      	cmp	r0, #0
 800351e:	d1f6      	bne.n	800350e <USBPD_PE_StateMachine_SRC+0x856>
 8003520:	2006      	movs	r0, #6
 8003522:	f000 fa9b 	bl	8003a5c <.text_9>
 8003526:	210b      	movs	r1, #11
 8003528:	e5c3      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x3fa>
 800352a:	f000 fa9d 	bl	8003a68 <.text_10>
 800352e:	d126      	bne.n	800357e <USBPD_PE_StateMachine_SRC+0x8c6>
 8003530:	2101      	movs	r1, #1
 8003532:	f000 fac8 	bl	8003ac6 <.text_19+0x2>
 8003536:	b190      	cbz	r0, 800355e <USBPD_PE_StateMachine_SRC+0x8a6>
 8003538:	68bd      	ldr	r5, [r7, #8]
 800353a:	f8b9 000a 	ldrh.w	r0, [r9, #10]
 800353e:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8003542:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003546:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800354a:	1c82      	adds	r2, r0, #2
 800354c:	7830      	ldrb	r0, [r6, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	2104      	movs	r1, #4
 8003552:	47e0      	blx	ip
 8003554:	2203      	movs	r2, #3
 8003556:	f000 fac9 	bl	8003aec <.text_24+0x2>
 800355a:	210d      	movs	r1, #13
 800355c:	e00d      	b.n	800357a <USBPD_PE_StateMachine_SRC+0x8c2>
 800355e:	f000 fab9 	bl	8003ad4 <.text_21>
 8003562:	2804      	cmp	r0, #4
 8003564:	bf18      	it	ne
 8003566:	2810      	cmpne	r0, #16
 8003568:	d109      	bne.n	800357e <USBPD_PE_StateMachine_SRC+0x8c6>
 800356a:	2003      	movs	r0, #3
 800356c:	7070      	strb	r0, [r6, #1]
 800356e:	2203      	movs	r2, #3
 8003570:	f000 fabc 	bl	8003aec <.text_24+0x2>
 8003574:	f04f 0800 	mov.w	r8, #0
 8003578:	210e      	movs	r1, #14
 800357a:	f000 fa89 	bl	8003a90 <.text_14>
 800357e:	f000 fa77 	bl	8003a70 <.text_11>
 8003582:	d11b      	bne.n	80035bc <USBPD_PE_StateMachine_SRC+0x904>
 8003584:	2103      	movs	r1, #3
 8003586:	e56e      	b.n	8003066 <USBPD_PE_StateMachine_SRC+0x3ae>
 8003588:	68b8      	ldr	r0, [r7, #8]
 800358a:	6881      	ldr	r1, [r0, #8]
 800358c:	b1d9      	cbz	r1, 80035c6 <USBPD_PE_StateMachine_SRC+0x90e>
 800358e:	7830      	ldrb	r0, [r6, #0]
 8003590:	4788      	blx	r1
 8003592:	280a      	cmp	r0, #10
 8003594:	d002      	beq.n	800359c <USBPD_PE_StateMachine_SRC+0x8e4>
 8003596:	280d      	cmp	r0, #13
 8003598:	d011      	beq.n	80035be <USBPD_PE_StateMachine_SRC+0x906>
 800359a:	e014      	b.n	80035c6 <USBPD_PE_StateMachine_SRC+0x90e>
 800359c:	f8a4 b00a 	strh.w	fp, [r4, #10]
 80035a0:	2000      	movs	r0, #0
 80035a2:	9000      	str	r0, [sp, #0]
 80035a4:	2324      	movs	r3, #36	; 0x24
 80035a6:	f000 faa5 	bl	8003af4 <.text_25>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	f04f 081e 	mov.w	r8, #30
 80035b0:	d104      	bne.n	80035bc <USBPD_PE_StateMachine_SRC+0x904>
 80035b2:	f000 fa3f 	bl	8003a34 <.text_5>
 80035b6:	2201      	movs	r2, #1
 80035b8:	2101      	movs	r1, #1
 80035ba:	47a8      	blx	r5
 80035bc:	e4e3      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 80035be:	2000      	movs	r0, #0
 80035c0:	9000      	str	r0, [sp, #0]
 80035c2:	2303      	movs	r3, #3
 80035c4:	e655      	b.n	8003272 <USBPD_PE_StateMachine_SRC+0x5ba>
 80035c6:	2000      	movs	r0, #0
 80035c8:	9000      	str	r0, [sp, #0]
 80035ca:	2303      	movs	r3, #3
 80035cc:	e683      	b.n	80032d6 <USBPD_PE_StateMachine_SRC+0x61e>
 80035ce:	f000 fa4f 	bl	8003a70 <.text_11>
 80035d2:	d1f3      	bne.n	80035bc <USBPD_PE_StateMachine_SRC+0x904>
 80035d4:	f000 fa7a 	bl	8003acc <.text_20>
 80035d8:	f000 fa5d 	bl	8003a96 <.text_15>
 80035dc:	2206      	movs	r2, #6
 80035de:	f000 fa2d 	bl	8003a3c <.text_6>
 80035e2:	f000 fa4f 	bl	8003a84 <.text_13>
 80035e6:	7830      	ldrb	r0, [r6, #0]
 80035e8:	2100      	movs	r1, #0
 80035ea:	f001 fff1 	bl	80055d0 <USBPD_PRL_SetHeaderPowerRole>
 80035ee:	2000      	movs	r0, #0
 80035f0:	9000      	str	r0, [sp, #0]
 80035f2:	2325      	movs	r3, #37	; 0x25
 80035f4:	2206      	movs	r2, #6
 80035f6:	f000 fa7e 	bl	8003af6 <.text_25+0x2>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d1de      	bne.n	80035bc <USBPD_PE_StateMachine_SRC+0x904>
 80035fe:	e08c      	b.n	800371a <USBPD_PE_StateMachine_SRC+0xa62>
 8003600:	f000 fa32 	bl	8003a68 <.text_10>
 8003604:	d106      	bne.n	8003614 <USBPD_PE_StateMachine_SRC+0x95c>
 8003606:	f000 fa65 	bl	8003ad4 <.text_21>
 800360a:	2806      	cmp	r0, #6
 800360c:	d102      	bne.n	8003614 <USBPD_PE_StateMachine_SRC+0x95c>
 800360e:	2226      	movs	r2, #38	; 0x26
 8003610:	f000 fa6c 	bl	8003aec <.text_24+0x2>
 8003614:	f000 fa2c 	bl	8003a70 <.text_11>
 8003618:	d1d0      	bne.n	80035bc <USBPD_PE_StateMachine_SRC+0x904>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800361e:	2800      	cmp	r0, #0
 8003620:	f040 81ca 	bne.w	80039b8 <USBPD_PE_StateMachine_SRC+0xd00>
 8003624:	7830      	ldrb	r0, [r6, #0]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	220a      	movs	r2, #10
 800362a:	2101      	movs	r1, #1
 800362c:	4798      	blx	r3
 800362e:	e091      	b.n	8003754 <USBPD_PE_StateMachine_SRC+0xa9c>
 8003630:	4638      	mov	r0, r7
 8003632:	f7fd fa61 	bl	8000af8 <PE_ChangePowerRole>
 8003636:	f000 fa06 	bl	8003a46 <.text_7>
 800363a:	220d      	movs	r2, #13
 800363c:	2100      	movs	r1, #0
 800363e:	47c0      	blx	r8
 8003640:	7830      	ldrb	r0, [r6, #0]
 8003642:	2114      	movs	r1, #20
 8003644:	f7fc ffb0 	bl	80005a8 <USBPD_PE_Notification>
 8003648:	f000 f9fd 	bl	8003a46 <.text_7>
 800364c:	220e      	movs	r2, #14
 800364e:	2100      	movs	r1, #0
 8003650:	47c0      	blx	r8
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	7801      	ldrb	r1, [r0, #0]
 8003656:	f001 0103 	and.w	r1, r1, #3
 800365a:	2901      	cmp	r1, #1
 800365c:	bf04      	itt	eq
 800365e:	f89d 000d 	ldrbeq.w	r0, [sp, #13]
 8003662:	f002 f83c 	bleq	80056de <USBPD_PRL_SOPCapability>
 8003666:	4638      	mov	r0, r7
 8003668:	f7fd fbd4 	bl	8000e14 <PE_Reset_StateMachine>
 800366c:	e4fc      	b.n	8003068 <USBPD_PE_StateMachine_SRC+0x3b0>
 800366e:	2001      	movs	r0, #1
 8003670:	9000      	str	r0, [sp, #0]
 8003672:	231f      	movs	r3, #31
 8003674:	220a      	movs	r2, #10
 8003676:	f000 fa3f 	bl	8003af8 <.text_25+0x4>
 800367a:	2800      	cmp	r0, #0
 800367c:	d157      	bne.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 800367e:	2008      	movs	r0, #8
 8003680:	7220      	strb	r0, [r4, #8]
 8003682:	f8a4 a00a 	strh.w	sl, [r4, #10]
 8003686:	2202      	movs	r2, #2
 8003688:	f000 f9d8 	bl	8003a3c <.text_6>
 800368c:	f04f 081d 	mov.w	r8, #29
 8003690:	2139      	movs	r1, #57	; 0x39
 8003692:	e50e      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x3fa>
 8003694:	f000 f9e8 	bl	8003a68 <.text_10>
 8003698:	d123      	bne.n	80036e2 <USBPD_PE_StateMachine_SRC+0xa2a>
 800369a:	f000 fa1b 	bl	8003ad4 <.text_21>
 800369e:	2803      	cmp	r0, #3
 80036a0:	d006      	beq.n	80036b0 <USBPD_PE_StateMachine_SRC+0x9f8>
 80036a2:	2804      	cmp	r0, #4
 80036a4:	d011      	beq.n	80036ca <USBPD_PE_StateMachine_SRC+0xa12>
 80036a6:	280c      	cmp	r0, #12
 80036a8:	d008      	beq.n	80036bc <USBPD_PE_StateMachine_SRC+0xa04>
 80036aa:	2810      	cmp	r0, #16
 80036ac:	d011      	beq.n	80036d2 <USBPD_PE_StateMachine_SRC+0xa1a>
 80036ae:	e018      	b.n	80036e2 <USBPD_PE_StateMachine_SRC+0xa2a>
 80036b0:	7830      	ldrb	r0, [r6, #0]
 80036b2:	213a      	movs	r1, #58	; 0x3a
 80036b4:	f7fc ff78 	bl	80005a8 <USBPD_PE_Notification>
 80036b8:	2220      	movs	r2, #32
 80036ba:	e010      	b.n	80036de <USBPD_PE_StateMachine_SRC+0xa26>
 80036bc:	f000 f9ba 	bl	8003a34 <.text_5>
 80036c0:	2205      	movs	r2, #5
 80036c2:	2101      	movs	r1, #1
 80036c4:	47a8      	blx	r5
 80036c6:	213b      	movs	r1, #59	; 0x3b
 80036c8:	e006      	b.n	80036d8 <USBPD_PE_StateMachine_SRC+0xa20>
 80036ca:	f000 f9d5 	bl	8003a78 <.text_12>
 80036ce:	2116      	movs	r1, #22
 80036d0:	e002      	b.n	80036d8 <USBPD_PE_StateMachine_SRC+0xa20>
 80036d2:	f000 f9d1 	bl	8003a78 <.text_12>
 80036d6:	2117      	movs	r1, #23
 80036d8:	f000 f9da 	bl	8003a90 <.text_14>
 80036dc:	2203      	movs	r2, #3
 80036de:	f000 fa05 	bl	8003aec <.text_24+0x2>
 80036e2:	f000 f9c5 	bl	8003a70 <.text_11>
 80036e6:	d122      	bne.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 80036e8:	e74c      	b.n	8003584 <USBPD_PE_StateMachine_SRC+0x8cc>
 80036ea:	f000 f9d4 	bl	8003a96 <.text_15>
 80036ee:	7a20      	ldrb	r0, [r4, #8]
 80036f0:	2809      	cmp	r0, #9
 80036f2:	d004      	beq.n	80036fe <USBPD_PE_StateMachine_SRC+0xa46>
 80036f4:	f000 f99e 	bl	8003a34 <.text_5>
 80036f8:	2206      	movs	r2, #6
 80036fa:	2101      	movs	r1, #1
 80036fc:	47a8      	blx	r5
 80036fe:	f000 f9c1 	bl	8003a84 <.text_13>
 8003702:	7830      	ldrb	r0, [r6, #0]
 8003704:	2100      	movs	r1, #0
 8003706:	f001 ff63 	bl	80055d0 <USBPD_PRL_SetHeaderPowerRole>
 800370a:	2000      	movs	r0, #0
 800370c:	9000      	str	r0, [sp, #0]
 800370e:	2321      	movs	r3, #33	; 0x21
 8003710:	2206      	movs	r2, #6
 8003712:	f000 f9f0 	bl	8003af6 <.text_25+0x2>
 8003716:	2800      	cmp	r0, #0
 8003718:	d109      	bne.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 800371a:	f000 f994 	bl	8003a46 <.text_7>
 800371e:	2208      	movs	r2, #8
 8003720:	2101      	movs	r1, #1
 8003722:	47c0      	blx	r8
 8003724:	f248 10b8 	movw	r0, #33208	; 0x81b8
 8003728:	8160      	strh	r0, [r4, #10]
 800372a:	f44f 78dc 	mov.w	r8, #440	; 0x1b8
 800372e:	e42a      	b.n	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003730:	f000 f99a 	bl	8003a68 <.text_10>
 8003734:	d106      	bne.n	8003744 <USBPD_PE_StateMachine_SRC+0xa8c>
 8003736:	f000 f9cd 	bl	8003ad4 <.text_21>
 800373a:	2806      	cmp	r0, #6
 800373c:	d102      	bne.n	8003744 <USBPD_PE_StateMachine_SRC+0xa8c>
 800373e:	2226      	movs	r2, #38	; 0x26
 8003740:	f000 f9d4 	bl	8003aec <.text_24+0x2>
 8003744:	f000 f994 	bl	8003a70 <.text_11>
 8003748:	d1f1      	bne.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800374e:	2800      	cmp	r0, #0
 8003750:	f040 8132 	bne.w	80039b8 <USBPD_PE_StateMachine_SRC+0xd00>
 8003754:	210f      	movs	r1, #15
 8003756:	e486      	b.n	8003066 <USBPD_PE_StateMachine_SRC+0x3ae>
 8003758:	f000 f98a 	bl	8003a70 <.text_11>
 800375c:	d1e7      	bne.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 800375e:	f000 f969 	bl	8003a34 <.text_5>
 8003762:	220e      	movs	r2, #14
 8003764:	2101      	movs	r1, #1
 8003766:	47a8      	blx	r5
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	7801      	ldrb	r1, [r0, #0]
 800376c:	f001 0103 	and.w	r1, r1, #3
 8003770:	2902      	cmp	r1, #2
 8003772:	bf04      	itt	eq
 8003774:	7830      	ldrbeq	r0, [r6, #0]
 8003776:	f001 ffa1 	bleq	80056bc <USBPD_PRL_SRCReleaseSinkNG>
 800377a:	4638      	mov	r0, r7
 800377c:	f7fd fb4a 	bl	8000e14 <PE_Reset_StateMachine>
 8003780:	2115      	movs	r1, #21
 8003782:	e496      	b.n	80030b2 <USBPD_PE_StateMachine_SRC+0x3fa>
 8003784:	2803      	cmp	r0, #3
 8003786:	d118      	bne.n	80037ba <USBPD_PE_StateMachine_SRC+0xb02>
 8003788:	2000      	movs	r0, #0
 800378a:	7220      	strb	r0, [r4, #8]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	7808      	ldrb	r0, [r1, #0]
 8003790:	f000 0003 	and.w	r0, r0, #3
 8003794:	2802      	cmp	r0, #2
 8003796:	bf04      	itt	eq
 8003798:	7830      	ldrbeq	r0, [r6, #0]
 800379a:	f001 ff8f 	bleq	80056bc <USBPD_PRL_SRCReleaseSinkNG>
 800379e:	2004      	movs	r0, #4
 80037a0:	7070      	strb	r0, [r6, #1]
 80037a2:	2167      	movs	r1, #103	; 0x67
 80037a4:	f000 f974 	bl	8003a90 <.text_14>
 80037a8:	f000 f981 	bl	8003aae <.text_17>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	bf19      	ittee	ne
 80037b0:	f248 306b 	movwne	r0, #33643	; 0x836b
 80037b4:	8320      	strhne	r0, [r4, #24]
 80037b6:	2100      	moveq	r1, #0
 80037b8:	8321      	strheq	r1, [r4, #24]
 80037ba:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80037be:	2814      	cmp	r0, #20
 80037c0:	d00a      	beq.n	80037d8 <USBPD_PE_StateMachine_SRC+0xb20>
 80037c2:	f000 f974 	bl	8003aae <.text_17>
 80037c6:	b108      	cbz	r0, 80037cc <USBPD_PE_StateMachine_SRC+0xb14>
 80037c8:	2000      	movs	r0, #0
 80037ca:	8320      	strh	r0, [r4, #24]
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7fe f916 	bl	80019fe <PE_ManageRXEvent>
 80037d2:	f000 f98a 	bl	8003aea <.text_24>
 80037d6:	e7aa      	b.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	0cc0      	lsrs	r0, r0, #19
 80037dc:	d026      	beq.n	800382c <USBPD_PE_StateMachine_SRC+0xb74>
 80037de:	89a0      	ldrh	r0, [r4, #12]
 80037e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80037e4:	d110      	bne.n	8003808 <USBPD_PE_StateMachine_SRC+0xb50>
 80037e6:	210f      	movs	r1, #15
 80037e8:	7071      	strb	r1, [r6, #1]
 80037ea:	2000      	movs	r0, #0
 80037ec:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8003a24 <.text_3>
 80037f0:	f8d8 c000 	ldr.w	ip, [r8]
 80037f4:	9000      	str	r0, [sp, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	7831      	ldrb	r1, [r6, #0]
 80037fa:	2278      	movs	r2, #120	; 0x78
 80037fc:	2009      	movs	r0, #9
 80037fe:	47e0      	blx	ip
 8003800:	7968      	ldrb	r0, [r5, #5]
 8003802:	1c40      	adds	r0, r0, #1
 8003804:	7168      	strb	r0, [r5, #5]
 8003806:	e42f      	b.n	8003068 <USBPD_PE_StateMachine_SRC+0x3b0>
 8003808:	f000 f90e 	bl	8003a28 <.text_4>
 800380c:	2033      	movs	r0, #51	; 0x33
 800380e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003812:	fb11 f300 	smulbb	r3, r1, r0
 8003816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381a:	81a3      	strh	r3, [r4, #12]
 800381c:	f000 f904 	bl	8003a28 <.text_4>
 8003820:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003824:	4348      	muls	r0, r1
 8003826:	fa1f f880 	uxth.w	r8, r0
 800382a:	e780      	b.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 800382c:	8a20      	ldrh	r0, [r4, #16]
 800382e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003832:	d008      	beq.n	8003846 <USBPD_PE_StateMachine_SRC+0xb8e>
 8003834:	8b20      	ldrh	r0, [r4, #24]
 8003836:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800383a:	d106      	bne.n	800384a <USBPD_PE_StateMachine_SRC+0xb92>
 800383c:	f000 f937 	bl	8003aae <.text_17>
 8003840:	2800      	cmp	r0, #0
 8003842:	f43f aba0 	beq.w	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003846:	200f      	movs	r0, #15
 8003848:	e455      	b.n	80030f6 <USBPD_PE_StateMachine_SRC+0x43e>
 800384a:	7830      	ldrb	r0, [r6, #0]
 800384c:	f7fd f9cb 	bl	8000be6 <PE_PRL_Control_RxEvent>
 8003850:	b9b8      	cbnz	r0, 8003882 <USBPD_PE_StateMachine_SRC+0xbca>
 8003852:	f899 0002 	ldrb.w	r0, [r9, #2]
 8003856:	b1a0      	cbz	r0, 8003882 <USBPD_PE_StateMachine_SRC+0xbca>
 8003858:	f899 1003 	ldrb.w	r1, [r9, #3]
 800385c:	f889 1001 	strb.w	r1, [r9, #1]
 8003860:	7070      	strb	r0, [r6, #1]
 8003862:	2200      	movs	r2, #0
 8003864:	f889 2002 	strb.w	r2, [r9, #2]
 8003868:	28a8      	cmp	r0, #168	; 0xa8
 800386a:	69e1      	ldr	r1, [r4, #28]
 800386c:	6221      	str	r1, [r4, #32]
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003874:	6022      	str	r2, [r4, #0]
 8003876:	d1c6      	bne.n	8003806 <USBPD_PE_StateMachine_SRC+0xb4e>
 8003878:	b2c9      	uxtb	r1, r1
 800387a:	4638      	mov	r0, r7
 800387c:	f002 fc78 	bl	8006170 <PE_GENMACH_StateMachine_Init>
 8003880:	e7c1      	b.n	8003806 <USBPD_PE_StateMachine_SRC+0xb4e>
 8003882:	89e0      	ldrh	r0, [r4, #14]
 8003884:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003888:	d103      	bne.n	8003892 <USBPD_PE_StateMachine_SRC+0xbda>
 800388a:	2100      	movs	r1, #0
 800388c:	f000 f8e0 	bl	8003a50 <.text_8>
 8003890:	e761      	b.n	8003756 <USBPD_PE_StateMachine_SRC+0xa9e>
 8003892:	4638      	mov	r0, r7
 8003894:	f7fd fe49 	bl	800152a <PE_CalculateMinTiming>
 8003898:	e0a2      	b.n	80039e0 <USBPD_PE_StateMachine_SRC+0xd28>
 800389a:	2000      	movs	r0, #0
 800389c:	2103      	movs	r1, #3
 800389e:	2201      	movs	r2, #1
 80038a0:	9002      	str	r0, [sp, #8]
 80038a2:	9101      	str	r1, [sp, #4]
 80038a4:	9200      	str	r2, [sp, #0]
 80038a6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80038aa:	2206      	movs	r2, #6
 80038ac:	2100      	movs	r1, #0
 80038ae:	4638      	mov	r0, r7
 80038b0:	f7fd fef9 	bl	80016a6 <PE_Send_DataMessage>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d12c      	bne.n	8003912 <USBPD_PE_StateMachine_SRC+0xc5a>
 80038b8:	215d      	movs	r1, #93	; 0x5d
 80038ba:	e762      	b.n	8003782 <USBPD_PE_StateMachine_SRC+0xaca>
 80038bc:	2000      	movs	r0, #0
 80038be:	9002      	str	r0, [sp, #8]
 80038c0:	ab02      	add	r3, sp, #8
 80038c2:	68bd      	ldr	r5, [r7, #8]
 80038c4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80038c8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80038cc:	aa04      	add	r2, sp, #16
 80038ce:	210a      	movs	r1, #10
 80038d0:	47e0      	blx	ip
 80038d2:	f000 f96b 	bl	8003bac <.text_29>
 80038d6:	b988      	cbnz	r0, 80038fc <USBPD_PE_StateMachine_SRC+0xc44>
 80038d8:	9a02      	ldr	r2, [sp, #8]
 80038da:	a904      	add	r1, sp, #16
 80038dc:	f107 0014 	add.w	r0, r7, #20
 80038e0:	f016 fd37 	bl	801a352 <__aeabi_memcpy>
 80038e4:	2000      	movs	r0, #0
 80038e6:	2103      	movs	r1, #3
 80038e8:	9001      	str	r0, [sp, #4]
 80038ea:	9100      	str	r1, [sp, #0]
 80038ec:	2308      	movs	r3, #8
 80038ee:	220c      	movs	r2, #12
 80038f0:	2100      	movs	r1, #0
 80038f2:	4638      	mov	r0, r7
 80038f4:	f7fe f848 	bl	8001988 <PE_Send_ExtendedMessage>
 80038f8:	214c      	movs	r1, #76	; 0x4c
 80038fa:	e742      	b.n	8003782 <USBPD_PE_StateMachine_SRC+0xaca>
 80038fc:	2001      	movs	r0, #1
 80038fe:	e4fb      	b.n	80032f8 <USBPD_PE_StateMachine_SRC+0x640>
 8003900:	2101      	movs	r1, #1
 8003902:	9100      	str	r1, [sp, #0]
 8003904:	2339      	movs	r3, #57	; 0x39
 8003906:	782a      	ldrb	r2, [r5, #0]
 8003908:	f899 1003 	ldrb.w	r1, [r9, #3]
 800390c:	f000 f8f4 	bl	8003af8 <.text_25+0x4>
 8003910:	2800      	cmp	r0, #0
 8003912:	f47f ab38 	bne.w	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 8003916:	7868      	ldrb	r0, [r5, #1]
 8003918:	f000 f8a0 	bl	8003a5c <.text_9>
 800391c:	2144      	movs	r1, #68	; 0x44
 800391e:	e730      	b.n	8003782 <USBPD_PE_StateMachine_SRC+0xaca>
 8003920:	f000 f8a6 	bl	8003a70 <.text_11>
 8003924:	bf04      	itt	eq
 8003926:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800392a:	2814      	cmpeq	r0, #20
 800392c:	f43f ae2a 	beq.w	8003584 <USBPD_PE_StateMachine_SRC+0x8cc>
 8003930:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003934:	2814      	cmp	r0, #20
 8003936:	f43f ab26 	beq.w	8002f86 <USBPD_PE_StateMachine_SRC+0x2ce>
 800393a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800393e:	0bc8      	lsrs	r0, r1, #15
 8003940:	d003      	beq.n	800394a <USBPD_PE_StateMachine_SRC+0xc92>
 8003942:	4638      	mov	r0, r7
 8003944:	f7fd fef2 	bl	800172c <PE_Check_ExtendedMessage>
 8003948:	e743      	b.n	80037d2 <USBPD_PE_StateMachine_SRC+0xb1a>
 800394a:	f001 011f 	and.w	r1, r1, #31
 800394e:	2910      	cmp	r1, #16
 8003950:	f47f ae18 	bne.w	8003584 <USBPD_PE_StateMachine_SRC+0x8cc>
 8003954:	2203      	movs	r2, #3
 8003956:	f000 f8c9 	bl	8003aec <.text_24+0x2>
 800395a:	2000      	movs	r0, #0
 800395c:	8160      	strh	r0, [r4, #10]
 800395e:	2159      	movs	r1, #89	; 0x59
 8003960:	e70f      	b.n	8003782 <USBPD_PE_StateMachine_SRC+0xaca>
 8003962:	4638      	mov	r0, r7
 8003964:	f7fe f81c 	bl	80019a0 <PE_SubStateMachine_ExtendedMessages>
 8003968:	e03a      	b.n	80039e0 <USBPD_PE_StateMachine_SRC+0xd28>
 800396a:	a903      	add	r1, sp, #12
 800396c:	4638      	mov	r0, r7
 800396e:	f7fd fb5d 	bl	800102c <PE_SubStateMachine_Generic>
 8003972:	e035      	b.n	80039e0 <USBPD_PE_StateMachine_SRC+0xd28>
 8003974:	a903      	add	r1, sp, #12
 8003976:	4638      	mov	r0, r7
 8003978:	f000 fb85 	bl	8004086 <PE_SubStateMachine_VconnSwap>
 800397c:	4680      	mov	r8, r0
 800397e:	f000 f890 	bl	8003aa2 <.text_16>
 8003982:	bf0e      	itee	eq
 8003984:	2101      	moveq	r1, #1
 8003986:	6838      	ldrne	r0, [r7, #0]
 8003988:	6801      	ldrne	r1, [r0, #0]
 800398a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800398e:	f001 fea6 	bl	80056de <USBPD_PRL_SOPCapability>
 8003992:	e6cc      	b.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 8003994:	f000 f868 	bl	8003a68 <.text_10>
 8003998:	d10a      	bne.n	80039b0 <USBPD_PE_StateMachine_SRC+0xcf8>
 800399a:	f000 f89b 	bl	8003ad4 <.text_21>
 800399e:	2813      	cmp	r0, #19
 80039a0:	d106      	bne.n	80039b0 <USBPD_PE_StateMachine_SRC+0xcf8>
 80039a2:	f000 f8a2 	bl	8003aea <.text_24>
 80039a6:	2000      	movs	r0, #0
 80039a8:	9000      	str	r0, [sp, #0]
 80039aa:	2320      	movs	r3, #32
 80039ac:	f000 f8a2 	bl	8003af4 <.text_25>
 80039b0:	8ae0      	ldrh	r0, [r4, #22]
 80039b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80039b6:	d1ac      	bne.n	8003912 <USBPD_PE_StateMachine_SRC+0xc5a>
 80039b8:	2192      	movs	r1, #146	; 0x92
 80039ba:	e6cc      	b.n	8003756 <USBPD_PE_StateMachine_SRC+0xa9e>
 80039bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80039c0:	4638      	mov	r0, r7
 80039c2:	f001 fc05 	bl	80051d0 <PE_StateMachine_UVDM>
 80039c6:	e6b2      	b.n	800372e <USBPD_PE_StateMachine_SRC+0xa76>
 80039c8:	a903      	add	r1, sp, #12
 80039ca:	4638      	mov	r0, r7
 80039cc:	f000 f8f2 	bl	8003bb4 <DATAUSB_StateMachine_EnterUSB>
 80039d0:	e006      	b.n	80039e0 <USBPD_PE_StateMachine_SRC+0xd28>
 80039d2:	a903      	add	r1, sp, #12
 80039d4:	4638      	mov	r0, r7
 80039d6:	f000 f95e 	bl	8003c96 <DATAUSB_StateMachine_DataReset>
 80039da:	e001      	b.n	80039e0 <USBPD_PE_StateMachine_SRC+0xd28>
 80039dc:	f002 fbed 	bl	80061ba <PE_GENMACH_StateMachine_Run>
 80039e0:	f7ff bad0 	b.w	8002f84 <USBPD_PE_StateMachine_SRC+0x2cc>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80039ea:	b188      	cbz	r0, 8003a10 <USBPD_PE_StateMachine_SRC+0xd58>
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80039f2:	b138      	cbz	r0, 8003a04 <USBPD_PE_StateMachine_SRC+0xd4c>
 80039f4:	7830      	ldrb	r0, [r6, #0]
 80039f6:	215b      	movs	r1, #91	; 0x5b
 80039f8:	f7fc fdd6 	bl	80005a8 <USBPD_PE_Notification>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8003a02:	6020      	str	r0, [r4, #0]
 8003a04:	2103      	movs	r1, #3
 8003a06:	7071      	strb	r1, [r6, #1]
 8003a08:	f000 f86c 	bl	8003ae4 <.text_23>
 8003a0c:	f04f 0801 	mov.w	r8, #1
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8003a16:	f1b8 0f00 	cmp.w	r8, #0
 8003a1a:	6020      	str	r0, [r4, #0]
 8003a1c:	f43f a9ae 	beq.w	8002d7c <USBPD_PE_StateMachine_SRC+0xc4>
 8003a20:	f7ff bac7 	b.w	8002fb2 <USBPD_PE_StateMachine_SRC+0x2fa>

08003a24 <.text_3>:
 8003a24:	20000000 	.word	0x20000000

08003a28 <.text_4>:
 8003a28:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003a32:	4770      	bx	lr

08003a34 <.text_5>:
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	7830      	ldrb	r0, [r6, #0]
 8003a38:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003a3a:	4770      	bx	lr

08003a3c <.text_6>:
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	7830      	ldrb	r0, [r6, #0]
 8003a40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003a42:	2101      	movs	r1, #1

08003a44 <__iar_annotation$$tailcall>:
 8003a44:	4728      	bx	r5

08003a46 <.text_7>:
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	7830      	ldrb	r0, [r6, #0]
 8003a4a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8003a4e:	4770      	bx	lr

08003a50 <.text_8>:
 8003a50:	81e1      	strh	r1, [r4, #14]
 8003a52:	2105      	movs	r1, #5
 8003a54:	79e8      	ldrb	r0, [r5, #7]
 8003a56:	1c40      	adds	r0, r0, #1
 8003a58:	71e8      	strb	r0, [r5, #7]
 8003a5a:	4770      	bx	lr

08003a5c <.text_9>:
 8003a5c:	7220      	strb	r0, [r4, #8]
 8003a5e:	f8a4 a00a 	strh.w	sl, [r4, #10]
 8003a62:	f04f 081d 	mov.w	r8, #29
 8003a66:	4770      	bx	lr

08003a68 <.text_10>:
 8003a68:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003a6c:	2811      	cmp	r0, #17
 8003a6e:	4770      	bx	lr

08003a70 <.text_11>:
 8003a70:	8960      	ldrh	r0, [r4, #10]
 8003a72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a76:	4770      	bx	lr

08003a78 <.text_12>:
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	7830      	ldrb	r0, [r6, #0]
 8003a7c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003a7e:	2204      	movs	r2, #4
 8003a80:	2101      	movs	r1, #1

08003a82 <__iar_annotation$$tailcall>:
 8003a82:	4728      	bx	r5

08003a84 <.text_13>:
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	7830      	ldrb	r0, [r6, #0]
 8003a88:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	2101      	movs	r1, #1

08003a8e <__iar_annotation$$tailcall>:
 8003a8e:	4728      	bx	r5

08003a90 <.text_14>:
 8003a90:	7830      	ldrb	r0, [r6, #0]
 8003a92:	f7fc bd89 	b.w	80005a8 <USBPD_PE_Notification>

08003a96 <.text_15>:
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	6801      	ldr	r1, [r0, #0]
 8003a9a:	f041 0110 	orr.w	r1, r1, #16
 8003a9e:	6001      	str	r1, [r0, #0]
 8003aa0:	4770      	bx	lr

08003aa2 <.text_16>:
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	6801      	ldr	r1, [r0, #0]
 8003aa6:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	4770      	bx	lr

08003aae <.text_17>:
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	78c1      	ldrb	r1, [r0, #3]
 8003ab2:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8003ab6:	4770      	bx	lr

08003ab8 <.text_18>:
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	6801      	ldr	r1, [r0, #0]
 8003abc:	f021 0110 	bic.w	r1, r1, #16
 8003ac0:	6001      	str	r1, [r0, #0]
 8003ac2:	4770      	bx	lr

08003ac4 <.text_19>:
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7fe ba36 	b.w	8001f38 <PE_IsDataMsg>

08003acc <.text_20>:
 8003acc:	2104      	movs	r1, #4
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f7fd bcfb 	b.w	80014ca <PE_SetPowerNegotiation>

08003ad4 <.text_21>:
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f7fe ba41 	b.w	8001f5c <PE_GetCtrlMsg>

08003ada <.text_22>:
 8003ada:	2206      	movs	r2, #6
 8003adc:	2101      	movs	r1, #1
 8003ade:	4638      	mov	r0, r7
 8003ae0:	f7fd bceb 	b.w	80014ba <PE_CallHardResetCallback>

08003ae4 <.text_23>:
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	f7fd bd89 	b.w	80015fc <PE_DebugState>

08003aea <.text_24>:
 8003aea:	7872      	ldrb	r2, [r6, #1]
 8003aec:	a903      	add	r1, sp, #12
 8003aee:	4638      	mov	r0, r7
 8003af0:	f7fe ba14 	b.w	8001f1c <PE_ResetRxEvent>

08003af4 <.text_25>:
 8003af4:	2203      	movs	r2, #3
 8003af6:	2100      	movs	r1, #0
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7fd bdcb 	b.w	8001694 <PE_Send_CtrlMessage>

08003afe <PE_Send_SRCCapabilities>:
 8003afe:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8003b00:	4604      	mov	r4, r0
 8003b02:	2000      	movs	r0, #0
 8003b04:	9002      	str	r0, [sp, #8]
 8003b06:	460d      	mov	r5, r1
 8003b08:	6860      	ldr	r0, [r4, #4]
 8003b0a:	78c1      	ldrb	r1, [r0, #3]
 8003b0c:	2610      	movs	r6, #16
 8003b0e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8003b12:	2800      	cmp	r0, #0
 8003b14:	bf1e      	ittt	ne
 8003b16:	f894 0272 	ldrbne.w	r0, [r4, #626]	; 0x272
 8003b1a:	f000 001f 	andne.w	r0, r0, #31
 8003b1e:	2807      	cmpne	r0, #7
 8003b20:	d110      	bne.n	8003b44 <PE_Send_SRCCapabilities+0x46>
 8003b22:	f000 f835 	bl	8003b90 <.text_27>
 8003b26:	f104 0212 	add.w	r2, r4, #18
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	47e0      	blx	ip
 8003b2e:	f000 f83d 	bl	8003bac <.text_29>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d12a      	bne.n	8003b8c <PE_Send_SRCCapabilities+0x8e>
 8003b36:	9802      	ldr	r0, [sp, #8]
 8003b38:	9501      	str	r5, [sp, #4]
 8003b3a:	1c80      	adds	r0, r0, #2
 8003b3c:	f000 f82f 	bl	8003b9e <.text_28>
 8003b40:	2201      	movs	r2, #1
 8003b42:	e01d      	b.n	8003b80 <PE_Send_SRCCapabilities+0x82>
 8003b44:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b48:	f104 0014 	add.w	r0, r4, #20
 8003b4c:	f016 fbfe 	bl	801a34c <__aeabi_memclr>
 8003b50:	f000 f81e 	bl	8003b90 <.text_27>
 8003b54:	f104 0214 	add.w	r2, r4, #20
 8003b58:	2100      	movs	r1, #0
 8003b5a:	47e0      	blx	ip
 8003b5c:	f000 f826 	bl	8003bac <.text_29>
 8003b60:	b9a0      	cbnz	r0, 8003b8c <PE_Send_SRCCapabilities+0x8e>
 8003b62:	68a6      	ldr	r6, [r4, #8]
 8003b64:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8003b68:	6977      	ldr	r7, [r6, #20]
 8003b6a:	ab02      	add	r3, sp, #8
 8003b6c:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8003b70:	2117      	movs	r1, #23
 8003b72:	47b8      	blx	r7
 8003b74:	9802      	ldr	r0, [sp, #8]
 8003b76:	9501      	str	r5, [sp, #4]
 8003b78:	3020      	adds	r0, #32
 8003b7a:	f000 f810 	bl	8003b9e <.text_28>
 8003b7e:	2291      	movs	r2, #145	; 0x91
 8003b80:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8003b84:	2100      	movs	r1, #0
 8003b86:	f001 fedf 	bl	8005948 <USBPD_PRL_SendMessage>
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003b90 <.text_27>:
 8003b90:	68a7      	ldr	r7, [r4, #8]
 8003b92:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8003b96:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8003b9a:	ab02      	add	r3, sp, #8
 8003b9c:	4770      	bx	lr

08003b9e <.text_28>:
 8003b9e:	9002      	str	r0, [sp, #8]
 8003ba0:	f104 0310 	add.w	r3, r4, #16
 8003ba4:	9802      	ldr	r0, [sp, #8]
 8003ba6:	b280      	uxth	r0, r0
 8003ba8:	9000      	str	r0, [sp, #0]
 8003baa:	4770      	bx	lr

08003bac <.text_29>:
 8003bac:	9802      	ldr	r0, [sp, #8]
 8003bae:	2104      	movs	r1, #4
 8003bb0:	f7fd bcf2 	b.w	8001598 <PE_CheckDataSizeFromGetDataInfo>

08003bb4 <DATAUSB_StateMachine_EnterUSB>:
 8003bb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003bb8:	2402      	movs	r4, #2
 8003bba:	4605      	mov	r5, r0
 8003bbc:	f205 263f 	addw	r6, r5, #575	; 0x23f
 8003bc0:	4688      	mov	r8, r1
 8003bc2:	7870      	ldrb	r0, [r6, #1]
 8003bc4:	284d      	cmp	r0, #77	; 0x4d
 8003bc6:	f205 274e 	addw	r7, r5, #590	; 0x24e
 8003bca:	d004      	beq.n	8003bd6 <DATAUSB_StateMachine_EnterUSB+0x22>
 8003bcc:	d35a      	bcc.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003bce:	284f      	cmp	r0, #79	; 0x4f
 8003bd0:	d045      	beq.n	8003c5e <DATAUSB_StateMachine_EnterUSB+0xaa>
 8003bd2:	d321      	bcc.n	8003c18 <DATAUSB_StateMachine_EnterUSB+0x64>
 8003bd4:	e056      	b.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003bd6:	6868      	ldr	r0, [r5, #4]
 8003bd8:	7801      	ldrb	r1, [r0, #0]
 8003bda:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8003bde:	b920      	cbnz	r0, 8003bea <DATAUSB_StateMachine_EnterUSB+0x36>
 8003be0:	7830      	ldrb	r0, [r6, #0]
 8003be2:	216a      	movs	r1, #106	; 0x6a
 8003be4:	f7fc fce0 	bl	80005a8 <USBPD_PE_Notification>
 8003be8:	e036      	b.n	8003c58 <DATAUSB_StateMachine_EnterUSB+0xa4>
 8003bea:	214e      	movs	r1, #78	; 0x4e
 8003bec:	2201      	movs	r2, #1
 8003bee:	9002      	str	r0, [sp, #8]
 8003bf0:	9101      	str	r1, [sp, #4]
 8003bf2:	9200      	str	r2, [sp, #0]
 8003bf4:	f505 7318 	add.w	r3, r5, #608	; 0x260
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f7fd fd52 	bl	80016a6 <PE_Send_DataMessage>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d13e      	bne.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003c06:	7830      	ldrb	r0, [r6, #0]
 8003c08:	216b      	movs	r1, #107	; 0x6b
 8003c0a:	f7fc fccd 	bl	80005a8 <USBPD_PE_Notification>
 8003c0e:	f248 001d 	movw	r0, #32797	; 0x801d
 8003c12:	8038      	strh	r0, [r7, #0]
 8003c14:	241d      	movs	r4, #29
 8003c16:	e035      	b.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003c18:	f898 1000 	ldrb.w	r1, [r8]
 8003c1c:	2911      	cmp	r1, #17
 8003c1e:	bf04      	itt	eq
 8003c20:	8cb8      	ldrheq	r0, [r7, #36]	; 0x24
 8003c22:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003c26:	d113      	bne.n	8003c50 <DATAUSB_StateMachine_EnterUSB+0x9c>
 8003c28:	f000 001f 	and.w	r0, r0, #31
 8003c2c:	2803      	cmp	r0, #3
 8003c2e:	d004      	beq.n	8003c3a <DATAUSB_StateMachine_EnterUSB+0x86>
 8003c30:	2804      	cmp	r0, #4
 8003c32:	bf18      	it	ne
 8003c34:	2810      	cmpne	r0, #16
 8003c36:	d002      	beq.n	8003c3e <DATAUSB_StateMachine_EnterUSB+0x8a>
 8003c38:	e00a      	b.n	8003c50 <DATAUSB_StateMachine_EnterUSB+0x9c>
 8003c3a:	216c      	movs	r1, #108	; 0x6c
 8003c3c:	e000      	b.n	8003c40 <DATAUSB_StateMachine_EnterUSB+0x8c>
 8003c3e:	216d      	movs	r1, #109	; 0x6d
 8003c40:	7830      	ldrb	r0, [r6, #0]
 8003c42:	f7fc fcb1 	bl	80005a8 <USBPD_PE_Notification>
 8003c46:	2203      	movs	r2, #3
 8003c48:	4641      	mov	r1, r8
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7fe f966 	bl	8001f1c <PE_ResetRxEvent>
 8003c50:	8838      	ldrh	r0, [r7, #0]
 8003c52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c56:	d115      	bne.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003c58:	2103      	movs	r1, #3
 8003c5a:	7071      	strb	r1, [r6, #1]
 8003c5c:	e012      	b.n	8003c84 <DATAUSB_StateMachine_EnterUSB+0xd0>
 8003c5e:	68a8      	ldr	r0, [r5, #8]
 8003c60:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c62:	2704      	movs	r7, #4
 8003c64:	b14a      	cbz	r2, 8003c7a <DATAUSB_StateMachine_EnterUSB+0xc6>
 8003c66:	7830      	ldrb	r0, [r6, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4790      	blx	r2
 8003c6c:	280a      	cmp	r0, #10
 8003c6e:	bf08      	it	eq
 8003c70:	2703      	moveq	r7, #3
 8003c72:	d002      	beq.n	8003c7a <DATAUSB_StateMachine_EnterUSB+0xc6>
 8003c74:	2801      	cmp	r0, #1
 8003c76:	bf08      	it	eq
 8003c78:	2710      	moveq	r7, #16
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	9000      	str	r0, [sp, #0]
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f000 f804 	bl	8003c8c <.text_3>
 8003c84:	4620      	mov	r0, r4
 8003c86:	b004      	add	sp, #16
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c8c <.text_3>:
 8003c8c:	463a      	mov	r2, r7
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7fd bcff 	b.w	8001694 <PE_Send_CtrlMessage>

08003c96 <DATAUSB_StateMachine_DataReset>:
 8003c96:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	f205 263f 	addw	r6, r5, #575	; 0x23f
 8003ca0:	2402      	movs	r4, #2
 8003ca2:	7872      	ldrb	r2, [r6, #1]
 8003ca4:	f205 274e 	addw	r7, r5, #590	; 0x24e
 8003ca8:	2a54      	cmp	r2, #84	; 0x54
 8003caa:	bf12      	itee	ne
 8003cac:	2a57      	cmpne	r2, #87	; 0x57
 8003cae:	2000      	moveq	r0, #0
 8003cb0:	8138      	strheq	r0, [r7, #8]
 8003cb2:	8938      	ldrh	r0, [r7, #8]
 8003cb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003cb8:	d103      	bne.n	8003cc2 <DATAUSB_StateMachine_DataReset+0x2c>
 8003cba:	2192      	movs	r1, #146	; 0x92
 8003cbc:	7071      	strb	r1, [r6, #1]
 8003cbe:	2400      	movs	r4, #0
 8003cc0:	e0a4      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003cc2:	2a52      	cmp	r2, #82	; 0x52
 8003cc4:	d073      	beq.n	8003dae <DATAUSB_StateMachine_DataReset+0x118>
 8003cc6:	2a54      	cmp	r2, #84	; 0x54
 8003cc8:	d00f      	beq.n	8003cea <DATAUSB_StateMachine_DataReset+0x54>
 8003cca:	2a55      	cmp	r2, #85	; 0x55
 8003ccc:	d07c      	beq.n	8003dc8 <DATAUSB_StateMachine_DataReset+0x132>
 8003cce:	2a56      	cmp	r2, #86	; 0x56
 8003cd0:	d01a      	beq.n	8003d08 <DATAUSB_StateMachine_DataReset+0x72>
 8003cd2:	2a57      	cmp	r2, #87	; 0x57
 8003cd4:	d04b      	beq.n	8003d6e <DATAUSB_StateMachine_DataReset+0xd8>
 8003cd6:	2a5a      	cmp	r2, #90	; 0x5a
 8003cd8:	f000 8085 	beq.w	8003de6 <DATAUSB_StateMachine_DataReset+0x150>
 8003cdc:	2a5c      	cmp	r2, #92	; 0x5c
 8003cde:	d03c      	beq.n	8003d5a <DATAUSB_StateMachine_DataReset+0xc4>
 8003ce0:	2a5d      	cmp	r2, #93	; 0x5d
 8003ce2:	d028      	beq.n	8003d36 <DATAUSB_StateMachine_DataReset+0xa0>
 8003ce4:	2a5e      	cmp	r2, #94	; 0x5e
 8003ce6:	d05d      	beq.n	8003da4 <DATAUSB_StateMachine_DataReset+0x10e>
 8003ce8:	e090      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003cea:	2001      	movs	r0, #1
 8003cec:	9000      	str	r0, [sp, #0]
 8003cee:	2356      	movs	r3, #86	; 0x56
 8003cf0:	220e      	movs	r2, #14
 8003cf2:	f7ff ffcc 	bl	8003c8e <.text_3+0x2>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d1f6      	bne.n	8003ce8 <DATAUSB_StateMachine_DataReset+0x52>
 8003cfa:	2014      	movs	r0, #20
 8003cfc:	7370      	strb	r0, [r6, #13]
 8003cfe:	f248 011d 	movw	r1, #32797	; 0x801d
 8003d02:	8039      	strh	r1, [r7, #0]
 8003d04:	241d      	movs	r4, #29
 8003d06:	e081      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003d08:	7808      	ldrb	r0, [r1, #0]
 8003d0a:	2811      	cmp	r0, #17
 8003d0c:	bf04      	itt	eq
 8003d0e:	8cb8      	ldrheq	r0, [r7, #36]	; 0x24
 8003d10:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8003d14:	d174      	bne.n	8003e00 <DATAUSB_StateMachine_DataReset+0x16a>
 8003d16:	f000 001f 	and.w	r0, r0, #31
 8003d1a:	2803      	cmp	r0, #3
 8003d1c:	d002      	beq.n	8003d24 <DATAUSB_StateMachine_DataReset+0x8e>
 8003d1e:	2804      	cmp	r0, #4
 8003d20:	d007      	beq.n	8003d32 <DATAUSB_StateMachine_DataReset+0x9c>
 8003d22:	e06d      	b.n	8003e00 <DATAUSB_StateMachine_DataReset+0x16a>
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7fe f8f9 	bl	8001f1c <PE_ResetRxEvent>
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f000 f871 	bl	8003e12 <ManageDataReset_Accept>
 8003d30:	e066      	b.n	8003e00 <DATAUSB_StateMachine_DataReset+0x16a>
 8003d32:	2292      	movs	r2, #146	; 0x92
 8003d34:	e061      	b.n	8003dfa <DATAUSB_StateMachine_DataReset+0x164>
 8003d36:	7808      	ldrb	r0, [r1, #0]
 8003d38:	2811      	cmp	r0, #17
 8003d3a:	d161      	bne.n	8003e00 <DATAUSB_StateMachine_DataReset+0x16a>
 8003d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d3e:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8003d42:	4002      	ands	r2, r0
 8003d44:	2a06      	cmp	r2, #6
 8003d46:	d161      	bne.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003d48:	f248 020a 	movw	r2, #32778	; 0x800a
 8003d4c:	803a      	strh	r2, [r7, #0]
 8003d4e:	4628      	mov	r0, r5
 8003d50:	2252      	movs	r2, #82	; 0x52
 8003d52:	f7fe f8e3 	bl	8001f1c <PE_ResetRxEvent>
 8003d56:	240a      	movs	r4, #10
 8003d58:	e058      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	235a      	movs	r3, #90	; 0x5a
 8003d60:	2206      	movs	r2, #6
 8003d62:	f7ff ff94 	bl	8003c8e <.text_3+0x2>
 8003d66:	f248 102c 	movw	r0, #33068	; 0x812c
 8003d6a:	8038      	strh	r0, [r7, #0]
 8003d6c:	e04e      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003d6e:	68a8      	ldr	r0, [r5, #8]
 8003d70:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d72:	2710      	movs	r7, #16
 8003d74:	f04f 0803 	mov.w	r8, #3
 8003d78:	b13a      	cbz	r2, 8003d8a <DATAUSB_StateMachine_DataReset+0xf4>
 8003d7a:	7830      	ldrb	r0, [r6, #0]
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4790      	blx	r2
 8003d80:	280a      	cmp	r0, #10
 8003d82:	bf04      	itt	eq
 8003d84:	2703      	moveq	r7, #3
 8003d86:	f04f 085a 	moveq.w	r8, #90	; 0x5a
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	9000      	str	r0, [sp, #0]
 8003d8e:	4643      	mov	r3, r8
 8003d90:	f7ff ff7c 	bl	8003c8c <.text_3>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	bf08      	it	eq
 8003d98:	2f03      	cmpeq	r7, #3
 8003d9a:	d137      	bne.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 f838 	bl	8003e12 <ManageDataReset_Accept>
 8003da2:	e033      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003da4:	7830      	ldrb	r0, [r6, #0]
 8003da6:	216e      	movs	r1, #110	; 0x6e
 8003da8:	f7fc fbfe 	bl	80005a8 <USBPD_PE_Notification>
 8003dac:	e009      	b.n	8003dc2 <DATAUSB_StateMachine_DataReset+0x12c>
 8003dae:	8839      	ldrh	r1, [r7, #0]
 8003db0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003db4:	d12a      	bne.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003db6:	68a8      	ldr	r0, [r5, #8]
 8003db8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003dba:	b112      	cbz	r2, 8003dc2 <DATAUSB_StateMachine_DataReset+0x12c>
 8003dbc:	7830      	ldrb	r0, [r6, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4790      	blx	r2
 8003dc2:	2055      	movs	r0, #85	; 0x55
 8003dc4:	7070      	strb	r0, [r6, #1]
 8003dc6:	e021      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003dc8:	8978      	ldrh	r0, [r7, #10]
 8003dca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003dce:	d11d      	bne.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003dd0:	7830      	ldrb	r0, [r6, #0]
 8003dd2:	216f      	movs	r1, #111	; 0x6f
 8003dd4:	f7fc fbe8 	bl	80005a8 <USBPD_PE_Notification>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	9000      	str	r0, [sp, #0]
 8003ddc:	2303      	movs	r3, #3
 8003dde:	220f      	movs	r2, #15
 8003de0:	f7ff ff55 	bl	8003c8e <.text_3+0x2>
 8003de4:	e012      	b.n	8003e0c <DATAUSB_StateMachine_DataReset+0x176>
 8003de6:	7808      	ldrb	r0, [r1, #0]
 8003de8:	2811      	cmp	r0, #17
 8003dea:	bf01      	itttt	eq
 8003dec:	8cba      	ldrheq	r2, [r7, #36]	; 0x24
 8003dee:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8003df2:	4002      	andeq	r2, r0
 8003df4:	2a0f      	cmpeq	r2, #15
 8003df6:	d103      	bne.n	8003e00 <DATAUSB_StateMachine_DataReset+0x16a>
 8003df8:	2203      	movs	r2, #3
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f7fe f88e 	bl	8001f1c <PE_ResetRxEvent>
 8003e00:	8838      	ldrh	r0, [r7, #0]
 8003e02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e06:	bf04      	itt	eq
 8003e08:	2192      	moveq	r1, #146	; 0x92
 8003e0a:	7071      	strbeq	r1, [r6, #1]
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08003e12 <ManageDataReset_Accept>:
 8003e12:	b570      	push	{r4, r5, r6, lr}
 8003e14:	4606      	mov	r6, r0
 8003e16:	f206 254e 	addw	r5, r6, #590	; 0x24e
 8003e1a:	6870      	ldr	r0, [r6, #4]
 8003e1c:	7802      	ldrb	r2, [r0, #0]
 8003e1e:	f206 243f 	addw	r4, r6, #575	; 0x23f
 8003e22:	f248 112c 	movw	r1, #33068	; 0x812c
 8003e26:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8003e2a:	b1e0      	cbz	r0, 8003e66 <ManageDataReset_Accept+0x54>
 8003e2c:	8129      	strh	r1, [r5, #8]
 8003e2e:	216e      	movs	r1, #110	; 0x6e
 8003e30:	7820      	ldrb	r0, [r4, #0]
 8003e32:	f7fc fbb9 	bl	80005a8 <USBPD_PE_Notification>
 8003e36:	f248 01c8 	movw	r1, #32968	; 0x80c8
 8003e3a:	8169      	strh	r1, [r5, #10]
 8003e3c:	6870      	ldr	r0, [r6, #4]
 8003e3e:	6801      	ldr	r1, [r0, #0]
 8003e40:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003e44:	b150      	cbz	r0, 8003e5c <ManageDataReset_Accept+0x4a>
 8003e46:	68b0      	ldr	r0, [r6, #8]
 8003e48:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e4a:	b112      	cbz	r2, 8003e52 <ManageDataReset_Accept+0x40>
 8003e4c:	7820      	ldrb	r0, [r4, #0]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4790      	blx	r2
 8003e52:	f248 000a 	movw	r0, #32778	; 0x800a
 8003e56:	8028      	strh	r0, [r5, #0]
 8003e58:	2152      	movs	r1, #82	; 0x52
 8003e5a:	e014      	b.n	8003e86 <ManageDataReset_Accept+0x74>
 8003e5c:	f248 007d 	movw	r0, #32893	; 0x807d
 8003e60:	8028      	strh	r0, [r5, #0]
 8003e62:	215d      	movs	r1, #93	; 0x5d
 8003e64:	e00f      	b.n	8003e86 <ManageDataReset_Accept+0x74>
 8003e66:	6870      	ldr	r0, [r6, #4]
 8003e68:	6802      	ldr	r2, [r0, #0]
 8003e6a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003e6e:	b140      	cbz	r0, 8003e82 <ManageDataReset_Accept+0x70>
 8003e70:	68b0      	ldr	r0, [r6, #8]
 8003e72:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e74:	b112      	cbz	r2, 8003e7c <ManageDataReset_Accept+0x6a>
 8003e76:	7820      	ldrb	r0, [r4, #0]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4790      	blx	r2
 8003e7c:	205c      	movs	r0, #92	; 0x5c
 8003e7e:	7060      	strb	r0, [r4, #1]
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	8029      	strh	r1, [r5, #0]
 8003e84:	215a      	movs	r1, #90	; 0x5a
 8003e86:	7061      	strb	r1, [r4, #1]
 8003e88:	bd70      	pop	{r4, r5, r6, pc}

08003e8a <PE_StateMachine_VDMCable>:
 8003e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	2702      	movs	r7, #2
 8003e92:	4680      	mov	r8, r0
 8003e94:	f208 263f 	addw	r6, r8, #575	; 0x23f
 8003e98:	f508 7511 	add.w	r5, r8, #580	; 0x244
 8003e9c:	7870      	ldrb	r0, [r6, #1]
 8003e9e:	2805      	cmp	r0, #5
 8003ea0:	f208 448c 	addw	r4, r8, #1164	; 0x48c
 8003ea4:	d002      	beq.n	8003eac <PE_StateMachine_VDMCable+0x22>
 8003ea6:	289a      	cmp	r0, #154	; 0x9a
 8003ea8:	d05f      	beq.n	8003f6a <PE_StateMachine_VDMCable+0xe0>
 8003eaa:	e0da      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8003eac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003eb0:	7811      	ldrb	r1, [r2, #0]
 8003eb2:	f001 0103 	and.w	r1, r1, #3
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f000 f9fe 	bl	80042b8 <PE_ExtRevisionInteroperability_Cable>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	0952      	lsrs	r2, r2, #5
 8003ec0:	0152      	lsls	r2, r2, #5
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	6022      	str	r2, [r4, #0]
 8003ecc:	4623      	mov	r3, r4
 8003ece:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003ed2:	7801      	ldrb	r1, [r0, #0]
 8003ed4:	f649 003f 	movw	r0, #38975	; 0x983f
 8003ed8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8003edc:	4002      	ands	r2, r0
 8003ede:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003ee2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	209a      	movs	r0, #154	; 0x9a
 8003eea:	6829      	ldr	r1, [r5, #0]
 8003eec:	9001      	str	r0, [sp, #4]
 8003eee:	0889      	lsrs	r1, r1, #2
 8003ef0:	f001 0101 	and.w	r1, r1, #1
 8003ef4:	9102      	str	r1, [sp, #8]
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	2101      	movs	r1, #1
 8003efa:	9100      	str	r1, [sp, #0]
 8003efc:	4640      	mov	r0, r8
 8003efe:	f7fd fbd2 	bl	80016a6 <PE_Send_DataMessage>
 8003f02:	b950      	cbnz	r0, 8003f1a <PE_StateMachine_VDMCable+0x90>
 8003f04:	6828      	ldr	r0, [r5, #0]
 8003f06:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003f0a:	6028      	str	r0, [r5, #0]
 8003f0c:	2151      	movs	r1, #81	; 0x51
 8003f0e:	7229      	strb	r1, [r5, #8]
 8003f10:	f248 001e 	movw	r0, #32798	; 0x801e
 8003f14:	81e8      	strh	r0, [r5, #14]
 8003f16:	271e      	movs	r7, #30
 8003f18:	e0a3      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8003f1a:	2809      	cmp	r0, #9
 8003f1c:	d0fc      	beq.n	8003f18 <PE_StateMachine_VDMCable+0x8e>
 8003f1e:	7ca0      	ldrb	r0, [r4, #18]
 8003f20:	2815      	cmp	r0, #21
 8003f22:	d203      	bcs.n	8003f2c <PE_StateMachine_VDMCable+0xa2>
 8003f24:	f248 012d 	movw	r1, #32813	; 0x802d
 8003f28:	81e9      	strh	r1, [r5, #14]
 8003f2a:	e008      	b.n	8003f3e <PE_StateMachine_VDMCable+0xb4>
 8003f2c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003f30:	6944      	ldr	r4, [r0, #20]
 8003f32:	b124      	cbz	r4, 8003f3e <PE_StateMachine_VDMCable+0xb4>
 8003f34:	7830      	ldrb	r0, [r6, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	2205      	movs	r2, #5
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	47a0      	blx	r4
 8003f3e:	f000 f89b 	bl	8004078 <.text_4+0x4>
 8003f42:	f000 8082 	beq.w	800404a <PE_StateMachine_VDMCable+0x1c0>
 8003f46:	8968      	ldrh	r0, [r5, #10]
 8003f48:	0441      	lsls	r1, r0, #17
 8003f4a:	d00b      	beq.n	8003f64 <PE_StateMachine_VDMCable+0xda>
 8003f4c:	2008      	movs	r0, #8
 8003f4e:	7070      	strb	r0, [r6, #1]
 8003f50:	8969      	ldrh	r1, [r5, #10]
 8003f52:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003f56:	292d      	cmp	r1, #45	; 0x2d
 8003f58:	bf2e      	itee	cs
 8003f5a:	272d      	movcs	r7, #45	; 0x2d
 8003f5c:	896f      	ldrhcc	r7, [r5, #10]
 8003f5e:	f3c7 070e 	ubfxcc	r7, r7, #0, #15
 8003f62:	e07e      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8003f64:	2007      	movs	r0, #7
 8003f66:	7070      	strb	r0, [r6, #1]
 8003f68:	e07b      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8003f6a:	4689      	mov	r9, r1
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7fc fe56 	bl	8000c1e <PE_Convert_SOPRxEvent>
 8003f72:	f899 2000 	ldrb.w	r2, [r9]
 8003f76:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8003f78:	4282      	cmp	r2, r0
 8003f7a:	d13e      	bne.n	8003ffa <PE_StateMachine_VDMCable+0x170>
 8003f7c:	0bc8      	lsrs	r0, r1, #15
 8003f7e:	d13c      	bne.n	8003ffa <PE_StateMachine_VDMCable+0x170>
 8003f80:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d038      	beq.n	8003ffa <PE_StateMachine_VDMCable+0x170>
 8003f88:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 8003f8c:	f000 001f 	and.w	r0, r0, #31
 8003f90:	280f      	cmp	r0, #15
 8003f92:	d132      	bne.n	8003ffa <PE_StateMachine_VDMCable+0x170>
 8003f94:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003f96:	f890 a002 	ldrb.w	sl, [r0, #2]
 8003f9a:	f00a 011f 	and.w	r1, sl, #31
 8003f9e:	2901      	cmp	r1, #1
 8003fa0:	d13d      	bne.n	800401e <PE_StateMachine_VDMCable+0x194>
 8003fa2:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d039      	beq.n	800401e <PE_StateMachine_VDMCable+0x194>
 8003faa:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 8003fac:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	f000 f981 	bl	80042b8 <PE_ExtRevisionInteroperability_Cable>
 8003fb6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8003fba:	6948      	ldr	r0, [r1, #20]
 8003fbc:	b1a0      	cbz	r0, 8003fe8 <PE_StateMachine_VDMCable+0x15e>
 8003fbe:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8003fc2:	2801      	cmp	r0, #1
 8003fc4:	d110      	bne.n	8003fe8 <PE_StateMachine_VDMCable+0x15e>
 8003fc6:	a903      	add	r1, sp, #12
 8003fc8:	4640      	mov	r0, r8
 8003fca:	f001 f9af 	bl	800532c <PE_SVDM_CheckIdentity>
 8003fce:	b958      	cbnz	r0, 8003fe8 <PE_StateMachine_VDMCable+0x15e>
 8003fd0:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8003fd4:	7830      	ldrb	r0, [r6, #0]
 8003fd6:	f8dc 7014 	ldr.w	r7, [ip, #20]
 8003fda:	ab03      	add	r3, sp, #12
 8003fdc:	f3ca 1281 	ubfx	r2, sl, #6, #2
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	47b8      	blx	r7
 8003fe4:	2014      	movs	r0, #20
 8003fe6:	74a0      	strb	r0, [r4, #18]
 8003fe8:	f000 f844 	bl	8004074 <.text_4>
 8003fec:	d102      	bne.n	8003ff4 <PE_StateMachine_VDMCable+0x16a>
 8003fee:	7070      	strb	r0, [r6, #1]
 8003ff0:	2700      	movs	r7, #0
 8003ff2:	e014      	b.n	800401e <PE_StateMachine_VDMCable+0x194>
 8003ff4:	f000 f839 	bl	800406a <.text_3>
 8003ff8:	e011      	b.n	800401e <PE_StateMachine_VDMCable+0x194>
 8003ffa:	f001 011f 	and.w	r1, r1, #31
 8003ffe:	2910      	cmp	r1, #16
 8004000:	d113      	bne.n	800402a <PE_StateMachine_VDMCable+0x1a0>
 8004002:	2000      	movs	r0, #0
 8004004:	81e8      	strh	r0, [r5, #14]
 8004006:	f000 f837 	bl	8004078 <.text_4+0x4>
 800400a:	d102      	bne.n	8004012 <PE_StateMachine_VDMCable+0x188>
 800400c:	7070      	strb	r0, [r6, #1]
 800400e:	2700      	movs	r7, #0
 8004010:	e001      	b.n	8004016 <PE_StateMachine_VDMCable+0x18c>
 8004012:	f000 f82a 	bl	800406a <.text_3>
 8004016:	2159      	movs	r1, #89	; 0x59
 8004018:	7830      	ldrb	r0, [r6, #0]
 800401a:	f7fc fac5 	bl	80005a8 <USBPD_PE_Notification>
 800401e:	7872      	ldrb	r2, [r6, #1]
 8004020:	4649      	mov	r1, r9
 8004022:	4640      	mov	r0, r8
 8004024:	f7fd ff7a 	bl	8001f1c <PE_ResetRxEvent>
 8004028:	e01b      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 800402a:	89e8      	ldrh	r0, [r5, #14]
 800402c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004030:	d117      	bne.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8004032:	f000 f81f 	bl	8004074 <.text_4>
 8004036:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800403a:	6944      	ldr	r4, [r0, #20]
 800403c:	d109      	bne.n	8004052 <PE_StateMachine_VDMCable+0x1c8>
 800403e:	b124      	cbz	r4, 800404a <PE_StateMachine_VDMCable+0x1c0>
 8004040:	7830      	ldrb	r0, [r6, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	2204      	movs	r2, #4
 8004046:	2101      	movs	r1, #1
 8004048:	47a0      	blx	r4
 800404a:	2003      	movs	r0, #3
 800404c:	7070      	strb	r0, [r6, #1]
 800404e:	2700      	movs	r7, #0
 8004050:	e007      	b.n	8004062 <PE_StateMachine_VDMCable+0x1d8>
 8004052:	b124      	cbz	r4, 800405e <PE_StateMachine_VDMCable+0x1d4>
 8004054:	7830      	ldrb	r0, [r6, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	2202      	movs	r2, #2
 800405a:	2101      	movs	r1, #1
 800405c:	47a0      	blx	r4
 800405e:	f000 f804 	bl	800406a <.text_3>
 8004062:	4638      	mov	r0, r7
 8004064:	b00c      	add	sp, #48	; 0x30
 8004066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800406a <.text_3>:
 800406a:	2007      	movs	r0, #7
 800406c:	7070      	strb	r0, [r6, #1]
 800406e:	2700      	movs	r7, #0
 8004070:	722f      	strb	r7, [r5, #8]
 8004072:	4770      	bx	lr

08004074 <.text_4>:
 8004074:	2100      	movs	r1, #0
 8004076:	81e9      	strh	r1, [r5, #14]
 8004078:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800407c:	6801      	ldr	r1, [r0, #0]
 800407e:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8004082:	2803      	cmp	r0, #3
 8004084:	4770      	bx	lr

08004086 <PE_SubStateMachine_VconnSwap>:
 8004086:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800408a:	2502      	movs	r5, #2
 800408c:	4607      	mov	r7, r0
 800408e:	f207 243f 	addw	r4, r7, #575	; 0x23f
 8004092:	4688      	mov	r8, r1
 8004094:	7860      	ldrb	r0, [r4, #1]
 8004096:	289d      	cmp	r0, #157	; 0x9d
 8004098:	f507 7611 	add.w	r6, r7, #580	; 0x244
 800409c:	d00e      	beq.n	80040bc <PE_SubStateMachine_VconnSwap+0x36>
 800409e:	d30c      	bcc.n	80040ba <PE_SubStateMachine_VconnSwap+0x34>
 80040a0:	289f      	cmp	r0, #159	; 0x9f
 80040a2:	d04c      	beq.n	800413e <PE_SubStateMachine_VconnSwap+0xb8>
 80040a4:	d335      	bcc.n	8004112 <PE_SubStateMachine_VconnSwap+0x8c>
 80040a6:	28a1      	cmp	r0, #161	; 0xa1
 80040a8:	d074      	beq.n	8004194 <PE_SubStateMachine_VconnSwap+0x10e>
 80040aa:	d367      	bcc.n	800417c <PE_SubStateMachine_VconnSwap+0xf6>
 80040ac:	28a3      	cmp	r0, #163	; 0xa3
 80040ae:	f000 808e 	beq.w	80041ce <PE_SubStateMachine_VconnSwap+0x148>
 80040b2:	d37a      	bcc.n	80041aa <PE_SubStateMachine_VconnSwap+0x124>
 80040b4:	28a4      	cmp	r0, #164	; 0xa4
 80040b6:	f000 80c9 	beq.w	800424c <PE_SubStateMachine_VconnSwap+0x1c6>
 80040ba:	e0d3      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	6808      	ldr	r0, [r1, #0]
 80040c0:	f400 50b8 	and.w	r0, r0, #5888	; 0x1700
 80040c4:	f5b0 5f98 	cmp.w	r0, #4864	; 0x1300
 80040c8:	d11f      	bne.n	800410a <PE_SubStateMachine_VconnSwap+0x84>
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	7820      	ldrb	r0, [r4, #0]
 80040ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80040d0:	4790      	blx	r2
 80040d2:	280a      	cmp	r0, #10
 80040d4:	d002      	beq.n	80040dc <PE_SubStateMachine_VconnSwap+0x56>
 80040d6:	280d      	cmp	r0, #13
 80040d8:	d007      	beq.n	80040ea <PE_SubStateMachine_VconnSwap+0x64>
 80040da:	e00d      	b.n	80040f8 <PE_SubStateMachine_VconnSwap+0x72>
 80040dc:	209e      	movs	r0, #158	; 0x9e
 80040de:	7060      	strb	r0, [r4, #1]
 80040e0:	6831      	ldr	r1, [r6, #0]
 80040e2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80040e6:	6031      	str	r1, [r6, #0]
 80040e8:	e0bc      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 80040ea:	2000      	movs	r0, #0
 80040ec:	9000      	str	r0, [sp, #0]
 80040ee:	2303      	movs	r3, #3
 80040f0:	220c      	movs	r2, #12
 80040f2:	f000 f8dd 	bl	80042b0 <.text_12>
 80040f6:	e0b5      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 80040f8:	2000      	movs	r0, #0
 80040fa:	9000      	str	r0, [sp, #0]
 80040fc:	2303      	movs	r3, #3
 80040fe:	2204      	movs	r2, #4
 8004100:	f000 f8d6 	bl	80042b0 <.text_12>
 8004104:	2003      	movs	r0, #3
 8004106:	7060      	strb	r0, [r4, #1]
 8004108:	e001      	b.n	800410e <PE_SubStateMachine_VconnSwap+0x88>
 800410a:	f000 f8b9 	bl	8004280 <.text_8>
 800410e:	2500      	movs	r5, #0
 8004110:	e0a8      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 8004112:	2000      	movs	r0, #0
 8004114:	9000      	str	r0, [sp, #0]
 8004116:	239e      	movs	r3, #158	; 0x9e
 8004118:	2203      	movs	r2, #3
 800411a:	f000 f8c9 	bl	80042b0 <.text_12>
 800411e:	2800      	cmp	r0, #0
 8004120:	d1f6      	bne.n	8004110 <PE_SubStateMachine_VconnSwap+0x8a>
 8004122:	f000 f8a8 	bl	8004276 <.text_7>
 8004126:	b130      	cbz	r0, 8004136 <PE_SubStateMachine_VconnSwap+0xb0>
 8004128:	209f      	movs	r0, #159	; 0x9f
 800412a:	7060      	strb	r0, [r4, #1]
 800412c:	f248 0196 	movw	r1, #32918	; 0x8096
 8004130:	8171      	strh	r1, [r6, #10]
 8004132:	2596      	movs	r5, #150	; 0x96
 8004134:	e001      	b.n	800413a <PE_SubStateMachine_VconnSwap+0xb4>
 8004136:	20a0      	movs	r0, #160	; 0xa0
 8004138:	7060      	strb	r0, [r4, #1]
 800413a:	213f      	movs	r1, #63	; 0x3f
 800413c:	e082      	b.n	8004244 <PE_SubStateMachine_VconnSwap+0x1be>
 800413e:	8970      	ldrh	r0, [r6, #10]
 8004140:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004144:	d07b      	beq.n	800423e <PE_SubStateMachine_VconnSwap+0x1b8>
 8004146:	f898 1000 	ldrb.w	r1, [r8]
 800414a:	2911      	cmp	r1, #17
 800414c:	d115      	bne.n	800417a <PE_SubStateMachine_VconnSwap+0xf4>
 800414e:	4638      	mov	r0, r7
 8004150:	f7fd ff04 	bl	8001f5c <PE_GetCtrlMsg>
 8004154:	2806      	cmp	r0, #6
 8004156:	d110      	bne.n	800417a <PE_SubStateMachine_VconnSwap+0xf4>
 8004158:	f000 f8a5 	bl	80042a6 <.text_11>
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004160:	b112      	cbz	r2, 8004168 <PE_SubStateMachine_VconnSwap+0xe2>
 8004162:	7820      	ldrb	r0, [r4, #0]
 8004164:	2100      	movs	r1, #0
 8004166:	4790      	blx	r2
 8004168:	f000 f87f 	bl	800426a <.text_6>
 800416c:	7820      	ldrb	r0, [r4, #0]
 800416e:	f7fc fa1b 	bl	80005a8 <USBPD_PE_Notification>
 8004172:	2000      	movs	r0, #0
 8004174:	81f0      	strh	r0, [r6, #14]
 8004176:	f887 049e 	strb.w	r0, [r7, #1182]	; 0x49e
 800417a:	e073      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 800417c:	68b8      	ldr	r0, [r7, #8]
 800417e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004180:	b112      	cbz	r2, 8004188 <PE_SubStateMachine_VconnSwap+0x102>
 8004182:	7820      	ldrb	r0, [r4, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	4790      	blx	r2
 8004188:	20a1      	movs	r0, #161	; 0xa1
 800418a:	7060      	strb	r0, [r4, #1]
 800418c:	2100      	movs	r1, #0
 800418e:	f887 149e 	strb.w	r1, [r7, #1182]	; 0x49e
 8004192:	e067      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 8004194:	2000      	movs	r0, #0
 8004196:	9000      	str	r0, [sp, #0]
 8004198:	2303      	movs	r3, #3
 800419a:	2206      	movs	r2, #6
 800419c:	f000 f888 	bl	80042b0 <.text_12>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d15f      	bne.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 80041a4:	f000 f861 	bl	800426a <.text_6>
 80041a8:	e04c      	b.n	8004244 <PE_SubStateMachine_VconnSwap+0x1be>
 80041aa:	2000      	movs	r0, #0
 80041ac:	9000      	str	r0, [sp, #0]
 80041ae:	23a3      	movs	r3, #163	; 0xa3
 80041b0:	220b      	movs	r2, #11
 80041b2:	f000 f87d 	bl	80042b0 <.text_12>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d154      	bne.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 80041ba:	6830      	ldr	r0, [r6, #0]
 80041bc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	f248 011d 	movw	r1, #32797	; 0x801d
 80041c6:	8171      	strh	r1, [r6, #10]
 80041c8:	251d      	movs	r5, #29
 80041ca:	213e      	movs	r1, #62	; 0x3e
 80041cc:	e03a      	b.n	8004244 <PE_SubStateMachine_VconnSwap+0x1be>
 80041ce:	f898 0000 	ldrb.w	r0, [r8]
 80041d2:	2811      	cmp	r0, #17
 80041d4:	d12f      	bne.n	8004236 <PE_SubStateMachine_VconnSwap+0x1b0>
 80041d6:	4638      	mov	r0, r7
 80041d8:	f7fd fec0 	bl	8001f5c <PE_GetCtrlMsg>
 80041dc:	2803      	cmp	r0, #3
 80041de:	d006      	beq.n	80041ee <PE_SubStateMachine_VconnSwap+0x168>
 80041e0:	2804      	cmp	r0, #4
 80041e2:	d015      	beq.n	8004210 <PE_SubStateMachine_VconnSwap+0x18a>
 80041e4:	280c      	cmp	r0, #12
 80041e6:	d00f      	beq.n	8004208 <PE_SubStateMachine_VconnSwap+0x182>
 80041e8:	2810      	cmp	r0, #16
 80041ea:	d015      	beq.n	8004218 <PE_SubStateMachine_VconnSwap+0x192>
 80041ec:	e023      	b.n	8004236 <PE_SubStateMachine_VconnSwap+0x1b0>
 80041ee:	f000 f842 	bl	8004276 <.text_7>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	bf19      	ittee	ne
 80041f6:	209f      	movne	r0, #159	; 0x9f
 80041f8:	7060      	strbne	r0, [r4, #1]
 80041fa:	21a0      	moveq	r1, #160	; 0xa0
 80041fc:	7061      	strbeq	r1, [r4, #1]
 80041fe:	7862      	ldrb	r2, [r4, #1]
 8004200:	f000 f852 	bl	80042a8 <.text_11+0x2>
 8004204:	213f      	movs	r1, #63	; 0x3f
 8004206:	e013      	b.n	8004230 <PE_SubStateMachine_VconnSwap+0x1aa>
 8004208:	f000 f849 	bl	800429e <.text_10>
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	e00f      	b.n	8004230 <PE_SubStateMachine_VconnSwap+0x1aa>
 8004210:	f000 f845 	bl	800429e <.text_10>
 8004214:	2141      	movs	r1, #65	; 0x41
 8004216:	e00b      	b.n	8004230 <PE_SubStateMachine_VconnSwap+0x1aa>
 8004218:	f000 f82d 	bl	8004276 <.text_7>
 800421c:	b910      	cbnz	r0, 8004224 <PE_SubStateMachine_VconnSwap+0x19e>
 800421e:	20a4      	movs	r0, #164	; 0xa4
 8004220:	7060      	strb	r0, [r4, #1]
 8004222:	e001      	b.n	8004228 <PE_SubStateMachine_VconnSwap+0x1a2>
 8004224:	f000 f833 	bl	800428e <.text_9>
 8004228:	7862      	ldrb	r2, [r4, #1]
 800422a:	f000 f83d 	bl	80042a8 <.text_11+0x2>
 800422e:	2143      	movs	r1, #67	; 0x43
 8004230:	7820      	ldrb	r0, [r4, #0]
 8004232:	f7fc f9b9 	bl	80005a8 <USBPD_PE_Notification>
 8004236:	8970      	ldrh	r0, [r6, #10]
 8004238:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800423c:	d112      	bne.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 800423e:	f000 f826 	bl	800428e <.text_9>
 8004242:	211c      	movs	r1, #28
 8004244:	7820      	ldrb	r0, [r4, #0]
 8004246:	f7fc f9af 	bl	80005a8 <USBPD_PE_Notification>
 800424a:	e00b      	b.n	8004264 <PE_SubStateMachine_VconnSwap+0x1de>
 800424c:	68b8      	ldr	r0, [r7, #8]
 800424e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004250:	b112      	cbz	r2, 8004258 <PE_SubStateMachine_VconnSwap+0x1d2>
 8004252:	7820      	ldrb	r0, [r4, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	4790      	blx	r2
 8004258:	f000 f812 	bl	8004280 <.text_8>
 800425c:	f248 002d 	movw	r0, #32813	; 0x802d
 8004260:	2500      	movs	r5, #0
 8004262:	81f0      	strh	r0, [r6, #14]
 8004264:	4628      	mov	r0, r5
 8004266:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

0800426a <.text_6>:
 800426a:	6830      	ldr	r0, [r6, #0]
 800426c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8004270:	6030      	str	r0, [r6, #0]
 8004272:	2142      	movs	r1, #66	; 0x42
 8004274:	4770      	bx	lr

08004276 <.text_7>:
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	6801      	ldr	r1, [r0, #0]
 800427a:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 800427e:	4770      	bx	lr

08004280 <.text_8>:
 8004280:	6830      	ldr	r0, [r6, #0]
 8004282:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8004286:	6030      	str	r0, [r6, #0]
 8004288:	2103      	movs	r1, #3
 800428a:	7061      	strb	r1, [r4, #1]
 800428c:	4770      	bx	lr

0800428e <.text_9>:
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8004294:	6031      	str	r1, [r6, #0]
 8004296:	2003      	movs	r0, #3
 8004298:	7060      	strb	r0, [r4, #1]
 800429a:	2500      	movs	r5, #0
 800429c:	4770      	bx	lr

0800429e <.text_10>:
 800429e:	6830      	ldr	r0, [r6, #0]
 80042a0:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80042a4:	6030      	str	r0, [r6, #0]

080042a6 <.text_11>:
 80042a6:	2203      	movs	r2, #3
 80042a8:	4641      	mov	r1, r8
 80042aa:	4638      	mov	r0, r7
 80042ac:	f7fd be36 	b.w	8001f1c <PE_ResetRxEvent>

080042b0 <.text_12>:
 80042b0:	2100      	movs	r1, #0
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7fd b9ee 	b.w	8001694 <PE_Send_CtrlMessage>

080042b8 <PE_ExtRevisionInteroperability_Cable>:
 80042b8:	6842      	ldr	r2, [r0, #4]
 80042ba:	7813      	ldrb	r3, [r2, #0]
 80042bc:	78d2      	ldrb	r2, [r2, #3]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	4299      	cmp	r1, r3
 80042c4:	bf28      	it	cs
 80042c6:	4619      	movcs	r1, r3
 80042c8:	f361 0283 	bfi	r2, r1, #2, #2
 80042cc:	6841      	ldr	r1, [r0, #4]
 80042ce:	70ca      	strb	r2, [r1, #3]
 80042d0:	f3c2 0181 	ubfx	r1, r2, #2, #2
 80042d4:	f890 023f 	ldrb.w	r0, [r0, #575]	; 0x23f
 80042d8:	f001 b995 	b.w	8005606 <USBPD_PRL_CBL_SetHeaderSpecification>

080042dc <USBPD_PE_SVDM_RequestIdentity>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	f8df 22f0 	ldr.w	r2, [pc, #752]	; 80045d0 <.text_17>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	685d      	ldr	r5, [r3, #4]
 80042ec:	2210      	movs	r2, #16
 80042ee:	f3c5 2340 	ubfx	r3, r5, #9, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bf1e      	ittt	ne
 80042f6:	68e3      	ldrne	r3, [r4, #12]
 80042f8:	2b00      	cmpne	r3, #0
 80042fa:	2902      	cmpne	r1, #2
 80042fc:	d101      	bne.n	8004302 <USBPD_PE_SVDM_RequestIdentity+0x26>
 80042fe:	2202      	movs	r2, #2
 8004300:	e027      	b.n	8004352 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004302:	f204 256a 	addw	r5, r4, #618	; 0x26a
 8004306:	782b      	ldrb	r3, [r5, #0]
 8004308:	b913      	cbnz	r3, 8004310 <USBPD_PE_SVDM_RequestIdentity+0x34>
 800430a:	f000 f84a 	bl	80043a2 <.text_4>
 800430e:	b90b      	cbnz	r3, 8004314 <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004310:	2203      	movs	r2, #3
 8004312:	e01e      	b.n	8004352 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004314:	7069      	strb	r1, [r5, #1]
 8004316:	b111      	cbz	r1, 800431e <USBPD_PE_SVDM_RequestIdentity+0x42>
 8004318:	2901      	cmp	r1, #1
 800431a:	d008      	beq.n	800432e <USBPD_PE_SVDM_RequestIdentity+0x52>
 800431c:	e019      	b.n	8004352 <USBPD_PE_SVDM_RequestIdentity+0x76>
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	680b      	ldr	r3, [r1, #0]
 8004322:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8004326:	2903      	cmp	r1, #3
 8004328:	d113      	bne.n	8004352 <USBPD_PE_SVDM_RequestIdentity+0x76>
 800432a:	217d      	movs	r1, #125	; 0x7d
 800432c:	e00c      	b.n	8004348 <USBPD_PE_SVDM_RequestIdentity+0x6c>
 800432e:	6861      	ldr	r1, [r4, #4]
 8004330:	6809      	ldr	r1, [r1, #0]
 8004332:	f240 7304 	movw	r3, #1796	; 0x704
 8004336:	400b      	ands	r3, r1
 8004338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433c:	bf1c      	itt	ne
 800433e:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8004342:	2903      	cmpne	r1, #3
 8004344:	d105      	bne.n	8004352 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004346:	2105      	movs	r1, #5
 8004348:	7029      	strb	r1, [r5, #0]
 800434a:	68a2      	ldr	r2, [r4, #8]
 800434c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800434e:	4788      	blx	r1
 8004350:	2200      	movs	r2, #0
 8004352:	4610      	mov	r0, r2
 8004354:	bd70      	pop	{r4, r5, r6, pc}

08004356 <USBPD_PE_SVDM_RequestSVID>:
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	f000 f932 	bl	80045c0 <.text_16>
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf14      	ite	ne
 8004360:	2902      	cmpne	r1, #2
 8004362:	2202      	moveq	r2, #2
 8004364:	d01b      	beq.n	800439e <USBPD_PE_SVDM_RequestSVID+0x48>
 8004366:	f204 256a 	addw	r5, r4, #618	; 0x26a
 800436a:	782b      	ldrb	r3, [r5, #0]
 800436c:	b913      	cbnz	r3, 8004374 <USBPD_PE_SVDM_RequestSVID+0x1e>
 800436e:	f000 f818 	bl	80043a2 <.text_4>
 8004372:	b90b      	cbnz	r3, 8004378 <USBPD_PE_SVDM_RequestSVID+0x22>
 8004374:	2203      	movs	r2, #3
 8004376:	e012      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x48>
 8004378:	f3c6 2302 	ubfx	r3, r6, #8, #3
 800437c:	2b03      	cmp	r3, #3
 800437e:	d10e      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x48>
 8004380:	237f      	movs	r3, #127	; 0x7f
 8004382:	7069      	strb	r1, [r5, #1]
 8004384:	702b      	strb	r3, [r5, #0]
 8004386:	b131      	cbz	r1, 8004396 <USBPD_PE_SVDM_RequestSVID+0x40>
 8004388:	2901      	cmp	r1, #1
 800438a:	d108      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x48>
 800438c:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
 8004390:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8004394:	b119      	cbz	r1, 800439e <USBPD_PE_SVDM_RequestSVID+0x48>
 8004396:	68a1      	ldr	r1, [r4, #8]
 8004398:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800439a:	4790      	blx	r2
 800439c:	2200      	movs	r2, #0
 800439e:	4610      	mov	r0, r2
 80043a0:	bd70      	pop	{r4, r5, r6, pc}

080043a2 <.text_4>:
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	681e      	ldr	r6, [r3, #0]
 80043a6:	f3c6 3300 	ubfx	r3, r6, #12, #1
 80043aa:	4770      	bx	lr

080043ac <USBPD_PE_SVDM_RequestMode>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	f000 f8e1 	bl	8004574 <.text_14>
 80043b2:	68ec      	ldr	r4, [r5, #12]
 80043b4:	2310      	movs	r3, #16
 80043b6:	2c00      	cmp	r4, #0
 80043b8:	bf14      	ite	ne
 80043ba:	2902      	cmpne	r1, #2
 80043bc:	2302      	moveq	r3, #2
 80043be:	d01f      	beq.n	8004400 <USBPD_PE_SVDM_RequestMode+0x54>
 80043c0:	f205 266a 	addw	r6, r5, #618	; 0x26a
 80043c4:	7834      	ldrb	r4, [r6, #0]
 80043c6:	b924      	cbnz	r4, 80043d2 <USBPD_PE_SVDM_RequestMode+0x26>
 80043c8:	686c      	ldr	r4, [r5, #4]
 80043ca:	6827      	ldr	r7, [r4, #0]
 80043cc:	f3c7 3400 	ubfx	r4, r7, #12, #1
 80043d0:	b90c      	cbnz	r4, 80043d6 <USBPD_PE_SVDM_RequestMode+0x2a>
 80043d2:	2303      	movs	r3, #3
 80043d4:	e014      	b.n	8004400 <USBPD_PE_SVDM_RequestMode+0x54>
 80043d6:	f3c7 2402 	ubfx	r4, r7, #8, #3
 80043da:	2c03      	cmp	r4, #3
 80043dc:	d110      	bne.n	8004400 <USBPD_PE_SVDM_RequestMode+0x54>
 80043de:	2481      	movs	r4, #129	; 0x81
 80043e0:	7071      	strb	r1, [r6, #1]
 80043e2:	7034      	strb	r4, [r6, #0]
 80043e4:	f8a5 2494 	strh.w	r2, [r5, #1172]	; 0x494
 80043e8:	b131      	cbz	r1, 80043f8 <USBPD_PE_SVDM_RequestMode+0x4c>
 80043ea:	2901      	cmp	r1, #1
 80043ec:	d108      	bne.n	8004400 <USBPD_PE_SVDM_RequestMode+0x54>
 80043ee:	f8d5 1244 	ldr.w	r1, [r5, #580]	; 0x244
 80043f2:	f3c1 4100 	ubfx	r1, r1, #16, #1
 80043f6:	b119      	cbz	r1, 8004400 <USBPD_PE_SVDM_RequestMode+0x54>
 80043f8:	68a9      	ldr	r1, [r5, #8]
 80043fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80043fc:	4790      	blx	r2
 80043fe:	2300      	movs	r3, #0
 8004400:	4618      	mov	r0, r3
 8004402:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004404 <USBPD_PE_SVDM_RequestModeEnter>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	f000 f860 	bl	80044ca <.text_11>
 800440a:	b90d      	cbnz	r5, 8004410 <USBPD_PE_SVDM_RequestModeEnter+0xc>
 800440c:	2402      	movs	r4, #2
 800440e:	e01d      	b.n	800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 8004410:	f206 276a 	addw	r7, r6, #618	; 0x26a
 8004414:	783d      	ldrb	r5, [r7, #0]
 8004416:	b915      	cbnz	r5, 800441e <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8004418:	f000 f851 	bl	80044be <.text_10>
 800441c:	b90d      	cbnz	r5, 8004422 <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 800441e:	2403      	movs	r4, #3
 8004420:	e014      	b.n	800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 8004422:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8004426:	2d03      	cmp	r5, #3
 8004428:	d110      	bne.n	800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 800442a:	f000 f842 	bl	80044b2 <.text_9>
 800442e:	b16d      	cbz	r5, 800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 8004430:	2582      	movs	r5, #130	; 0x82
 8004432:	f000 f833 	bl	800449c <.text_8>
 8004436:	b129      	cbz	r1, 8004444 <USBPD_PE_SVDM_RequestModeEnter+0x40>
 8004438:	2902      	cmp	r1, #2
 800443a:	d000      	beq.n	800443e <USBPD_PE_SVDM_RequestModeEnter+0x3a>
 800443c:	d206      	bcs.n	800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 800443e:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8004442:	b119      	cbz	r1, 800444c <USBPD_PE_SVDM_RequestModeEnter+0x48>
 8004444:	68b1      	ldr	r1, [r6, #8]
 8004446:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004448:	4790      	blx	r2
 800444a:	2400      	movs	r4, #0
 800444c:	4620      	mov	r0, r4
 800444e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004450 <USBPD_PE_SVDM_RequestModeExit>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	f000 f83a 	bl	80044ca <.text_11>
 8004456:	b90d      	cbnz	r5, 800445c <USBPD_PE_SVDM_RequestModeExit+0xc>
 8004458:	2402      	movs	r4, #2
 800445a:	e01d      	b.n	8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 800445c:	f206 276a 	addw	r7, r6, #618	; 0x26a
 8004460:	783d      	ldrb	r5, [r7, #0]
 8004462:	b915      	cbnz	r5, 800446a <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8004464:	f000 f82b 	bl	80044be <.text_10>
 8004468:	b90d      	cbnz	r5, 800446e <USBPD_PE_SVDM_RequestModeExit+0x1e>
 800446a:	2403      	movs	r4, #3
 800446c:	e014      	b.n	8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 800446e:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8004472:	2d03      	cmp	r5, #3
 8004474:	d110      	bne.n	8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 8004476:	f000 f81c 	bl	80044b2 <.text_9>
 800447a:	b16d      	cbz	r5, 8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 800447c:	2583      	movs	r5, #131	; 0x83
 800447e:	f000 f80d 	bl	800449c <.text_8>
 8004482:	b129      	cbz	r1, 8004490 <USBPD_PE_SVDM_RequestModeExit+0x40>
 8004484:	2902      	cmp	r1, #2
 8004486:	d000      	beq.n	800448a <USBPD_PE_SVDM_RequestModeExit+0x3a>
 8004488:	d206      	bcs.n	8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 800448a:	f3c2 4100 	ubfx	r1, r2, #16, #1
 800448e:	b119      	cbz	r1, 8004498 <USBPD_PE_SVDM_RequestModeExit+0x48>
 8004490:	68b1      	ldr	r1, [r6, #8]
 8004492:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004494:	4790      	blx	r2
 8004496:	2400      	movs	r4, #0
 8004498:	4620      	mov	r0, r4
 800449a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800449c <.text_8>:
 800449c:	7079      	strb	r1, [r7, #1]
 800449e:	703d      	strb	r5, [r7, #0]
 80044a0:	f8a6 2494 	strh.w	r2, [r6, #1172]	; 0x494
 80044a4:	f8d6 2244 	ldr.w	r2, [r6, #580]	; 0x244
 80044a8:	f363 1288 	bfi	r2, r3, #6, #3
 80044ac:	f8c6 2244 	str.w	r2, [r6, #580]	; 0x244
 80044b0:	4770      	bx	lr

080044b2 <.text_9>:
 80044b2:	6875      	ldr	r5, [r6, #4]
 80044b4:	f895 c000 	ldrb.w	ip, [r5]
 80044b8:	f3cc 05c0 	ubfx	r5, ip, #3, #1
 80044bc:	4770      	bx	lr

080044be <.text_10>:
 80044be:	6875      	ldr	r5, [r6, #4]
 80044c0:	f8d5 c000 	ldr.w	ip, [r5]
 80044c4:	f3cc 3500 	ubfx	r5, ip, #12, #1
 80044c8:	4770      	bx	lr

080044ca <.text_11>:
 80044ca:	4c41      	ldr	r4, [pc, #260]	; (80045d0 <.text_17>)
 80044cc:	4605      	mov	r5, r0
 80044ce:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 80044d2:	68f5      	ldr	r5, [r6, #12]
 80044d4:	2410      	movs	r4, #16
 80044d6:	4770      	bx	lr

080044d8 <USBPD_PE_SVDM_RequestSpecific>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	f7ff fff6 	bl	80044ca <.text_11>
 80044de:	b90d      	cbnz	r5, 80044e4 <USBPD_PE_SVDM_RequestSpecific+0xc>
 80044e0:	2402      	movs	r4, #2
 80044e2:	e01e      	b.n	8004522 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 80044e4:	f206 276a 	addw	r7, r6, #618	; 0x26a
 80044e8:	783d      	ldrb	r5, [r7, #0]
 80044ea:	b915      	cbnz	r5, 80044f2 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 80044ec:	f7ff ffe7 	bl	80044be <.text_10>
 80044f0:	b90d      	cbnz	r5, 80044f6 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 80044f2:	2403      	movs	r4, #3
 80044f4:	e015      	b.n	8004522 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 80044f6:	f8d6 5244 	ldr.w	r5, [r6, #580]	; 0x244
 80044fa:	f3c5 4500 	ubfx	r5, r5, #16, #1
 80044fe:	b90d      	cbnz	r5, 8004504 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004500:	000d      	movs	r5, r1
 8004502:	d10e      	bne.n	8004522 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 8004504:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8004508:	2d03      	cmp	r5, #3
 800450a:	d10a      	bne.n	8004522 <USBPD_PE_SVDM_RequestSpecific+0x4a>
 800450c:	7079      	strb	r1, [r7, #1]
 800450e:	2400      	movs	r4, #0
 8004510:	2185      	movs	r1, #133	; 0x85
 8004512:	7039      	strb	r1, [r7, #0]
 8004514:	f506 6192 	add.w	r1, r6, #1168	; 0x490
 8004518:	600a      	str	r2, [r1, #0]
 800451a:	808b      	strh	r3, [r1, #4]
 800451c:	68b1      	ldr	r1, [r6, #8]
 800451e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004520:	4790      	blx	r2
 8004522:	4620      	mov	r0, r4
 8004524:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004526 <USBPD_PE_SVDM_RequestAttention>:
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	f000 f824 	bl	8004574 <.text_14>
 800452c:	68eb      	ldr	r3, [r5, #12]
 800452e:	2410      	movs	r4, #16
 8004530:	b103      	cbz	r3, 8004534 <USBPD_PE_SVDM_RequestAttention+0xe>
 8004532:	b109      	cbz	r1, 8004538 <USBPD_PE_SVDM_RequestAttention+0x12>
 8004534:	2402      	movs	r4, #2
 8004536:	e01b      	b.n	8004570 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8004538:	f205 236a 	addw	r3, r5, #618	; 0x26a
 800453c:	7819      	ldrb	r1, [r3, #0]
 800453e:	b921      	cbnz	r1, 800454a <USBPD_PE_SVDM_RequestAttention+0x24>
 8004540:	6869      	ldr	r1, [r5, #4]
 8004542:	680e      	ldr	r6, [r1, #0]
 8004544:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8004548:	b909      	cbnz	r1, 800454e <USBPD_PE_SVDM_RequestAttention+0x28>
 800454a:	2403      	movs	r4, #3
 800454c:	e010      	b.n	8004570 <USBPD_PE_SVDM_RequestAttention+0x4a>
 800454e:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8004552:	2903      	cmp	r1, #3
 8004554:	d10c      	bne.n	8004570 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8004556:	2100      	movs	r1, #0
 8004558:	7059      	strb	r1, [r3, #1]
 800455a:	2484      	movs	r4, #132	; 0x84
 800455c:	701c      	strb	r4, [r3, #0]
 800455e:	f505 6192 	add.w	r1, r5, #1168	; 0x490
 8004562:	2306      	movs	r3, #6
 8004564:	600b      	str	r3, [r1, #0]
 8004566:	808a      	strh	r2, [r1, #4]
 8004568:	2400      	movs	r4, #0
 800456a:	68a9      	ldr	r1, [r5, #8]
 800456c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800456e:	4790      	blx	r2
 8004570:	4620      	mov	r0, r4
 8004572:	bd70      	pop	{r4, r5, r6, pc}

08004574 <.text_14>:
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <.text_17>)
 8004576:	4604      	mov	r4, r0
 8004578:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800457c:	4770      	bx	lr

0800457e <USBPD_PE_UVDM_RequestMessage>:
 800457e:	b570      	push	{r4, r5, r6, lr}
 8004580:	f000 f81e 	bl	80045c0 <.text_16>
 8004584:	b90b      	cbnz	r3, 800458a <USBPD_PE_UVDM_RequestMessage+0xc>
 8004586:	2202      	movs	r2, #2
 8004588:	e018      	b.n	80045bc <USBPD_PE_UVDM_RequestMessage+0x3e>
 800458a:	f204 256a 	addw	r5, r4, #618	; 0x26a
 800458e:	782b      	ldrb	r3, [r5, #0]
 8004590:	b913      	cbnz	r3, 8004598 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8004592:	f7ff ff06 	bl	80043a2 <.text_4>
 8004596:	b90b      	cbnz	r3, 800459c <USBPD_PE_UVDM_RequestMessage+0x1e>
 8004598:	2203      	movs	r2, #3
 800459a:	e00f      	b.n	80045bc <USBPD_PE_UVDM_RequestMessage+0x3e>
 800459c:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 80045a0:	b90b      	cbnz	r3, 80045a6 <USBPD_PE_UVDM_RequestMessage+0x28>
 80045a2:	000b      	movs	r3, r1
 80045a4:	d10a      	bne.n	80045bc <USBPD_PE_UVDM_RequestMessage+0x3e>
 80045a6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d106      	bne.n	80045bc <USBPD_PE_UVDM_RequestMessage+0x3e>
 80045ae:	7069      	strb	r1, [r5, #1]
 80045b0:	2186      	movs	r1, #134	; 0x86
 80045b2:	7029      	strb	r1, [r5, #0]
 80045b4:	68a2      	ldr	r2, [r4, #8]
 80045b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80045b8:	4788      	blx	r1
 80045ba:	2200      	movs	r2, #0
 80045bc:	4610      	mov	r0, r2
 80045be:	bd70      	pop	{r4, r5, r6, pc}

080045c0 <.text_16>:
 80045c0:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <.text_17>)
 80045c2:	4603      	mov	r3, r0
 80045c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80045c8:	68e3      	ldr	r3, [r4, #12]
 80045ca:	2210      	movs	r2, #16
 80045cc:	4770      	bx	lr
	...

080045d0 <.text_17>:
 80045d0:	200001fc 	.word	0x200001fc

080045d4 <PE_Receive_SVDM>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	f500 7213 	add.w	r2, r0, #588	; 0x24c
 80045da:	f500 7409 	add.w	r4, r0, #548	; 0x224
 80045de:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80045e0:	0b09      	lsrs	r1, r1, #12
 80045e2:	f001 0107 	and.w	r1, r1, #7
 80045e6:	1e4b      	subs	r3, r1, #1
 80045e8:	7623      	strb	r3, [r4, #24]
 80045ea:	7f51      	ldrb	r1, [r2, #29]
 80045ec:	2900      	cmp	r1, #0
 80045ee:	d16e      	bne.n	80046ce <PE_Receive_SVDM+0xfa>
 80045f0:	e010      	b.n	8004614 <PE_Receive_SVDM+0x40>
 80045f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80045f8:	799d      	ldrb	r5, [r3, #6]
 80045fa:	79de      	ldrb	r6, [r3, #7]
 80045fc:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8004600:	7a1d      	ldrb	r5, [r3, #8]
 8004602:	7a5b      	ldrb	r3, [r3, #9]
 8004604:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004608:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 800460c:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
 8004610:	1c49      	adds	r1, r1, #1
 8004612:	b2c9      	uxtb	r1, r1
 8004614:	7e25      	ldrb	r5, [r4, #24]
 8004616:	42a9      	cmp	r1, r5
 8004618:	dbeb      	blt.n	80045f2 <PE_Receive_SVDM+0x1e>
 800461a:	f890 648c 	ldrb.w	r6, [r0, #1164]	; 0x48c
 800461e:	f006 061f 	and.w	r6, r6, #31
 8004622:	1e76      	subs	r6, r6, #1
 8004624:	f248 0319 	movw	r3, #32793	; 0x8019
 8004628:	f248 010f 	movw	r1, #32783	; 0x800f
 800462c:	d00d      	beq.n	800464a <PE_Receive_SVDM+0x76>
 800462e:	1e76      	subs	r6, r6, #1
 8004630:	d029      	beq.n	8004686 <PE_Receive_SVDM+0xb2>
 8004632:	1e76      	subs	r6, r6, #1
 8004634:	d02c      	beq.n	8004690 <PE_Receive_SVDM+0xbc>
 8004636:	1e76      	subs	r6, r6, #1
 8004638:	d02f      	beq.n	800469a <PE_Receive_SVDM+0xc6>
 800463a:	1e76      	subs	r6, r6, #1
 800463c:	d032      	beq.n	80046a4 <PE_Receive_SVDM+0xd0>
 800463e:	1e76      	subs	r6, r6, #1
 8004640:	d035      	beq.n	80046ae <PE_Receive_SVDM+0xda>
 8004642:	3e0a      	subs	r6, #10
 8004644:	2e0f      	cmp	r6, #15
 8004646:	d93d      	bls.n	80046c4 <PE_Receive_SVDM+0xf0>
 8004648:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800464a:	2350      	movs	r3, #80	; 0x50
 800464c:	7013      	strb	r3, [r2, #0]
 800464e:	6845      	ldr	r5, [r0, #4]
 8004650:	f8d0 348c 	ldr.w	r3, [r0, #1164]	; 0x48c
 8004654:	782e      	ldrb	r6, [r5, #0]
 8004656:	f3c3 3341 	ubfx	r3, r3, #13, #2
 800465a:	f3c6 1540 	ubfx	r5, r6, #5, #1
 800465e:	42ab      	cmp	r3, r5
 8004660:	da05      	bge.n	800466e <PE_Receive_SVDM+0x9a>
 8004662:	f8d0 348c 	ldr.w	r3, [r0, #1164]	; 0x48c
 8004666:	0b5b      	lsrs	r3, r3, #13
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	e003      	b.n	8004676 <PE_Receive_SVDM+0xa2>
 800466e:	6843      	ldr	r3, [r0, #4]
 8004670:	781d      	ldrb	r5, [r3, #0]
 8004672:	f3c5 1340 	ubfx	r3, r5, #5, #1
 8004676:	6845      	ldr	r5, [r0, #4]
 8004678:	782e      	ldrb	r6, [r5, #0]
 800467a:	f363 1645 	bfi	r6, r3, #5, #1
 800467e:	702e      	strb	r6, [r5, #0]
 8004680:	8051      	strh	r1, [r2, #2]
 8004682:	2175      	movs	r1, #117	; 0x75
 8004684:	e022      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 8004686:	2052      	movs	r0, #82	; 0x52
 8004688:	7010      	strb	r0, [r2, #0]
 800468a:	8051      	strh	r1, [r2, #2]
 800468c:	2176      	movs	r1, #118	; 0x76
 800468e:	e01d      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 8004690:	2053      	movs	r0, #83	; 0x53
 8004692:	7010      	strb	r0, [r2, #0]
 8004694:	8051      	strh	r1, [r2, #2]
 8004696:	2178      	movs	r1, #120	; 0x78
 8004698:	e018      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 800469a:	2054      	movs	r0, #84	; 0x54
 800469c:	7010      	strb	r0, [r2, #0]
 800469e:	8053      	strh	r3, [r2, #2]
 80046a0:	2179      	movs	r1, #121	; 0x79
 80046a2:	e013      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 80046a4:	2055      	movs	r0, #85	; 0x55
 80046a6:	7010      	strb	r0, [r2, #0]
 80046a8:	8053      	strh	r3, [r2, #2]
 80046aa:	217a      	movs	r1, #122	; 0x7a
 80046ac:	e00e      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 80046ae:	68c0      	ldr	r0, [r0, #12]
 80046b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046b2:	b12b      	cbz	r3, 80046c0 <PE_Receive_SVDM+0xec>
 80046b4:	0029      	movs	r1, r5
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	7ee0      	ldrb	r0, [r4, #27]
 80046ba:	bf18      	it	ne
 80046bc:	2101      	movne	r1, #1
 80046be:	4798      	blx	r3
 80046c0:	2103      	movs	r1, #3
 80046c2:	e003      	b.n	80046cc <PE_Receive_SVDM+0xf8>
 80046c4:	205a      	movs	r0, #90	; 0x5a
 80046c6:	7010      	strb	r0, [r2, #0]
 80046c8:	8051      	strh	r1, [r2, #2]
 80046ca:	217b      	movs	r1, #123	; 0x7b
 80046cc:	7721      	strb	r1, [r4, #28]
 80046ce:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080046d0 <PE_StateMachine_VDM>:
 80046d0:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	f504 770f 	add.w	r7, r4, #572	; 0x23c
 80046da:	b099      	sub	sp, #100	; 0x64
 80046dc:	f897 c004 	ldrb.w	ip, [r7, #4]
 80046e0:	f1ac 0075 	sub.w	r0, ip, #117	; 0x75
 80046e4:	2807      	cmp	r0, #7
 80046e6:	f04f 0902 	mov.w	r9, #2
 80046ea:	d203      	bcs.n	80046f4 <PE_StateMachine_VDM+0x24>
 80046ec:	7809      	ldrb	r1, [r1, #0]
 80046ee:	2914      	cmp	r1, #20
 80046f0:	f040 8478 	bne.w	8004fe4 <PE_StateMachine_VDM+0x914>
 80046f4:	2305      	movs	r3, #5
 80046f6:	2003      	movs	r0, #3
 80046f8:	2204      	movs	r2, #4
 80046fa:	f1bc 0f75 	cmp.w	ip, #117	; 0x75
 80046fe:	f204 2869 	addw	r8, r4, #617	; 0x269
 8004702:	f204 468c 	addw	r6, r4, #1164	; 0x48c
 8004706:	f04f 0a01 	mov.w	sl, #1
 800470a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800470e:	f248 051e 	movw	r5, #32798	; 0x801e
 8004712:	d04c      	beq.n	80047ae <PE_StateMachine_VDM+0xde>
 8004714:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8004718:	f000 80a6 	beq.w	8004868 <PE_StateMachine_VDM+0x198>
 800471c:	f1bc 0f77 	cmp.w	ip, #119	; 0x77
 8004720:	f000 810a 	beq.w	8004938 <PE_StateMachine_VDM+0x268>
 8004724:	f1bc 0f78 	cmp.w	ip, #120	; 0x78
 8004728:	f000 8159 	beq.w	80049de <PE_StateMachine_VDM+0x30e>
 800472c:	f1bc 0f79 	cmp.w	ip, #121	; 0x79
 8004730:	f000 81a6 	beq.w	8004a80 <PE_StateMachine_VDM+0x3b0>
 8004734:	f1bc 0f7a 	cmp.w	ip, #122	; 0x7a
 8004738:	f000 81c2 	beq.w	8004ac0 <PE_StateMachine_VDM+0x3f0>
 800473c:	f1bc 0f7b 	cmp.w	ip, #123	; 0x7b
 8004740:	f000 81ed 	beq.w	8004b1e <PE_StateMachine_VDM+0x44e>
 8004744:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8004748:	f000 8223 	beq.w	8004b92 <PE_StateMachine_VDM+0x4c2>
 800474c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 8004750:	f000 826c 	beq.w	8004c2c <PE_StateMachine_VDM+0x55c>
 8004754:	f1bc 0f81 	cmp.w	ip, #129	; 0x81
 8004758:	f000 82a8 	beq.w	8004cac <PE_StateMachine_VDM+0x5dc>
 800475c:	f1bc 0f82 	cmp.w	ip, #130	; 0x82
 8004760:	f000 830c 	beq.w	8004d7c <PE_StateMachine_VDM+0x6ac>
 8004764:	f1bc 0f83 	cmp.w	ip, #131	; 0x83
 8004768:	f000 8355 	beq.w	8004e16 <PE_StateMachine_VDM+0x746>
 800476c:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
 8004770:	f000 8422 	beq.w	8004fb8 <PE_StateMachine_VDM+0x8e8>
 8004774:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
 8004778:	f000 83a0 	beq.w	8004ebc <PE_StateMachine_VDM+0x7ec>
 800477c:	f1bc 0f87 	cmp.w	ip, #135	; 0x87
 8004780:	f000 8226 	beq.w	8004bd0 <PE_StateMachine_VDM+0x500>
 8004784:	f1bc 0f89 	cmp.w	ip, #137	; 0x89
 8004788:	f000 8262 	beq.w	8004c50 <PE_StateMachine_VDM+0x580>
 800478c:	f1bc 0f8b 	cmp.w	ip, #139	; 0x8b
 8004790:	f000 82b1 	beq.w	8004cf6 <PE_StateMachine_VDM+0x626>
 8004794:	f1bc 0f8c 	cmp.w	ip, #140	; 0x8c
 8004798:	f000 8300 	beq.w	8004d9c <PE_StateMachine_VDM+0x6cc>
 800479c:	f1bc 0f8d 	cmp.w	ip, #141	; 0x8d
 80047a0:	f000 8354 	beq.w	8004e4c <PE_StateMachine_VDM+0x77c>
 80047a4:	f1bc 0f8f 	cmp.w	ip, #143	; 0x8f
 80047a8:	f000 83a8 	beq.w	8004efc <PE_StateMachine_VDM+0x82c>
 80047ac:	e10c      	b.n	80049c8 <PE_StateMachine_VDM+0x2f8>
 80047ae:	f000 fcb1 	bl	8005114 <.text_39>
 80047b2:	d05b      	beq.n	800486c <PE_StateMachine_VDM+0x19c>
 80047b4:	6830      	ldr	r0, [r6, #0]
 80047b6:	f36a 0004 	bfi	r0, sl, #0, #5
 80047ba:	f000 fc86 	bl	80050ca <.text_34>
 80047be:	b110      	cbz	r0, 80047c6 <PE_StateMachine_VDM+0xf6>
 80047c0:	f000 fc51 	bl	8005066 <.text_31>
 80047c4:	d044      	beq.n	8004850 <PE_StateMachine_VDM+0x180>
 80047c6:	68e0      	ldr	r0, [r4, #12]
 80047c8:	2800      	cmp	r0, #0
 80047ca:	bf1c      	itt	ne
 80047cc:	6802      	ldrne	r2, [r0, #0]
 80047ce:	2a00      	cmpne	r2, #0
 80047d0:	d03e      	beq.n	8004850 <PE_StateMachine_VDM+0x180>
 80047d2:	6830      	ldr	r0, [r6, #0]
 80047d4:	0c00      	lsrs	r0, r0, #16
 80047d6:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 80047da:	d139      	bne.n	8004850 <PE_StateMachine_VDM+0x180>
 80047dc:	78f8      	ldrb	r0, [r7, #3]
 80047de:	a908      	add	r1, sp, #32
 80047e0:	4790      	blx	r2
 80047e2:	2803      	cmp	r0, #3
 80047e4:	d002      	beq.n	80047ec <PE_StateMachine_VDM+0x11c>
 80047e6:	280f      	cmp	r0, #15
 80047e8:	d003      	beq.n	80047f2 <PE_StateMachine_VDM+0x122>
 80047ea:	e031      	b.n	8004850 <PE_StateMachine_VDM+0x180>
 80047ec:	f000 fc86 	bl	80050fc <.text_36>
 80047f0:	e030      	b.n	8004854 <PE_StateMachine_VDM+0x184>
 80047f2:	f000 fca0 	bl	8005136 <.text_41>
 80047f6:	a811      	add	r0, sp, #68	; 0x44
 80047f8:	9908      	ldr	r1, [sp, #32]
 80047fa:	6041      	str	r1, [r0, #4]
 80047fc:	2504      	movs	r5, #4
 80047fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004800:	6081      	str	r1, [r0, #8]
 8004802:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004804:	60c1      	str	r1, [r0, #12]
 8004806:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800480a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800480e:	b111      	cbz	r1, 8004816 <PE_StateMachine_VDM+0x146>
 8004810:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004812:	6101      	str	r1, [r0, #16]
 8004814:	2505      	movs	r5, #5
 8004816:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800481a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800481e:	b121      	cbz	r1, 800482a <PE_StateMachine_VDM+0x15a>
 8004820:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004822:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004826:	1c6d      	adds	r5, r5, #1
 8004828:	b2ed      	uxtb	r5, r5
 800482a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800482e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004832:	b181      	cbz	r1, 8004856 <PE_StateMachine_VDM+0x186>
 8004834:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8004838:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800483c:	b119      	cbz	r1, 8004846 <PE_StateMachine_VDM+0x176>
 800483e:	2100      	movs	r1, #0
 8004840:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004844:	1c6d      	adds	r5, r5, #1
 8004846:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004848:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800484c:	1c6d      	adds	r5, r5, #1
 800484e:	e002      	b.n	8004856 <PE_StateMachine_VDM+0x186>
 8004850:	f000 fc58 	bl	8005104 <.text_37>
 8004854:	6030      	str	r0, [r6, #0]
 8004856:	6831      	ldr	r1, [r6, #0]
 8004858:	2000      	movs	r0, #0
 800485a:	2203      	movs	r2, #3
 800485c:	9111      	str	r1, [sp, #68]	; 0x44
 800485e:	9002      	str	r0, [sp, #8]
 8004860:	9201      	str	r2, [sp, #4]
 8004862:	9500      	str	r5, [sp, #0]
 8004864:	ab11      	add	r3, sp, #68	; 0x44
 8004866:	e18e      	b.n	8004b86 <PE_StateMachine_VDM+0x4b6>
 8004868:	f000 fc54 	bl	8005114 <.text_39>
 800486c:	f000 839f 	beq.w	8004fae <PE_StateMachine_VDM+0x8de>
 8004870:	6830      	ldr	r0, [r6, #0]
 8004872:	f369 0004 	bfi	r0, r9, #0, #5
 8004876:	f000 fc28 	bl	80050ca <.text_34>
 800487a:	b110      	cbz	r0, 8004882 <PE_StateMachine_VDM+0x1b2>
 800487c:	f000 fbf3 	bl	8005066 <.text_31>
 8004880:	d04e      	beq.n	8004920 <PE_StateMachine_VDM+0x250>
 8004882:	68e0      	ldr	r0, [r4, #12]
 8004884:	6843      	ldr	r3, [r0, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04a      	beq.n	8004920 <PE_StateMachine_VDM+0x250>
 800488a:	6830      	ldr	r0, [r6, #0]
 800488c:	0c00      	lsrs	r0, r0, #16
 800488e:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8004892:	d145      	bne.n	8004920 <PE_StateMachine_VDM+0x250>
 8004894:	78f8      	ldrb	r0, [r7, #3]
 8004896:	f204 223d 	addw	r2, r4, #573	; 0x23d
 800489a:	a903      	add	r1, sp, #12
 800489c:	4798      	blx	r3
 800489e:	2803      	cmp	r0, #3
 80048a0:	d03b      	beq.n	800491a <PE_StateMachine_VDM+0x24a>
 80048a2:	280f      	cmp	r0, #15
 80048a4:	d13c      	bne.n	8004920 <PE_StateMachine_VDM+0x250>
 80048a6:	f000 fc46 	bl	8005136 <.text_41>
 80048aa:	211c      	movs	r1, #28
 80048ac:	a804      	add	r0, sp, #16
 80048ae:	f015 fd4d 	bl	801a34c <__aeabi_memclr>
 80048b2:	2500      	movs	r5, #0
 80048b4:	2200      	movs	r2, #0
 80048b6:	e017      	b.n	80048e8 <PE_StateMachine_VDM+0x218>
 80048b8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80048bc:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80048c0:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
 80048c4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80048c8:	e00b      	b.n	80048e2 <PE_StateMachine_VDM+0x212>
 80048ca:	1c6d      	adds	r5, r5, #1
 80048cc:	0850      	lsrs	r0, r2, #1
 80048ce:	07d3      	lsls	r3, r2, #31
 80048d0:	a905      	add	r1, sp, #20
 80048d2:	d5f1      	bpl.n	80048b8 <PE_StateMachine_VDM+0x1e8>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80048da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80048de:	ea43 030c 	orr.w	r3, r3, ip
 80048e2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 80048e6:	1c52      	adds	r2, r2, #1
 80048e8:	7878      	ldrb	r0, [r7, #1]
 80048ea:	4282      	cmp	r2, r0
 80048ec:	bf38      	it	cc
 80048ee:	2a0c      	cmpcc	r2, #12
 80048f0:	d3eb      	bcc.n	80048ca <PE_StateMachine_VDM+0x1fa>
 80048f2:	1b40      	subs	r0, r0, r5
 80048f4:	7078      	strb	r0, [r7, #1]
 80048f6:	b2e8      	uxtb	r0, r5
 80048f8:	280c      	cmp	r0, #12
 80048fa:	d109      	bne.n	8004910 <PE_StateMachine_VDM+0x240>
 80048fc:	6831      	ldr	r1, [r6, #0]
 80048fe:	9104      	str	r1, [sp, #16]
 8004900:	2000      	movs	r0, #0
 8004902:	2277      	movs	r2, #119	; 0x77
 8004904:	2107      	movs	r1, #7
 8004906:	9002      	str	r0, [sp, #8]
 8004908:	9201      	str	r2, [sp, #4]
 800490a:	9100      	str	r1, [sp, #0]
 800490c:	ab04      	add	r3, sp, #16
 800490e:	e053      	b.n	80049b8 <PE_StateMachine_VDM+0x2e8>
 8004910:	062d      	lsls	r5, r5, #24
 8004912:	0e6d      	lsrs	r5, r5, #25
 8004914:	6830      	ldr	r0, [r6, #0]
 8004916:	1cad      	adds	r5, r5, #2
 8004918:	e005      	b.n	8004926 <PE_StateMachine_VDM+0x256>
 800491a:	f000 fbef 	bl	80050fc <.text_36>
 800491e:	e001      	b.n	8004924 <PE_StateMachine_VDM+0x254>
 8004920:	f000 fbf0 	bl	8005104 <.text_37>
 8004924:	6030      	str	r0, [r6, #0]
 8004926:	9004      	str	r0, [sp, #16]
 8004928:	2103      	movs	r1, #3
 800492a:	2000      	movs	r0, #0
 800492c:	b2ed      	uxtb	r5, r5
 800492e:	9002      	str	r0, [sp, #8]
 8004930:	9101      	str	r1, [sp, #4]
 8004932:	9500      	str	r5, [sp, #0]
 8004934:	ab04      	add	r3, sp, #16
 8004936:	e126      	b.n	8004b86 <PE_StateMachine_VDM+0x4b6>
 8004938:	f000 fbe8 	bl	800510c <.text_38>
 800493c:	d096      	beq.n	800486c <PE_StateMachine_VDM+0x19c>
 800493e:	6830      	ldr	r0, [r6, #0]
 8004940:	f369 0004 	bfi	r0, r9, #0, #5
 8004944:	6030      	str	r0, [r6, #0]
 8004946:	aa03      	add	r2, sp, #12
 8004948:	f000 fb93 	bl	8005072 <.text_32>
 800494c:	f36a 1187 	bfi	r1, sl, #6, #2
 8004950:	6031      	str	r1, [r6, #0]
 8004952:	a904      	add	r1, sp, #16
 8004954:	68e3      	ldr	r3, [r4, #12]
 8004956:	78f8      	ldrb	r0, [r7, #3]
 8004958:	685d      	ldr	r5, [r3, #4]
 800495a:	47a8      	blx	r5
 800495c:	211c      	movs	r1, #28
 800495e:	a805      	add	r0, sp, #20
 8004960:	f015 fcf4 	bl	801a34c <__aeabi_memclr>
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	e015      	b.n	8004996 <PE_StateMachine_VDM+0x2c6>
 800496a:	9e04      	ldr	r6, [sp, #16]
 800496c:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 8004970:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 8004974:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004978:	e00a      	b.n	8004990 <PE_StateMachine_VDM+0x2c0>
 800497a:	1c52      	adds	r2, r2, #1
 800497c:	0858      	lsrs	r0, r3, #1
 800497e:	07dd      	lsls	r5, r3, #31
 8004980:	a906      	add	r1, sp, #24
 8004982:	d5f2      	bpl.n	800496a <PE_StateMachine_VDM+0x29a>
 8004984:	9d04      	ldr	r5, [sp, #16]
 8004986:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800498a:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 800498e:	4335      	orrs	r5, r6
 8004990:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
 8004994:	1c5b      	adds	r3, r3, #1
 8004996:	7878      	ldrb	r0, [r7, #1]
 8004998:	4283      	cmp	r3, r0
 800499a:	bf38      	it	cc
 800499c:	2b0c      	cmpcc	r3, #12
 800499e:	d3ec      	bcc.n	800497a <PE_StateMachine_VDM+0x2aa>
 80049a0:	1a80      	subs	r0, r0, r2
 80049a2:	7078      	strb	r0, [r7, #1]
 80049a4:	b2d0      	uxtb	r0, r2
 80049a6:	280c      	cmp	r0, #12
 80049a8:	d10f      	bne.n	80049ca <PE_StateMachine_VDM+0x2fa>
 80049aa:	2100      	movs	r1, #0
 80049ac:	2077      	movs	r0, #119	; 0x77
 80049ae:	2207      	movs	r2, #7
 80049b0:	9102      	str	r1, [sp, #8]
 80049b2:	9001      	str	r0, [sp, #4]
 80049b4:	9200      	str	r2, [sp, #0]
 80049b6:	ab05      	add	r3, sp, #20
 80049b8:	f898 1000 	ldrb.w	r1, [r8]
 80049bc:	220f      	movs	r2, #15
 80049be:	f000 fc4f 	bl	8005260 <.text_50>
 80049c2:	f248 000f 	movw	r0, #32783	; 0x800f
 80049c6:	8278      	strh	r0, [r7, #18]
 80049c8:	e30c      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 80049ca:	0612      	lsls	r2, r2, #24
 80049cc:	0e52      	lsrs	r2, r2, #25
 80049ce:	1c92      	adds	r2, r2, #2
 80049d0:	2100      	movs	r1, #0
 80049d2:	2003      	movs	r0, #3
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	9102      	str	r1, [sp, #8]
 80049d8:	9001      	str	r0, [sp, #4]
 80049da:	9200      	str	r2, [sp, #0]
 80049dc:	e04e      	b.n	8004a7c <PE_StateMachine_VDM+0x3ac>
 80049de:	8a79      	ldrh	r1, [r7, #18]
 80049e0:	2501      	movs	r5, #1
 80049e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80049e6:	d06d      	beq.n	8004ac4 <PE_StateMachine_VDM+0x3f4>
 80049e8:	6831      	ldr	r1, [r6, #0]
 80049ea:	f360 0104 	bfi	r1, r0, #0, #5
 80049ee:	f000 fb1f 	bl	8005030 <.text_27>
 80049f2:	6832      	ldr	r2, [r6, #0]
 80049f4:	7801      	ldrb	r1, [r0, #0]
 80049f6:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80049fa:	f000 fb2e 	bl	800505a <.text_30>
 80049fe:	6860      	ldr	r0, [r4, #4]
 8004a00:	7801      	ldrb	r1, [r0, #0]
 8004a02:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004a06:	b110      	cbz	r0, 8004a0e <PE_StateMachine_VDM+0x33e>
 8004a08:	f000 fb2d 	bl	8005066 <.text_31>
 8004a0c:	d02c      	beq.n	8004a68 <PE_StateMachine_VDM+0x398>
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004a14:	f1bc 0f00 	cmp.w	ip, #0
 8004a18:	d026      	beq.n	8004a68 <PE_StateMachine_VDM+0x398>
 8004a1a:	6831      	ldr	r1, [r6, #0]
 8004a1c:	78f8      	ldrb	r0, [r7, #3]
 8004a1e:	ab03      	add	r3, sp, #12
 8004a20:	aa04      	add	r2, sp, #16
 8004a22:	0c09      	lsrs	r1, r1, #16
 8004a24:	47e0      	blx	ip
 8004a26:	2803      	cmp	r0, #3
 8004a28:	d002      	beq.n	8004a30 <PE_StateMachine_VDM+0x360>
 8004a2a:	280f      	cmp	r0, #15
 8004a2c:	d005      	beq.n	8004a3a <PE_StateMachine_VDM+0x36a>
 8004a2e:	e01b      	b.n	8004a68 <PE_StateMachine_VDM+0x398>
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004a36:	6032      	str	r2, [r6, #0]
 8004a38:	e019      	b.n	8004a6e <PE_StateMachine_VDM+0x39e>
 8004a3a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004a3e:	b198      	cbz	r0, 8004a68 <PE_StateMachine_VDM+0x398>
 8004a40:	2807      	cmp	r0, #7
 8004a42:	d211      	bcs.n	8004a68 <PE_StateMachine_VDM+0x398>
 8004a44:	f000 fb77 	bl	8005136 <.text_41>
 8004a48:	ab06      	add	r3, sp, #24
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004a50:	4288      	cmp	r0, r1
 8004a52:	d20c      	bcs.n	8004a6e <PE_StateMachine_VDM+0x39e>
 8004a54:	9a04      	ldr	r2, [sp, #16]
 8004a56:	6811      	ldr	r1, [r2, #0]
 8004a58:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8004a5c:	1c6d      	adds	r5, r5, #1
 8004a5e:	9904      	ldr	r1, [sp, #16]
 8004a60:	1d0a      	adds	r2, r1, #4
 8004a62:	9204      	str	r2, [sp, #16]
 8004a64:	1c40      	adds	r0, r0, #1
 8004a66:	e7f1      	b.n	8004a4c <PE_StateMachine_VDM+0x37c>
 8004a68:	f000 fb4c 	bl	8005104 <.text_37>
 8004a6c:	6030      	str	r0, [r6, #0]
 8004a6e:	2000      	movs	r0, #0
 8004a70:	6831      	ldr	r1, [r6, #0]
 8004a72:	9105      	str	r1, [sp, #20]
 8004a74:	2203      	movs	r2, #3
 8004a76:	9002      	str	r0, [sp, #8]
 8004a78:	9201      	str	r2, [sp, #4]
 8004a7a:	9500      	str	r5, [sp, #0]
 8004a7c:	ab05      	add	r3, sp, #20
 8004a7e:	e082      	b.n	8004b86 <PE_StateMachine_VDM+0x4b6>
 8004a80:	f000 fb44 	bl	800510c <.text_38>
 8004a84:	d01e      	beq.n	8004ac4 <PE_StateMachine_VDM+0x3f4>
 8004a86:	6830      	ldr	r0, [r6, #0]
 8004a88:	f362 0004 	bfi	r0, r2, #0, #5
 8004a8c:	f000 fb1d 	bl	80050ca <.text_34>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d134      	bne.n	8004afe <PE_StateMachine_VDM+0x42e>
 8004a94:	68e1      	ldr	r1, [r4, #12]
 8004a96:	68c8      	ldr	r0, [r1, #12]
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d030      	beq.n	8004afe <PE_StateMachine_VDM+0x42e>
 8004a9c:	f000 fb8a 	bl	80051b4 <.text_46>
 8004aa0:	68dd      	ldr	r5, [r3, #12]
 8004aa2:	47a8      	blx	r5
 8004aa4:	2803      	cmp	r0, #3
 8004aa6:	d027      	beq.n	8004af8 <PE_StateMachine_VDM+0x428>
 8004aa8:	280f      	cmp	r0, #15
 8004aaa:	d128      	bne.n	8004afe <PE_StateMachine_VDM+0x42e>
 8004aac:	f000 fb43 	bl	8005136 <.text_41>
 8004ab0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004aba:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 8004abe:	e019      	b.n	8004af4 <PE_StateMachine_VDM+0x424>
 8004ac0:	f000 fb24 	bl	800510c <.text_38>
 8004ac4:	f000 8273 	beq.w	8004fae <PE_StateMachine_VDM+0x8de>
 8004ac8:	6830      	ldr	r0, [r6, #0]
 8004aca:	f363 0004 	bfi	r0, r3, #0, #5
 8004ace:	f000 fafc 	bl	80050ca <.text_34>
 8004ad2:	b9a0      	cbnz	r0, 8004afe <PE_StateMachine_VDM+0x42e>
 8004ad4:	68e1      	ldr	r1, [r4, #12]
 8004ad6:	6908      	ldr	r0, [r1, #16]
 8004ad8:	b188      	cbz	r0, 8004afe <PE_StateMachine_VDM+0x42e>
 8004ada:	f000 fb6b 	bl	80051b4 <.text_46>
 8004ade:	691d      	ldr	r5, [r3, #16]
 8004ae0:	47a8      	blx	r5
 8004ae2:	2803      	cmp	r0, #3
 8004ae4:	d008      	beq.n	8004af8 <PE_StateMachine_VDM+0x428>
 8004ae6:	280f      	cmp	r0, #15
 8004ae8:	d109      	bne.n	8004afe <PE_StateMachine_VDM+0x42e>
 8004aea:	f000 fb24 	bl	8005136 <.text_41>
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	e005      	b.n	8004b04 <PE_StateMachine_VDM+0x434>
 8004af8:	f000 fb00 	bl	80050fc <.text_36>
 8004afc:	e001      	b.n	8004b02 <PE_StateMachine_VDM+0x432>
 8004afe:	f000 fb01 	bl	8005104 <.text_37>
 8004b02:	6030      	str	r0, [r6, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	9102      	str	r1, [sp, #8]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	4633      	mov	r3, r6
 8004b12:	f898 1000 	ldrb.w	r1, [r8]
 8004b16:	220f      	movs	r2, #15
 8004b18:	f000 fb49 	bl	80051ae <.text_45>
 8004b1c:	e262      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004b1e:	f000 faf9 	bl	8005114 <.text_39>
 8004b22:	d0cf      	beq.n	8004ac4 <PE_StateMachine_VDM+0x3f4>
 8004b24:	68e0      	ldr	r0, [r4, #12]
 8004b26:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
 8004b2a:	f1bc 0f00 	cmp.w	ip, #0
 8004b2e:	d01e      	beq.n	8004b6e <PE_StateMachine_VDM+0x49e>
 8004b30:	7831      	ldrb	r1, [r6, #0]
 8004b32:	78f8      	ldrb	r0, [r7, #3]
 8004b34:	f504 7309 	add.w	r3, r4, #548	; 0x224
 8004b38:	463a      	mov	r2, r7
 8004b3a:	f001 011f 	and.w	r1, r1, #31
 8004b3e:	47e0      	blx	ip
 8004b40:	2803      	cmp	r0, #3
 8004b42:	d011      	beq.n	8004b68 <PE_StateMachine_VDM+0x498>
 8004b44:	280f      	cmp	r0, #15
 8004b46:	d112      	bne.n	8004b6e <PE_StateMachine_VDM+0x49e>
 8004b48:	f000 faf5 	bl	8005136 <.text_41>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	7839      	ldrb	r1, [r7, #0]
 8004b50:	4288      	cmp	r0, r1
 8004b52:	d20f      	bcs.n	8004b74 <PE_StateMachine_VDM+0x4a4>
 8004b54:	f504 7209 	add.w	r2, r4, #548	; 0x224
 8004b58:	1c6d      	adds	r5, r5, #1
 8004b5a:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004b5e:	aa04      	add	r2, sp, #16
 8004b60:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8004b64:	1c40      	adds	r0, r0, #1
 8004b66:	e7f2      	b.n	8004b4e <PE_StateMachine_VDM+0x47e>
 8004b68:	f000 fac8 	bl	80050fc <.text_36>
 8004b6c:	e001      	b.n	8004b72 <PE_StateMachine_VDM+0x4a2>
 8004b6e:	f000 fac9 	bl	8005104 <.text_37>
 8004b72:	6030      	str	r0, [r6, #0]
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	2000      	movs	r0, #0
 8004b78:	2203      	movs	r2, #3
 8004b7a:	b2ed      	uxtb	r5, r5
 8004b7c:	9103      	str	r1, [sp, #12]
 8004b7e:	9002      	str	r0, [sp, #8]
 8004b80:	9201      	str	r2, [sp, #4]
 8004b82:	9500      	str	r5, [sp, #0]
 8004b84:	ab03      	add	r3, sp, #12
 8004b86:	f898 1000 	ldrb.w	r1, [r8]
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	f000 fb68 	bl	8005260 <.text_50>
 8004b90:	e228      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004b92:	6830      	ldr	r0, [r6, #0]
 8004b94:	f36a 0004 	bfi	r0, sl, #0, #5
 8004b98:	6030      	str	r0, [r6, #0]
 8004b9a:	4633      	mov	r3, r6
 8004b9c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004ba0:	6030      	str	r0, [r6, #0]
 8004ba2:	6860      	ldr	r0, [r4, #4]
 8004ba4:	7802      	ldrb	r2, [r0, #0]
 8004ba6:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8004baa:	6832      	ldr	r2, [r6, #0]
 8004bac:	f000 fa55 	bl	800505a <.text_30>
 8004bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bb4:	6032      	str	r2, [r6, #0]
 8004bb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004bba:	6032      	str	r2, [r6, #0]
 8004bbc:	f361 421f 	bfi	r2, r1, #16, #16
 8004bc0:	6032      	str	r2, [r6, #0]
 8004bc2:	2187      	movs	r1, #135	; 0x87
 8004bc4:	f000 fae8 	bl	8005198 <.text_44>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d1e1      	bne.n	8004b90 <PE_StateMachine_VDM+0x4c0>
 8004bcc:	2050      	movs	r0, #80	; 0x50
 8004bce:	e08d      	b.n	8004cec <PE_StateMachine_VDM+0x61c>
 8004bd0:	f000 fa1e 	bl	8005010 <.text_24>
 8004bd4:	f000 fa12 	bl	8004ffc <.text_22>
 8004bd8:	d14e      	bne.n	8004c78 <PE_StateMachine_VDM+0x5a8>
 8004bda:	f000 fa0b 	bl	8004ff4 <.text_21>
 8004bde:	d14b      	bne.n	8004c78 <PE_StateMachine_VDM+0x5a8>
 8004be0:	f000 fa04 	bl	8004fec <.text_20>
 8004be4:	d04d      	beq.n	8004c82 <PE_StateMachine_VDM+0x5b2>
 8004be6:	f000 fa17 	bl	8005018 <.text_25>
 8004bea:	bf01      	itttt	eq
 8004bec:	f8d4 0274 	ldreq.w	r0, [r4, #628]	; 0x274
 8004bf0:	7885      	ldrbeq	r5, [r0, #2]
 8004bf2:	f005 011f 	andeq.w	r1, r5, #31
 8004bf6:	2901      	cmpeq	r1, #1
 8004bf8:	d13e      	bne.n	8004c78 <PE_StateMachine_VDM+0x5a8>
 8004bfa:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d03f      	beq.n	8004c82 <PE_StateMachine_VDM+0x5b2>
 8004c02:	68e1      	ldr	r1, [r4, #12]
 8004c04:	6948      	ldr	r0, [r1, #20]
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d00f      	beq.n	8004c2a <PE_StateMachine_VDM+0x55a>
 8004c0a:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004c0e:	2801      	cmp	r0, #1
 8004c10:	d10b      	bne.n	8004c2a <PE_StateMachine_VDM+0x55a>
 8004c12:	a908      	add	r1, sp, #32
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 fb89 	bl	800532c <PE_SVDM_CheckIdentity>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d105      	bne.n	8004c2a <PE_StateMachine_VDM+0x55a>
 8004c1e:	f000 fa0d 	bl	800503c <.text_28>
 8004c22:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004c26:	ab08      	add	r3, sp, #32
 8004c28:	47e0      	blx	ip
 8004c2a:	e1b0      	b.n	8004f8e <PE_StateMachine_VDM+0x8be>
 8004c2c:	f000 fa60 	bl	80050f0 <.text_35>
 8004c30:	f369 0004 	bfi	r0, r9, #0, #5
 8004c34:	6030      	str	r0, [r6, #0]
 8004c36:	220f      	movs	r2, #15
 8004c38:	f000 fa1b 	bl	8005072 <.text_32>
 8004c3c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004c40:	6031      	str	r1, [r6, #0]
 8004c42:	2189      	movs	r1, #137	; 0x89
 8004c44:	f000 fa9b 	bl	800517e <.text_43>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d153      	bne.n	8004cf4 <PE_StateMachine_VDM+0x624>
 8004c4c:	2052      	movs	r0, #82	; 0x52
 8004c4e:	e04d      	b.n	8004cec <PE_StateMachine_VDM+0x61c>
 8004c50:	f000 f9de 	bl	8005010 <.text_24>
 8004c54:	f000 f9d2 	bl	8004ffc <.text_22>
 8004c58:	d10e      	bne.n	8004c78 <PE_StateMachine_VDM+0x5a8>
 8004c5a:	f000 f9cb 	bl	8004ff4 <.text_21>
 8004c5e:	d10b      	bne.n	8004c78 <PE_StateMachine_VDM+0x5a8>
 8004c60:	f000 f9c4 	bl	8004fec <.text_20>
 8004c64:	d00d      	beq.n	8004c82 <PE_StateMachine_VDM+0x5b2>
 8004c66:	f000 f9d7 	bl	8005018 <.text_25>
 8004c6a:	bf01      	itttt	eq
 8004c6c:	f8d4 0274 	ldreq.w	r0, [r4, #628]	; 0x274
 8004c70:	7885      	ldrbeq	r5, [r0, #2]
 8004c72:	f005 011f 	andeq.w	r1, r5, #31
 8004c76:	2902      	cmpeq	r1, #2
 8004c78:	f040 8119 	bne.w	8004eae <PE_StateMachine_VDM+0x7de>
 8004c7c:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f000 8114 	beq.w	8004eae <PE_StateMachine_VDM+0x7de>
 8004c86:	68e1      	ldr	r1, [r4, #12]
 8004c88:	6988      	ldr	r0, [r1, #24]
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d0cd      	beq.n	8004c2a <PE_StateMachine_VDM+0x55a>
 8004c8e:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8004c92:	1d81      	adds	r1, r0, #6
 8004c94:	78f8      	ldrb	r0, [r7, #3]
 8004c96:	aa08      	add	r2, sp, #32
 8004c98:	f000 fbee 	bl	8005478 <PE_SVDM_CheckSVIDs>
 8004c9c:	f000 f9ce 	bl	800503c <.text_28>
 8004ca0:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8004ca4:	ab08      	add	r3, sp, #32
 8004ca6:	47e0      	blx	ip
 8004ca8:	2153      	movs	r1, #83	; 0x53
 8004caa:	e057      	b.n	8004d5c <PE_StateMachine_VDM+0x68c>
 8004cac:	6831      	ldr	r1, [r6, #0]
 8004cae:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004cb2:	6031      	str	r1, [r6, #0]
 8004cb4:	4633      	mov	r3, r6
 8004cb6:	f360 0104 	bfi	r1, r0, #0, #5
 8004cba:	6031      	str	r1, [r6, #0]
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	8930      	ldrh	r0, [r6, #8]
 8004cc0:	f360 411f 	bfi	r1, r0, #16, #16
 8004cc4:	f000 f9b4 	bl	8005030 <.text_27>
 8004cc8:	7801      	ldrb	r1, [r0, #0]
 8004cca:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004cce:	6831      	ldr	r1, [r6, #0]
 8004cd0:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8004cd4:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004cd8:	6031      	str	r1, [r6, #0]
 8004cda:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004cde:	6031      	str	r1, [r6, #0]
 8004ce0:	218b      	movs	r1, #139	; 0x8b
 8004ce2:	f000 fa4c 	bl	800517e <.text_43>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d104      	bne.n	8004cf4 <PE_StateMachine_VDM+0x624>
 8004cea:	2053      	movs	r0, #83	; 0x53
 8004cec:	7438      	strb	r0, [r7, #16]
 8004cee:	827d      	strh	r5, [r7, #18]
 8004cf0:	f04f 091e 	mov.w	r9, #30
 8004cf4:	e176      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004cf6:	f000 f98b 	bl	8005010 <.text_24>
 8004cfa:	f000 f97f 	bl	8004ffc <.text_22>
 8004cfe:	d131      	bne.n	8004d64 <PE_StateMachine_VDM+0x694>
 8004d00:	f000 f978 	bl	8004ff4 <.text_21>
 8004d04:	d12e      	bne.n	8004d64 <PE_StateMachine_VDM+0x694>
 8004d06:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004d0a:	b358      	cbz	r0, 8004d64 <PE_StateMachine_VDM+0x694>
 8004d0c:	f000 f984 	bl	8005018 <.text_25>
 8004d10:	bf01      	itttt	eq
 8004d12:	f8d4 0274 	ldreq.w	r0, [r4, #628]	; 0x274
 8004d16:	7885      	ldrbeq	r5, [r0, #2]
 8004d18:	f005 011f 	andeq.w	r1, r5, #31
 8004d1c:	2903      	cmpeq	r1, #3
 8004d1e:	d121      	bne.n	8004d64 <PE_StateMachine_VDM+0x694>
 8004d20:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004d24:	b1f0      	cbz	r0, 8004d64 <PE_StateMachine_VDM+0x694>
 8004d26:	68e1      	ldr	r1, [r4, #12]
 8004d28:	69c8      	ldr	r0, [r1, #28]
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d019      	beq.n	8004d62 <PE_StateMachine_VDM+0x692>
 8004d2e:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8004d32:	6831      	ldr	r1, [r6, #0]
 8004d34:	1d82      	adds	r2, r0, #6
 8004d36:	78f8      	ldrb	r0, [r7, #3]
 8004d38:	ab08      	add	r3, sp, #32
 8004d3a:	0c09      	lsrs	r1, r1, #16
 8004d3c:	f000 fbd1 	bl	80054e2 <PE_SVDM_CheckModes>
 8004d40:	68e6      	ldr	r6, [r4, #12]
 8004d42:	f000 f97e 	bl	8005042 <.text_28+0x6>
 8004d46:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004d4a:	ab08      	add	r3, sp, #32
 8004d4c:	f3c5 1281 	ubfx	r2, r5, #6, #2
 8004d50:	47c0      	blx	r8
 8004d52:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004d56:	2801      	cmp	r0, #1
 8004d58:	d103      	bne.n	8004d62 <PE_StateMachine_VDM+0x692>
 8004d5a:	2154      	movs	r1, #84	; 0x54
 8004d5c:	78f8      	ldrb	r0, [r7, #3]
 8004d5e:	f7fb fc23 	bl	80005a8 <USBPD_PE_Notification>
 8004d62:	e114      	b.n	8004f8e <PE_StateMachine_VDM+0x8be>
 8004d64:	f000 f94e 	bl	8005004 <.text_23>
 8004d68:	f040 80a4 	bne.w	8004eb4 <PE_StateMachine_VDM+0x7e4>
 8004d6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7fd f8d3 	bl	8001f1c <PE_ResetRxEvent>
 8004d76:	2000      	movs	r0, #0
 8004d78:	8278      	strh	r0, [r7, #18]
 8004d7a:	e110      	b.n	8004f9e <PE_StateMachine_VDM+0x8ce>
 8004d7c:	f000 f9b8 	bl	80050f0 <.text_35>
 8004d80:	f362 0004 	bfi	r0, r2, #0, #5
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	f000 f985 	bl	8005094 <.text_33>
 8004d8a:	218c      	movs	r1, #140	; 0x8c
 8004d8c:	f000 fa04 	bl	8005198 <.text_44>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1af      	bne.n	8004cf4 <PE_StateMachine_VDM+0x624>
 8004d94:	2054      	movs	r0, #84	; 0x54
 8004d96:	7438      	strb	r0, [r7, #16]
 8004d98:	2134      	movs	r1, #52	; 0x34
 8004d9a:	e04e      	b.n	8004e3a <PE_StateMachine_VDM+0x76a>
 8004d9c:	f000 f938 	bl	8005010 <.text_24>
 8004da0:	f000 f92c 	bl	8004ffc <.text_22>
 8004da4:	f04f 0a34 	mov.w	sl, #52	; 0x34
 8004da8:	d107      	bne.n	8004dba <PE_StateMachine_VDM+0x6ea>
 8004daa:	f000 f923 	bl	8004ff4 <.text_21>
 8004dae:	d104      	bne.n	8004dba <PE_StateMachine_VDM+0x6ea>
 8004db0:	f000 f91c 	bl	8004fec <.text_20>
 8004db4:	d07b      	beq.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004db6:	f000 f92f 	bl	8005018 <.text_25>
 8004dba:	d178      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004dbc:	f000 f945 	bl	800504a <.text_29>
 8004dc0:	2804      	cmp	r0, #4
 8004dc2:	d174      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004dc4:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d070      	beq.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004dcc:	2801      	cmp	r0, #1
 8004dce:	d00a      	beq.n	8004de6 <PE_StateMachine_VDM+0x716>
 8004dd0:	d312      	bcc.n	8004df8 <PE_StateMachine_VDM+0x728>
 8004dd2:	2803      	cmp	r0, #3
 8004dd4:	d00a      	beq.n	8004dec <PE_StateMachine_VDM+0x71c>
 8004dd6:	bf3f      	itttt	cc
 8004dd8:	68b8      	ldrcc	r0, [r7, #8]
 8004dda:	f420 70e0 	biccc.w	r0, r0, #448	; 0x1c0
 8004dde:	60b8      	strcc	r0, [r7, #8]
 8004de0:	f04f 0a36 	movcc.w	sl, #54	; 0x36
 8004de4:	e008      	b.n	8004df8 <PE_StateMachine_VDM+0x728>
 8004de6:	f04f 0a35 	mov.w	sl, #53	; 0x35
 8004dea:	e005      	b.n	8004df8 <PE_StateMachine_VDM+0x728>
 8004dec:	68b8      	ldr	r0, [r7, #8]
 8004dee:	f420 70e0 	bic.w	r0, r0, #448	; 0x1c0
 8004df2:	60b8      	str	r0, [r7, #8]
 8004df4:	f04f 0a37 	mov.w	sl, #55	; 0x37
 8004df8:	78f8      	ldrb	r0, [r7, #3]
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	f7fb fbd4 	bl	80005a8 <USBPD_PE_Notification>
 8004e00:	68e1      	ldr	r1, [r4, #12]
 8004e02:	6a08      	ldr	r0, [r1, #32]
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d005      	beq.n	8004e14 <PE_StateMachine_VDM+0x744>
 8004e08:	f000 f989 	bl	800511e <.text_40>
 8004e0c:	f8d5 c020 	ldr.w	ip, [r5, #32]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	47e0      	blx	ip
 8004e14:	e0bb      	b.n	8004f8e <PE_StateMachine_VDM+0x8be>
 8004e16:	6830      	ldr	r0, [r6, #0]
 8004e18:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004e1c:	6030      	str	r0, [r6, #0]
 8004e1e:	f363 0004 	bfi	r0, r3, #0, #5
 8004e22:	6030      	str	r0, [r6, #0]
 8004e24:	4633      	mov	r3, r6
 8004e26:	f000 f935 	bl	8005094 <.text_33>
 8004e2a:	218d      	movs	r1, #141	; 0x8d
 8004e2c:	f000 f9b4 	bl	8005198 <.text_44>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d10a      	bne.n	8004e4a <PE_StateMachine_VDM+0x77a>
 8004e34:	2055      	movs	r0, #85	; 0x55
 8004e36:	7438      	strb	r0, [r7, #16]
 8004e38:	2155      	movs	r1, #85	; 0x55
 8004e3a:	78f8      	ldrb	r0, [r7, #3]
 8004e3c:	f7fb fbb4 	bl	80005a8 <USBPD_PE_Notification>
 8004e40:	f248 0032 	movw	r0, #32818	; 0x8032
 8004e44:	8278      	strh	r0, [r7, #18]
 8004e46:	f04f 0932 	mov.w	r9, #50	; 0x32
 8004e4a:	e0cb      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004e4c:	f000 f8e0 	bl	8005010 <.text_24>
 8004e50:	f000 f8d4 	bl	8004ffc <.text_22>
 8004e54:	d12b      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004e56:	f000 f8cd 	bl	8004ff4 <.text_21>
 8004e5a:	d128      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004e5c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004e60:	b328      	cbz	r0, 8004eae <PE_StateMachine_VDM+0x7de>
 8004e62:	f000 f8d9 	bl	8005018 <.text_25>
 8004e66:	d122      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004e68:	f000 f8ef 	bl	800504a <.text_29>
 8004e6c:	2805      	cmp	r0, #5
 8004e6e:	d11e      	bne.n	8004eae <PE_StateMachine_VDM+0x7de>
 8004e70:	f3c5 1081 	ubfx	r0, r5, #6, #2
 8004e74:	b1d8      	cbz	r0, 8004eae <PE_StateMachine_VDM+0x7de>
 8004e76:	2801      	cmp	r0, #1
 8004e78:	d004      	beq.n	8004e84 <PE_StateMachine_VDM+0x7b4>
 8004e7a:	d309      	bcc.n	8004e90 <PE_StateMachine_VDM+0x7c0>
 8004e7c:	2803      	cmp	r0, #3
 8004e7e:	d005      	beq.n	8004e8c <PE_StateMachine_VDM+0x7bc>
 8004e80:	d302      	bcc.n	8004e88 <PE_StateMachine_VDM+0x7b8>
 8004e82:	e005      	b.n	8004e90 <PE_StateMachine_VDM+0x7c0>
 8004e84:	2156      	movs	r1, #86	; 0x56
 8004e86:	e004      	b.n	8004e92 <PE_StateMachine_VDM+0x7c2>
 8004e88:	2157      	movs	r1, #87	; 0x57
 8004e8a:	e002      	b.n	8004e92 <PE_StateMachine_VDM+0x7c2>
 8004e8c:	2158      	movs	r1, #88	; 0x58
 8004e8e:	e000      	b.n	8004e92 <PE_StateMachine_VDM+0x7c2>
 8004e90:	2155      	movs	r1, #85	; 0x55
 8004e92:	78f8      	ldrb	r0, [r7, #3]
 8004e94:	f7fb fb88 	bl	80005a8 <USBPD_PE_Notification>
 8004e98:	68e1      	ldr	r1, [r4, #12]
 8004e9a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d076      	beq.n	8004f8e <PE_StateMachine_VDM+0x8be>
 8004ea0:	f000 f93d 	bl	800511e <.text_40>
 8004ea4:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	47e0      	blx	ip
 8004eac:	e06f      	b.n	8004f8e <PE_StateMachine_VDM+0x8be>
 8004eae:	f000 f8a9 	bl	8005004 <.text_23>
 8004eb2:	d072      	beq.n	8004f9a <PE_StateMachine_VDM+0x8ca>
 8004eb4:	f000 f92a 	bl	800510c <.text_38>
 8004eb8:	d1c7      	bne.n	8004e4a <PE_StateMachine_VDM+0x77a>
 8004eba:	e078      	b.n	8004fae <PE_StateMachine_VDM+0x8de>
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f88d 100c 	strb.w	r1, [sp, #12]
 8004ec2:	f000 f93d 	bl	8005140 <.text_42>
 8004ec6:	f8d0 c030 	ldr.w	ip, [r0, #48]	; 0x30
 8004eca:	f1bc 0f00 	cmp.w	ip, #0
 8004ece:	d008      	beq.n	8004ee2 <PE_StateMachine_VDM+0x812>
 8004ed0:	a805      	add	r0, sp, #20
 8004ed2:	9000      	str	r0, [sp, #0]
 8004ed4:	ab03      	add	r3, sp, #12
 8004ed6:	7832      	ldrb	r2, [r6, #0]
 8004ed8:	f000 f8b3 	bl	8005042 <.text_28+0x6>
 8004edc:	f002 021f 	and.w	r2, r2, #31
 8004ee0:	47e0      	blx	ip
 8004ee2:	f000 f89f 	bl	8005024 <.text_26>
 8004ee6:	218f      	movs	r1, #143	; 0x8f
 8004ee8:	f000 f9ad 	bl	8005246 <.text_49>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d176      	bne.n	8004fde <PE_StateMachine_VDM+0x90e>
 8004ef0:	205a      	movs	r0, #90	; 0x5a
 8004ef2:	7438      	strb	r0, [r7, #16]
 8004ef4:	827d      	strh	r5, [r7, #18]
 8004ef6:	f04f 091e 	mov.w	r9, #30
 8004efa:	e070      	b.n	8004fde <PE_StateMachine_VDM+0x90e>
 8004efc:	f8b4 0272 	ldrh.w	r0, [r4, #626]	; 0x272
 8004f00:	0b00      	lsrs	r0, r0, #12
 8004f02:	f000 0007 	and.w	r0, r0, #7
 8004f06:	1e41      	subs	r1, r0, #1
 8004f08:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f0c:	f000 f880 	bl	8005010 <.text_24>
 8004f10:	f000 f874 	bl	8004ffc <.text_22>
 8004f14:	d13e      	bne.n	8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f16:	f000 f86d 	bl	8004ff4 <.text_21>
 8004f1a:	d13b      	bne.n	8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f1c:	f000 f866 	bl	8004fec <.text_20>
 8004f20:	d038      	beq.n	8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f22:	f000 f879 	bl	8005018 <.text_25>
 8004f26:	d135      	bne.n	8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f28:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8004f2c:	7882      	ldrb	r2, [r0, #2]
 8004f2e:	6870      	ldr	r0, [r6, #4]
 8004f30:	f002 011f 	and.w	r1, r2, #31
 8004f34:	4281      	cmp	r1, r0
 8004f36:	d12d      	bne.n	8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f38:	f3c2 1081 	ubfx	r0, r2, #6, #2
 8004f3c:	b350      	cbz	r0, 8004f94 <PE_StateMachine_VDM+0x8c4>
 8004f3e:	68e1      	ldr	r1, [r4, #12]
 8004f40:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8004f42:	b320      	cbz	r0, 8004f8e <PE_StateMachine_VDM+0x8be>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e014      	b.n	8004f72 <PE_StateMachine_VDM+0x8a2>
 8004f48:	f8d4 3274 	ldr.w	r3, [r4, #628]	; 0x274
 8004f4c:	0081      	lsls	r1, r0, #2
 8004f4e:	185d      	adds	r5, r3, r1
 8004f50:	3308      	adds	r3, #8
 8004f52:	f895 c006 	ldrb.w	ip, [r5, #6]
 8004f56:	f895 e007 	ldrb.w	lr, [r5, #7]
 8004f5a:	5c59      	ldrb	r1, [r3, r1]
 8004f5c:	7a6b      	ldrb	r3, [r5, #9]
 8004f5e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004f62:	eb06 4601 	add.w	r6, r6, r1, lsl #16
 8004f66:	a902      	add	r1, sp, #8
 8004f68:	eb06 6603 	add.w	r6, r6, r3, lsl #24
 8004f6c:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004f70:	1c40      	adds	r0, r0, #1
 8004f72:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004f76:	4288      	cmp	r0, r1
 8004f78:	d3e6      	bcc.n	8004f48 <PE_StateMachine_VDM+0x878>
 8004f7a:	a802      	add	r0, sp, #8
 8004f7c:	9000      	str	r0, [sp, #0]
 8004f7e:	ab01      	add	r3, sp, #4
 8004f80:	f000 f85e 	bl	8005040 <.text_28+0x4>
 8004f84:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 8004f88:	f002 021f 	and.w	r2, r2, #31
 8004f8c:	47e0      	blx	ip
 8004f8e:	f000 f918 	bl	80051c2 <.text_47>
 8004f92:	e027      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004f94:	f000 f836 	bl	8005004 <.text_23>
 8004f98:	d106      	bne.n	8004fa8 <PE_StateMachine_VDM+0x8d8>
 8004f9a:	f000 f912 	bl	80051c2 <.text_47>
 8004f9e:	78f8      	ldrb	r0, [r7, #3]
 8004fa0:	2159      	movs	r1, #89	; 0x59
 8004fa2:	f7fb fb01 	bl	80005a8 <USBPD_PE_Notification>
 8004fa6:	e01d      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004fa8:	f000 f8b0 	bl	800510c <.text_38>
 8004fac:	d11a      	bne.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004fae:	2103      	movs	r1, #3
 8004fb0:	7139      	strb	r1, [r7, #4]
 8004fb2:	f04f 0900 	mov.w	r9, #0
 8004fb6:	e015      	b.n	8004fe4 <PE_StateMachine_VDM+0x914>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f88d 000c 	strb.w	r0, [sp, #12]
 8004fbe:	f000 f8bf 	bl	8005140 <.text_42>
 8004fc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004fc4:	b11b      	cbz	r3, 8004fce <PE_StateMachine_VDM+0x8fe>
 8004fc6:	78f8      	ldrb	r0, [r7, #3]
 8004fc8:	aa05      	add	r2, sp, #20
 8004fca:	a903      	add	r1, sp, #12
 8004fcc:	4798      	blx	r3
 8004fce:	f000 f829 	bl	8005024 <.text_26>
 8004fd2:	2103      	movs	r1, #3
 8004fd4:	f000 f937 	bl	8005246 <.text_49>
 8004fd8:	b908      	cbnz	r0, 8004fde <PE_StateMachine_VDM+0x90e>
 8004fda:	205a      	movs	r0, #90	; 0x5a
 8004fdc:	7438      	strb	r0, [r7, #16]
 8004fde:	2100      	movs	r1, #0
 8004fe0:	f888 1001 	strb.w	r1, [r8, #1]
 8004fe4:	4648      	mov	r0, r9
 8004fe6:	b01c      	add	sp, #112	; 0x70
 8004fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004fec <.text_20>:
 8004fec:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	4770      	bx	lr

08004ff4 <.text_21>:
 8004ff4:	f8b4 1272 	ldrh.w	r1, [r4, #626]	; 0x272
 8004ff8:	0bc8      	lsrs	r0, r1, #15
 8004ffa:	4770      	bx	lr

08004ffc <.text_22>:
 8004ffc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ffe:	780a      	ldrb	r2, [r1, #0]
 8005000:	4282      	cmp	r2, r0
 8005002:	4770      	bx	lr

08005004 <.text_23>:
 8005004:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
 8005008:	f000 001f 	and.w	r0, r0, #31
 800500c:	2810      	cmp	r0, #16
 800500e:	4770      	bx	lr

08005010 <.text_24>:
 8005010:	f898 0000 	ldrb.w	r0, [r8]
 8005014:	f7fb be03 	b.w	8000c1e <PE_Convert_SOPRxEvent>

08005018 <.text_25>:
 8005018:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
 800501c:	f000 001f 	and.w	r0, r0, #31
 8005020:	280f      	cmp	r0, #15
 8005022:	4770      	bx	lr

08005024 <.text_26>:
 8005024:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005028:	1c40      	adds	r0, r0, #1
 800502a:	f88d 000c 	strb.w	r0, [sp, #12]
 800502e:	4770      	bx	lr

08005030 <.text_27>:
 8005030:	6031      	str	r1, [r6, #0]
 8005032:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005036:	6031      	str	r1, [r6, #0]
 8005038:	6860      	ldr	r0, [r4, #4]
 800503a:	4770      	bx	lr

0800503c <.text_28>:
 800503c:	f3c5 1281 	ubfx	r2, r5, #6, #2
 8005040:	68e5      	ldr	r5, [r4, #12]
 8005042:	f898 1000 	ldrb.w	r1, [r8]
 8005046:	78f8      	ldrb	r0, [r7, #3]
 8005048:	4770      	bx	lr

0800504a <.text_29>:
 800504a:	2000      	movs	r0, #0
 800504c:	7438      	strb	r0, [r7, #16]
 800504e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8005052:	788d      	ldrb	r5, [r1, #2]
 8005054:	f005 001f 	and.w	r0, r5, #31
 8005058:	4770      	bx	lr

0800505a <.text_30>:
 800505a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800505e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8005062:	6032      	str	r2, [r6, #0]
 8005064:	4770      	bx	lr

08005066 <.text_31>:
 8005066:	6860      	ldr	r0, [r4, #4]
 8005068:	7801      	ldrb	r1, [r0, #0]
 800506a:	f001 0103 	and.w	r1, r1, #3
 800506e:	2901      	cmp	r1, #1
 8005070:	4770      	bx	lr

08005072 <.text_32>:
 8005072:	f361 401f 	bfi	r0, r1, #16, #16
 8005076:	6030      	str	r0, [r6, #0]
 8005078:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800507c:	6030      	str	r0, [r6, #0]
 800507e:	6860      	ldr	r0, [r4, #4]
 8005080:	7801      	ldrb	r1, [r0, #0]
 8005082:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8005086:	6831      	ldr	r1, [r6, #0]
 8005088:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 800508c:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8005090:	6031      	str	r1, [r6, #0]
 8005092:	4770      	bx	lr

08005094 <.text_33>:
 8005094:	8931      	ldrh	r1, [r6, #8]
 8005096:	f361 401f 	bfi	r0, r1, #16, #16
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80050a0:	6030      	str	r0, [r6, #0]
 80050a2:	6860      	ldr	r0, [r4, #4]
 80050a4:	6832      	ldr	r2, [r6, #0]
 80050a6:	7801      	ldrb	r1, [r0, #0]
 80050a8:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80050ac:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80050b0:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80050b4:	6032      	str	r2, [r6, #0]
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	6831      	ldr	r1, [r6, #0]
 80050ba:	f3c0 1082 	ubfx	r0, r0, #6, #3
 80050be:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80050c2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80050c6:	6031      	str	r1, [r6, #0]
 80050c8:	4770      	bx	lr

080050ca <.text_34>:
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80050d0:	6030      	str	r0, [r6, #0]
 80050d2:	6860      	ldr	r0, [r4, #4]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	7801      	ldrb	r1, [r0, #0]
 80050d8:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80050dc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80050e0:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80050e4:	6032      	str	r2, [r6, #0]
 80050e6:	6860      	ldr	r0, [r4, #4]
 80050e8:	7801      	ldrb	r1, [r0, #0]
 80050ea:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80050ee:	4770      	bx	lr

080050f0 <.text_35>:
 80050f0:	6830      	ldr	r0, [r6, #0]
 80050f2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80050f6:	6030      	str	r0, [r6, #0]
 80050f8:	4633      	mov	r3, r6
 80050fa:	4770      	bx	lr

080050fc <.text_36>:
 80050fc:	6830      	ldr	r0, [r6, #0]
 80050fe:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8005102:	4770      	bx	lr

08005104 <.text_37>:
 8005104:	6830      	ldr	r0, [r6, #0]
 8005106:	f369 1087 	bfi	r0, r9, #6, #2
 800510a:	4770      	bx	lr

0800510c <.text_38>:
 800510c:	8a78      	ldrh	r0, [r7, #18]
 800510e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005112:	4770      	bx	lr

08005114 <.text_39>:
 8005114:	8a78      	ldrh	r0, [r7, #18]
 8005116:	2501      	movs	r5, #1
 8005118:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800511c:	4770      	bx	lr

0800511e <.text_40>:
 800511e:	6830      	ldr	r0, [r6, #0]
 8005120:	f3c5 1281 	ubfx	r2, r5, #6, #2
 8005124:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005128:	9000      	str	r0, [sp, #0]
 800512a:	68e5      	ldr	r5, [r4, #12]
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	f898 1000 	ldrb.w	r1, [r8]
 8005132:	78f8      	ldrb	r0, [r7, #3]
 8005134:	4770      	bx	lr

08005136 <.text_41>:
 8005136:	6830      	ldr	r0, [r6, #0]
 8005138:	f36a 1087 	bfi	r0, sl, #6, #2
 800513c:	6030      	str	r0, [r6, #0]
 800513e:	4770      	bx	lr

08005140 <.text_42>:
 8005140:	6830      	ldr	r0, [r6, #0]
 8005142:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8005146:	6030      	str	r0, [r6, #0]
 8005148:	6871      	ldr	r1, [r6, #4]
 800514a:	f361 0004 	bfi	r0, r1, #0, #5
 800514e:	6030      	str	r0, [r6, #0]
 8005150:	8931      	ldrh	r1, [r6, #8]
 8005152:	f361 401f 	bfi	r0, r1, #16, #16
 8005156:	6030      	str	r0, [r6, #0]
 8005158:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	6860      	ldr	r0, [r4, #4]
 8005160:	7801      	ldrb	r1, [r0, #0]
 8005162:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 800516c:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8005170:	6031      	str	r1, [r6, #0]
 8005172:	f36a 210a 	bfi	r1, sl, #8, #3
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	9104      	str	r1, [sp, #16]
 800517a:	68e0      	ldr	r0, [r4, #12]
 800517c:	4770      	bx	lr

0800517e <.text_43>:
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	9101      	str	r1, [sp, #4]
 8005182:	0880      	lsrs	r0, r0, #2
 8005184:	f000 0001 	and.w	r0, r0, #1
 8005188:	9002      	str	r0, [sp, #8]
 800518a:	f8cd a000 	str.w	sl, [sp]
 800518e:	4620      	mov	r0, r4
 8005190:	f898 1000 	ldrb.w	r1, [r8]
 8005194:	f7fc ba87 	b.w	80016a6 <PE_Send_DataMessage>

08005198 <.text_44>:
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	9101      	str	r1, [sp, #4]
 800519c:	0880      	lsrs	r0, r0, #2
 800519e:	f000 0001 	and.w	r0, r0, #1
 80051a2:	9002      	str	r0, [sp, #8]
 80051a4:	f8cd a000 	str.w	sl, [sp]
 80051a8:	220f      	movs	r2, #15
 80051aa:	f898 1000 	ldrb.w	r1, [r8]

080051ae <.text_45>:
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7fc ba79 	b.w	80016a6 <PE_Send_DataMessage>

080051b4 <.text_46>:
 80051b4:	6830      	ldr	r0, [r6, #0]
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	f3c0 2202 	ubfx	r2, r0, #8, #3
 80051bc:	0c01      	lsrs	r1, r0, #16
 80051be:	78f8      	ldrb	r0, [r7, #3]
 80051c0:	4770      	bx	lr

080051c2 <.text_47>:
 80051c2:	2000      	movs	r0, #0
 80051c4:	8278      	strh	r0, [r7, #18]
 80051c6:	2203      	movs	r2, #3
 80051c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80051ca:	4620      	mov	r0, r4
 80051cc:	f7fc bea6 	b.w	8001f1c <PE_ResetRxEvent>

080051d0 <PE_StateMachine_UVDM>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	2914      	cmp	r1, #20
 80051d4:	b08c      	sub	sp, #48	; 0x30
 80051d6:	4604      	mov	r4, r0
 80051d8:	d133      	bne.n	8005242 <PE_StateMachine_UVDM+0x72>
 80051da:	68e0      	ldr	r0, [r4, #12]
 80051dc:	2800      	cmp	r0, #0
 80051de:	bf1c      	itt	ne
 80051e0:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 80051e2:	2800      	cmpne	r0, #0
 80051e4:	d02d      	beq.n	8005242 <PE_StateMachine_UVDM+0x72>
 80051e6:	2100      	movs	r1, #0
 80051e8:	f88d 100c 	strb.w	r1, [sp, #12]
 80051ec:	ab06      	add	r3, sp, #24
 80051ee:	68e5      	ldr	r5, [r4, #12]
 80051f0:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80051f4:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 80051f6:	aa03      	add	r2, sp, #12
 80051f8:	a904      	add	r1, sp, #16
 80051fa:	47b0      	blx	r6
 80051fc:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005200:	9804      	ldr	r0, [sp, #16]
 8005202:	1c49      	adds	r1, r1, #1
 8005204:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005208:	f88d 100c 	strb.w	r1, [sp, #12]
 800520c:	9004      	str	r0, [sp, #16]
 800520e:	f504 7611 	add.w	r6, r4, #580	; 0x244
 8005212:	9904      	ldr	r1, [sp, #16]
 8005214:	9105      	str	r1, [sp, #20]
 8005216:	2103      	movs	r1, #3
 8005218:	6830      	ldr	r0, [r6, #0]
 800521a:	9101      	str	r1, [sp, #4]
 800521c:	0880      	lsrs	r0, r0, #2
 800521e:	f000 0001 	and.w	r0, r0, #1
 8005222:	9002      	str	r0, [sp, #8]
 8005224:	f204 2569 	addw	r5, r4, #617	; 0x269
 8005228:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800522c:	9000      	str	r0, [sp, #0]
 800522e:	ab05      	add	r3, sp, #20
 8005230:	7829      	ldrb	r1, [r5, #0]
 8005232:	220f      	movs	r2, #15
 8005234:	f000 f814 	bl	8005260 <.text_50>
 8005238:	b908      	cbnz	r0, 800523e <PE_StateMachine_UVDM+0x6e>
 800523a:	2059      	movs	r0, #89	; 0x59
 800523c:	7230      	strb	r0, [r6, #8]
 800523e:	2100      	movs	r1, #0
 8005240:	7069      	strb	r1, [r5, #1]
 8005242:	b00c      	add	sp, #48	; 0x30
 8005244:	bd70      	pop	{r4, r5, r6, pc}

08005246 <.text_49>:
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	9101      	str	r1, [sp, #4]
 800524a:	0880      	lsrs	r0, r0, #2
 800524c:	f000 0001 	and.w	r0, r0, #1
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	ab04      	add	r3, sp, #16
 8005254:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005258:	9000      	str	r0, [sp, #0]
 800525a:	220f      	movs	r2, #15
 800525c:	f898 1000 	ldrb.w	r1, [r8]

08005260 <.text_50>:
 8005260:	4620      	mov	r0, r4
 8005262:	f7fc ba20 	b.w	80016a6 <PE_Send_DataMessage>

08005266 <PE_Check_DataMessageVDM>:
 8005266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005268:	4605      	mov	r5, r0
 800526a:	f505 760f 	add.w	r6, r5, #572	; 0x23c
 800526e:	6828      	ldr	r0, [r5, #0]
 8005270:	6841      	ldr	r1, [r0, #4]
 8005272:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8005276:	2800      	cmp	r0, #0
 8005278:	bf1c      	itt	ne
 800527a:	68e8      	ldrne	r0, [r5, #12]
 800527c:	2800      	cmpne	r0, #0
 800527e:	d04b      	beq.n	8005318 <PE_Check_DataMessageVDM+0xb2>
 8005280:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005282:	7888      	ldrb	r0, [r1, #2]
 8005284:	78ca      	ldrb	r2, [r1, #3]
 8005286:	790b      	ldrb	r3, [r1, #4]
 8005288:	7949      	ldrb	r1, [r1, #5]
 800528a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800528e:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8005292:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8005296:	4601      	mov	r1, r0
 8005298:	0bca      	lsrs	r2, r1, #15
 800529a:	f012 0201 	ands.w	r2, r2, #1
 800529e:	d012      	beq.n	80052c6 <PE_Check_DataMessageVDM+0x60>
 80052a0:	2a01      	cmp	r2, #1
 80052a2:	bf02      	ittt	eq
 80052a4:	f8c5 148c 	streq.w	r1, [r5, #1164]	; 0x48c
 80052a8:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 80052ac:	2800      	cmpeq	r0, #0
 80052ae:	d133      	bne.n	8005318 <PE_Check_DataMessageVDM+0xb2>
 80052b0:	6828      	ldr	r0, [r5, #0]
 80052b2:	6841      	ldr	r1, [r0, #4]
 80052b4:	f3c1 2000 	ubfx	r0, r1, #8, #1
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d02d      	beq.n	8005318 <PE_Check_DataMessageVDM+0xb2>
 80052bc:	4628      	mov	r0, r5
 80052be:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 80052c2:	f7ff b987 	b.w	80045d4 <PE_Receive_SVDM>
 80052c6:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
 80052c8:	0b00      	lsrs	r0, r0, #12
 80052ca:	f000 0007 	and.w	r0, r0, #7
 80052ce:	1e42      	subs	r2, r0, #1
 80052d0:	7032      	strb	r2, [r6, #0]
 80052d2:	2000      	movs	r0, #0
 80052d4:	f505 7309 	add.w	r3, r5, #548	; 0x224
 80052d8:	e00f      	b.n	80052fa <PE_Check_DataMessageVDM+0x94>
 80052da:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80052dc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80052e0:	7994      	ldrb	r4, [r2, #6]
 80052e2:	79d7      	ldrb	r7, [r2, #7]
 80052e4:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 80052e8:	7a14      	ldrb	r4, [r2, #8]
 80052ea:	7a52      	ldrb	r2, [r2, #9]
 80052ec:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 80052f0:	eb04 6202 	add.w	r2, r4, r2, lsl #24
 80052f4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80052f8:	1c40      	adds	r0, r0, #1
 80052fa:	7832      	ldrb	r2, [r6, #0]
 80052fc:	4290      	cmp	r0, r2
 80052fe:	d3ec      	bcc.n	80052da <PE_Check_DataMessageVDM+0x74>
 8005300:	68e8      	ldr	r0, [r5, #12]
 8005302:	2800      	cmp	r0, #0
 8005304:	bf1c      	itt	ne
 8005306:	6c04      	ldrne	r4, [r0, #64]	; 0x40
 8005308:	2c00      	cmpne	r4, #0
 800530a:	d005      	beq.n	8005318 <PE_Check_DataMessageVDM+0xb2>
 800530c:	78f0      	ldrb	r0, [r6, #3]
 800530e:	4632      	mov	r2, r6
 8005310:	47a0      	blx	r4
 8005312:	b908      	cbnz	r0, 8005318 <PE_Check_DataMessageVDM+0xb2>
 8005314:	2003      	movs	r0, #3
 8005316:	e006      	b.n	8005326 <PE_Check_DataMessageVDM+0xc0>
 8005318:	6868      	ldr	r0, [r5, #4]
 800531a:	7801      	ldrb	r1, [r0, #0]
 800531c:	f001 0103 	and.w	r1, r1, #3
 8005320:	2902      	cmp	r1, #2
 8005322:	d101      	bne.n	8005328 <PE_Check_DataMessageVDM+0xc2>
 8005324:	2001      	movs	r0, #1
 8005326:	7130      	strb	r0, [r6, #4]
 8005328:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

0800532c <PE_SVDM_CheckIdentity>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8005332:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8005336:	0b1b      	lsrs	r3, r3, #12
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	1e5d      	subs	r5, r3, #1
 800533e:	2400      	movs	r4, #0
 8005340:	1d92      	adds	r2, r2, #6
 8005342:	b2ee      	uxtb	r6, r5
 8005344:	2e03      	cmp	r6, #3
 8005346:	f0c0 8086 	bcc.w	8005456 <PE_SVDM_CheckIdentity+0x12a>
 800534a:	7813      	ldrb	r3, [r2, #0]
 800534c:	7856      	ldrb	r6, [r2, #1]
 800534e:	7897      	ldrb	r7, [r2, #2]
 8005350:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8005354:	78d6      	ldrb	r6, [r2, #3]
 8005356:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800535a:	eb03 6306 	add.w	r3, r3, r6, lsl #24
 800535e:	600b      	str	r3, [r1, #0]
 8005360:	7917      	ldrb	r7, [r2, #4]
 8005362:	7956      	ldrb	r6, [r2, #5]
 8005364:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8005368:	7997      	ldrb	r7, [r2, #6]
 800536a:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 800536e:	79d6      	ldrb	r6, [r2, #7]
 8005370:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8005374:	604e      	str	r6, [r1, #4]
 8005376:	7a17      	ldrb	r7, [r2, #8]
 8005378:	f892 c009 	ldrb.w	ip, [r2, #9]
 800537c:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8005380:	7a97      	ldrb	r7, [r2, #10]
 8005382:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8005386:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 800538a:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 800538e:	608f      	str	r7, [r1, #8]
 8005390:	2608      	movs	r6, #8
 8005392:	1eef      	subs	r7, r5, #3
 8005394:	f891 5020 	ldrb.w	r5, [r1, #32]
 8005398:	f005 0ee0 	and.w	lr, r5, #224	; 0xe0
 800539c:	b2fd      	uxtb	r5, r7
 800539e:	2d00      	cmp	r5, #0
 80053a0:	f881 e020 	strb.w	lr, [r1, #32]
 80053a4:	d050      	beq.n	8005448 <PE_SVDM_CheckIdentity+0x11c>
 80053a6:	0edb      	lsrs	r3, r3, #27
 80053a8:	1e7d      	subs	r5, r7, #1
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d851      	bhi.n	8005456 <PE_SVDM_CheckIdentity+0x12a>
 80053b2:	e8df f003 	tbb	[pc, r3]
 80053b6:	031d      	.short	0x031d
 80053b8:	150f0903 	.word	0x150f0903
 80053bc:	f04e 0308 	orr.w	r3, lr, #8
 80053c0:	f000 f84c 	bl	800545c <.text_53>
 80053c4:	618b      	str	r3, [r1, #24]
 80053c6:	e010      	b.n	80053ea <PE_SVDM_CheckIdentity+0xbe>
 80053c8:	f04e 0301 	orr.w	r3, lr, #1
 80053cc:	f000 f846 	bl	800545c <.text_53>
 80053d0:	60cb      	str	r3, [r1, #12]
 80053d2:	e00a      	b.n	80053ea <PE_SVDM_CheckIdentity+0xbe>
 80053d4:	f04e 0304 	orr.w	r3, lr, #4
 80053d8:	f000 f840 	bl	800545c <.text_53>
 80053dc:	614b      	str	r3, [r1, #20]
 80053de:	e004      	b.n	80053ea <PE_SVDM_CheckIdentity+0xbe>
 80053e0:	f04e 0302 	orr.w	r3, lr, #2
 80053e4:	f000 f83a 	bl	800545c <.text_53>
 80053e8:	610b      	str	r3, [r1, #16]
 80053ea:	462f      	mov	r7, r5
 80053ec:	b2fb      	uxtb	r3, r7
 80053ee:	b35b      	cbz	r3, 8005448 <PE_SVDM_CheckIdentity+0x11c>
 80053f0:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 80053f4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	db25      	blt.n	8005448 <PE_SVDM_CheckIdentity+0x11c>
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	0ddb      	lsrs	r3, r3, #23
 8005400:	f013 0307 	ands.w	r3, r3, #7
 8005404:	d020      	beq.n	8005448 <PE_SVDM_CheckIdentity+0x11c>
 8005406:	1e5b      	subs	r3, r3, #1
 8005408:	2b02      	cmp	r3, #2
 800540a:	d824      	bhi.n	8005456 <PE_SVDM_CheckIdentity+0x12a>
 800540c:	f891 3020 	ldrb.w	r3, [r1, #32]
 8005410:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf1a      	itte	ne
 8005418:	3608      	addne	r6, #8
 800541a:	1e7f      	subne	r7, r7, #1
 800541c:	1d36      	addeq	r6, r6, #4
 800541e:	b2ff      	uxtb	r7, r7
 8005420:	2f01      	cmp	r7, #1
 8005422:	d118      	bne.n	8005456 <PE_SVDM_CheckIdentity+0x12a>
 8005424:	f891 3020 	ldrb.w	r3, [r1, #32]
 8005428:	f043 0310 	orr.w	r3, r3, #16
 800542c:	4432      	add	r2, r6
 800542e:	f881 3020 	strb.w	r3, [r1, #32]
 8005432:	7815      	ldrb	r5, [r2, #0]
 8005434:	7853      	ldrb	r3, [r2, #1]
 8005436:	eb05 2603 	add.w	r6, r5, r3, lsl #8
 800543a:	7895      	ldrb	r5, [r2, #2]
 800543c:	78d2      	ldrb	r2, [r2, #3]
 800543e:	eb06 4605 	add.w	r6, r6, r5, lsl #16
 8005442:	eb06 6602 	add.w	r6, r6, r2, lsl #24
 8005446:	61ce      	str	r6, [r1, #28]
 8005448:	2151      	movs	r1, #81	; 0x51
 800544a:	f890 023f 	ldrb.w	r0, [r0, #575]	; 0x23f
 800544e:	f7fb f8ab 	bl	80005a8 <USBPD_PE_Notification>
 8005452:	4620      	mov	r0, r4
 8005454:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8005456:	2402      	movs	r4, #2
 8005458:	211b      	movs	r1, #27
 800545a:	e7f6      	b.n	800544a <PE_SVDM_CheckIdentity+0x11e>

0800545c <.text_53>:
 800545c:	f881 3020 	strb.w	r3, [r1, #32]
 8005460:	260c      	movs	r6, #12
 8005462:	7b13      	ldrb	r3, [r2, #12]
 8005464:	7b57      	ldrb	r7, [r2, #13]
 8005466:	eb03 2707 	add.w	r7, r3, r7, lsl #8
 800546a:	7b93      	ldrb	r3, [r2, #14]
 800546c:	eb07 4303 	add.w	r3, r7, r3, lsl #16
 8005470:	7bd7      	ldrb	r7, [r2, #15]
 8005472:	eb03 6307 	add.w	r3, r3, r7, lsl #24
 8005476:	4770      	bx	lr

08005478 <PE_SVDM_CheckSVIDs>:
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <.text_57>)
 800547c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005480:	f8b0 3272 	ldrh.w	r3, [r0, #626]	; 0x272
 8005484:	0b1b      	lsrs	r3, r3, #12
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	1e5b      	subs	r3, r3, #1
 800548c:	2400      	movs	r4, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2500      	movs	r5, #0
 8005492:	7614      	strb	r4, [r2, #24]
 8005494:	7654      	strb	r4, [r2, #25]
 8005496:	f000 f816 	bl	80054c6 <.text_55>
 800549a:	bf19      	ittee	ne
 800549c:	1c76      	addne	r6, r6, #1
 800549e:	7616      	strbne	r6, [r2, #24]
 80054a0:	2501      	moveq	r5, #1
 80054a2:	7655      	strbeq	r5, [r2, #25]
 80054a4:	1ca4      	adds	r4, r4, #2
 80054a6:	b2e4      	uxtb	r4, r4
 80054a8:	f000 f80d 	bl	80054c6 <.text_55>
 80054ac:	bf19      	ittee	ne
 80054ae:	1c76      	addne	r6, r6, #1
 80054b0:	7616      	strbne	r6, [r2, #24]
 80054b2:	2501      	moveq	r5, #1
 80054b4:	7655      	strbeq	r5, [r2, #25]
 80054b6:	1ca4      	adds	r4, r4, #2
 80054b8:	b2e4      	uxtb	r4, r4
 80054ba:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 80054be:	d201      	bcs.n	80054c4 <PE_SVDM_CheckSVIDs+0x4c>
 80054c0:	0028      	movs	r0, r5
 80054c2:	d0e8      	beq.n	8005496 <PE_SVDM_CheckSVIDs+0x1e>
 80054c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054c6 <.text_55>:
 80054c6:	1c4e      	adds	r6, r1, #1
 80054c8:	5d08      	ldrb	r0, [r1, r4]
 80054ca:	5d37      	ldrb	r7, [r6, r4]
 80054cc:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 80054d0:	7e10      	ldrb	r0, [r2, #24]
 80054d2:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 80054d6:	7e16      	ldrb	r6, [r2, #24]
 80054d8:	4637      	mov	r7, r6
 80054da:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 80054de:	2800      	cmp	r0, #0
 80054e0:	4770      	bx	lr

080054e2 <PE_SVDM_CheckModes>:
 80054e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e4:	4c12      	ldr	r4, [pc, #72]	; (8005530 <.text_57>)
 80054e6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80054ea:	f8b0 4272 	ldrh.w	r4, [r0, #626]	; 0x272
 80054ee:	8399      	strh	r1, [r3, #28]
 80054f0:	0b24      	lsrs	r4, r4, #12
 80054f2:	f004 0407 	and.w	r4, r4, #7
 80054f6:	1e60      	subs	r0, r4, #1
 80054f8:	2400      	movs	r4, #0
 80054fa:	b2c0      	uxtb	r0, r0
 80054fc:	601c      	str	r4, [r3, #0]
 80054fe:	1916      	adds	r6, r2, r4
 8005500:	5d15      	ldrb	r5, [r2, r4]
 8005502:	7871      	ldrb	r1, [r6, #1]
 8005504:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8005508:	1911      	adds	r1, r2, r4
 800550a:	1d24      	adds	r4, r4, #4
 800550c:	788d      	ldrb	r5, [r1, #2]
 800550e:	78ce      	ldrb	r6, [r1, #3]
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8005516:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800551a:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 800551e:	606f      	str	r7, [r5, #4]
 8005520:	b2e4      	uxtb	r4, r4
 8005522:	681e      	ldr	r6, [r3, #0]
 8005524:	1c76      	adds	r6, r6, #1
 8005526:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 800552a:	601e      	str	r6, [r3, #0]
 800552c:	d3e7      	bcc.n	80054fe <PE_SVDM_CheckModes+0x1c>
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005530 <.text_57>:
 8005530:	200001fc 	.word	0x200001fc

08005534 <USBPD_PRL_TimerCounter>:
 8005534:	b510      	push	{r4, lr}
 8005536:	f8df 2bac 	ldr.w	r2, [pc, #2988]	; 80060e4 <.text_40>
 800553a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800553e:	7bd9      	ldrb	r1, [r3, #15]
 8005540:	b111      	cbz	r1, 8005548 <USBPD_PRL_TimerCounter+0x14>
 8005542:	7bd9      	ldrb	r1, [r3, #15]
 8005544:	1e4c      	subs	r4, r1, #1
 8005546:	73dc      	strb	r4, [r3, #15]
 8005548:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800554c:	7b08      	ldrb	r0, [r1, #12]
 800554e:	b108      	cbz	r0, 8005554 <USBPD_PRL_TimerCounter+0x20>
 8005550:	1e40      	subs	r0, r0, #1
 8005552:	7308      	strb	r0, [r1, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <USBPD_PRL_Init>:
 8005556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005558:	4605      	mov	r5, r0
 800555a:	460e      	mov	r6, r1
 800555c:	f44f 7099 	mov.w	r0, #306	; 0x132
 8005560:	f014 ff24 	bl	801a3ac <malloc>
 8005564:	2716      	movs	r7, #22
 8005566:	0004      	movs	r4, r0
 8005568:	d017      	beq.n	800559a <USBPD_PRL_Init+0x44>
 800556a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800556e:	f014 feed 	bl	801a34c <__aeabi_memclr>
 8005572:	f000 fbae 	bl	8005cd2 <.text_25>
 8005576:	f8df 0b6c 	ldr.w	r0, [pc, #2924]	; 80060e4 <.text_40>
 800557a:	4629      	mov	r1, r5
 800557c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8005580:	2201      	movs	r2, #1
 8005582:	9200      	str	r2, [sp, #0]
 8005584:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8005588:	6870      	ldr	r0, [r6, #4]
 800558a:	f60f 31c8 	addw	r1, pc, #3016	; 0xbc8
 800558e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8005592:	4628      	mov	r0, r5
 8005594:	f00c f936 	bl	8011804 <USBPD_PHY_Init>
 8005598:	4607      	mov	r7, r0
 800559a:	4638      	mov	r0, r7
 800559c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800559e <USBPD_PRL_GetMemoryConsumption>:
 800559e:	f240 3096 	movw	r0, #918	; 0x396
 80055a2:	4770      	bx	lr

080055a4 <USBPD_PRL_SetHeader>:
 80055a4:	b530      	push	{r4, r5, lr}
 80055a6:	f8df 4b3c 	ldr.w	r4, [pc, #2876]	; 80060e4 <.text_40>
 80055aa:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80055ae:	8bed      	ldrh	r5, [r5, #30]
 80055b0:	f361 2508 	bfi	r5, r1, #8, #1
 80055b4:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 80055b8:	83cd      	strh	r5, [r1, #30]
 80055ba:	f362 1545 	bfi	r5, r2, #5, #1
 80055be:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 80055c2:	83cd      	strh	r5, [r1, #30]
 80055c4:	f363 1587 	bfi	r5, r3, #6, #2
 80055c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80055cc:	83c5      	strh	r5, [r0, #30]
 80055ce:	bd30      	pop	{r4, r5, pc}

080055d0 <USBPD_PRL_SetHeaderPowerRole>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	f000 f80b 	bl	80055ec <.text_9>
 80055d6:	f361 2408 	bfi	r4, r1, #8, #1
 80055da:	83dc      	strh	r4, [r3, #30]
 80055dc:	bd10      	pop	{r4, pc}

080055de <USBPD_PRL_SetHeaderDataRole>:
 80055de:	b510      	push	{r4, lr}
 80055e0:	f000 f804 	bl	80055ec <.text_9>
 80055e4:	f361 1445 	bfi	r4, r1, #5, #1
 80055e8:	83dc      	strh	r4, [r3, #30]
 80055ea:	bd10      	pop	{r4, pc}

080055ec <.text_9>:
 80055ec:	f8df 2af4 	ldr.w	r2, [pc, #2804]	; 80060e4 <.text_40>
 80055f0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80055f4:	8bdc      	ldrh	r4, [r3, #30]
 80055f6:	4770      	bx	lr

080055f8 <USBPD_PRL_SetHeaderSpecification>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	f7ff fff7 	bl	80055ec <.text_9>
 80055fe:	f361 1487 	bfi	r4, r1, #6, #2
 8005602:	83dc      	strh	r4, [r3, #30]
 8005604:	bd10      	pop	{r4, pc}

08005606 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005606:	b520      	push	{r5, lr}
 8005608:	f8df 2ad8 	ldr.w	r2, [pc, #2776]	; 80060e4 <.text_40>
 800560c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005610:	8c1d      	ldrh	r5, [r3, #32]
 8005612:	f361 1587 	bfi	r5, r1, #6, #2
 8005616:	841d      	strh	r5, [r3, #32]
 8005618:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800561a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800561e:	f361 1387 	bfi	r3, r1, #6, #2
 8005622:	8443      	strh	r3, [r0, #34]	; 0x22
 8005624:	bd20      	pop	{r5, pc}

08005626 <USBPD_PRL_ManageChunkRx>:
 8005626:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	f8df 0ab8 	ldr.w	r0, [pc, #2744]	; 80060e4 <.text_40>
 800562e:	4626      	mov	r6, r4
 8005630:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005634:	7838      	ldrb	r0, [r7, #0]
 8005636:	2501      	movs	r5, #1
 8005638:	f000 0118 	and.w	r1, r0, #24
 800563c:	2918      	cmp	r1, #24
 800563e:	d139      	bne.n	80056b4 <USBPD_PRL_ManageChunkRx+0x8e>
 8005640:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 8005644:	7038      	strb	r0, [r7, #0]
 8005646:	201a      	movs	r0, #26
 8005648:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800564a:	f3c1 22c3 	ubfx	r2, r1, #11, #4
 800564e:	1c52      	adds	r2, r2, #1
 8005650:	4342      	muls	r2, r0
 8005652:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005656:	429a      	cmp	r2, r3
 8005658:	db05      	blt.n	8005666 <USBPD_PRL_ManageChunkRx+0x40>
 800565a:	7838      	ldrb	r0, [r7, #0]
 800565c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8005660:	2500      	movs	r5, #0
 8005662:	7038      	strb	r0, [r7, #0]
 8005664:	e026      	b.n	80056b4 <USBPD_PRL_ManageChunkRx+0x8e>
 8005666:	f248 70ff 	movw	r0, #34815	; 0x87ff
 800566a:	4008      	ands	r0, r1
 800566c:	0ac9      	lsrs	r1, r1, #11
 800566e:	1c49      	adds	r1, r1, #1
 8005670:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
 8005674:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
 8005678:	f440 4004 	orr.w	r0, r0, #33792	; 0x8400
 800567c:	8538      	strh	r0, [r7, #40]	; 0x28
 800567e:	71b8      	strb	r0, [r7, #6]
 8005680:	0a00      	lsrs	r0, r0, #8
 8005682:	71f8      	strb	r0, [r7, #7]
 8005684:	2000      	movs	r0, #0
 8005686:	7278      	strb	r0, [r7, #9]
 8005688:	7238      	strb	r0, [r7, #8]
 800568a:	0072      	lsls	r2, r6, #1
 800568c:	1c52      	adds	r2, r2, #1
 800568e:	b2d0      	uxtb	r0, r2
 8005690:	f00d fd3c 	bl	801310c <USBPD_TIM_IsExpired>
 8005694:	2800      	cmp	r0, #0
 8005696:	d0f8      	beq.n	800568a <USBPD_PRL_ManageChunkRx+0x64>
 8005698:	2000      	movs	r0, #0
 800569a:	2106      	movs	r1, #6
 800569c:	9001      	str	r0, [sp, #4]
 800569e:	9100      	str	r1, [sp, #0]
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	78ba      	ldrb	r2, [r7, #2]
 80056a4:	f002 021f 	and.w	r2, r2, #31
 80056a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ac:	2100      	movs	r1, #0
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f94a 	bl	8005948 <USBPD_PRL_SendMessage>
 80056b4:	4628      	mov	r0, r5
 80056b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056b8 <USBPD_PRL_SRCSetSinkNG>:
 80056b8:	f00c b97f 	b.w	80119ba <USBPD_PHY_SetResistor_SinkTxNG>

080056bc <USBPD_PRL_SRCReleaseSinkNG>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	f00c f988 	bl	80119d4 <USBPD_PHY_SetResistor_SinkTxOK>
 80056c4:	f8df 1a1c 	ldr.w	r1, [pc, #2588]	; 80060e4 <.text_40>
 80056c8:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 80056cc:	2000      	movs	r0, #0
 80056ce:	7410      	strb	r0, [r2, #16]
 80056d0:	bd10      	pop	{r4, pc}

080056d2 <USBPD_PRL_IsResistor_SinkTxOK>:
 80056d2:	f00c b9a1 	b.w	8011a18 <USBPD_PHY_IsResistor_SinkTxOk>

080056d6 <USBPD_PRL_FastRoleSwapSignalling>:
 80056d6:	f00c b9ad 	b.w	8011a34 <USBPD_PHY_FastRoleSwapSignalling>

080056da <PRL_FastRoleSwapReception>:
 80056da:	f7fb bbf0 	b.w	8000ebe <PE_PRL_FastRoleSwapReception>

080056de <USBPD_PRL_SOPCapability>:
 80056de:	f00c b987 	b.w	80119f0 <USBPD_PHY_SOPSupported>

080056e2 <PRL_TXChunk>:
 80056e2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	4614      	mov	r4, r2
 80056ea:	f8df 09f8 	ldr.w	r0, [pc, #2552]	; 80060e4 <.text_40>
 80056ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80056f2:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 80056f6:	f8df 99f0 	ldr.w	r9, [pc, #2544]	; 80060e8 <.text_41>
 80056fa:	4698      	mov	r8, r3
 80056fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005700:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8005704:	fa1f f088 	uxth.w	r0, r8
 8005708:	f8d9 c000 	ldr.w	ip, [r9]
 800570c:	7c79      	ldrb	r1, [r7, #17]
 800570e:	f1a0 0a04 	sub.w	sl, r0, #4
 8005712:	f1a8 0b04 	sub.w	fp, r8, #4
 8005716:	b131      	cbz	r1, 8005726 <PRL_TXChunk+0x44>
 8005718:	2901      	cmp	r1, #1
 800571a:	f000 8099 	beq.w	8005850 <PRL_TXChunk+0x16e>
 800571e:	2903      	cmp	r1, #3
 8005720:	f000 80f2 	beq.w	8005908 <PRL_TXChunk+0x226>
 8005724:	e0e9      	b.n	80058fa <PRL_TXChunk+0x218>
 8005726:	7838      	ldrb	r0, [r7, #0]
 8005728:	f60f 13c0 	addw	r3, pc, #2496	; 0x9c0
 800572c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8005730:	7038      	strb	r0, [r7, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8005738:	7038      	strb	r0, [r7, #0]
 800573a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800573e:	7038      	strb	r0, [r7, #0]
 8005740:	200a      	movs	r0, #10
 8005742:	9000      	str	r0, [sp, #0]
 8005744:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005748:	f8d9 5000 	ldr.w	r5, [r9]
 800574c:	2006      	movs	r0, #6
 800574e:	47a8      	blx	r5
 8005750:	2100      	movs	r1, #0
 8005752:	8179      	strh	r1, [r7, #10]
 8005754:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005758:	f7fb fc59 	bl	800100e <PE_Get_UnchunkedSupport>
 800575c:	b918      	cbnz	r0, 8005766 <PRL_TXChunk+0x84>
 800575e:	8978      	ldrh	r0, [r7, #10]
 8005760:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005764:	8178      	strh	r0, [r7, #10]
 8005766:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800576a:	f7fb fc50 	bl	800100e <PE_Get_UnchunkedSupport>
 800576e:	2801      	cmp	r0, #1
 8005770:	d002      	beq.n	8005778 <PRL_TXChunk+0x96>
 8005772:	f1ba 0f1a 	cmp.w	sl, #26
 8005776:	d84e      	bhi.n	8005816 <PRL_TXChunk+0x134>
 8005778:	8978      	ldrh	r0, [r7, #10]
 800577a:	f36b 0008 	bfi	r0, fp, #0, #9
 800577e:	2100      	movs	r1, #0
 8005780:	8178      	strh	r0, [r7, #10]
 8005782:	7479      	strb	r1, [r7, #17]
 8005784:	f1a8 0802 	sub.w	r8, r8, #2
 8005788:	8978      	ldrh	r0, [r7, #10]
 800578a:	8bf2      	ldrh	r2, [r6, #30]
 800578c:	0bc0      	lsrs	r0, r0, #15
 800578e:	fa1f f588 	uxth.w	r5, r8
 8005792:	d104      	bne.n	800579e <PRL_TXChunk+0xbc>
 8005794:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8005798:	4002      	ands	r2, r0
 800579a:	83f2      	strh	r2, [r6, #30]
 800579c:	e035      	b.n	800580a <PRL_TXChunk+0x128>
 800579e:	0869      	lsrs	r1, r5, #1
 80057a0:	eb05 7391 	add.w	r3, r5, r1, lsr #30
 80057a4:	ea4f 6008 	mov.w	r0, r8, lsl #24
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	0e80      	lsrs	r0, r0, #26
 80057ac:	eba5 0183 	sub.w	r1, r5, r3, lsl #2
 80057b0:	f360 320e 	bfi	r2, r0, #12, #3
 80057b4:	2901      	cmp	r1, #1
 80057b6:	83f2      	strh	r2, [r6, #30]
 80057b8:	d004      	beq.n	80057c4 <PRL_TXChunk+0xe2>
 80057ba:	d31c      	bcc.n	80057f6 <PRL_TXChunk+0x114>
 80057bc:	2903      	cmp	r1, #3
 80057be:	d00e      	beq.n	80057de <PRL_TXChunk+0xfc>
 80057c0:	d306      	bcc.n	80057d0 <PRL_TXChunk+0xee>
 80057c2:	e018      	b.n	80057f6 <PRL_TXChunk+0x114>
 80057c4:	1ce3      	adds	r3, r4, #3
 80057c6:	f3c2 3202 	ubfx	r2, r2, #12, #3
 80057ca:	2500      	movs	r5, #0
 80057cc:	f803 5022 	strb.w	r5, [r3, r2, lsl #2]
 80057d0:	1d22      	adds	r2, r4, #4
 80057d2:	8bf3      	ldrh	r3, [r6, #30]
 80057d4:	f3c3 3302 	ubfx	r3, r3, #12, #3
 80057d8:	2500      	movs	r5, #0
 80057da:	f802 5023 	strb.w	r5, [r2, r3, lsl #2]
 80057de:	8bf2      	ldrh	r2, [r6, #30]
 80057e0:	f3c2 3202 	ubfx	r2, r2, #12, #3
 80057e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057e8:	2200      	movs	r2, #0
 80057ea:	715a      	strb	r2, [r3, #5]
 80057ec:	2301      	movs	r3, #1
 80057ee:	8bf2      	ldrh	r2, [r6, #30]
 80057f0:	f363 320e 	bfi	r2, r3, #12, #3
 80057f4:	83f2      	strh	r2, [r6, #30]
 80057f6:	b101      	cbz	r1, 80057fa <PRL_TXChunk+0x118>
 80057f8:	2101      	movs	r1, #1
 80057fa:	1808      	adds	r0, r1, r0
 80057fc:	8bf1      	ldrh	r1, [r6, #30]
 80057fe:	f360 310e 	bfi	r1, r0, #12, #3
 8005802:	f3c1 3502 	ubfx	r5, r1, #12, #3
 8005806:	83f1      	strh	r1, [r6, #30]
 8005808:	00ad      	lsls	r5, r5, #2
 800580a:	200c      	movs	r0, #12
 800580c:	1cad      	adds	r5, r5, #2
 800580e:	9000      	str	r0, [sp, #0]
 8005810:	f60f 03e4 	addw	r3, pc, #2276	; 0x8e4
 8005814:	e012      	b.n	800583c <PRL_TXChunk+0x15a>
 8005816:	7838      	ldrb	r0, [r7, #0]
 8005818:	f60f 03ec 	addw	r3, pc, #2284	; 0x8ec
 800581c:	f040 0004 	orr.w	r0, r0, #4
 8005820:	7038      	strb	r0, [r7, #0]
 8005822:	2103      	movs	r1, #3
 8005824:	8978      	ldrh	r0, [r7, #10]
 8005826:	7479      	strb	r1, [r7, #17]
 8005828:	f36b 0008 	bfi	r0, fp, #0, #9
 800582c:	8178      	strh	r0, [r7, #10]
 800582e:	251e      	movs	r5, #30
 8005830:	8bf0      	ldrh	r0, [r6, #30]
 8005832:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8005836:	83f0      	strh	r0, [r6, #30]
 8005838:	200d      	movs	r0, #13
 800583a:	9000      	str	r0, [sp, #0]
 800583c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005840:	f8d9 c000 	ldr.w	ip, [r9]
 8005844:	2200      	movs	r2, #0
 8005846:	2006      	movs	r0, #6
 8005848:	47e0      	blx	ip
 800584a:	f000 f876 	bl	800593a <.text_20>
 800584e:	e054      	b.n	80058fa <PRL_TXChunk+0x218>
 8005850:	200d      	movs	r0, #13
 8005852:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005856:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8005858:	f60f 03bc 	addw	r3, pc, #2236	; 0x8bc
 800585c:	9000      	str	r0, [sp, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	2006      	movs	r0, #6
 8005862:	47e0      	blx	ip
 8005864:	0aed      	lsrs	r5, r5, #11
 8005866:	f005 050f 	and.w	r5, r5, #15
 800586a:	201a      	movs	r0, #26
 800586c:	fb10 f005 	smulbb	r0, r0, r5
 8005870:	9000      	str	r0, [sp, #0]
 8005872:	1d21      	adds	r1, r4, #4
 8005874:	4401      	add	r1, r0
 8005876:	221a      	movs	r2, #26
 8005878:	1d20      	adds	r0, r4, #4
 800587a:	f014 fd6a 	bl	801a352 <__aeabi_memcpy>
 800587e:	1c69      	adds	r1, r5, #1
 8005880:	201a      	movs	r0, #26
 8005882:	4341      	muls	r1, r0
 8005884:	458a      	cmp	sl, r1
 8005886:	da31      	bge.n	80058ec <PRL_TXChunk+0x20a>
 8005888:	2200      	movs	r2, #0
 800588a:	817a      	strh	r2, [r7, #10]
 800588c:	02e8      	lsls	r0, r5, #11
 800588e:	8178      	strh	r0, [r7, #10]
 8005890:	2103      	movs	r1, #3
 8005892:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005896:	8178      	strh	r0, [r7, #10]
 8005898:	7479      	strb	r1, [r7, #17]
 800589a:	f36b 0008 	bfi	r0, fp, #0, #9
 800589e:	8178      	strh	r0, [r7, #10]
 80058a0:	1d23      	adds	r3, r4, #4
 80058a2:	9800      	ldr	r0, [sp, #0]
 80058a4:	ebaa 0500 	sub.w	r5, sl, r0
 80058a8:	4628      	mov	r0, r5
 80058aa:	e001      	b.n	80058b0 <PRL_TXChunk+0x1ce>
 80058ac:	545a      	strb	r2, [r3, r1]
 80058ae:	1c40      	adds	r0, r0, #1
 80058b0:	b2c1      	uxtb	r1, r0
 80058b2:	291a      	cmp	r1, #26
 80058b4:	dbfa      	blt.n	80058ac <PRL_TXChunk+0x1ca>
 80058b6:	1ca8      	adds	r0, r5, #2
 80058b8:	fa5f fa80 	uxtb.w	sl, r0
 80058bc:	eb0a 71da 	add.w	r1, sl, sl, lsr #31
 80058c0:	0889      	lsrs	r1, r1, #2
 80058c2:	ebba 0181 	subs.w	r1, sl, r1, lsl #2
 80058c6:	bf18      	it	ne
 80058c8:	2101      	movne	r1, #1
 80058ca:	eb0a 70da 	add.w	r0, sl, sl, lsr #31
 80058ce:	eb01 01a0 	add.w	r1, r1, r0, asr #2
 80058d2:	8bf0      	ldrh	r0, [r6, #30]
 80058d4:	f361 300e 	bfi	r0, r1, #12, #3
 80058d8:	83f0      	strh	r0, [r6, #30]
 80058da:	f3c0 3502 	ubfx	r5, r0, #12, #3
 80058de:	7838      	ldrb	r0, [r7, #0]
 80058e0:	00ad      	lsls	r5, r5, #2
 80058e2:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 80058e6:	1cad      	adds	r5, r5, #2
 80058e8:	7038      	strb	r0, [r7, #0]
 80058ea:	e000      	b.n	80058ee <PRL_TXChunk+0x20c>
 80058ec:	251e      	movs	r5, #30
 80058ee:	f000 f824 	bl	800593a <.text_20>
 80058f2:	7838      	ldrb	r0, [r7, #0]
 80058f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80058f8:	7038      	strb	r0, [r7, #0]
 80058fa:	f115 0f01 	cmn.w	r5, #1
 80058fe:	f43f af01 	beq.w	8005704 <PRL_TXChunk+0x22>
 8005902:	4628      	mov	r0, r5
 8005904:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005908:	2012      	movs	r0, #18
 800590a:	9000      	str	r0, [sp, #0]
 800590c:	2200      	movs	r2, #0
 800590e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005912:	f60f 0314 	addw	r3, pc, #2068	; 0x814
 8005916:	2006      	movs	r0, #6
 8005918:	47e0      	blx	ip
 800591a:	7838      	ldrb	r0, [r7, #0]
 800591c:	2500      	movs	r5, #0
 800591e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8005922:	b108      	cbz	r0, 8005928 <PRL_TXChunk+0x246>
 8005924:	2501      	movs	r5, #1
 8005926:	747d      	strb	r5, [r7, #17]
 8005928:	7838      	ldrb	r0, [r7, #0]
 800592a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800592e:	2800      	cmp	r0, #0
 8005930:	d0e7      	beq.n	8005902 <PRL_TXChunk+0x220>
 8005932:	2000      	movs	r0, #0
 8005934:	2501      	movs	r5, #1
 8005936:	7478      	strb	r0, [r7, #17]
 8005938:	e7e3      	b.n	8005902 <PRL_TXChunk+0x220>

0800593a <.text_20>:
 800593a:	8978      	ldrh	r0, [r7, #10]
 800593c:	70a0      	strb	r0, [r4, #2]
 800593e:	8979      	ldrh	r1, [r7, #10]
 8005940:	0a09      	lsrs	r1, r1, #8
 8005942:	70e1      	strb	r1, [r4, #3]
 8005944:	4770      	bx	lr
	...

08005948 <USBPD_PRL_SendMessage>:
 8005948:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	4607      	mov	r7, r0
 800594e:	f8df 8794 	ldr.w	r8, [pc, #1940]	; 80060e4 <.text_40>
 8005952:	b082      	sub	sp, #8
 8005954:	46bb      	mov	fp, r7
 8005956:	f858 402b 	ldr.w	r4, [r8, fp, lsl #2]
 800595a:	ea4f 004b 	mov.w	r0, fp, lsl #1
 800595e:	4689      	mov	r9, r1
 8005960:	1c40      	adds	r0, r0, #1
 8005962:	eb04 0509 	add.w	r5, r4, r9
 8005966:	f88d 0004 	strb.w	r0, [sp, #4]
 800596a:	e01a      	b.n	80059a2 <USBPD_PRL_SendMessage+0x5a>
 800596c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005970:	f00d fb5a 	bl	8013028 <USBPD_TIM_Start>
 8005974:	f000 f9a2 	bl	8005cbc <.text_23>
 8005978:	b2b3      	uxth	r3, r6
 800597a:	4638      	mov	r0, r7
 800597c:	f00b ffe5 	bl	801194a <USBPD_PHY_SendMessage>
 8005980:	b118      	cbz	r0, 800598a <USBPD_PRL_SendMessage+0x42>
 8005982:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005986:	200f      	movs	r0, #15
 8005988:	7408      	strb	r0, [r1, #16]
 800598a:	b2b6      	uxth	r6, r6
 800598c:	9600      	str	r6, [sp, #0]
 800598e:	4639      	mov	r1, r7
 8005990:	f8df 6754 	ldr.w	r6, [pc, #1876]	; 80060e8 <.text_41>
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800599a:	f8d6 c000 	ldr.w	ip, [r6]
 800599e:	2002      	movs	r0, #2
 80059a0:	47e0      	blx	ip
 80059a2:	4638      	mov	r0, r7
 80059a4:	f7fb f933 	bl	8000c0e <PE_PRL_Get_ConnectionStatus>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d03e      	beq.n	8005a2a <USBPD_PRL_SendMessage+0xe2>
 80059ac:	f3ef 8a10 	mrs	sl, PRIMASK
 80059b0:	b672      	cpsid	i
 80059b2:	4638      	mov	r0, r7
 80059b4:	f7fb f917 	bl	8000be6 <PE_PRL_Control_RxEvent>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	bf04      	itt	eq
 80059bc:	7da0      	ldrbeq	r0, [r4, #22]
 80059be:	2800      	cmpeq	r0, #0
 80059c0:	d004      	beq.n	80059cc <USBPD_PRL_SendMessage+0x84>
 80059c2:	2100      	movs	r1, #0
 80059c4:	7561      	strb	r1, [r4, #21]
 80059c6:	200f      	movs	r0, #15
 80059c8:	f000 f974 	bl	8005cb4 <.text_22>
 80059cc:	f38a 8810 	msr	PRIMASK, sl
 80059d0:	7c20      	ldrb	r0, [r4, #16]
 80059d2:	2811      	cmp	r0, #17
 80059d4:	f200 8168 	bhi.w	8005ca8 <USBPD_PRL_SendMessage+0x360>
 80059d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80059dc:	00330012 	.word	0x00330012
 80059e0:	0166003d 	.word	0x0166003d
 80059e4:	00290044 	.word	0x00290044
 80059e8:	0087004d 	.word	0x0087004d
 80059ec:	01660166 	.word	0x01660166
 80059f0:	00e600d1 	.word	0x00e600d1
 80059f4:	010b0105 	.word	0x010b0105
 80059f8:	01510166 	.word	0x01510166
 80059fc:	0157013b 	.word	0x0157013b
 8005a00:	2100      	movs	r1, #0
 8005a02:	7461      	strb	r1, [r4, #17]
 8005a04:	20ff      	movs	r0, #255	; 0xff
 8005a06:	7560      	strb	r0, [r4, #21]
 8005a08:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8005a0c:	2901      	cmp	r1, #1
 8005a0e:	bf01      	itttt	eq
 8005a10:	f104 001e 	addeq.w	r0, r4, #30
 8005a14:	f830 1019 	ldrheq.w	r1, [r0, r9, lsl #1]
 8005a18:	f3c1 1081 	ubfxeq	r0, r1, #6, #2
 8005a1c:	2802      	cmpeq	r0, #2
 8005a1e:	bf14      	ite	ne
 8005a20:	2006      	movne	r0, #6
 8005a22:	2005      	moveq	r0, #5
 8005a24:	f000 f946 	bl	8005cb4 <.text_22>
 8005a28:	e7bb      	b.n	80059a2 <USBPD_PRL_SendMessage+0x5a>
 8005a2a:	2010      	movs	r0, #16
 8005a2c:	e137      	b.n	8005c9e <USBPD_PRL_SendMessage+0x356>
 8005a2e:	f104 001e 	add.w	r0, r4, #30
 8005a32:	f830 1019 	ldrh.w	r1, [r0, r9, lsl #1]
 8005a36:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1f2      	bne.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005a3e:	2004      	movs	r0, #4
 8005a40:	e7f0      	b.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005a42:	4638      	mov	r0, r7
 8005a44:	f00b ffb9 	bl	80119ba <USBPD_PHY_SetResistor_SinkTxNG>
 8005a48:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005a4c:	2002      	movs	r0, #2
 8005a4e:	7408      	strb	r0, [r1, #16]
 8005a50:	2013      	movs	r0, #19
 8005a52:	7320      	strb	r0, [r4, #12]
 8005a54:	e7a5      	b.n	80059a2 <USBPD_PRL_SendMessage+0x5a>
 8005a56:	7b20      	ldrb	r0, [r4, #12]
 8005a58:	b958      	cbnz	r0, 8005a72 <USBPD_PRL_SendMessage+0x12a>
 8005a5a:	2106      	movs	r1, #6
 8005a5c:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005a60:	7401      	strb	r1, [r0, #16]
 8005a62:	e79e      	b.n	80059a2 <USBPD_PRL_SendMessage+0x5a>
 8005a64:	4638      	mov	r0, r7
 8005a66:	f00b ffd7 	bl	8011a18 <USBPD_PHY_IsResistor_SinkTxOk>
 8005a6a:	2801      	cmp	r0, #1
 8005a6c:	bf08      	it	eq
 8005a6e:	2006      	moveq	r0, #6
 8005a70:	d0d8      	beq.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005a72:	2609      	movs	r6, #9
 8005a74:	e112      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>
 8005a76:	f104 001e 	add.w	r0, r4, #30
 8005a7a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005a7e:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 8005a82:	f361 0004 	bfi	r0, r1, #0, #5
 8005a86:	f104 011e 	add.w	r1, r4, #30
 8005a8a:	f104 021e 	add.w	r2, r4, #30
 8005a8e:	f821 0019 	strh.w	r0, [r1, r9, lsl #1]
 8005a92:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8005a96:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005a9a:	09c9      	lsrs	r1, r1, #7
 8005a9c:	ea40 30c1 	orr.w	r0, r0, r1, lsl #15
 8005aa0:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
 8005aa4:	f104 011e 	add.w	r1, r4, #30
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	7360      	strb	r0, [r4, #13]
 8005aac:	f831 1019 	ldrh.w	r1, [r1, r9, lsl #1]
 8005ab0:	0bc8      	lsrs	r0, r1, #15
 8005ab2:	d109      	bne.n	8005ac8 <USBPD_PRL_SendMessage+0x180>
 8005ab4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8005ab8:	1e80      	subs	r0, r0, #2
 8005aba:	0880      	lsrs	r0, r0, #2
 8005abc:	f360 310e 	bfi	r1, r0, #12, #3
 8005ac0:	f104 001e 	add.w	r0, r4, #30
 8005ac4:	f820 1019 	strh.w	r1, [r0, r9, lsl #1]
 8005ac8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005acc:	280d      	cmp	r0, #13
 8005ace:	bf02      	ittt	eq
 8005ad0:	f104 011e 	addeq.w	r1, r4, #30
 8005ad4:	f831 0019 	ldrheq.w	r0, [r1, r9, lsl #1]
 8005ad8:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8005adc:	d103      	bne.n	8005ae6 <USBPD_PRL_SendMessage+0x19e>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	75e8      	strb	r0, [r5, #23]
 8005ae2:	f000 f8f6 	bl	8005cd2 <.text_25>
 8005ae6:	2007      	movs	r0, #7
 8005ae8:	e79c      	b.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005aea:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005aee:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8005af2:	f101 021e 	add.w	r2, r1, #30
 8005af6:	f832 0019 	ldrh.w	r0, [r2, r9, lsl #1]
 8005afa:	0bc0      	lsrs	r0, r0, #15
 8005afc:	d017      	beq.n	8005b2e <USBPD_PRL_SendMessage+0x1e6>
 8005afe:	7808      	ldrb	r0, [r1, #0]
 8005b00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8005b04:	b938      	cbnz	r0, 8005b16 <USBPD_PRL_SendMessage+0x1ce>
 8005b06:	f000 f8d9 	bl	8005cbc <.text_23>
 8005b0a:	4633      	mov	r3, r6
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff fde8 	bl	80056e2 <PRL_TXChunk>
 8005b12:	4606      	mov	r6, r0
 8005b14:	e00b      	b.n	8005b2e <USBPD_PRL_SendMessage+0x1e6>
 8005b16:	f858 202b 	ldr.w	r2, [r8, fp, lsl #2]
 8005b1a:	f102 031e 	add.w	r3, r2, #30
 8005b1e:	311e      	adds	r1, #30
 8005b20:	f833 c019 	ldrh.w	ip, [r3, r9, lsl #1]
 8005b24:	2001      	movs	r0, #1
 8005b26:	f360 3c0e 	bfi	ip, r0, #12, #3
 8005b2a:	f821 c019 	strh.w	ip, [r1, r9, lsl #1]
 8005b2e:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005b32:	f100 0117 	add.w	r1, r0, #23
 8005b36:	301e      	adds	r0, #30
 8005b38:	f811 2009 	ldrb.w	r2, [r1, r9]
 8005b3c:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 8005b40:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005b44:	f362 204b 	bfi	r0, r2, #9, #3
 8005b48:	f101 021e 	add.w	r2, r1, #30
 8005b4c:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
 8005b50:	9904      	ldr	r1, [sp, #16]
 8005b52:	7008      	strb	r0, [r1, #0]
 8005b54:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005b58:	f100 021e 	add.w	r2, r0, #30
 8005b5c:	9804      	ldr	r0, [sp, #16]
 8005b5e:	f832 1019 	ldrh.w	r1, [r2, r9, lsl #1]
 8005b62:	0a09      	lsrs	r1, r1, #8
 8005b64:	7041      	strb	r1, [r0, #1]
 8005b66:	210a      	movs	r1, #10
 8005b68:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005b6c:	7401      	strb	r1, [r0, #16]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	7702      	strb	r2, [r0, #28]
 8005b72:	8346      	strh	r6, [r0, #26]
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2001      	moveq	r0, #1
 8005b7a:	2003      	movne	r0, #3
 8005b7c:	e6f6      	b.n	800596c <USBPD_PRL_SendMessage+0x24>
 8005b7e:	f3ef 8a10 	mrs	sl, PRIMASK
 8005b82:	b672      	cpsid	i
 8005b84:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8005b88:	7c01      	ldrb	r1, [r0, #16]
 8005b8a:	290a      	cmp	r1, #10
 8005b8c:	d109      	bne.n	8005ba2 <USBPD_PRL_SendMessage+0x25a>
 8005b8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005b92:	f00d fabb 	bl	801310c <USBPD_TIM_IsExpired>
 8005b96:	2801      	cmp	r0, #1
 8005b98:	d103      	bne.n	8005ba2 <USBPD_PRL_SendMessage+0x25a>
 8005b9a:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005b9e:	200d      	movs	r0, #13
 8005ba0:	7408      	strb	r0, [r1, #16]
 8005ba2:	f38a 8810 	msr	PRIMASK, sl
 8005ba6:	e6fc      	b.n	80059a2 <USBPD_PRL_SendMessage+0x5a>
 8005ba8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005baa:	7de8      	ldrb	r0, [r5, #23]
 8005bac:	0a4a      	lsrs	r2, r1, #9
 8005bae:	f002 0207 	and.w	r2, r2, #7
 8005bb2:	4290      	cmp	r0, r2
 8005bb4:	bf04      	itt	eq
 8005bb6:	f001 011f 	andeq.w	r1, r1, #31
 8005bba:	2901      	cmpeq	r1, #1
 8005bbc:	d109      	bne.n	8005bd2 <USBPD_PRL_SendMessage+0x28a>
 8005bbe:	1c40      	adds	r0, r0, #1
 8005bc0:	f000 0007 	and.w	r0, r0, #7
 8005bc4:	75e8      	strb	r0, [r5, #23]
 8005bc6:	7820      	ldrb	r0, [r4, #0]
 8005bc8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005bcc:	b168      	cbz	r0, 8005bea <USBPD_PRL_SendMessage+0x2a2>
 8005bce:	2011      	movs	r0, #17
 8005bd0:	e728      	b.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	bf0c      	ite	eq
 8005bd6:	2001      	moveq	r0, #1
 8005bd8:	2003      	movne	r0, #3
 8005bda:	f00d fa97 	bl	801310c <USBPD_TIM_IsExpired>
 8005bde:	2801      	cmp	r0, #1
 8005be0:	d1f7      	bne.n	8005bd2 <USBPD_PRL_SendMessage+0x28a>
 8005be2:	200d      	movs	r0, #13
 8005be4:	e71e      	b.n	8005a24 <USBPD_PRL_SendMessage+0xdc>
 8005be6:	f000 f86d 	bl	8005cc4 <.text_24>
 8005bea:	f000 f863 	bl	8005cb4 <.text_22>
 8005bee:	2605      	movs	r6, #5
 8005bf0:	e054      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>
 8005bf2:	7b60      	ldrb	r0, [r4, #13]
 8005bf4:	1c40      	adds	r0, r0, #1
 8005bf6:	7360      	strb	r0, [r4, #13]
 8005bf8:	f104 001e 	add.w	r0, r4, #30
 8005bfc:	f830 1019 	ldrh.w	r1, [r0, r9, lsl #1]
 8005c00:	f3c1 1081 	ubfx	r0, r1, #6, #2
 8005c04:	2801      	cmp	r0, #1
 8005c06:	bf14      	ite	ne
 8005c08:	f04f 0a02 	movne.w	sl, #2
 8005c0c:	f04f 0a03 	moveq.w	sl, #3
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2001      	moveq	r0, #1
 8005c16:	2003      	movne	r0, #3
 8005c18:	f00d fa78 	bl	801310c <USBPD_TIM_IsExpired>
 8005c1c:	2801      	cmp	r0, #1
 8005c1e:	d1f7      	bne.n	8005c10 <USBPD_PRL_SendMessage+0x2c8>
 8005c20:	f104 011e 	add.w	r1, r4, #30
 8005c24:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
 8005c28:	0bc0      	lsrs	r0, r0, #15
 8005c2a:	d006      	beq.n	8005c3a <USBPD_PRL_SendMessage+0x2f2>
 8005c2c:	8961      	ldrh	r1, [r4, #10]
 8005c2e:	0bc8      	lsrs	r0, r1, #15
 8005c30:	d103      	bne.n	8005c3a <USBPD_PRL_SendMessage+0x2f2>
 8005c32:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005c36:	291b      	cmp	r1, #27
 8005c38:	d205      	bcs.n	8005c46 <USBPD_PRL_SendMessage+0x2fe>
 8005c3a:	7b60      	ldrb	r0, [r4, #13]
 8005c3c:	4582      	cmp	sl, r0
 8005c3e:	bf28      	it	cs
 8005c40:	2110      	movcs	r1, #16
 8005c42:	f4bf af0b 	bcs.w	8005a5c <USBPD_PRL_SendMessage+0x114>
 8005c46:	f000 f83d 	bl	8005cc4 <.text_24>
 8005c4a:	f000 f833 	bl	8005cb4 <.text_22>
 8005c4e:	2607      	movs	r6, #7
 8005c50:	e024      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>
 8005c52:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005c56:	200a      	movs	r0, #10
 8005c58:	7408      	strb	r0, [r1, #16]
 8005c5a:	f242 7110 	movw	r1, #10000	; 0x2710
 8005c5e:	2002      	movs	r0, #2
 8005c60:	7720      	strb	r0, [r4, #28]
 8005c62:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005c66:	f00d f9df 	bl	8013028 <USBPD_TIM_Start>
 8005c6a:	8b63      	ldrh	r3, [r4, #26]
 8005c6c:	f000 f826 	bl	8005cbc <.text_23>
 8005c70:	4638      	mov	r0, r7
 8005c72:	f00b fe6a 	bl	801194a <USBPD_PHY_SendMessage>
 8005c76:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8005c7a:	9000      	str	r0, [sp, #0]
 8005c7c:	e687      	b.n	800598e <USBPD_PRL_SendMessage+0x46>
 8005c7e:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005c82:	2000      	movs	r0, #0
 8005c84:	7408      	strb	r0, [r1, #16]
 8005c86:	2606      	movs	r6, #6
 8005c88:	e008      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>
 8005c8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8005c8e:	f000 f815 	bl	8005cbc <.text_23>
 8005c92:	4638      	mov	r0, r7
 8005c94:	f7ff fd25 	bl	80056e2 <PRL_TXChunk>
 8005c98:	b120      	cbz	r0, 8005ca4 <USBPD_PRL_SendMessage+0x35c>
 8005c9a:	e724      	b.n	8005ae6 <USBPD_PRL_SendMessage+0x19e>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	b005      	add	sp, #20
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	261c      	movs	r6, #28
 8005ca6:	e7f9      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>
 8005ca8:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005cac:	2000      	movs	r0, #0
 8005cae:	7408      	strb	r0, [r1, #16]
 8005cb0:	2610      	movs	r6, #16
 8005cb2:	e7f3      	b.n	8005c9c <USBPD_PRL_SendMessage+0x354>

08005cb4 <.text_22>:
 8005cb4:	f858 102b 	ldr.w	r1, [r8, fp, lsl #2]
 8005cb8:	7408      	strb	r0, [r1, #16]
 8005cba:	4770      	bx	lr

08005cbc <.text_23>:
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8005cc2:	4770      	bx	lr

08005cc4 <.text_24>:
 8005cc4:	7de8      	ldrb	r0, [r5, #23]
 8005cc6:	1c40      	adds	r0, r0, #1
 8005cc8:	f000 0007 	and.w	r0, r0, #7
 8005ccc:	75e8      	strb	r0, [r5, #23]
 8005cce:	2000      	movs	r0, #0
 8005cd0:	4770      	bx	lr

08005cd2 <.text_25>:
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	2103      	movs	r1, #3
 8005cd6:	f104 0012 	add.w	r0, r4, #18
 8005cda:	f000 bdda 	b.w	8006892 <__aeabi_memset>

08005cde <USBPD_PRL_ResetRequestProcess>:
 8005cde:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	f8df 83fc 	ldr.w	r8, [pc, #1020]	; 80060e4 <.text_40>
 8005ce8:	462f      	mov	r7, r5
 8005cea:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 8005cee:	2000      	movs	r0, #0
 8005cf0:	73a0      	strb	r0, [r4, #14]
 8005cf2:	75e0      	strb	r0, [r4, #23]
 8005cf4:	7620      	strb	r0, [r4, #24]
 8005cf6:	7660      	strb	r0, [r4, #25]
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	f7ff ffea 	bl	8005cd2 <.text_25>
 8005cfe:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8005d02:	f8df 73e4 	ldr.w	r7, [pc, #996]	; 80060e8 <.text_41>
 8005d06:	2200      	movs	r2, #0
 8005d08:	7402      	strb	r2, [r0, #16]
 8005d0a:	9200      	str	r2, [sp, #0]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8d7 c000 	ldr.w	ip, [r7]
 8005d12:	4632      	mov	r2, r6
 8005d14:	4629      	mov	r1, r5
 8005d16:	2002      	movs	r0, #2
 8005d18:	47e0      	blx	ip
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 f83c 	bl	8005d98 <PRL_DisableRX>
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	f00b fdfe 	bl	8011924 <USBPD_PHY_ResetRequest>
 8005d28:	2005      	movs	r0, #5
 8005d2a:	73e0      	strb	r0, [r4, #15]
 8005d2c:	7ba0      	ldrb	r0, [r4, #14]
 8005d2e:	2801      	cmp	r0, #1
 8005d30:	bf1c      	itt	ne
 8005d32:	7be0      	ldrbne	r0, [r4, #15]
 8005d34:	2800      	cmpne	r0, #0
 8005d36:	d1f9      	bne.n	8005d2c <USBPD_PRL_ResetRequestProcess+0x4e>
 8005d38:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005d3c <USBDPD_PRL_BistCarrierEyeMode>:
 8005d3c:	2905      	cmp	r1, #5
 8005d3e:	bf08      	it	eq
 8005d40:	f00b be19 	beq.w	8011976 <USBPD_PHY_Send_BIST_Pattern>
 8005d44:	2010      	movs	r0, #16
 8005d46:	4770      	bx	lr

08005d48 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005d48:	2905      	cmp	r1, #5
 8005d4a:	bf04      	itt	eq
 8005d4c:	2107      	moveq	r1, #7
 8005d4e:	f00b be20 	beq.w	8011992 <USBPD_PHY_ExitTransmit>
 8005d52:	2010      	movs	r0, #16
 8005d54:	4770      	bx	lr

08005d56 <USBPD_PRL_Reset>:
 8005d56:	b538      	push	{r3, r4, r5, lr}
 8005d58:	4604      	mov	r4, r0
 8005d5a:	f8df 0388 	ldr.w	r0, [pc, #904]	; 80060e4 <.text_40>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005d64:	2200      	movs	r2, #0
 8005d66:	742a      	strb	r2, [r5, #16]
 8005d68:	702a      	strb	r2, [r5, #0]
 8005d6a:	73ea      	strb	r2, [r5, #15]
 8005d6c:	2103      	movs	r1, #3
 8005d6e:	f105 0017 	add.w	r0, r5, #23
 8005d72:	f014 faeb 	bl	801a34c <__aeabi_memclr>
 8005d76:	220f      	movs	r2, #15
 8005d78:	2103      	movs	r1, #3
 8005d7a:	f105 0012 	add.w	r0, r5, #18
 8005d7e:	f000 fd88 	bl	8006892 <__aeabi_memset>
 8005d82:	4620      	mov	r0, r4
 8005d84:	f00b fdc3 	bl	801190e <USBPD_PHY_Reset>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005d8e:	f00b be5e 	b.w	8011a4e <USBPD_PHY_EnableRX>

08005d92 <USBPD_PRL_Stop>:
 8005d92:	f00b be69 	b.w	8011a68 <USBPD_PHY_DisableRX>

08005d96 <USBPD_PRL_DeInit>:
 8005d96:	4770      	bx	lr

08005d98 <PRL_DisableRX>:
 8005d98:	f00b be66 	b.w	8011a68 <USBPD_PHY_DisableRX>

08005d9c <PRL_Received>:
 8005d9c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4681      	mov	r9, r0
 8005da2:	f8df b340 	ldr.w	fp, [pc, #832]	; 80060e4 <.text_40>
 8005da6:	46c8      	mov	r8, r9
 8005da8:	468a      	mov	sl, r1
 8005daa:	f85b 7028 	ldr.w	r7, [fp, r8, lsl #2]
 8005dae:	2100      	movs	r1, #0
 8005db0:	f88d 1004 	strb.w	r1, [sp, #4]
 8005db4:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8005db8:	f00b fd9d 	bl	80118f6 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8005dc2:	b2c0      	uxtb	r0, r0
 8005dc4:	f00d f930 	bl	8013028 <USBPD_TIM_Start>
 8005dc8:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8005dcc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8005dd0:	784a      	ldrb	r2, [r1, #1]
 8005dd2:	eb00 2402 	add.w	r4, r0, r2, lsl #8
 8005dd6:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8005dda:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8005dde:	7881      	ldrb	r1, [r0, #2]
 8005de0:	78d0      	ldrb	r0, [r2, #3]
 8005de2:	eb01 2500 	add.w	r5, r1, r0, lsl #8
 8005de6:	f24f 001f 	movw	r0, #61471	; 0xf01f
 8005dea:	1c76      	adds	r6, r6, #1
 8005dec:	4020      	ands	r0, r4
 8005dee:	2801      	cmp	r0, #1
 8005df0:	d115      	bne.n	8005e1e <PRL_Received+0x82>
 8005df2:	b2f0      	uxtb	r0, r6
 8005df4:	f00d f98a 	bl	801310c <USBPD_TIM_IsExpired>
 8005df8:	2801      	cmp	r0, #1
 8005dfa:	d00f      	beq.n	8005e1c <PRL_Received+0x80>
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	4dba      	ldr	r5, [pc, #744]	; (80060e8 <.text_41>)
 8005e00:	9000      	str	r0, [sp, #0]
 8005e02:	4652      	mov	r2, sl
 8005e04:	f8d5 a000 	ldr.w	sl, [r5]
 8005e08:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	2001      	movs	r0, #1
 8005e10:	47d0      	blx	sl
 8005e12:	f85b 1028 	ldr.w	r1, [fp, r8, lsl #2]
 8005e16:	200b      	movs	r0, #11
 8005e18:	7408      	strb	r0, [r1, #16]
 8005e1a:	84fc      	strh	r4, [r7, #38]	; 0x26
 8005e1c:	e088      	b.n	8005f30 <PRL_Received+0x194>
 8005e1e:	0420      	lsls	r0, r4, #16
 8005e20:	ea5f 78d0 	movs.w	r8, r0, lsr #31
 8005e24:	d02a      	beq.n	8005e7c <PRL_Received+0xe0>
 8005e26:	7838      	ldrb	r0, [r7, #0]
 8005e28:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	bf1c      	itt	ne
 8005e30:	f3c5 2080 	ubfxne	r0, r5, #10, #1
 8005e34:	2800      	cmpne	r0, #0
 8005e36:	d005      	beq.n	8005e44 <PRL_Received+0xa8>
 8005e38:	f000 f87c 	bl	8005f34 <.text_34>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d177      	bne.n	8005f30 <PRL_Received+0x194>
 8005e40:	853d      	strh	r5, [r7, #40]	; 0x28
 8005e42:	e075      	b.n	8005f30 <PRL_Received+0x194>
 8005e44:	7838      	ldrb	r0, [r7, #0]
 8005e46:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8005e4a:	b1b8      	cbz	r0, 8005e7c <PRL_Received+0xe0>
 8005e4c:	f3c5 2080 	ubfx	r0, r5, #10, #1
 8005e50:	b9a0      	cbnz	r0, 8005e7c <PRL_Received+0xe0>
 8005e52:	f000 f86f 	bl	8005f34 <.text_34>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d16a      	bne.n	8005f30 <PRL_Received+0x194>
 8005e5a:	853d      	strh	r5, [r7, #40]	; 0x28
 8005e5c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005e60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e62:	7879      	ldrb	r1, [r7, #1]
 8005e64:	0ad2      	lsrs	r2, r2, #11
 8005e66:	f002 020f 	and.w	r2, r2, #15
 8005e6a:	4648      	mov	r0, r9
 8005e6c:	f7fb f87c 	bl	8000f68 <PE_PRL_PostReceiveEventCopyChunk>
 8005e70:	f242 7110 	movw	r1, #10000	; 0x2710
 8005e74:	b2f0      	uxtb	r0, r6
 8005e76:	f00d f8d7 	bl	8013028 <USBPD_TIM_Start>
 8005e7a:	e059      	b.n	8005f30 <PRL_Received+0x194>
 8005e7c:	f24f 021f 	movw	r2, #61471	; 0xf01f
 8005e80:	4022      	ands	r2, r4
 8005e82:	2001      	movs	r0, #1
 8005e84:	2a0d      	cmp	r2, #13
 8005e86:	75b8      	strb	r0, [r7, #22]
 8005e88:	eb07 060a 	add.w	r6, r7, sl
 8005e8c:	d107      	bne.n	8005e9e <PRL_Received+0x102>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	75f0      	strb	r0, [r6, #23]
 8005e92:	220f      	movs	r2, #15
 8005e94:	2103      	movs	r1, #3
 8005e96:	f107 0012 	add.w	r0, r7, #18
 8005e9a:	f000 fcfa 	bl	8006892 <__aeabi_memset>
 8005e9e:	aa01      	add	r2, sp, #4
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f7fb f824 	bl	8000ef0 <PE_PRL_PostReceiveEventAllocate>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d041      	beq.n	8005f30 <PRL_Received+0x194>
 8005eac:	f000 f842 	bl	8005f34 <.text_34>
 8005eb0:	bb58      	cbnz	r0, 8005f0a <PRL_Received+0x16e>
 8005eb2:	7cb0      	ldrb	r0, [r6, #18]
 8005eb4:	f3c4 2142 	ubfx	r1, r4, #9, #3
 8005eb8:	4288      	cmp	r0, r1
 8005eba:	d026      	beq.n	8005f0a <PRL_Received+0x16e>
 8005ebc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005ec0:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	f7fb f865 	bl	8000f94 <PE_PRL_PostReceiveEventCopy>
 8005eca:	0420      	lsls	r0, r4, #16
 8005ecc:	0e40      	lsrs	r0, r0, #25
 8005ece:	f000 0007 	and.w	r0, r0, #7
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	74b0      	strb	r0, [r6, #18]
 8005ed8:	d012      	beq.n	8005f00 <PRL_Received+0x164>
 8005eda:	0428      	lsls	r0, r5, #16
 8005edc:	d510      	bpl.n	8005f00 <PRL_Received+0x164>
 8005ede:	0569      	lsls	r1, r5, #21
 8005ee0:	d40e      	bmi.n	8005f00 <PRL_Received+0x164>
 8005ee2:	7838      	ldrb	r0, [r7, #0]
 8005ee4:	f040 0008 	orr.w	r0, r0, #8
 8005ee8:	7038      	strb	r0, [r7, #0]
 8005eea:	4648      	mov	r0, r9
 8005eec:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005ef0:	7079      	strb	r1, [r7, #1]
 8005ef2:	807c      	strh	r4, [r7, #2]
 8005ef4:	853d      	strh	r5, [r7, #40]	; 0x28
 8005ef6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005efa:	f7fb f829 	bl	8000f50 <PE_PRL_PostReceiveEventEnableChunk>
 8005efe:	e017      	b.n	8005f30 <PRL_Received+0x194>
 8005f00:	7838      	ldrb	r0, [r7, #0]
 8005f02:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8005f06:	7038      	strb	r0, [r7, #0]
 8005f08:	e012      	b.n	8005f30 <PRL_Received+0x194>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	21ff      	movs	r1, #255	; 0xff
 8005f0e:	7738      	strb	r0, [r7, #28]
 8005f10:	7579      	strb	r1, [r7, #21]
 8005f12:	4648      	mov	r0, r9
 8005f14:	f7fb f806 	bl	8000f24 <PE_PRL_PostReceiveEventError>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	75b8      	strb	r0, [r7, #22]
 8005f1c:	2117      	movs	r1, #23
 8005f1e:	9100      	str	r1, [sp, #0]
 8005f20:	4649      	mov	r1, r9
 8005f22:	4c71      	ldr	r4, [pc, #452]	; (80060e8 <.text_41>)
 8005f24:	a385      	add	r3, pc, #532	; (adr r3, 800613c <.text_47>)
 8005f26:	f8d4 9000 	ldr.w	r9, [r4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2006      	movs	r0, #6
 8005f2e:	47c8      	blx	r9
 8005f30:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f34 <.text_34>:
 8005f34:	462b      	mov	r3, r5
 8005f36:	4622      	mov	r2, r4
 8005f38:	4651      	mov	r1, sl
 8005f3a:	4648      	mov	r0, r9
 8005f3c:	e000      	b.n	8005f40 <PRL_GoodCRC>
	...

08005f40 <PRL_GoodCRC>:
 8005f40:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	4604      	mov	r4, r0
 8005f46:	bf00      	nop
 8005f48:	a088      	add	r0, pc, #544	; (adr r0, 800616c <.text_49>)
 8005f4a:	468a      	mov	sl, r1
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	8803      	ldrh	r3, [r0, #0]
 8005f50:	4964      	ldr	r1, [pc, #400]	; (80060e4 <.text_40>)
 8005f52:	4627      	mov	r7, r4
 8005f54:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8005f58:	ea5f 000a 	movs.w	r0, sl
 8005f5c:	d109      	bne.n	8005f72 <PRL_GoodCRC+0x32>
 8005f5e:	8bf8      	ldrh	r0, [r7, #30]
 8005f60:	8bf9      	ldrh	r1, [r7, #30]
 8005f62:	0600      	lsls	r0, r0, #24
 8005f64:	0f40      	lsrs	r0, r0, #29
 8005f66:	f360 1345 	bfi	r3, r0, #5, #1
 8005f6a:	0a09      	lsrs	r1, r1, #8
 8005f6c:	f361 2308 	bfi	r3, r1, #8, #1
 8005f70:	e002      	b.n	8005f78 <PRL_GoodCRC+0x38>
 8005f72:	f64f 60ff 	movw	r0, #65279	; 0xfeff
 8005f76:	4003      	ands	r3, r0
 8005f78:	9201      	str	r2, [sp, #4]
 8005f7a:	f24f 113f 	movw	r1, #61759	; 0xf13f
 8005f7e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005f82:	400b      	ands	r3, r1
 8005f84:	f400 6060 	and.w	r0, r0, #3584	; 0xe00
 8005f88:	4303      	orrs	r3, r0
 8005f8a:	f107 0824 	add.w	r8, r7, #36	; 0x24
 8005f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f92:	f888 3000 	strb.w	r3, [r8]
 8005f96:	2101      	movs	r1, #1
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f888 3001 	strb.w	r3, [r8, #1]
 8005f9e:	7739      	strb	r1, [r7, #28]
 8005fa0:	0060      	lsls	r0, r4, #1
 8005fa2:	b2c0      	uxtb	r0, r0
 8005fa4:	f00d f8b2 	bl	801310c <USBPD_TIM_IsExpired>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d0f9      	beq.n	8005fa0 <PRL_GoodCRC+0x60>
 8005fac:	2302      	movs	r3, #2
 8005fae:	4642      	mov	r2, r8
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f00b fcc9 	bl	801194a <USBPD_PHY_SendMessage>
 8005fb8:	4681      	mov	r9, r0
 8005fba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005fbe:	4d4a      	ldr	r5, [pc, #296]	; (80060e8 <.text_41>)
 8005fc0:	0bc0      	lsrs	r0, r0, #15
 8005fc2:	d00b      	beq.n	8005fdc <PRL_GoodCRC+0x9c>
 8005fc4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005fc8:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8005fcc:	b930      	cbnz	r0, 8005fdc <PRL_GoodCRC+0x9c>
 8005fce:	9601      	str	r6, [sp, #4]
 8005fd0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005fd4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005fd8:	1d00      	adds	r0, r0, #4
 8005fda:	e005      	b.n	8005fe8 <PRL_GoodCRC+0xa8>
 8005fdc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005fe0:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8005fe4:	0080      	lsls	r0, r0, #2
 8005fe6:	1c80      	adds	r0, r0, #2
 8005fe8:	9000      	str	r0, [sp, #0]
 8005fea:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8005fee:	682e      	ldr	r6, [r5, #0]
 8005ff0:	4652      	mov	r2, sl
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	47b0      	blx	r6
 8005ff8:	f1b9 0f00 	cmp.w	r9, #0
 8005ffc:	d106      	bne.n	800600c <PRL_GoodCRC+0xcc>
 8005ffe:	2002      	movs	r0, #2
 8006000:	9000      	str	r0, [sp, #0]
 8006002:	4621      	mov	r1, r4
 8006004:	682c      	ldr	r4, [r5, #0]
 8006006:	4643      	mov	r3, r8
 8006008:	4652      	mov	r2, sl
 800600a:	47a0      	blx	r4
 800600c:	4648      	mov	r0, r9
 800600e:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08006012 <PRL_ResetIndicate>:
 8006012:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8006016:	460d      	mov	r5, r1
 8006018:	2d05      	cmp	r5, #5
 800601a:	4604      	mov	r4, r0
 800601c:	d11d      	bne.n	800605a <PRL_ResetIndicate+0x48>
 800601e:	4f31      	ldr	r7, [pc, #196]	; (80060e4 <.text_40>)
 8006020:	4626      	mov	r6, r4
 8006022:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 8006026:	2000      	movs	r0, #0
 8006028:	2100      	movs	r1, #0
 800602a:	b2c2      	uxtb	r2, r0
 800602c:	1c40      	adds	r0, r0, #1
 800602e:	4442      	add	r2, r8
 8006030:	b2c3      	uxtb	r3, r0
 8006032:	2b03      	cmp	r3, #3
 8006034:	75d1      	strb	r1, [r2, #23]
 8006036:	d3f8      	bcc.n	800602a <PRL_ResetIndicate+0x18>
 8006038:	220f      	movs	r2, #15
 800603a:	2103      	movs	r1, #3
 800603c:	f108 0012 	add.w	r0, r8, #18
 8006040:	f000 fc27 	bl	8006892 <__aeabi_memset>
 8006044:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8006048:	2200      	movs	r2, #0
 800604a:	7402      	strb	r2, [r0, #16]
 800604c:	210c      	movs	r1, #12
 800604e:	4640      	mov	r0, r8
 8006050:	f014 f97c 	bl	801a34c <__aeabi_memclr>
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe9f 	bl	8005d98 <PRL_DisableRX>
 800605a:	2000      	movs	r0, #0
 800605c:	4e22      	ldr	r6, [pc, #136]	; (80060e8 <.text_41>)
 800605e:	6837      	ldr	r7, [r6, #0]
 8006060:	9000      	str	r0, [sp, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	462a      	mov	r2, r5
 8006066:	4621      	mov	r1, r4
 8006068:	2001      	movs	r0, #1
 800606a:	47b8      	blx	r7
 800606c:	4629      	mov	r1, r5
 800606e:	4620      	mov	r0, r4
 8006070:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8006074:	f7fa be1d 	b.w	8000cb2 <PE_PRL_ResetReceived>

08006078 <PRL_ResetCompleted>:
 8006078:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <.text_40>)
 800607a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800607e:	2101      	movs	r1, #1
 8006080:	7381      	strb	r1, [r0, #14]
 8006082:	4770      	bx	lr

08006084 <PRL_BistCompleted>:
 8006084:	f7fa be3f 	b.w	8000d06 <PE_PRL_BistCompleted>

08006088 <PRL_TxCompleted>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	4606      	mov	r6, r0
 800608c:	4815      	ldr	r0, [pc, #84]	; (80060e4 <.text_40>)
 800608e:	4634      	mov	r4, r6
 8006090:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8006094:	7f28      	ldrb	r0, [r5, #28]
 8006096:	0064      	lsls	r4, r4, #1
 8006098:	1c64      	adds	r4, r4, #1
 800609a:	2801      	cmp	r0, #1
 800609c:	d002      	beq.n	80060a4 <PRL_TxCompleted+0x1c>
 800609e:	2802      	cmp	r0, #2
 80060a0:	d016      	beq.n	80060d0 <PRL_TxCompleted+0x48>
 80060a2:	e01c      	b.n	80060de <PRL_TxCompleted+0x56>
 80060a4:	2900      	cmp	r1, #0
 80060a6:	4630      	mov	r0, r6
 80060a8:	d10d      	bne.n	80060c6 <PRL_TxCompleted+0x3e>
 80060aa:	f7fa ff84 	bl	8000fb6 <PE_PRL_PostReceiveEventComplete>
 80060ae:	7828      	ldrb	r0, [r5, #0]
 80060b0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 80060b4:	7028      	strb	r0, [r5, #0]
 80060b6:	4630      	mov	r0, r6
 80060b8:	f00b fc10 	bl	80118dc <USBPD_PHY_GetRetryTimerValue>
 80060bc:	4601      	mov	r1, r0
 80060be:	b2e0      	uxtb	r0, r4
 80060c0:	f00c ffb2 	bl	8013028 <USBPD_TIM_Start>
 80060c4:	e001      	b.n	80060ca <PRL_TxCompleted+0x42>
 80060c6:	f7fa ff2d 	bl	8000f24 <PE_PRL_PostReceiveEventError>
 80060ca:	2000      	movs	r0, #0
 80060cc:	75a8      	strb	r0, [r5, #22]
 80060ce:	e006      	b.n	80060de <PRL_TxCompleted+0x56>
 80060d0:	4630      	mov	r0, r6
 80060d2:	f00b fc03 	bl	80118dc <USBPD_PHY_GetRetryTimerValue>
 80060d6:	4601      	mov	r1, r0
 80060d8:	b2e0      	uxtb	r0, r4
 80060da:	f00c ffa5 	bl	8013028 <USBPD_TIM_Start>
 80060de:	2000      	movs	r0, #0
 80060e0:	7728      	strb	r0, [r5, #28]
 80060e2:	bd70      	pop	{r4, r5, r6, pc}

080060e4 <.text_40>:
 80060e4:	20000208 	.word	0x20000208

080060e8 <.text_41>:
 80060e8:	20000000 	.word	0x20000000

080060ec <.text_42>:
 80060ec:	54494e49 	.word	0x54494e49
 80060f0:	55484320 	.word	0x55484320
 80060f4:	00004b4e 	.word	0x00004b4e

080060f8 <.text_43>:
 80060f8:	444e4553 	.word	0x444e4553
 80060fc:	434e5520 	.word	0x434e5520
 8006100:	4b4e5548 	.word	0x4b4e5548
 8006104:	00          	.byte	0x00
 8006105:	00          	.byte	0x00
	...

08006108 <.text_44>:
 8006108:	444e4553 	.word	0x444e4553
 800610c:	55484320 	.word	0x55484320
 8006110:	30284b4e 	.word	0x30284b4e
 8006114:	0029      	.short	0x0029
	...

08006118 <.text_45>:
 8006118:	444e4553 	.word	0x444e4553
 800611c:	55484320 	.word	0x55484320
 8006120:	78284b4e 	.word	0x78284b4e
 8006124:	0029      	.short	0x0029
	...

08006128 <.text_46>:
 8006128:	54494157 	.word	0x54494157
 800612c:	5548435f 	.word	0x5548435f
 8006130:	525f4b4e 	.word	0x525f4b4e
 8006134:	45555145 	.word	0x45555145
 8006138:	00005453 	.word	0x00005453

0800613c <.text_47>:
 800613c:	5f4c5250 	.word	0x5f4c5250
 8006140:	4e455645 	.word	0x4e455645
 8006144:	58525f54 	.word	0x58525f54
 8006148:	5349445f 	.word	0x5349445f
 800614c:	44524143 	.word	0x44524143
 8006150:	00004445 	.word	0x00004445

08006154 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8006154:	08005d9d 08006013 08006079 08006085     .]...`..y`...`..
 8006164:	08006089 080056db                       .`...V..

0800616c <.text_49>:
 800616c:	00000001 	.word	0x00000001

08006170 <PE_GENMACH_StateMachine_Init>:
 8006170:	f500 701b 	add.w	r0, r0, #620	; 0x26c
 8006174:	1e49      	subs	r1, r1, #1
 8006176:	2200      	movs	r2, #0
 8006178:	2909      	cmp	r1, #9
 800617a:	7102      	strb	r2, [r0, #4]
 800617c:	7142      	strb	r2, [r0, #5]
 800617e:	d81a      	bhi.n	80061b6 <PE_GENMACH_StateMachine_Init+0x46>
 8006180:	e8df f001 	tbb	[pc, r1]
 8006184:	11050f07 	.word	0x11050f07
 8006188:	130d1809 	.word	0x130d1809
 800618c:	150b      	.short	0x150b
 800618e:	495e      	ldr	r1, [pc, #376]	; (8006308 <.text_4>)
 8006190:	e00e      	b.n	80061b0 <PE_GENMACH_StateMachine_Init+0x40>
 8006192:	4a5e      	ldr	r2, [pc, #376]	; (800630c <.text_5>)
 8006194:	e00f      	b.n	80061b6 <PE_GENMACH_StateMachine_Init+0x46>
 8006196:	495e      	ldr	r1, [pc, #376]	; (8006310 <.text_6>)
 8006198:	e00a      	b.n	80061b0 <PE_GENMACH_StateMachine_Init+0x40>
 800619a:	4a5e      	ldr	r2, [pc, #376]	; (8006314 <.text_7>)
 800619c:	e00b      	b.n	80061b6 <PE_GENMACH_StateMachine_Init+0x46>
 800619e:	495e      	ldr	r1, [pc, #376]	; (8006318 <.text_8>)
 80061a0:	e006      	b.n	80061b0 <PE_GENMACH_StateMachine_Init+0x40>
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <.text_9>)
 80061a4:	e007      	b.n	80061b6 <PE_GENMACH_StateMachine_Init+0x46>
 80061a6:	495e      	ldr	r1, [pc, #376]	; (8006320 <.text_10>)
 80061a8:	e002      	b.n	80061b0 <PE_GENMACH_StateMachine_Init+0x40>
 80061aa:	4a5e      	ldr	r2, [pc, #376]	; (8006324 <.text_11>)
 80061ac:	e003      	b.n	80061b6 <PE_GENMACH_StateMachine_Init+0x46>
 80061ae:	495e      	ldr	r1, [pc, #376]	; (8006328 <.text_12>)
 80061b0:	6001      	str	r1, [r0, #0]
 80061b2:	4770      	bx	lr
 80061b4:	4a5d      	ldr	r2, [pc, #372]	; (800632c <.text_13>)
 80061b6:	6002      	str	r2, [r0, #0]
 80061b8:	4770      	bx	lr

080061ba <PE_GENMACH_StateMachine_Run>:
 80061ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061be:	4682      	mov	sl, r0
 80061c0:	f50a 771b 	add.w	r7, sl, #620	; 0x26c
 80061c4:	b085      	sub	sp, #20
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	793c      	ldrb	r4, [r7, #4]
 80061ca:	468b      	mov	fp, r1
 80061cc:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80061d0:	9103      	str	r1, [sp, #12]
 80061d2:	0008      	movs	r0, r1
 80061d4:	f04f 0802 	mov.w	r8, #2
 80061d8:	f04f 0903 	mov.w	r9, #3
 80061dc:	f20a 253f 	addw	r5, sl, #575	; 0x23f
 80061e0:	d102      	bne.n	80061e8 <PE_GENMACH_StateMachine_Run+0x2e>
 80061e2:	210f      	movs	r1, #15
 80061e4:	7069      	strb	r1, [r5, #1]
 80061e6:	e08a      	b.n	80062fe <PE_GENMACH_StateMachine_Run+0x144>
 80061e8:	210d      	movs	r1, #13
 80061ea:	fb11 f104 	smulbb	r1, r1, r4
 80061ee:	1846      	adds	r6, r0, r1
 80061f0:	78aa      	ldrb	r2, [r5, #2]
 80061f2:	7830      	ldrb	r0, [r6, #0]
 80061f4:	4282      	cmp	r2, r0
 80061f6:	d00b      	beq.n	8006210 <PE_GENMACH_StateMachine_Run+0x56>
 80061f8:	70a8      	strb	r0, [r5, #2]
 80061fa:	2000      	movs	r0, #0
 80061fc:	f8df e130 	ldr.w	lr, [pc, #304]	; 8006330 <.text_14>
 8006200:	f8de c000 	ldr.w	ip, [lr]
 8006204:	9000      	str	r0, [sp, #0]
 8006206:	7832      	ldrb	r2, [r6, #0]
 8006208:	7829      	ldrb	r1, [r5, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	2004      	movs	r0, #4
 800620e:	47e0      	blx	ip
 8006210:	1c61      	adds	r1, r4, #1
 8006212:	b2c9      	uxtb	r1, r1
 8006214:	9104      	str	r1, [sp, #16]
 8006216:	f8cd b008 	str.w	fp, [sp, #8]
 800621a:	7a71      	ldrb	r1, [r6, #9]
 800621c:	f011 0103 	ands.w	r1, r1, #3
 8006220:	d003      	beq.n	800622a <PE_GENMACH_StateMachine_Run+0x70>
 8006222:	2902      	cmp	r1, #2
 8006224:	d051      	beq.n	80062ca <PE_GENMACH_StateMachine_Run+0x110>
 8006226:	d32f      	bcc.n	8006288 <PE_GENMACH_StateMachine_Run+0xce>
 8006228:	e054      	b.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 800622a:	f04f 0b00 	mov.w	fp, #0
 800622e:	b924      	cbnz	r4, 800623a <PE_GENMACH_StateMachine_Run+0x80>
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	7808      	ldrb	r0, [r1, #0]
 8006234:	b108      	cbz	r0, 800623a <PE_GENMACH_StateMachine_Run+0x80>
 8006236:	f04f 0b01 	mov.w	fp, #1
 800623a:	f8d6 0005 	ldr.w	r0, [r6, #5]
 800623e:	b128      	cbz	r0, 800624c <PE_GENMACH_StateMachine_Run+0x92>
 8006240:	4602      	mov	r2, r0
 8006242:	9902      	ldr	r1, [sp, #8]
 8006244:	4650      	mov	r0, sl
 8006246:	4790      	blx	r2
 8006248:	f100 0802 	add.w	r8, r0, #2
 800624c:	f8d6 2009 	ldr.w	r2, [r6, #9]
 8006250:	f8cd b004 	str.w	fp, [sp, #4]
 8006254:	4611      	mov	r1, r2
 8006256:	7870      	ldrb	r0, [r6, #1]
 8006258:	9000      	str	r0, [sp, #0]
 800625a:	0212      	lsls	r2, r2, #8
 800625c:	0e09      	lsrs	r1, r1, #24
 800625e:	4643      	mov	r3, r8
 8006260:	0c12      	lsrs	r2, r2, #16
 8006262:	f001 010f 	and.w	r1, r1, #15
 8006266:	4650      	mov	r0, sl
 8006268:	f7fb fa3f 	bl	80016ea <PE_Send_Message>
 800626c:	2800      	cmp	r0, #0
 800626e:	d128      	bne.n	80062c2 <PE_GENMACH_StateMachine_Run+0x108>
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	7800      	ldrb	r0, [r0, #0]
 8006274:	f1bb 0f00 	cmp.w	fp, #0
 8006278:	d102      	bne.n	8006280 <PE_GENMACH_StateMachine_Run+0xc6>
 800627a:	b110      	cbz	r0, 8006282 <PE_GENMACH_StateMachine_Run+0xc8>
 800627c:	7b69      	ldrb	r1, [r5, #13]
 800627e:	b901      	cbnz	r1, 8006282 <PE_GENMACH_StateMachine_Run+0xc8>
 8006280:	7368      	strb	r0, [r5, #13]
 8006282:	f000 f861 	bl	8006348 <.text_17>
 8006286:	e025      	b.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 8006288:	f000 f859 	bl	800633e <.text_16>
 800628c:	b2c0      	uxtb	r0, r0
 800628e:	b168      	cbz	r0, 80062ac <PE_GENMACH_StateMachine_Run+0xf2>
 8006290:	2802      	cmp	r0, #2
 8006292:	d005      	beq.n	80062a0 <PE_GENMACH_StateMachine_Run+0xe6>
 8006294:	d21e      	bcs.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 8006296:	f000 f857 	bl	8006348 <.text_17>
 800629a:	f000 f84b 	bl	8006334 <.text_15>
 800629e:	e019      	b.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 80062a0:	f000 f848 	bl	8006334 <.text_15>
 80062a4:	78b0      	ldrb	r0, [r6, #2]
 80062a6:	28a8      	cmp	r0, #168	; 0xa8
 80062a8:	d108      	bne.n	80062bc <PE_GENMACH_StateMachine_Run+0x102>
 80062aa:	e00a      	b.n	80062c2 <PE_GENMACH_StateMachine_Run+0x108>
 80062ac:	f8ba 024e 	ldrh.w	r0, [sl, #590]	; 0x24e
 80062b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80062b4:	d10e      	bne.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 80062b6:	78b0      	ldrb	r0, [r6, #2]
 80062b8:	28a8      	cmp	r0, #168	; 0xa8
 80062ba:	d002      	beq.n	80062c2 <PE_GENMACH_StateMachine_Run+0x108>
 80062bc:	78b0      	ldrb	r0, [r6, #2]
 80062be:	7068      	strb	r0, [r5, #1]
 80062c0:	e008      	b.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 80062c2:	f8d6 4009 	ldr.w	r4, [r6, #9]
 80062c6:	0f24      	lsrs	r4, r4, #28
 80062c8:	e004      	b.n	80062d4 <PE_GENMACH_StateMachine_Run+0x11a>
 80062ca:	f000 f838 	bl	800633e <.text_16>
 80062ce:	b2c4      	uxtb	r4, r0
 80062d0:	f04f 0900 	mov.w	r9, #0
 80062d4:	7938      	ldrb	r0, [r7, #4]
 80062d6:	42a0      	cmp	r0, r4
 80062d8:	d011      	beq.n	80062fe <PE_GENMACH_StateMachine_Run+0x144>
 80062da:	210d      	movs	r1, #13
 80062dc:	9a03      	ldr	r2, [sp, #12]
 80062de:	4361      	muls	r1, r4
 80062e0:	5c50      	ldrb	r0, [r2, r1]
 80062e2:	b958      	cbnz	r0, 80062fc <PE_GENMACH_StateMachine_Run+0x142>
 80062e4:	1c52      	adds	r2, r2, #1
 80062e6:	5c53      	ldrb	r3, [r2, r1]
 80062e8:	706b      	strb	r3, [r5, #1]
 80062ea:	9803      	ldr	r0, [sp, #12]
 80062ec:	4408      	add	r0, r1
 80062ee:	f8d0 1005 	ldr.w	r1, [r0, #5]
 80062f2:	b119      	cbz	r1, 80062fc <PE_GENMACH_StateMachine_Run+0x142>
 80062f4:	460a      	mov	r2, r1
 80062f6:	9902      	ldr	r1, [sp, #8]
 80062f8:	4650      	mov	r0, sl
 80062fa:	4790      	blx	r2
 80062fc:	713c      	strb	r4, [r7, #4]
 80062fe:	4648      	mov	r0, r9
 8006300:	b005      	add	sp, #20
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006308 <.text_4>:
 8006308:	0801b8f4 	.word	0x0801b8f4

0800630c <.text_5>:
 800630c:	0801b8dc 	.word	0x0801b8dc

08006310 <.text_6>:
 8006310:	0801b9c4 	.word	0x0801b9c4

08006314 <.text_7>:
 8006314:	0801ba18 	.word	0x0801ba18

08006318 <.text_8>:
 8006318:	0801b9f4 	.word	0x0801b9f4

0800631c <.text_9>:
 800631c:	0801b998 	.word	0x0801b998

08006320 <.text_10>:
 8006320:	0801b9bc 	.word	0x0801b9bc

08006324 <.text_11>:
 8006324:	0801ba48 	.word	0x0801ba48

08006328 <.text_12>:
 8006328:	0801ba6c 	.word	0x0801ba6c

0800632c <.text_13>:
 800632c:	0801ba9c 	.word	0x0801ba9c

08006330 <.text_14>:
 8006330:	20000000 	.word	0x20000000

08006334 <.text_15>:
 8006334:	786a      	ldrb	r2, [r5, #1]
 8006336:	9902      	ldr	r1, [sp, #8]
 8006338:	4650      	mov	r0, sl
 800633a:	f7fb bdef 	b.w	8001f1c <PE_ResetRxEvent>

0800633e <.text_16>:
 800633e:	f8d6 2005 	ldr.w	r2, [r6, #5]
 8006342:	4659      	mov	r1, fp
 8006344:	4650      	mov	r0, sl

08006346 <__iar_annotation$$tailcall>:
 8006346:	4710      	bx	r2

08006348 <.text_17>:
 8006348:	f8b6 0003 	ldrh.w	r0, [r6, #3]
 800634c:	b128      	cbz	r0, 800635a <.text_17+0x12>
 800634e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006352:	f8aa 024e 	strh.w	r0, [sl, #590]	; 0x24e
 8006356:	f8b6 9003 	ldrh.w	r9, [r6, #3]
 800635a:	9c04      	ldr	r4, [sp, #16]
 800635c:	4770      	bx	lr
	...

08006360 <EPRMode_Enter>:
 8006360:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8006362:	f20f 316c 	addw	r1, pc, #876	; 0x36c
 8006366:	4604      	mov	r4, r0
 8006368:	2200      	movs	r2, #0
 800636a:	680d      	ldr	r5, [r1, #0]
 800636c:	9200      	str	r2, [sp, #0]
 800636e:	9201      	str	r2, [sp, #4]
 8006370:	ab01      	add	r3, sp, #4
 8006372:	68a6      	ldr	r6, [r4, #8]
 8006374:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006378:	6977      	ldr	r7, [r6, #20]
 800637a:	466a      	mov	r2, sp
 800637c:	211d      	movs	r1, #29
 800637e:	47b8      	blx	r7
 8006380:	9800      	ldr	r0, [sp, #0]
 8006382:	f360 4517 	bfi	r5, r0, #16, #8
 8006386:	2001      	movs	r0, #1
 8006388:	f360 651f 	bfi	r5, r0, #24, #8
 800638c:	2000      	movs	r0, #0
 800638e:	00c1      	lsls	r1, r0, #3
 8006390:	fa25 f201 	lsr.w	r2, r5, r1
 8006394:	1821      	adds	r1, r4, r0
 8006396:	1c40      	adds	r0, r0, #1
 8006398:	2804      	cmp	r0, #4
 800639a:	748a      	strb	r2, [r1, #18]
 800639c:	d3f7      	bcc.n	800638e <EPRMode_Enter+0x2e>
 800639e:	2004      	movs	r0, #4
 80063a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

080063a4 <EPRMode_Exit>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	bf00      	nop
 80063a8:	a1ca      	add	r1, pc, #808	; (adr r1, 80066d4 <.text_30>)
 80063aa:	6809      	ldr	r1, [r1, #0]
 80063ac:	2205      	movs	r2, #5
 80063ae:	e075      	b.n	800649c <.text_15>

080063b0 <EPRMode_EnterAnswer>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	780a      	ldrb	r2, [r1, #0]
 80063b4:	2600      	movs	r6, #0
 80063b6:	2a11      	cmp	r2, #17
 80063b8:	4604      	mov	r4, r0
 80063ba:	d136      	bne.n	800642a <EPRMode_EnterAnswer+0x7a>
 80063bc:	210a      	movs	r1, #10
 80063be:	f7fb fdbb 	bl	8001f38 <PE_IsDataMsg>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d031      	beq.n	800642a <EPRMode_EnterAnswer+0x7a>
 80063c6:	f504 751c 	add.w	r5, r4, #624	; 0x270
 80063ca:	68a6      	ldr	r6, [r4, #8]
 80063cc:	6868      	ldr	r0, [r5, #4]
 80063ce:	69b7      	ldr	r7, [r6, #24]
 80063d0:	1c82      	adds	r2, r0, #2
 80063d2:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80063d6:	2304      	movs	r3, #4
 80063d8:	2116      	movs	r1, #22
 80063da:	47b8      	blx	r7
 80063dc:	6869      	ldr	r1, [r5, #4]
 80063de:	7888      	ldrb	r0, [r1, #2]
 80063e0:	78ca      	ldrb	r2, [r1, #3]
 80063e2:	790b      	ldrb	r3, [r1, #4]
 80063e4:	7949      	ldrb	r1, [r1, #5]
 80063e6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80063ea:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80063ee:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 80063f2:	7829      	ldrb	r1, [r5, #0]
 80063f4:	2602      	movs	r6, #2
 80063f6:	0e00      	lsrs	r0, r0, #24
 80063f8:	2901      	cmp	r1, #1
 80063fa:	d002      	beq.n	8006402 <EPRMode_EnterAnswer+0x52>
 80063fc:	2902      	cmp	r1, #2
 80063fe:	d005      	beq.n	800640c <EPRMode_EnterAnswer+0x5c>
 8006400:	e00e      	b.n	8006420 <EPRMode_EnterAnswer+0x70>
 8006402:	2802      	cmp	r0, #2
 8006404:	d10c      	bne.n	8006420 <EPRMode_EnterAnswer+0x70>
 8006406:	2601      	movs	r6, #1
 8006408:	2171      	movs	r1, #113	; 0x71
 800640a:	e00a      	b.n	8006422 <EPRMode_EnterAnswer+0x72>
 800640c:	2803      	cmp	r0, #3
 800640e:	d107      	bne.n	8006420 <EPRMode_EnterAnswer+0x70>
 8006410:	6860      	ldr	r0, [r4, #4]
 8006412:	78c1      	ldrb	r1, [r0, #3]
 8006414:	f041 0120 	orr.w	r1, r1, #32
 8006418:	70c1      	strb	r1, [r0, #3]
 800641a:	2601      	movs	r6, #1
 800641c:	2172      	movs	r1, #114	; 0x72
 800641e:	e000      	b.n	8006422 <EPRMode_EnterAnswer+0x72>
 8006420:	2170      	movs	r1, #112	; 0x70
 8006422:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006426:	f7fa f8bf 	bl	80005a8 <USBPD_PE_Notification>
 800642a:	4630      	mov	r0, r6
 800642c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800642e <EPRMode_SRC_CheckRequirements>:
 800642e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006430:	4604      	mov	r4, r0
 8006432:	2000      	movs	r0, #0
 8006434:	9000      	str	r0, [sp, #0]
 8006436:	2100      	movs	r1, #0
 8006438:	68a6      	ldr	r6, [r4, #8]
 800643a:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 800643e:	f884 1271 	strb.w	r1, [r4, #625]	; 0x271
 8006442:	466b      	mov	r3, sp
 8006444:	6977      	ldr	r7, [r6, #20]
 8006446:	f104 0212 	add.w	r2, r4, #18
 800644a:	47b8      	blx	r7
 800644c:	9800      	ldr	r0, [sp, #0]
 800644e:	2104      	movs	r1, #4
 8006450:	f7fb f8a2 	bl	8001598 <PE_CheckDataSizeFromGetDataInfo>
 8006454:	250a      	movs	r5, #10
 8006456:	2802      	cmp	r0, #2
 8006458:	d009      	beq.n	800646e <EPRMode_SRC_CheckRequirements+0x40>
 800645a:	7ca0      	ldrb	r0, [r4, #18]
 800645c:	7ce1      	ldrb	r1, [r4, #19]
 800645e:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 8006462:	7d20      	ldrb	r0, [r4, #20]
 8006464:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 8006468:	0dd2      	lsrs	r2, r2, #23
 800646a:	2a01      	cmp	r2, #1
 800646c:	d001      	beq.n	8006472 <EPRMode_SRC_CheckRequirements+0x44>
 800646e:	2005      	movs	r0, #5
 8006470:	e005      	b.n	800647e <EPRMode_SRC_CheckRequirements+0x50>
 8006472:	f8d4 0248 	ldr.w	r0, [r4, #584]	; 0x248
 8006476:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800647a:	b918      	cbnz	r0, 8006484 <EPRMode_SRC_CheckRequirements+0x56>
 800647c:	2003      	movs	r0, #3
 800647e:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
 8006482:	e000      	b.n	8006486 <EPRMode_SRC_CheckRequirements+0x58>
 8006484:	2501      	movs	r5, #1
 8006486:	4628      	mov	r0, r5
 8006488:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

0800648c <EPRMode_SRC_EnterACK>:
 800648c:	b510      	push	{r4, lr}
 800648e:	bf00      	nop
 8006490:	a191      	add	r1, pc, #580	; (adr r1, 80066d8 <.text_31>)
 8006492:	6809      	ldr	r1, [r1, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	f880 2271 	strb.w	r2, [r0, #625]	; 0x271
 800649a:	2202      	movs	r2, #2

0800649c <.text_15>:
 800649c:	f362 611f 	bfi	r1, r2, #24, #8
 80064a0:	2200      	movs	r2, #0
 80064a2:	00d3      	lsls	r3, r2, #3
 80064a4:	fa21 f403 	lsr.w	r4, r1, r3
 80064a8:	1883      	adds	r3, r0, r2
 80064aa:	1c52      	adds	r2, r2, #1
 80064ac:	2a04      	cmp	r2, #4
 80064ae:	749c      	strb	r4, [r3, #18]
 80064b0:	d3f7      	bcc.n	80064a2 <.text_15+0x6>
 80064b2:	2004      	movs	r0, #4
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <EPRMode_SRC_CheckVConn>:
 80064b6:	4602      	mov	r2, r0
 80064b8:	2000      	movs	r0, #0
 80064ba:	6851      	ldr	r1, [r2, #4]
 80064bc:	680b      	ldr	r3, [r1, #0]
 80064be:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80064c2:	b921      	cbnz	r1, 80064ce <EPRMode_SRC_CheckVConn+0x18>
 80064c4:	2002      	movs	r0, #2
 80064c6:	f882 0271 	strb.w	r0, [r2, #625]	; 0x271
 80064ca:	2003      	movs	r0, #3
 80064cc:	4770      	bx	lr
 80064ce:	f892 1271 	ldrb.w	r1, [r2, #625]	; 0x271
 80064d2:	b919      	cbnz	r1, 80064dc <EPRMode_SRC_CheckVConn+0x26>
 80064d4:	2001      	movs	r0, #1
 80064d6:	f882 0271 	strb.w	r0, [r2, #625]	; 0x271
 80064da:	2006      	movs	r0, #6
 80064dc:	4770      	bx	lr

080064de <EPRMode_SRC_VconnOn>:
 80064de:	b510      	push	{r4, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	68a0      	ldr	r0, [r4, #8]
 80064e4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80064e6:	b11a      	cbz	r2, 80064f0 <EPRMode_SRC_VconnOn+0x12>
 80064e8:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80064ec:	2101      	movs	r1, #1
 80064ee:	4790      	blx	r2
 80064f0:	6821      	ldr	r1, [r4, #0]
 80064f2:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80064f6:	6809      	ldr	r1, [r1, #0]
 80064f8:	f7ff f8f1 	bl	80056de <USBPD_PRL_SOPCapability>
 80064fc:	2000      	movs	r0, #0
 80064fe:	bd10      	pop	{r4, pc}

08006500 <EPRMode_SRC_VconnAnswer>:
 8006500:	b510      	push	{r4, lr}
 8006502:	780b      	ldrb	r3, [r1, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	2b11      	cmp	r3, #17
 8006508:	bf04      	itt	eq
 800650a:	f8b0 3272 	ldrheq.w	r3, [r0, #626]	; 0x272
 800650e:	f413 4f70 	tsteq.w	r3, #61440	; 0xf000
 8006512:	d118      	bne.n	8006546 <EPRMode_SRC_VconnAnswer+0x46>
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b03      	cmp	r3, #3
 800651a:	d005      	beq.n	8006528 <EPRMode_SRC_VconnAnswer+0x28>
 800651c:	2b04      	cmp	r3, #4
 800651e:	bf1c      	itt	ne
 8006520:	2b0c      	cmpne	r3, #12
 8006522:	2b10      	cmpne	r3, #16
 8006524:	d00b      	beq.n	800653e <EPRMode_SRC_VconnAnswer+0x3e>
 8006526:	e00e      	b.n	8006546 <EPRMode_SRC_VconnAnswer+0x46>
 8006528:	f200 243f 	addw	r4, r0, #575	; 0x23f
 800652c:	7862      	ldrb	r2, [r4, #1]
 800652e:	f7fb fcf5 	bl	8001f1c <PE_ResetRxEvent>
 8006532:	7820      	ldrb	r0, [r4, #0]
 8006534:	213f      	movs	r1, #63	; 0x3f
 8006536:	f7fa f837 	bl	80005a8 <USBPD_PE_Notification>
 800653a:	2201      	movs	r2, #1
 800653c:	e003      	b.n	8006546 <EPRMode_SRC_VconnAnswer+0x46>
 800653e:	2102      	movs	r1, #2
 8006540:	f880 1271 	strb.w	r1, [r0, #625]	; 0x271
 8006544:	2202      	movs	r2, #2
 8006546:	4610      	mov	r0, r2
 8006548:	bd10      	pop	{r4, pc}
	...

0800654c <EPRMode_SRC_SendCableDiscovery>:
 800654c:	b510      	push	{r4, lr}
 800654e:	bf00      	nop
 8006550:	a162      	add	r1, pc, #392	; (adr r1, 80066dc <.text_32>)
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <.text_21>)
 8006554:	680c      	ldr	r4, [r1, #0]
 8006556:	6841      	ldr	r1, [r0, #4]
 8006558:	780a      	ldrb	r2, [r1, #0]
 800655a:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800655e:	401c      	ands	r4, r3
 8006560:	ea44 3441 	orr.w	r4, r4, r1, lsl #13
 8006564:	f64f 723f 	movw	r2, #65343	; 0xff3f
 8006568:	4014      	ands	r4, r2
 800656a:	4939      	ldr	r1, [pc, #228]	; (8006650 <.text_22>)
 800656c:	430c      	orrs	r4, r1
 800656e:	2100      	movs	r1, #0
 8006570:	00ca      	lsls	r2, r1, #3
 8006572:	fa24 f302 	lsr.w	r3, r4, r2
 8006576:	1842      	adds	r2, r0, r1
 8006578:	1c49      	adds	r1, r1, #1
 800657a:	2904      	cmp	r1, #4
 800657c:	7493      	strb	r3, [r2, #18]
 800657e:	d3f7      	bcc.n	8006570 <EPRMode_SRC_SendCableDiscovery+0x24>
 8006580:	2004      	movs	r0, #4
 8006582:	bd10      	pop	{r4, pc}

08006584 <EPRMode_SRC_CableDiscovery_ACK>:
 8006584:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 8006588:	460c      	mov	r4, r1
 800658a:	b089      	sub	sp, #36	; 0x24
 800658c:	4605      	mov	r5, r0
 800658e:	7820      	ldrb	r0, [r4, #0]
 8006590:	2600      	movs	r6, #0
 8006592:	2812      	cmp	r0, #18
 8006594:	d156      	bne.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 8006596:	f8b5 1272 	ldrh.w	r1, [r5, #626]	; 0x272
 800659a:	0bc8      	lsrs	r0, r1, #15
 800659c:	d152      	bne.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 800659e:	f3c1 3002 	ubfx	r0, r1, #12, #3
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d04e      	beq.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 80065a6:	f895 0272 	ldrb.w	r0, [r5, #626]	; 0x272
 80065aa:	f000 001f 	and.w	r0, r0, #31
 80065ae:	280f      	cmp	r0, #15
 80065b0:	bf01      	itttt	eq
 80065b2:	f8d5 0274 	ldreq.w	r0, [r5, #628]	; 0x274
 80065b6:	f890 8002 	ldrbeq.w	r8, [r0, #2]
 80065ba:	f008 011f 	andeq.w	r1, r8, #31
 80065be:	2901      	cmpeq	r1, #1
 80065c0:	d140      	bne.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 80065c2:	f3c8 1081 	ubfx	r0, r8, #6, #2
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d03c      	beq.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 80065ca:	2801      	cmp	r0, #1
 80065cc:	d13a      	bne.n	8006644 <EPRMode_SRC_CableDiscovery_ACK+0xc0>
 80065ce:	4669      	mov	r1, sp
 80065d0:	4628      	mov	r0, r5
 80065d2:	f7fe feab 	bl	800532c <PE_SVDM_CheckIdentity>
 80065d6:	f205 273f 	addw	r7, r5, #575	; 0x23f
 80065da:	bb50      	cbnz	r0, 8006632 <EPRMode_SRC_CableDiscovery_ACK+0xae>
 80065dc:	68ee      	ldr	r6, [r5, #12]
 80065de:	7838      	ldrb	r0, [r7, #0]
 80065e0:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80065e4:	466b      	mov	r3, sp
 80065e6:	f3c8 1281 	ubfx	r2, r8, #6, #2
 80065ea:	2101      	movs	r1, #1
 80065ec:	47e0      	blx	ip
 80065ee:	f8b5 0272 	ldrh.w	r0, [r5, #626]	; 0x272
 80065f2:	f3c0 3002 	ubfx	r0, r0, #12, #3
 80065f6:	2805      	cmp	r0, #5
 80065f8:	db1b      	blt.n	8006632 <EPRMode_SRC_CableDiscovery_ACK+0xae>
 80065fa:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
 80065fe:	7c81      	ldrb	r1, [r0, #18]
 8006600:	7cc2      	ldrb	r2, [r0, #19]
 8006602:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8006606:	7d01      	ldrb	r1, [r0, #20]
 8006608:	4812      	ldr	r0, [pc, #72]	; (8006654 <.text_23>)
 800660a:	4a13      	ldr	r2, [pc, #76]	; (8006658 <.text_24>)
 800660c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8006610:	4003      	ands	r3, r0
 8006612:	4293      	cmp	r3, r2
 8006614:	d10d      	bne.n	8006632 <EPRMode_SRC_CableDiscovery_ACK+0xae>
 8006616:	68aa      	ldr	r2, [r5, #8]
 8006618:	7838      	ldrb	r0, [r7, #0]
 800661a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800661c:	2103      	movs	r1, #3
 800661e:	4798      	blx	r3
 8006620:	280a      	cmp	r0, #10
 8006622:	bf18      	it	ne
 8006624:	2004      	movne	r0, #4
 8006626:	d105      	bne.n	8006634 <EPRMode_SRC_CableDiscovery_ACK+0xb0>
 8006628:	2000      	movs	r0, #0
 800662a:	f885 0271 	strb.w	r0, [r5, #625]	; 0x271
 800662e:	2601      	movs	r6, #1
 8006630:	e003      	b.n	800663a <EPRMode_SRC_CableDiscovery_ACK+0xb6>
 8006632:	2001      	movs	r0, #1
 8006634:	f885 0271 	strb.w	r0, [r5, #625]	; 0x271
 8006638:	2602      	movs	r6, #2
 800663a:	787a      	ldrb	r2, [r7, #1]
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f7fb fc6c 	bl	8001f1c <PE_ResetRxEvent>
 8006644:	4630      	mov	r0, r6
 8006646:	b00a      	add	sp, #40	; 0x28
 8006648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800664c <.text_21>:
 800664c:	ffff98e0 	.word	0xffff98e0

08006650 <.text_22>:
 8006650:	ff008001 	.word	0xff008001

08006654 <.text_23>:
 8006654:	00020660 	.word	0x00020660

08006658 <.text_24>:
 8006658:	00020640 	.word	0x00020640

0800665c <EPRMode_SRC_SendEPRModeSucess>:
 800665c:	b510      	push	{r4, lr}
 800665e:	bf00      	nop
 8006660:	a11f      	add	r1, pc, #124	; (adr r1, 80066e0 <.text_33>)
 8006662:	6809      	ldr	r1, [r1, #0]
 8006664:	2203      	movs	r2, #3
 8006666:	f362 611f 	bfi	r1, r2, #24, #8
 800666a:	2200      	movs	r2, #0
 800666c:	00d3      	lsls	r3, r2, #3
 800666e:	fa21 f403 	lsr.w	r4, r1, r3
 8006672:	1883      	adds	r3, r0, r2
 8006674:	1c52      	adds	r2, r2, #1
 8006676:	2a03      	cmp	r2, #3
 8006678:	749c      	strb	r4, [r3, #18]
 800667a:	d9f7      	bls.n	800666c <EPRMode_SRC_SendEPRModeSucess+0x10>
 800667c:	2004      	movs	r0, #4
 800667e:	bd10      	pop	{r4, pc}

08006680 <EPRMode_SRC_AnswerEnterFailure>:
 8006680:	b510      	push	{r4, lr}
 8006682:	bf00      	nop
 8006684:	a117      	add	r1, pc, #92	; (adr r1, 80066e4 <.text_34>)
 8006686:	6809      	ldr	r1, [r1, #0]
 8006688:	f240 4201 	movw	r2, #1025	; 0x401
 800668c:	f362 411f 	bfi	r1, r2, #16, #16
 8006690:	f890 2271 	ldrb.w	r2, [r0, #625]	; 0x271
 8006694:	2a04      	cmp	r2, #4
 8006696:	bf18      	it	ne
 8006698:	2a03      	cmpne	r2, #3
 800669a:	d003      	beq.n	80066a4 <EPRMode_SRC_AnswerEnterFailure+0x24>
 800669c:	2a05      	cmp	r2, #5
 800669e:	bf18      	it	ne
 80066a0:	2a02      	cmpne	r2, #2
 80066a2:	d103      	bne.n	80066ac <EPRMode_SRC_AnswerEnterFailure+0x2c>
 80066a4:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 80066a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ac:	e6f8      	b.n	80064a0 <.text_15+0x4>

080066ae <EPRMode_EnterMode_EPR>:
 80066ae:	f890 1271 	ldrb.w	r1, [r0, #625]	; 0x271
 80066b2:	b921      	cbnz	r1, 80066be <EPRMode_EnterMode_EPR+0x10>
 80066b4:	6840      	ldr	r0, [r0, #4]
 80066b6:	78c1      	ldrb	r1, [r0, #3]
 80066b8:	f041 0120 	orr.w	r1, r1, #32
 80066bc:	70c1      	strb	r1, [r0, #3]
 80066be:	2000      	movs	r0, #0
 80066c0:	4770      	bx	lr

080066c2 <EPRMode_KeepMode_SPR>:
 80066c2:	6840      	ldr	r0, [r0, #4]
 80066c4:	78c1      	ldrb	r1, [r0, #3]
 80066c6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 80066ca:	70c1      	strb	r1, [r0, #3]
 80066cc:	2000      	movs	r0, #0
 80066ce:	4770      	bx	lr

080066d0 <.text_29>:
 80066d0:	00000000 	.word	0x00000000

080066d4 <.text_30>:
 80066d4:	00000000 	.word	0x00000000

080066d8 <.text_31>:
 80066d8:	00000000 	.word	0x00000000

080066dc <.text_32>:
 80066dc:	00000000 	.word	0x00000000

080066e0 <.text_33>:
 80066e0:	00000000 	.word	0x00000000

080066e4 <.text_34>:
 80066e4:	00000000 	.word	0x00000000

080066e8 <SendKeepAliveMessage>:
 80066e8:	b510      	push	{r4, lr}
 80066ea:	f000 f870 	bl	80067ce <.text_21>
 80066ee:	2103      	movs	r1, #3
 80066f0:	e066      	b.n	80067c0 <.text_20>

080066f2 <CheckKeepAlive_ACK>:
 80066f2:	b081      	sub	sp, #4
 80066f4:	4602      	mov	r2, r0
 80066f6:	7809      	ldrb	r1, [r1, #0]
 80066f8:	2000      	movs	r0, #0
 80066fa:	2911      	cmp	r1, #17
 80066fc:	d114      	bne.n	8006728 <CheckKeepAlive_ACK+0x36>
 80066fe:	f8b2 3272 	ldrh.w	r3, [r2, #626]	; 0x272
 8006702:	0bd9      	lsrs	r1, r3, #15
 8006704:	d010      	beq.n	8006728 <CheckKeepAlive_ACK+0x36>
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2b10      	cmp	r3, #16
 800670c:	d10c      	bne.n	8006728 <CheckKeepAlive_ACK+0x36>
 800670e:	f8d2 1274 	ldr.w	r1, [r2, #628]	; 0x274
 8006712:	790a      	ldrb	r2, [r1, #4]
 8006714:	7949      	ldrb	r1, [r1, #5]
 8006716:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800671a:	f8ad 3000 	strh.w	r3, [sp]
 800671e:	f89d 1000 	ldrb.w	r1, [sp]
 8006722:	2904      	cmp	r1, #4
 8006724:	bf08      	it	eq
 8006726:	2001      	moveq	r0, #1
 8006728:	b001      	add	sp, #4
 800672a:	4770      	bx	lr

0800672c <Send_EPR_SnkCapa>:
 800672c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	2000      	movs	r0, #0
 8006732:	9000      	str	r0, [sp, #0]
 8006734:	f000 f897 	bl	8006866 <.text_27>
 8006738:	f000 f8a3 	bl	8006882 <.text_29>
 800673c:	2101      	movs	r1, #1
 800673e:	47b0      	blx	r6
 8006740:	f000 f897 	bl	8006872 <.text_28>
 8006744:	2118      	movs	r1, #24
 8006746:	e089      	b.n	800685c <.text_26>

08006748 <SendEPRGetSRCCapa>:
 8006748:	b510      	push	{r4, lr}
 800674a:	f000 f840 	bl	80067ce <.text_21>
 800674e:	2101      	movs	r1, #1
 8006750:	f7fb fbcb 	bl	8001eea <USBPD_PE_FormatExtendedCtrlMsg>
 8006754:	2218      	movs	r2, #24
 8006756:	f884 224c 	strb.w	r2, [r4, #588]	; 0x24c
 800675a:	2006      	movs	r0, #6
 800675c:	bd10      	pop	{r4, pc}

0800675e <ReceiveEPRSRCCapa>:
 800675e:	b570      	push	{r4, r5, r6, lr}
 8006760:	4604      	mov	r4, r0
 8006762:	7809      	ldrb	r1, [r1, #0]
 8006764:	2000      	movs	r0, #0
 8006766:	2911      	cmp	r1, #17
 8006768:	d125      	bne.n	80067b6 <ReceiveEPRSRCCapa+0x58>
 800676a:	f8b4 2272 	ldrh.w	r2, [r4, #626]	; 0x272
 800676e:	0bd1      	lsrs	r1, r2, #15
 8006770:	d021      	beq.n	80067b6 <ReceiveEPRSRCCapa+0x58>
 8006772:	f002 021f 	and.w	r2, r2, #31
 8006776:	2a11      	cmp	r2, #17
 8006778:	d11d      	bne.n	80067b6 <ReceiveEPRSRCCapa+0x58>
 800677a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800677e:	1d08      	adds	r0, r1, #4
 8006780:	f7fc fa7c 	bl	8002c7c <PE_SNK_ControlSPRPDO>
 8006784:	b108      	cbz	r0, 800678a <ReceiveEPRSRCCapa+0x2c>
 8006786:	2002      	movs	r0, #2
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	f000 f853 	bl	8006834 <.text_24>
 800678e:	2104      	movs	r1, #4
 8006790:	47b0      	blx	r6
 8006792:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8006796:	7881      	ldrb	r1, [r0, #2]
 8006798:	78c2      	ldrb	r2, [r0, #3]
 800679a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 800679e:	f100 0220 	add.w	r2, r0, #32
 80067a2:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 80067a6:	68a4      	ldr	r4, [r4, #8]
 80067a8:	69a5      	ldr	r5, [r4, #24]
 80067aa:	05db      	lsls	r3, r3, #23
 80067ac:	0e5b      	lsrs	r3, r3, #25
 80067ae:	1fdb      	subs	r3, r3, #7
 80067b0:	2119      	movs	r1, #25
 80067b2:	47a8      	blx	r5
 80067b4:	2001      	movs	r0, #1
 80067b6:	bd70      	pop	{r4, r5, r6, pc}

080067b8 <Send_KeepAliveAck>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	f000 f808 	bl	80067ce <.text_21>
 80067be:	2104      	movs	r1, #4

080067c0 <.text_20>:
 80067c0:	f7fb fb93 	bl	8001eea <USBPD_PE_FormatExtendedCtrlMsg>
 80067c4:	2218      	movs	r2, #24
 80067c6:	f884 224c 	strb.w	r2, [r4, #588]	; 0x24c
 80067ca:	2004      	movs	r0, #4
 80067cc:	bd10      	pop	{r4, pc}

080067ce <.text_21>:
 80067ce:	4604      	mov	r4, r0
 80067d0:	2300      	movs	r3, #0
 80067d2:	2200      	movs	r2, #0
 80067d4:	4770      	bx	lr

080067d6 <SendEPRGetSNKCapa>:
 80067d6:	b510      	push	{r4, lr}
 80067d8:	f7ff fff9 	bl	80067ce <.text_21>
 80067dc:	2102      	movs	r1, #2
 80067de:	e7ef      	b.n	80067c0 <.text_20>

080067e0 <ReceiveEPRSNKCapa>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	7809      	ldrb	r1, [r1, #0]
 80067e6:	2000      	movs	r0, #0
 80067e8:	2911      	cmp	r1, #17
 80067ea:	d122      	bne.n	8006832 <ReceiveEPRSNKCapa+0x52>
 80067ec:	f8b4 2272 	ldrh.w	r2, [r4, #626]	; 0x272
 80067f0:	0bd1      	lsrs	r1, r2, #15
 80067f2:	d01e      	beq.n	8006832 <ReceiveEPRSNKCapa+0x52>
 80067f4:	f002 021f 	and.w	r2, r2, #31
 80067f8:	2a12      	cmp	r2, #18
 80067fa:	d11a      	bne.n	8006832 <ReceiveEPRSNKCapa+0x52>
 80067fc:	f000 f81a 	bl	8006834 <.text_24>
 8006800:	2101      	movs	r1, #1
 8006802:	47b0      	blx	r6
 8006804:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8006808:	7881      	ldrb	r1, [r0, #2]
 800680a:	78c2      	ldrb	r2, [r0, #3]
 800680c:	68a5      	ldr	r5, [r4, #8]
 800680e:	69ae      	ldr	r6, [r5, #24]
 8006810:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8006814:	05db      	lsls	r3, r3, #23
 8006816:	f100 0220 	add.w	r2, r0, #32
 800681a:	0e5b      	lsrs	r3, r3, #25
 800681c:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006820:	1fdb      	subs	r3, r3, #7
 8006822:	2118      	movs	r1, #24
 8006824:	47b0      	blx	r6
 8006826:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 800682a:	2176      	movs	r1, #118	; 0x76
 800682c:	f7f9 febc 	bl	80005a8 <USBPD_PE_Notification>
 8006830:	2001      	movs	r0, #1
 8006832:	bd70      	pop	{r4, r5, r6, pc}

08006834 <.text_24>:
 8006834:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
 8006838:	68a5      	ldr	r5, [r4, #8]
 800683a:	69ae      	ldr	r6, [r5, #24]
 800683c:	1d02      	adds	r2, r0, #4
 800683e:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006842:	231c      	movs	r3, #28
 8006844:	4770      	bx	lr

08006846 <Send_EPR_SrcCapa>:
 8006846:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8006848:	4604      	mov	r4, r0
 800684a:	f000 f80c 	bl	8006866 <.text_27>
 800684e:	f000 f818 	bl	8006882 <.text_29>
 8006852:	2100      	movs	r1, #0
 8006854:	47b0      	blx	r6
 8006856:	f000 f80c 	bl	8006872 <.text_28>
 800685a:	2117      	movs	r1, #23

0800685c <.text_26>:
 800685c:	47a8      	blx	r5
 800685e:	9800      	ldr	r0, [sp, #0]
 8006860:	301e      	adds	r0, #30
 8006862:	b280      	uxth	r0, r0
 8006864:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08006866 <.text_27>:
 8006866:	f44f 7182 	mov.w	r1, #260	; 0x104
 800686a:	f104 0014 	add.w	r0, r4, #20
 800686e:	f013 bd6d 	b.w	801a34c <__aeabi_memclr>

08006872 <.text_28>:
 8006872:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006876:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800687a:	68a4      	ldr	r4, [r4, #8]
 800687c:	6965      	ldr	r5, [r4, #20]
 800687e:	466b      	mov	r3, sp
 8006880:	4770      	bx	lr

08006882 <.text_29>:
 8006882:	68a5      	ldr	r5, [r4, #8]
 8006884:	f894 023f 	ldrb.w	r0, [r4, #575]	; 0x23f
 8006888:	696e      	ldr	r6, [r5, #20]
 800688a:	466b      	mov	r3, sp
 800688c:	f104 0214 	add.w	r2, r4, #20
 8006890:	4770      	bx	lr

08006892 <__aeabi_memset>:
 8006892:	b470      	push	{r4, r5, r6}
 8006894:	0784      	lsls	r4, r0, #30
 8006896:	d046      	beq.n	8006926 <__aeabi_memset+0x94>
 8006898:	1e4c      	subs	r4, r1, #1
 800689a:	2900      	cmp	r1, #0
 800689c:	d041      	beq.n	8006922 <__aeabi_memset+0x90>
 800689e:	b2d5      	uxtb	r5, r2
 80068a0:	4603      	mov	r3, r0
 80068a2:	e002      	b.n	80068aa <__aeabi_memset+0x18>
 80068a4:	1e61      	subs	r1, r4, #1
 80068a6:	b3e4      	cbz	r4, 8006922 <__aeabi_memset+0x90>
 80068a8:	460c      	mov	r4, r1
 80068aa:	f803 5b01 	strb.w	r5, [r3], #1
 80068ae:	0799      	lsls	r1, r3, #30
 80068b0:	d1f8      	bne.n	80068a4 <__aeabi_memset+0x12>
 80068b2:	2c03      	cmp	r4, #3
 80068b4:	d92e      	bls.n	8006914 <__aeabi_memset+0x82>
 80068b6:	b2d5      	uxtb	r5, r2
 80068b8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80068bc:	2c0f      	cmp	r4, #15
 80068be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80068c2:	d919      	bls.n	80068f8 <__aeabi_memset+0x66>
 80068c4:	4626      	mov	r6, r4
 80068c6:	f103 0110 	add.w	r1, r3, #16
 80068ca:	3e10      	subs	r6, #16
 80068cc:	2e0f      	cmp	r6, #15
 80068ce:	f841 5c10 	str.w	r5, [r1, #-16]
 80068d2:	f841 5c0c 	str.w	r5, [r1, #-12]
 80068d6:	f841 5c08 	str.w	r5, [r1, #-8]
 80068da:	f841 5c04 	str.w	r5, [r1, #-4]
 80068de:	f101 0110 	add.w	r1, r1, #16
 80068e2:	d8f2      	bhi.n	80068ca <__aeabi_memset+0x38>
 80068e4:	f1a4 0110 	sub.w	r1, r4, #16
 80068e8:	f021 010f 	bic.w	r1, r1, #15
 80068ec:	f004 040f 	and.w	r4, r4, #15
 80068f0:	3110      	adds	r1, #16
 80068f2:	2c03      	cmp	r4, #3
 80068f4:	440b      	add	r3, r1
 80068f6:	d90d      	bls.n	8006914 <__aeabi_memset+0x82>
 80068f8:	461e      	mov	r6, r3
 80068fa:	4621      	mov	r1, r4
 80068fc:	3904      	subs	r1, #4
 80068fe:	2903      	cmp	r1, #3
 8006900:	f846 5b04 	str.w	r5, [r6], #4
 8006904:	d8fa      	bhi.n	80068fc <__aeabi_memset+0x6a>
 8006906:	1f21      	subs	r1, r4, #4
 8006908:	f021 0103 	bic.w	r1, r1, #3
 800690c:	3104      	adds	r1, #4
 800690e:	440b      	add	r3, r1
 8006910:	f004 0403 	and.w	r4, r4, #3
 8006914:	b12c      	cbz	r4, 8006922 <__aeabi_memset+0x90>
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	441c      	add	r4, r3
 800691a:	f803 2b01 	strb.w	r2, [r3], #1
 800691e:	42a3      	cmp	r3, r4
 8006920:	d1fb      	bne.n	800691a <__aeabi_memset+0x88>
 8006922:	bc70      	pop	{r4, r5, r6}
 8006924:	4770      	bx	lr
 8006926:	460c      	mov	r4, r1
 8006928:	4603      	mov	r3, r0
 800692a:	e7c2      	b.n	80068b2 <__aeabi_memset+0x20>

0800692c <strlen>:
 800692c:	4603      	mov	r3, r0
 800692e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006932:	2a00      	cmp	r2, #0
 8006934:	d1fb      	bne.n	800692e <strlen+0x2>
 8006936:	1a18      	subs	r0, r3, r0
 8006938:	3801      	subs	r0, #1
 800693a:	4770      	bx	lr
 800693c:	0000      	movs	r0, r0
	...

08006940 <memchr>:
 8006940:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006944:	2a10      	cmp	r2, #16
 8006946:	db2b      	blt.n	80069a0 <memchr+0x60>
 8006948:	f010 0f07 	tst.w	r0, #7
 800694c:	d008      	beq.n	8006960 <memchr+0x20>
 800694e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006952:	3a01      	subs	r2, #1
 8006954:	428b      	cmp	r3, r1
 8006956:	d02d      	beq.n	80069b4 <memchr+0x74>
 8006958:	f010 0f07 	tst.w	r0, #7
 800695c:	b342      	cbz	r2, 80069b0 <memchr+0x70>
 800695e:	d1f6      	bne.n	800694e <memchr+0xe>
 8006960:	b4f0      	push	{r4, r5, r6, r7}
 8006962:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006966:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800696a:	f022 0407 	bic.w	r4, r2, #7
 800696e:	f07f 0700 	mvns.w	r7, #0
 8006972:	2300      	movs	r3, #0
 8006974:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006978:	3c08      	subs	r4, #8
 800697a:	ea85 0501 	eor.w	r5, r5, r1
 800697e:	ea86 0601 	eor.w	r6, r6, r1
 8006982:	fa85 f547 	uadd8	r5, r5, r7
 8006986:	faa3 f587 	sel	r5, r3, r7
 800698a:	fa86 f647 	uadd8	r6, r6, r7
 800698e:	faa5 f687 	sel	r6, r5, r7
 8006992:	b98e      	cbnz	r6, 80069b8 <memchr+0x78>
 8006994:	d1ee      	bne.n	8006974 <memchr+0x34>
 8006996:	bcf0      	pop	{r4, r5, r6, r7}
 8006998:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800699c:	f002 0207 	and.w	r2, r2, #7
 80069a0:	b132      	cbz	r2, 80069b0 <memchr+0x70>
 80069a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80069a6:	3a01      	subs	r2, #1
 80069a8:	ea83 0301 	eor.w	r3, r3, r1
 80069ac:	b113      	cbz	r3, 80069b4 <memchr+0x74>
 80069ae:	d1f8      	bne.n	80069a2 <memchr+0x62>
 80069b0:	2000      	movs	r0, #0
 80069b2:	4770      	bx	lr
 80069b4:	3801      	subs	r0, #1
 80069b6:	4770      	bx	lr
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	bf06      	itte	eq
 80069bc:	4635      	moveq	r5, r6
 80069be:	3803      	subeq	r0, #3
 80069c0:	3807      	subne	r0, #7
 80069c2:	f015 0f01 	tst.w	r5, #1
 80069c6:	d107      	bne.n	80069d8 <memchr+0x98>
 80069c8:	3001      	adds	r0, #1
 80069ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80069ce:	bf02      	ittt	eq
 80069d0:	3001      	addeq	r0, #1
 80069d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80069d6:	3001      	addeq	r0, #1
 80069d8:	bcf0      	pop	{r4, r5, r6, r7}
 80069da:	3801      	subs	r0, #1
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <__aeabi_uldivmod>:
 80069e0:	b953      	cbnz	r3, 80069f8 <__aeabi_uldivmod+0x18>
 80069e2:	b94a      	cbnz	r2, 80069f8 <__aeabi_uldivmod+0x18>
 80069e4:	2900      	cmp	r1, #0
 80069e6:	bf08      	it	eq
 80069e8:	2800      	cmpeq	r0, #0
 80069ea:	bf1c      	itt	ne
 80069ec:	f04f 31ff 	movne.w	r1, #4294967295
 80069f0:	f04f 30ff 	movne.w	r0, #4294967295
 80069f4:	f000 b974 	b.w	8006ce0 <__aeabi_idiv0>
 80069f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80069fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006a00:	f000 f806 	bl	8006a10 <__udivmoddi4>
 8006a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a0c:	b004      	add	sp, #16
 8006a0e:	4770      	bx	lr

08006a10 <__udivmoddi4>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	9d08      	ldr	r5, [sp, #32]
 8006a16:	4604      	mov	r4, r0
 8006a18:	468e      	mov	lr, r1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d14d      	bne.n	8006aba <__udivmoddi4+0xaa>
 8006a1e:	428a      	cmp	r2, r1
 8006a20:	4694      	mov	ip, r2
 8006a22:	d969      	bls.n	8006af8 <__udivmoddi4+0xe8>
 8006a24:	fab2 f282 	clz	r2, r2
 8006a28:	b152      	cbz	r2, 8006a40 <__udivmoddi4+0x30>
 8006a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8006a2e:	f1c2 0120 	rsb	r1, r2, #32
 8006a32:	fa20 f101 	lsr.w	r1, r0, r1
 8006a36:	fa0c fc02 	lsl.w	ip, ip, r2
 8006a3a:	ea41 0e03 	orr.w	lr, r1, r3
 8006a3e:	4094      	lsls	r4, r2
 8006a40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006a44:	0c21      	lsrs	r1, r4, #16
 8006a46:	fbbe f6f8 	udiv	r6, lr, r8
 8006a4a:	fa1f f78c 	uxth.w	r7, ip
 8006a4e:	fb08 e316 	mls	r3, r8, r6, lr
 8006a52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a56:	fb06 f107 	mul.w	r1, r6, r7
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d90a      	bls.n	8006a74 <__udivmoddi4+0x64>
 8006a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8006a62:	f106 30ff 	add.w	r0, r6, #4294967295
 8006a66:	f080 811f 	bcs.w	8006ca8 <__udivmoddi4+0x298>
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	f240 811c 	bls.w	8006ca8 <__udivmoddi4+0x298>
 8006a70:	3e02      	subs	r6, #2
 8006a72:	4463      	add	r3, ip
 8006a74:	1a5b      	subs	r3, r3, r1
 8006a76:	b2a4      	uxth	r4, r4
 8006a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8006a7c:	fb08 3310 	mls	r3, r8, r0, r3
 8006a80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006a84:	fb00 f707 	mul.w	r7, r0, r7
 8006a88:	42a7      	cmp	r7, r4
 8006a8a:	d90a      	bls.n	8006aa2 <__udivmoddi4+0x92>
 8006a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8006a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a94:	f080 810a 	bcs.w	8006cac <__udivmoddi4+0x29c>
 8006a98:	42a7      	cmp	r7, r4
 8006a9a:	f240 8107 	bls.w	8006cac <__udivmoddi4+0x29c>
 8006a9e:	4464      	add	r4, ip
 8006aa0:	3802      	subs	r0, #2
 8006aa2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006aa6:	1be4      	subs	r4, r4, r7
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	b11d      	cbz	r5, 8006ab4 <__udivmoddi4+0xa4>
 8006aac:	40d4      	lsrs	r4, r2
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e9c5 4300 	strd	r4, r3, [r5]
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	428b      	cmp	r3, r1
 8006abc:	d909      	bls.n	8006ad2 <__udivmoddi4+0xc2>
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	f000 80ef 	beq.w	8006ca2 <__udivmoddi4+0x292>
 8006ac4:	2600      	movs	r6, #0
 8006ac6:	e9c5 0100 	strd	r0, r1, [r5]
 8006aca:	4630      	mov	r0, r6
 8006acc:	4631      	mov	r1, r6
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	fab3 f683 	clz	r6, r3
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d14a      	bne.n	8006b70 <__udivmoddi4+0x160>
 8006ada:	428b      	cmp	r3, r1
 8006adc:	d302      	bcc.n	8006ae4 <__udivmoddi4+0xd4>
 8006ade:	4282      	cmp	r2, r0
 8006ae0:	f200 80f9 	bhi.w	8006cd6 <__udivmoddi4+0x2c6>
 8006ae4:	1a84      	subs	r4, r0, r2
 8006ae6:	eb61 0303 	sbc.w	r3, r1, r3
 8006aea:	2001      	movs	r0, #1
 8006aec:	469e      	mov	lr, r3
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	d0e0      	beq.n	8006ab4 <__udivmoddi4+0xa4>
 8006af2:	e9c5 4e00 	strd	r4, lr, [r5]
 8006af6:	e7dd      	b.n	8006ab4 <__udivmoddi4+0xa4>
 8006af8:	b902      	cbnz	r2, 8006afc <__udivmoddi4+0xec>
 8006afa:	deff      	udf	#255	; 0xff
 8006afc:	fab2 f282 	clz	r2, r2
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	f040 8092 	bne.w	8006c2a <__udivmoddi4+0x21a>
 8006b06:	eba1 010c 	sub.w	r1, r1, ip
 8006b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006b0e:	fa1f fe8c 	uxth.w	lr, ip
 8006b12:	2601      	movs	r6, #1
 8006b14:	0c20      	lsrs	r0, r4, #16
 8006b16:	fbb1 f3f7 	udiv	r3, r1, r7
 8006b1a:	fb07 1113 	mls	r1, r7, r3, r1
 8006b1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006b22:	fb0e f003 	mul.w	r0, lr, r3
 8006b26:	4288      	cmp	r0, r1
 8006b28:	d908      	bls.n	8006b3c <__udivmoddi4+0x12c>
 8006b2a:	eb1c 0101 	adds.w	r1, ip, r1
 8006b2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8006b32:	d202      	bcs.n	8006b3a <__udivmoddi4+0x12a>
 8006b34:	4288      	cmp	r0, r1
 8006b36:	f200 80cb 	bhi.w	8006cd0 <__udivmoddi4+0x2c0>
 8006b3a:	4643      	mov	r3, r8
 8006b3c:	1a09      	subs	r1, r1, r0
 8006b3e:	b2a4      	uxth	r4, r4
 8006b40:	fbb1 f0f7 	udiv	r0, r1, r7
 8006b44:	fb07 1110 	mls	r1, r7, r0, r1
 8006b48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006b4c:	fb0e fe00 	mul.w	lr, lr, r0
 8006b50:	45a6      	cmp	lr, r4
 8006b52:	d908      	bls.n	8006b66 <__udivmoddi4+0x156>
 8006b54:	eb1c 0404 	adds.w	r4, ip, r4
 8006b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8006b5c:	d202      	bcs.n	8006b64 <__udivmoddi4+0x154>
 8006b5e:	45a6      	cmp	lr, r4
 8006b60:	f200 80bb 	bhi.w	8006cda <__udivmoddi4+0x2ca>
 8006b64:	4608      	mov	r0, r1
 8006b66:	eba4 040e 	sub.w	r4, r4, lr
 8006b6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006b6e:	e79c      	b.n	8006aaa <__udivmoddi4+0x9a>
 8006b70:	f1c6 0720 	rsb	r7, r6, #32
 8006b74:	40b3      	lsls	r3, r6
 8006b76:	fa22 fc07 	lsr.w	ip, r2, r7
 8006b7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8006b7e:	fa20 f407 	lsr.w	r4, r0, r7
 8006b82:	fa01 f306 	lsl.w	r3, r1, r6
 8006b86:	431c      	orrs	r4, r3
 8006b88:	40f9      	lsrs	r1, r7
 8006b8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006b8e:	fa00 f306 	lsl.w	r3, r0, r6
 8006b92:	fbb1 f8f9 	udiv	r8, r1, r9
 8006b96:	0c20      	lsrs	r0, r4, #16
 8006b98:	fa1f fe8c 	uxth.w	lr, ip
 8006b9c:	fb09 1118 	mls	r1, r9, r8, r1
 8006ba0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006ba4:	fb08 f00e 	mul.w	r0, r8, lr
 8006ba8:	4288      	cmp	r0, r1
 8006baa:	fa02 f206 	lsl.w	r2, r2, r6
 8006bae:	d90b      	bls.n	8006bc8 <__udivmoddi4+0x1b8>
 8006bb0:	eb1c 0101 	adds.w	r1, ip, r1
 8006bb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8006bb8:	f080 8088 	bcs.w	8006ccc <__udivmoddi4+0x2bc>
 8006bbc:	4288      	cmp	r0, r1
 8006bbe:	f240 8085 	bls.w	8006ccc <__udivmoddi4+0x2bc>
 8006bc2:	f1a8 0802 	sub.w	r8, r8, #2
 8006bc6:	4461      	add	r1, ip
 8006bc8:	1a09      	subs	r1, r1, r0
 8006bca:	b2a4      	uxth	r4, r4
 8006bcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8006bd0:	fb09 1110 	mls	r1, r9, r0, r1
 8006bd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8006bd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8006bdc:	458e      	cmp	lr, r1
 8006bde:	d908      	bls.n	8006bf2 <__udivmoddi4+0x1e2>
 8006be0:	eb1c 0101 	adds.w	r1, ip, r1
 8006be4:	f100 34ff 	add.w	r4, r0, #4294967295
 8006be8:	d26c      	bcs.n	8006cc4 <__udivmoddi4+0x2b4>
 8006bea:	458e      	cmp	lr, r1
 8006bec:	d96a      	bls.n	8006cc4 <__udivmoddi4+0x2b4>
 8006bee:	3802      	subs	r0, #2
 8006bf0:	4461      	add	r1, ip
 8006bf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006bf6:	fba0 9402 	umull	r9, r4, r0, r2
 8006bfa:	eba1 010e 	sub.w	r1, r1, lr
 8006bfe:	42a1      	cmp	r1, r4
 8006c00:	46c8      	mov	r8, r9
 8006c02:	46a6      	mov	lr, r4
 8006c04:	d356      	bcc.n	8006cb4 <__udivmoddi4+0x2a4>
 8006c06:	d053      	beq.n	8006cb0 <__udivmoddi4+0x2a0>
 8006c08:	b15d      	cbz	r5, 8006c22 <__udivmoddi4+0x212>
 8006c0a:	ebb3 0208 	subs.w	r2, r3, r8
 8006c0e:	eb61 010e 	sbc.w	r1, r1, lr
 8006c12:	fa01 f707 	lsl.w	r7, r1, r7
 8006c16:	fa22 f306 	lsr.w	r3, r2, r6
 8006c1a:	40f1      	lsrs	r1, r6
 8006c1c:	431f      	orrs	r7, r3
 8006c1e:	e9c5 7100 	strd	r7, r1, [r5]
 8006c22:	2600      	movs	r6, #0
 8006c24:	4631      	mov	r1, r6
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	f1c2 0320 	rsb	r3, r2, #32
 8006c2e:	40d8      	lsrs	r0, r3
 8006c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8006c34:	fa21 f303 	lsr.w	r3, r1, r3
 8006c38:	4091      	lsls	r1, r2
 8006c3a:	4301      	orrs	r1, r0
 8006c3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006c40:	fa1f fe8c 	uxth.w	lr, ip
 8006c44:	fbb3 f0f7 	udiv	r0, r3, r7
 8006c48:	fb07 3610 	mls	r6, r7, r0, r3
 8006c4c:	0c0b      	lsrs	r3, r1, #16
 8006c4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006c52:	fb00 f60e 	mul.w	r6, r0, lr
 8006c56:	429e      	cmp	r6, r3
 8006c58:	fa04 f402 	lsl.w	r4, r4, r2
 8006c5c:	d908      	bls.n	8006c70 <__udivmoddi4+0x260>
 8006c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8006c62:	f100 38ff 	add.w	r8, r0, #4294967295
 8006c66:	d22f      	bcs.n	8006cc8 <__udivmoddi4+0x2b8>
 8006c68:	429e      	cmp	r6, r3
 8006c6a:	d92d      	bls.n	8006cc8 <__udivmoddi4+0x2b8>
 8006c6c:	3802      	subs	r0, #2
 8006c6e:	4463      	add	r3, ip
 8006c70:	1b9b      	subs	r3, r3, r6
 8006c72:	b289      	uxth	r1, r1
 8006c74:	fbb3 f6f7 	udiv	r6, r3, r7
 8006c78:	fb07 3316 	mls	r3, r7, r6, r3
 8006c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006c80:	fb06 f30e 	mul.w	r3, r6, lr
 8006c84:	428b      	cmp	r3, r1
 8006c86:	d908      	bls.n	8006c9a <__udivmoddi4+0x28a>
 8006c88:	eb1c 0101 	adds.w	r1, ip, r1
 8006c8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8006c90:	d216      	bcs.n	8006cc0 <__udivmoddi4+0x2b0>
 8006c92:	428b      	cmp	r3, r1
 8006c94:	d914      	bls.n	8006cc0 <__udivmoddi4+0x2b0>
 8006c96:	3e02      	subs	r6, #2
 8006c98:	4461      	add	r1, ip
 8006c9a:	1ac9      	subs	r1, r1, r3
 8006c9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8006ca0:	e738      	b.n	8006b14 <__udivmoddi4+0x104>
 8006ca2:	462e      	mov	r6, r5
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	e705      	b.n	8006ab4 <__udivmoddi4+0xa4>
 8006ca8:	4606      	mov	r6, r0
 8006caa:	e6e3      	b.n	8006a74 <__udivmoddi4+0x64>
 8006cac:	4618      	mov	r0, r3
 8006cae:	e6f8      	b.n	8006aa2 <__udivmoddi4+0x92>
 8006cb0:	454b      	cmp	r3, r9
 8006cb2:	d2a9      	bcs.n	8006c08 <__udivmoddi4+0x1f8>
 8006cb4:	ebb9 0802 	subs.w	r8, r9, r2
 8006cb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8006cbc:	3801      	subs	r0, #1
 8006cbe:	e7a3      	b.n	8006c08 <__udivmoddi4+0x1f8>
 8006cc0:	4646      	mov	r6, r8
 8006cc2:	e7ea      	b.n	8006c9a <__udivmoddi4+0x28a>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	e794      	b.n	8006bf2 <__udivmoddi4+0x1e2>
 8006cc8:	4640      	mov	r0, r8
 8006cca:	e7d1      	b.n	8006c70 <__udivmoddi4+0x260>
 8006ccc:	46d0      	mov	r8, sl
 8006cce:	e77b      	b.n	8006bc8 <__udivmoddi4+0x1b8>
 8006cd0:	3b02      	subs	r3, #2
 8006cd2:	4461      	add	r1, ip
 8006cd4:	e732      	b.n	8006b3c <__udivmoddi4+0x12c>
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	e709      	b.n	8006aee <__udivmoddi4+0xde>
 8006cda:	4464      	add	r4, ip
 8006cdc:	3802      	subs	r0, #2
 8006cde:	e742      	b.n	8006b66 <__udivmoddi4+0x156>

08006ce0 <__aeabi_idiv0>:
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ce4:	480d      	ldr	r0, [pc, #52]	; (8006d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ce6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ce8:	480d      	ldr	r0, [pc, #52]	; (8006d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8006cea:	490e      	ldr	r1, [pc, #56]	; (8006d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006cec:	4a0e      	ldr	r2, [pc, #56]	; (8006d28 <LoopForever+0xe>)
  movs r3, #0
 8006cee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006cf0:	e002      	b.n	8006cf8 <LoopCopyDataInit>

08006cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cf6:	3304      	adds	r3, #4

08006cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cfc:	d3f9      	bcc.n	8006cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cfe:	4a0b      	ldr	r2, [pc, #44]	; (8006d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006d00:	4c0b      	ldr	r4, [pc, #44]	; (8006d30 <LoopForever+0x16>)
  movs r3, #0
 8006d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d04:	e001      	b.n	8006d0a <LoopFillZerobss>

08006d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d08:	3204      	adds	r2, #4

08006d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d0c:	d3fb      	bcc.n	8006d06 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006d0e:	f006 f9fd 	bl	800d10c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d12:	f013 fb27 	bl	801a364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006d16:	f000 fa4b 	bl	80071b0 <main>

08006d1a <LoopForever>:

LoopForever:
    b LoopForever
 8006d1a:	e7fe      	b.n	8006d1a <LoopForever>
  ldr   r0, =_estack
 8006d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006d28:	0801bcc4 	.word	0x0801bcc4
  ldr r2, =_sbss
 8006d2c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8006d30:	20003300 	.word	0x20003300

08006d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006d34:	e7fe      	b.n	8006d34 <ADC1_2_IRQHandler>
	...

08006d38 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <LL_RCC_HSI_Enable+0x1c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <LL_RCC_HSI_Enable+0x1c>)
 8006d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d46:	6013      	str	r3, [r2, #0]
}
 8006d48:	bf00      	nop
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40021000 	.word	0x40021000

08006d58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <LL_RCC_HSI_IsReady+0x24>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d68:	d101      	bne.n	8006d6e <LL_RCC_HSI_IsReady+0x16>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <LL_RCC_HSI_IsReady+0x18>
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000

08006d80 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	604b      	str	r3, [r1, #4]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40021000 	.word	0x40021000

08006dac <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <LL_RCC_HSI48_Enable+0x20>)
 8006db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db6:	4a05      	ldr	r2, [pc, #20]	; (8006dcc <LL_RCC_HSI48_Enable+0x20>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000

08006dd0 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <LL_RCC_HSI48_IsReady+0x24>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d101      	bne.n	8006de6 <LL_RCC_HSI48_IsReady+0x16>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <LL_RCC_HSI48_IsReady+0x18>
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000

08006df8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <LL_RCC_SetSysClkSource+0x24>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f023 0203 	bic.w	r2, r3, #3
 8006e08:	4904      	ldr	r1, [pc, #16]	; (8006e1c <LL_RCC_SetSysClkSource+0x24>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	608b      	str	r3, [r1, #8]
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40021000 	.word	0x40021000

08006e20 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <LL_RCC_GetSysClkSource+0x18>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 030c 	and.w	r3, r3, #12
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40021000 	.word	0x40021000

08006e3c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <LL_RCC_SetAHBPrescaler+0x24>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <LL_RCC_SetAHBPrescaler+0x24>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	608b      	str	r3, [r1, #8]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40021000 	.word	0x40021000

08006e64 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e74:	4904      	ldr	r1, [pc, #16]	; (8006e88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	608b      	str	r3, [r1, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40021000 	.word	0x40021000

08006e8c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e9c:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	608b      	str	r3, [r1, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <LL_RCC_SetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006ebc:	4b07      	ldr	r3, [pc, #28]	; (8006edc <LL_RCC_SetLPUARTClockSource+0x28>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ec6:	4905      	ldr	r1, [pc, #20]	; (8006edc <LL_RCC_SetLPUARTClockSource+0x28>)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40021000 	.word	0x40021000

08006ee0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0e1a      	lsrs	r2, r3, #24
 8006eec:	4b0f      	ldr	r3, [pc, #60]	; (8006f2c <LL_RCC_SetI2CClockSource+0x4c>)
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2103      	movs	r1, #3
 8006f00:	fa01 f303 	lsl.w	r3, r1, r3
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	b2d9      	uxtb	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40021088 	.word	0x40021088

08006f30 <LL_RCC_SetUSBClockSource>:
  *         @arg @ref LL_RCC_USB_CLKSOURCE_HSI48
  *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <LL_RCC_SetUSBClockSource+0x28>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f42:	4905      	ldr	r1, [pc, #20]	; (8006f58 <LL_RCC_SetUSBClockSource+0x28>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40021000 	.word	0x40021000

08006f5c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <LL_RCC_SetADCClockSource+0x44>)
 8006f66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2103      	movs	r1, #3
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	b2d9      	uxtb	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	0c1b      	lsrs	r3, r3, #16
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <LL_RCC_SetADCClockSource+0x44>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40021000 	.word	0x40021000

08006fa4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <LL_RCC_PLL_Enable+0x1c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a04      	ldr	r2, [pc, #16]	; (8006fc0 <LL_RCC_PLL_Enable+0x1c>)
 8006fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fb2:	6013      	str	r3, [r2, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40021000 	.word	0x40021000

08006fc4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <LL_RCC_PLL_IsReady+0x24>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fd4:	d101      	bne.n	8006fda <LL_RCC_PLL_IsReady+0x16>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <LL_RCC_PLL_IsReady+0x18>
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40021000 	.word	0x40021000

08006fec <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8007000:	4013      	ands	r3, r2
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4311      	orrs	r1, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	0212      	lsls	r2, r2, #8
 800700c:	4311      	orrs	r1, r2
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	4904      	ldr	r1, [pc, #16]	; (8007024 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8007014:	4313      	orrs	r3, r2
 8007016:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40021000 	.word	0x40021000
 8007028:	f9ff800c 	.word	0xf9ff800c

0800702c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a04      	ldr	r2, [pc, #16]	; (8007048 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8007036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800703a:	60d3      	str	r3, [r2, #12]
}
 800703c:	bf00      	nop
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40021000 	.word	0x40021000

0800704c <LL_CRS_SetHSI48SmoothTrimming>:
  * @param  Value a number between Min_Data = 0 and Max_Data = 63
  * @note   Default value can be set thanks to @ref LL_CRS_HSI48CALIBRATION_DEFAULT
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetHSI48SmoothTrimming(uint32_t Value)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, Value << CRS_CR_TRIM_Pos);
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <LL_CRS_SetHSI48SmoothTrimming+0x28>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	4904      	ldr	r1, [pc, #16]	; (8007074 <LL_CRS_SetHSI48SmoothTrimming+0x28>)
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40002000 	.word	0x40002000

08007078 <LL_CRS_SetReloadCounter>:
  * @note   Default value can be set thanks to @ref LL_CRS_RELOADVALUE_DEFAULT
  *         Otherwise it can be calculated in using macro @ref __LL_CRS_CALC_CALCULATE_RELOADVALUE (_FTARGET_, _FSYNC_)
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetReloadCounter(uint32_t Value)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CFGR, CRS_CFGR_RELOAD, Value);
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <LL_CRS_SetReloadCounter+0x24>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	4904      	ldr	r1, [pc, #16]	; (800709c <LL_CRS_SetReloadCounter+0x24>)
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40002000 	.word	0x40002000

080070a0 <LL_CRS_SetFreqErrorLimit>:
  * @param  Value a number between Min_Data = 0 and Max_Data = 255
  * @note   Default value can be set thanks to @ref LL_CRS_ERRORLIMIT_DEFAULT
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetFreqErrorLimit(uint32_t Value)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CFGR, CRS_CFGR_FELIM, Value << CRS_CFGR_FELIM_Pos);
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <LL_CRS_SetFreqErrorLimit+0x28>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <LL_CRS_SetFreqErrorLimit+0x28>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	604b      	str	r3, [r1, #4]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40002000 	.word	0x40002000

080070cc <LL_CRS_SetSyncDivider>:
  *         @arg @ref LL_CRS_SYNC_DIV_64
  *         @arg @ref LL_CRS_SYNC_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetSyncDivider(uint32_t Divider)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CFGR, CRS_CFGR_SYNCDIV, Divider);
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <LL_CRS_SetSyncDivider+0x24>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <LL_CRS_SetSyncDivider+0x24>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40002000 	.word	0x40002000

080070f4 <LL_CRS_SetSyncSignalSource>:
  *         @arg @ref LL_CRS_SYNC_SOURCE_LSE
  *         @arg @ref LL_CRS_SYNC_SOURCE_USB
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetSyncSignalSource(uint32_t Source)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CFGR, CRS_CFGR_SYNCSRC, Source);
 80070fc:	4b06      	ldr	r3, [pc, #24]	; (8007118 <LL_CRS_SetSyncSignalSource+0x24>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007104:	4904      	ldr	r1, [pc, #16]	; (8007118 <LL_CRS_SetSyncSignalSource+0x24>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40002000 	.word	0x40002000

0800711c <LL_CRS_SetSyncPolarity>:
  *         @arg @ref LL_CRS_SYNC_POLARITY_RISING
  *         @arg @ref LL_CRS_SYNC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_CRS_SetSyncPolarity(uint32_t Polarity)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(CRS->CFGR, CRS_CFGR_SYNCPOL, Polarity);
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <LL_CRS_SetSyncPolarity+0x24>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <LL_CRS_SetSyncPolarity+0x24>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4313      	orrs	r3, r2
 8007132:	604b      	str	r3, [r1, #4]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40002000 	.word	0x40002000

08007144 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <LL_FLASH_SetLatency+0x24>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f023 020f 	bic.w	r2, r3, #15
 8007154:	4904      	ldr	r1, [pc, #16]	; (8007168 <LL_FLASH_SetLatency+0x24>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4313      	orrs	r3, r2
 800715a:	600b      	str	r3, [r1, #0]
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	40022000 	.word	0x40022000

0800716c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <LL_FLASH_GetLatency+0x18>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
}
 8007178:	4618      	mov	r0, r3
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40022000 	.word	0x40022000

08007188 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007198:	4904      	ldr	r1, [pc, #16]	; (80071ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4313      	orrs	r3, r2
 800719e:	600b      	str	r3, [r1, #0]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	40007000 	.word	0x40007000

080071b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071b0:	b5b0      	push	{r4, r5, r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071b6:	f005 ffbf 	bl	800d138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071ba:	f000 f821 	bl	8007200 <SystemClock_Config>


  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 80071be:	f000 f965 	bl	800748c <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <main+0x48>)
 80071c4:	1d3c      	adds	r4, r7, #4
 80071c6:	461d      	mov	r5, r3
 80071c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f00b fffc 	bl	80131d2 <osThreadCreate>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a07      	ldr	r2, [pc, #28]	; (80071fc <main+0x4c>)
 80071de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80071e0:	f00b fff0 	bl	80131c4 <osKernelStart>


    /* USER CODE BEGIN 3 */


	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80071e4:	2120      	movs	r1, #32
 80071e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071ea:	f006 fe45 	bl	800de78 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 80071ee:	2064      	movs	r0, #100	; 0x64
 80071f0:	f006 f81a 	bl	800d228 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80071f4:	e7f6      	b.n	80071e4 <main+0x34>
 80071f6:	bf00      	nop
 80071f8:	0801ad34 	.word	0x0801ad34
 80071fc:	20000214 	.word	0x20000214

08007200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8007204:	2002      	movs	r0, #2
 8007206:	f7ff ff9d 	bl	8007144 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800720a:	bf00      	nop
 800720c:	f7ff ffae 	bl	800716c <LL_FLASH_GetLatency>
 8007210:	4603      	mov	r3, r0
 8007212:	2b02      	cmp	r3, #2
 8007214:	d1fa      	bne.n	800720c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8007216:	f44f 7000 	mov.w	r0, #512	; 0x200
 800721a:	f7ff ffb5 	bl	8007188 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800721e:	f7ff fd8b 	bl	8006d38 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8007222:	bf00      	nop
 8007224:	f7ff fd98 	bl	8006d58 <LL_RCC_HSI_IsReady>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d1fa      	bne.n	8007224 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 800722e:	2040      	movs	r0, #64	; 0x40
 8007230:	f7ff fda6 	bl	8006d80 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI48_Enable();
 8007234:	f7ff fdba 	bl	8006dac <LL_RCC_HSI48_Enable>
   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 8007238:	bf00      	nop
 800723a:	f7ff fdc9 	bl	8006dd0 <LL_RCC_HSI48_IsReady>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d1fa      	bne.n	800723a <SystemClock_Config+0x3a>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 12, LL_RCC_PLLR_DIV_2);
 8007244:	2300      	movs	r3, #0
 8007246:	220c      	movs	r2, #12
 8007248:	2100      	movs	r1, #0
 800724a:	2002      	movs	r0, #2
 800724c:	f7ff fece 	bl	8006fec <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8007250:	f7ff feec 	bl	800702c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8007254:	f7ff fea6 	bl	8006fa4 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8007258:	bf00      	nop
 800725a:	f7ff feb3 	bl	8006fc4 <LL_RCC_PLL_IsReady>
 800725e:	4603      	mov	r3, r0
 8007260:	2b01      	cmp	r3, #1
 8007262:	d1fa      	bne.n	800725a <SystemClock_Config+0x5a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8007264:	2003      	movs	r0, #3
 8007266:	f7ff fdc7 	bl	8006df8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800726a:	2080      	movs	r0, #128	; 0x80
 800726c:	f7ff fde6 	bl	8006e3c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007270:	bf00      	nop
 8007272:	f7ff fdd5 	bl	8006e20 <LL_RCC_GetSysClkSource>
 8007276:	4603      	mov	r3, r0
 8007278:	2b0c      	cmp	r3, #12
 800727a:	d1fa      	bne.n	8007272 <SystemClock_Config+0x72>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <SystemClock_Config+0x114>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <SystemClock_Config+0x114>)
 8007282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007286:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007288:	4b23      	ldr	r3, [pc, #140]	; (8007318 <SystemClock_Config+0x118>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <SystemClock_Config+0x118>)
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <SystemClock_Config+0x118>)
 8007296:	2200      	movs	r2, #0
 8007298:	605a      	str	r2, [r3, #4]
  while(DWT->CYCCNT < 100);
 800729a:	bf00      	nop
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <SystemClock_Config+0x118>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b63      	cmp	r3, #99	; 0x63
 80072a2:	d9fb      	bls.n	800729c <SystemClock_Config+0x9c>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80072a4:	2000      	movs	r0, #0
 80072a6:	f7ff fdc9 	bl	8006e3c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80072aa:	2000      	movs	r0, #0
 80072ac:	f7ff fdda 	bl	8006e64 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80072b0:	2000      	movs	r0, #0
 80072b2:	f7ff fdeb 	bl	8006e8c <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(96000000);
 80072b6:	4819      	ldr	r0, [pc, #100]	; (800731c <SystemClock_Config+0x11c>)
 80072b8:	f008 fb8a 	bl	800f9d0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80072bc:	200f      	movs	r0, #15
 80072be:	f005 ff5b 	bl	800d178 <HAL_InitTick>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80072c8:	f000 f834 	bl	8007334 <Error_Handler>
  }
  LL_CRS_SetSyncDivider(LL_CRS_SYNC_DIV_1);
 80072cc:	2000      	movs	r0, #0
 80072ce:	f7ff fefd 	bl	80070cc <LL_CRS_SetSyncDivider>
  LL_CRS_SetSyncPolarity(LL_CRS_SYNC_POLARITY_RISING);
 80072d2:	2000      	movs	r0, #0
 80072d4:	f7ff ff22 	bl	800711c <LL_CRS_SetSyncPolarity>
  LL_CRS_SetSyncSignalSource(LL_CRS_SYNC_SOURCE_USB);
 80072d8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80072dc:	f7ff ff0a 	bl	80070f4 <LL_CRS_SetSyncSignalSource>
  LL_CRS_SetReloadCounter(__LL_CRS_CALC_CALCULATE_RELOADVALUE(48000000,1000));
 80072e0:	f64b 307f 	movw	r0, #47999	; 0xbb7f
 80072e4:	f7ff fec8 	bl	8007078 <LL_CRS_SetReloadCounter>
  LL_CRS_SetFreqErrorLimit(34);
 80072e8:	2022      	movs	r0, #34	; 0x22
 80072ea:	f7ff fed9 	bl	80070a0 <LL_CRS_SetFreqErrorLimit>
  LL_CRS_SetHSI48SmoothTrimming(32);
 80072ee:	2020      	movs	r0, #32
 80072f0:	f7ff feac 	bl	800704c <LL_CRS_SetHSI48SmoothTrimming>
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
 80072f4:	2000      	movs	r0, #0
 80072f6:	f7ff fe1b 	bl	8006f30 <LL_RCC_SetUSBClockSource>
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 80072fa:	2000      	movs	r0, #0
 80072fc:	f7ff fdda 	bl	8006eb4 <LL_RCC_SetLPUARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8007300:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007304:	f7ff fdec 	bl	8006ee0 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 8007308:	4805      	ldr	r0, [pc, #20]	; (8007320 <SystemClock_Config+0x120>)
 800730a:	f7ff fe27 	bl	8006f5c <LL_RCC_SetADCClockSource>
}
 800730e:	bf00      	nop
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	e000edf0 	.word	0xe000edf0
 8007318:	e0001000 	.word	0xe0001000
 800731c:	05b8d800 	.word	0x05b8d800
 8007320:	001c0002 	.word	0x001c0002

08007324 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800732c:	2001      	movs	r0, #1
 800732e:	f00b ff83 	bl	8013238 <osDelay>
 8007332:	e7fb      	b.n	800732c <StartDefaultTask+0x8>

08007334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007338:	b672      	cpsid	i
}
 800733a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800733c:	e7fe      	b.n	800733c <Error_Handler+0x8>
	...

08007340 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007348:	4b07      	ldr	r3, [pc, #28]	; (8007368 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4013      	ands	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d101      	bne.n	800735a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40010400 	.word	0x40010400

0800736c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007374:	4a04      	ldr	r2, [pc, #16]	; (8007388 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6153      	str	r3, [r2, #20]
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40010400 	.word	0x40010400

0800738c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007390:	e7fe      	b.n	8007390 <NMI_Handler+0x4>

08007392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007392:	b480      	push	{r7}
 8007394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007396:	e7fe      	b.n	8007396 <HardFault_Handler+0x4>

08007398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800739c:	e7fe      	b.n	800739c <MemManage_Handler+0x4>

0800739e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800739e:	b480      	push	{r7}
 80073a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073a2:	e7fe      	b.n	80073a2 <BusFault_Handler+0x4>

080073a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073a8:	e7fe      	b.n	80073a8 <UsageFault_Handler+0x4>

080073aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073aa:	b480      	push	{r7}
 80073ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073bc:	f005 ff16 	bl	800d1ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80073c0:	f00d fbb2 	bl	8014b28 <xTaskGetSchedulerState>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d001      	beq.n	80073ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80073ca:	f00e f85d 	bl	8015488 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  USBPD_DPM_TimerCounter();
 80073ce:	f000 f935 	bl	800763c <USBPD_DPM_TimerCounter>
#if defined(_GUI_INTERFACE)
  GUI_TimerCounter();
 80073d2:	f00e ffcb 	bl	801636c <GUI_TimerCounter>
#endif /* _GUI_INTERFACE */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073d6:	bf00      	nop
 80073d8:	bd80      	pop	{r7, pc}

080073da <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80073de:	f00a f820 	bl	8011422 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <DMA1_Channel3_IRQHandler>:
  * @brief  This function handles DMA Channel interrupts (used for Trace and GUI).
  * @param  None
  * @retval None
  */
void TRACER_EMB_TX_DMA_IRQHANDLER(void)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	af00      	add	r7, sp, #0
  TRACER_EMB_IRQHandlerDMA();
 80073ea:	f011 ff95 	bl	8019318 <TRACER_EMB_IRQHandlerDMA>
}
 80073ee:	bf00      	nop
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <LPUART1_IRQHandler>:
  * @brief  This function handles USART interrupts (used for GUI).
  * @param  None
  * @retval None
  */
void TRACER_EMB_USART_IRQHANDLER(void)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	af00      	add	r7, sp, #0
  TRACER_EMB_IRQHandlerUSART();
 80073f6:	f011 ff95 	bl	8019324 <TRACER_EMB_IRQHandlerUSART>
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}

080073fe <EXTI9_5_IRQHandler>:
  * @brief  This function handles external line 4_15 interrupt request.
  *         (Associated to FLGn line in case of TCPP0203 management)
  * @retval None
  */
void TCPP0203_PORT0_FLG_EXTI_IRQHANDLER(void)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	af00      	add	r7, sp, #0
  /* Manage Flags */
  if (TCPP0203_PORT0_FLG_EXTI_IS_ACTIVE_FLAG() != RESET)
 8007402:	2020      	movs	r0, #32
 8007404:	f7ff ff9c 	bl	8007340 <LL_EXTI_IsActiveFlag_0_31>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <EXTI9_5_IRQHandler+0x1c>
  {
    /* Call BSP USBPD PWR callback */
    BSP_USBPD_PWR_EventCallback(USBPD_PWR_TYPE_C_PORT_1);
 800740e:	2000      	movs	r0, #0
 8007410:	f005 f9b4 	bl	800c77c <BSP_USBPD_PWR_EventCallback>

    /* Clear Flag */
    TCPP0203_PORT0_FLG_EXTI_CLEAR_FLAG();
 8007414:	2020      	movs	r0, #32
 8007416:	f7ff ffa9 	bl	800736c <LL_EXTI_ClearFlag_0_31>
  }
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007428:	4a14      	ldr	r2, [pc, #80]	; (800747c <_sbrk+0x5c>)
 800742a:	4b15      	ldr	r3, [pc, #84]	; (8007480 <_sbrk+0x60>)
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007434:	4b13      	ldr	r3, [pc, #76]	; (8007484 <_sbrk+0x64>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <_sbrk+0x64>)
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <_sbrk+0x68>)
 8007440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <_sbrk+0x64>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	429a      	cmp	r2, r3
 800744e:	d207      	bcs.n	8007460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007450:	f012 ff82 	bl	801a358 <__errno>
 8007454:	4603      	mov	r3, r0
 8007456:	220c      	movs	r2, #12
 8007458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	e009      	b.n	8007474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <_sbrk+0x64>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <_sbrk+0x64>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	4a05      	ldr	r2, [pc, #20]	; (8007484 <_sbrk+0x64>)
 8007470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20020000 	.word	0x20020000
 8007480:	00000400 	.word	0x00000400
 8007484:	20000218 	.word	0x20000218
 8007488:	20003300 	.word	0x20003300

0800748c <MX_USBPD_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* USBPD init function */
void MX_USBPD_Init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8007490:	f00a fd31 	bl	8011ef6 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8007494:	f000 f836 	bl	8007504 <USBPD_DPM_InitCore>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d000      	beq.n	80074a0 <MX_USBPD_Init+0x14>
  {
    while(1);
 800749e:	e7fe      	b.n	800749e <MX_USBPD_Init+0x12>
  }

#if defined(_GUI_INTERFACE)
  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <MX_USBPD_Init+0x40>)
 80074a2:	4a0b      	ldr	r2, [pc, #44]	; (80074d0 <MX_USBPD_Init+0x44>)
 80074a4:	490b      	ldr	r1, [pc, #44]	; (80074d4 <MX_USBPD_Init+0x48>)
 80074a6:	480c      	ldr	r0, [pc, #48]	; (80074d8 <MX_USBPD_Init+0x4c>)
 80074a8:	f00e fda0 	bl	8015fec <GUI_Init>
#endif /* _GUI_INTERFACE */

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80074ac:	f000 fa0e 	bl	80078cc <USBPD_DPM_UserInit>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d000      	beq.n	80074b8 <MX_USBPD_Init+0x2c>
  {
    while(1);
 80074b6:	e7fe      	b.n	80074b6 <MX_USBPD_Init+0x2a>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 80074b8:	f000 f894 	bl	80075e4 <USBPD_DPM_InitOS>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d000      	beq.n	80074c4 <MX_USBPD_Init+0x38>
  {
    while(1);
 80074c2:	e7fe      	b.n	80074c2 <MX_USBPD_Init+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 80074c4:	b662      	cpsie	i
}
 80074c6:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 80074c8:	bf00      	nop
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08012a89 	.word	0x08012a89
 80074d0:	08012a65 	.word	0x08012a65
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074dd 	.word	0x080074dd

080074dc <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <BSP_GetBoardName+0x10>)
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	0801ad48 	.word	0x0801ad48

080074f0 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <BSP_GetBoardID+0x10>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	0801ad58 	.word	0x0801ad58

08007504 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 800750e:	4830      	ldr	r0, [pc, #192]	; (80075d0 <USBPD_DPM_InitCore+0xcc>)
 8007510:	f7fa f8a9 	bl	8001666 <USBPD_PE_CheckLIB>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d001      	beq.n	800751e <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 800751a:	2302      	movs	r3, #2
 800751c:	e053      	b.n	80075c6 <USBPD_DPM_InitCore+0xc2>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 800751e:	f7fa f8ad 	bl	800167c <USBPD_PE_GetMemoryConsumption>
 8007522:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Variable to be sure that DPM is correctly initialized */
  DPM_Params[USBPD_PORT_0].DPM_Initialized = USBPD_FALSE;
 8007524:	4a2b      	ldr	r2, [pc, #172]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 8007526:	7853      	ldrb	r3, [r2, #1]
 8007528:	f36f 03c3 	bfc	r3, #3, #1
 800752c:	7053      	strb	r3, [r2, #1]
#if USBPD_PORT_COUNT == 2
  DPM_Params[USBPD_PORT_1].DPM_Initialized = USBPD_FALSE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* check the stack settings */
  DPM_Params[USBPD_PORT_0].PE_SpecRevision  = DPM_Settings[USBPD_PORT_0].PE_SpecRevision;
 800752e:	4b2a      	ldr	r3, [pc, #168]	; (80075d8 <USBPD_DPM_InitCore+0xd4>)
 8007530:	791b      	ldrb	r3, [r3, #4]
 8007532:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007536:	b2d9      	uxtb	r1, r3
 8007538:	4a26      	ldr	r2, [pc, #152]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 800753a:	7813      	ldrb	r3, [r2, #0]
 800753c:	f361 0301 	bfi	r3, r1, #0, #2
 8007540:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].PE_PowerRole     = DPM_Settings[USBPD_PORT_0].PE_DefaultRole;
 8007542:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <USBPD_DPM_InitCore+0xd4>)
 8007544:	791b      	ldrb	r3, [r3, #4]
 8007546:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800754a:	b2d9      	uxtb	r1, r3
 800754c:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 800754e:	7813      	ldrb	r3, [r2, #0]
 8007550:	f361 0382 	bfi	r3, r1, #2, #1
 8007554:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].PE_SwapOngoing   = USBPD_FALSE;
 8007556:	4a1f      	ldr	r2, [pc, #124]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 8007558:	7813      	ldrb	r3, [r2, #0]
 800755a:	f36f 1304 	bfc	r3, #4, #1
 800755e:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].ActiveCCIs       = CCNONE;
 8007560:	4a1c      	ldr	r2, [pc, #112]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 8007562:	7813      	ldrb	r3, [r2, #0]
 8007564:	f36f 1387 	bfc	r3, #6, #2
 8007568:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].VconnCCIs        = CCNONE;
 800756a:	4a1a      	ldr	r2, [pc, #104]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 800756c:	7853      	ldrb	r3, [r2, #1]
 800756e:	f36f 1346 	bfc	r3, #5, #2
 8007572:	7053      	strb	r3, [r2, #1]
  DPM_Params[USBPD_PORT_0].VconnStatus      = USBPD_FALSE;
 8007574:	4a17      	ldr	r2, [pc, #92]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 8007576:	7853      	ldrb	r3, [r2, #1]
 8007578:	f36f 13c7 	bfc	r3, #7, #1
 800757c:	7053      	strb	r3, [r2, #1]
  DPM_Params[USBPD_PORT_1].VconnCCIs        = CCNONE;
  DPM_Params[USBPD_PORT_1].VconnStatus      = USBPD_FALSE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 800757e:	f008 fa37 	bl	800f9f0 <USBPD_TRACE_Init>

  /* CAD SET UP : Port 0 */
  CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, (USBPD_CAD_Callbacks *)&CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0], &DPM_Params[USBPD_PORT_0]));
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <USBPD_DPM_InitCore+0xd4>)
 8007586:	4915      	ldr	r1, [pc, #84]	; (80075dc <USBPD_DPM_InitCore+0xd8>)
 8007588:	2000      	movs	r0, #0
 800758a:	f7f8 fe49 	bl	8000220 <USBPD_CAD_Init>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <USBPD_DPM_InitCore+0x94>
 8007594:	2302      	movs	r3, #2
 8007596:	e016      	b.n	80075c6 <USBPD_DPM_InitCore+0xc2>
#if USBPD_PORT_COUNT == 2
  CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_1, (USBPD_CAD_Callbacks *)&CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_1], &DPM_Params[USBPD_PORT_1]));
#endif /* USBPD_PORT_COUNT == 2 */

  /* PE SET UP : Port 0 */
  CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(USBPD_PORT_0, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0], &DPM_Params[USBPD_PORT_0], &dpmCallbacks));
 8007598:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <USBPD_DPM_InitCore+0xdc>)
 800759a:	4a0e      	ldr	r2, [pc, #56]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 800759c:	490e      	ldr	r1, [pc, #56]	; (80075d8 <USBPD_DPM_InitCore+0xd4>)
 800759e:	2000      	movs	r0, #0
 80075a0:	f7f8 ff0c 	bl	80003bc <USBPD_PE_Init>
 80075a4:	4603      	mov	r3, r0
 80075a6:	71fb      	strb	r3, [r7, #7]
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <USBPD_DPM_InitCore+0xae>
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	e009      	b.n	80075c6 <USBPD_DPM_InitCore+0xc2>
#if USBPD_PORT_COUNT == 2
  CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(USBPD_PORT_1, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_1], &DPM_Params[USBPD_PORT_1], &dpmCallbacks));
#endif /* USBPD_PORT_COUNT == 2 */

  /* DPM is correctly initialized */
  DPM_Params[USBPD_PORT_0].DPM_Initialized = USBPD_TRUE;
 80075b2:	4a08      	ldr	r2, [pc, #32]	; (80075d4 <USBPD_DPM_InitCore+0xd0>)
 80075b4:	7853      	ldrb	r3, [r2, #1]
 80075b6:	f043 0308 	orr.w	r3, r3, #8
 80075ba:	7053      	strb	r3, [r2, #1]
#if USBPD_PORT_COUNT == 2
  DPM_Params[USBPD_PORT_1].DPM_Initialized = USBPD_TRUE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(USBPD_PORT_0, USBPD_CAD_ENABLE);
 80075bc:	2101      	movs	r1, #1
 80075be:	2000      	movs	r0, #0
 80075c0:	f7f8 fe56 	bl	8000270 <USBPD_CAD_PortEnable>
#if USBPD_PORT_COUNT == 2
  USBPD_CAD_PortEnable(USBPD_PORT_1, USBPD_CAD_ENABLE);
#endif /* USBPD_PORT_COUNT == 2 */

  return _retr;
 80075c4:	79fb      	ldrb	r3, [r7, #7]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	30410000 	.word	0x30410000
 80075d4:	20000228 	.word	0x20000228
 80075d8:	20000004 	.word	0x20000004
 80075dc:	0801bb0c 	.word	0x0801bb0c
 80075e0:	0801bb14 	.word	0x0801bb14

080075e4 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 80075e8:	2100      	movs	r1, #0
 80075ea:	480e      	ldr	r0, [pc, #56]	; (8007624 <USBPD_DPM_InitOS+0x40>)
 80075ec:	f00b fe38 	bl	8013260 <osMessageCreate>
 80075f0:	4603      	mov	r3, r0
 80075f2:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <USBPD_DPM_InitOS+0x44>)
 80075f4:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 80075f6:	2100      	movs	r1, #0
 80075f8:	480c      	ldr	r0, [pc, #48]	; (800762c <USBPD_DPM_InitOS+0x48>)
 80075fa:	f00b fdea 	bl	80131d2 <osThreadCreate>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8007604:	2302      	movs	r3, #2
 8007606:	e00a      	b.n	800761e <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8007608:	2100      	movs	r1, #0
 800760a:	4809      	ldr	r0, [pc, #36]	; (8007630 <USBPD_DPM_InitOS+0x4c>)
 800760c:	f00b fe28 	bl	8013260 <osMessageCreate>
 8007610:	4603      	mov	r3, r0
 8007612:	4a08      	ldr	r2, [pc, #32]	; (8007634 <USBPD_DPM_InitOS+0x50>)
 8007614:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 8007616:	4b08      	ldr	r3, [pc, #32]	; (8007638 <USBPD_DPM_InitOS+0x54>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	0801bb04 	.word	0x0801bb04
 8007628:	2000021c 	.word	0x2000021c
 800762c:	0801baf0 	.word	0x0801baf0
 8007630:	0801bae8 	.word	0x0801bae8
 8007634:	20000224 	.word	0x20000224
 8007638:	20000220 	.word	0x20000220

0800763c <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <USBPD_DPM_TimerCounter+0x28>)
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 800764e:	2000      	movs	r0, #0
 8007650:	f000 fa16 	bl	8007a80 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8007654:	2000      	movs	r0, #0
 8007656:	f7f8 ff03 	bl	8000460 <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 800765a:	2000      	movs	r0, #0
 800765c:	f7fd ff6a 	bl	8005534 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8007660:	bf00      	nop
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000228 	.word	0x20000228

08007668 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	4a06      	ldr	r2, [pc, #24]	; (8007690 <USBPD_PE_TaskWakeUp+0x28>)
 8007676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767a:	2200      	movs	r2, #0
 800767c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007680:	4618      	mov	r0, r3
 8007682:	f00b fdff 	bl	8013284 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000224 	.word	0x20000224

08007694 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <USBPD_DPM_CADTaskWakeUp+0x18>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076a2:	4618      	mov	r0, r3
 80076a4:	f00b fdee 	bl	8013284 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	2000021c 	.word	0x2000021c

080076b0 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_DRP(_port);
 80076bc:	7ffb      	ldrb	r3, [r7, #31]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7f8 ff63 	bl	800058a <USBPD_PE_StateMachine_DRP>
 80076c4:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	4a04      	ldr	r2, [pc, #16]	; (80076dc <USBPD_PE_Task+0x2c>)
 80076ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80076ce:	463b      	mov	r3, r7
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f00b fe16 	bl	8013304 <osMessageGet>
    _timing = USBPD_PE_StateMachine_DRP(_port);
 80076d8:	e7f0      	b.n	80076bc <USBPD_PE_Task+0xc>
 80076da:	bf00      	nop
 80076dc:	20000224 	.word	0x20000224

080076e0 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 80076e0:	b590      	push	{r4, r7, lr}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <USBPD_CAD_Task+0x20>)
 80076ea:	681c      	ldr	r4, [r3, #0]
 80076ec:	f7f8 fdc7 	bl	800027e <USBPD_CAD_Process>
 80076f0:	4602      	mov	r2, r0
 80076f2:	463b      	mov	r3, r7
 80076f4:	4621      	mov	r1, r4
 80076f6:	4618      	mov	r0, r3
 80076f8:	f00b fe04 	bl	8013304 <osMessageGet>
 80076fc:	e7f4      	b.n	80076e8 <USBPD_CAD_Task+0x8>
 80076fe:	bf00      	nop
 8007700:	2000021c 	.word	0x2000021c

08007704 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af02      	add	r7, sp, #8
 800770a:	4603      	mov	r3, r0
 800770c:	603a      	str	r2, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
 8007710:	460b      	mov	r3, r1
 8007712:	71bb      	strb	r3, [r7, #6]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 8007714:	79ba      	ldrb	r2, [r7, #6]
 8007716:	79f9      	ldrb	r1, [r7, #7]
 8007718:	2300      	movs	r3, #0
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2300      	movs	r3, #0
 800771e:	2003      	movs	r0, #3
 8007720:	f008 f978 	bl	800fa14 <USBPD_TRACE_Add>

  switch (State)
 8007724:	79bb      	ldrb	r3, [r7, #6]
 8007726:	3b01      	subs	r3, #1
 8007728:	2b03      	cmp	r3, #3
 800772a:	d867      	bhi.n	80077fc <USBPD_DPM_CADCallback+0xf8>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <USBPD_DPM_CADCallback+0x30>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007761 	.word	0x08007761
 8007738:	08007753 	.word	0x08007753
 800773c:	08007761 	.word	0x08007761
 8007740:	08007745 	.word	0x08007745
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8007744:	79b9      	ldrb	r1, [r7, #6]
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f860 	bl	8007810 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 8007750:	e055      	b.n	80077fe <USBPD_DPM_CADCallback+0xfa>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8007752:	79b9      	ldrb	r1, [r7, #6]
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f859 	bl	8007810 <DPM_ManageAttachedState>
      break;
 800775e:	e04e      	b.n	80077fe <USBPD_DPM_CADCallback+0xfa>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f7f8 fef9 	bl	800055c <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	4a26      	ldr	r2, [pc, #152]	; (8007808 <USBPD_DPM_CADCallback+0x104>)
 800776e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d023      	beq.n	80077be <USBPD_DPM_CADCallback+0xba>
      {
        uint8_t _timeout = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 800777a:	e008      	b.n	800778e <USBPD_DPM_CADCallback+0x8a>
        {
          osDelay(1);
 800777c:	2001      	movs	r0, #1
 800777e:	f00b fd5b 	bl	8013238 <osDelay>
          _timeout++;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	3301      	adds	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b1e      	cmp	r3, #30
 800778c:	d80a      	bhi.n	80077a4 <USBPD_DPM_CADCallback+0xa0>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <USBPD_DPM_CADCallback+0x104>)
 8007792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007796:	4618      	mov	r0, r3
 8007798:	f00c fd9a 	bl	80142d0 <eTaskGetState>
 800779c:	4603      	mov	r3, r0
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d1ec      	bne.n	800777c <USBPD_DPM_CADCallback+0x78>
 80077a2:	e000      	b.n	80077a6 <USBPD_DPM_CADCallback+0xa2>
          {
            break;
 80077a4:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	4a17      	ldr	r2, [pc, #92]	; (8007808 <USBPD_DPM_CADCallback+0x104>)
 80077aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f00b fd36 	bl	8013220 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a14      	ldr	r2, [pc, #80]	; (8007808 <USBPD_DPM_CADCallback+0x104>)
 80077b8:	2100      	movs	r1, #0
 80077ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80077be:	79fa      	ldrb	r2, [r7, #7]
 80077c0:	4912      	ldr	r1, [pc, #72]	; (800780c <USBPD_DPM_CADCallback+0x108>)
 80077c2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80077c6:	f36f 1304 	bfc	r3, #4, #1
 80077ca:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 80077ce:	79fa      	ldrb	r2, [r7, #7]
 80077d0:	490e      	ldr	r1, [pc, #56]	; (800780c <USBPD_DPM_CADCallback+0x108>)
 80077d2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 80077d6:	f36f 1387 	bfc	r3, #6, #2
 80077da:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <USBPD_DPM_CADCallback+0x108>)
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	785a      	ldrb	r2, [r3, #1]
 80077e8:	f36f 0202 	bfc	r2, #0, #3
 80077ec:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 80077ee:	79ba      	ldrb	r2, [r7, #6]
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f8d7 	bl	80079a8 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 80077fa:	e000      	b.n	80077fe <USBPD_DPM_CADCallback+0xfa>
    }
    default :
      /* nothing to do */
      break;
 80077fc:	bf00      	nop
  }
}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000220 	.word	0x20000220
 800780c:	20000228 	.word	0x20000228

08007810 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	603a      	str	r2, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
 800781c:	460b      	mov	r3, r1
 800781e:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8007820:	79fa      	ldrb	r2, [r7, #7]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	b2d8      	uxtb	r0, r3
 800782a:	4919      	ldr	r1, [pc, #100]	; (8007890 <DPM_ManageAttachedState+0x80>)
 800782c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8007830:	f360 1387 	bfi	r3, r0, #6, #2
 8007834:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2101      	movs	r1, #1
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fe8d 	bl	800055c <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8007842:	79ba      	ldrb	r2, [r7, #6]
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	4611      	mov	r1, r2
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f8ad 	bl	80079a8 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	4a10      	ldr	r2, [pc, #64]	; (8007894 <DPM_ManageAttachedState+0x84>)
 8007852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d116      	bne.n	8007888 <DPM_ManageAttachedState+0x78>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <DPM_ManageAttachedState+0x54>
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <DPM_ManageAttachedState+0x88>)
 8007862:	e000      	b.n	8007866 <DPM_ManageAttachedState+0x56>
 8007864:	4b0d      	ldr	r3, [pc, #52]	; (800789c <DPM_ManageAttachedState+0x8c>)
 8007866:	79fa      	ldrb	r2, [r7, #7]
 8007868:	79fc      	ldrb	r4, [r7, #7]
 800786a:	4611      	mov	r1, r2
 800786c:	4618      	mov	r0, r3
 800786e:	f00b fcb0 	bl	80131d2 <osThreadCreate>
 8007872:	4603      	mov	r3, r0
 8007874:	4a07      	ldr	r2, [pc, #28]	; (8007894 <DPM_ManageAttachedState+0x84>)
 8007876:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	4a05      	ldr	r2, [pc, #20]	; (8007894 <DPM_ManageAttachedState+0x84>)
 800787e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d100      	bne.n	8007888 <DPM_ManageAttachedState+0x78>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8007886:	e7fe      	b.n	8007886 <DPM_ManageAttachedState+0x76>
    }
  }
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bd90      	pop	{r4, r7, pc}
 8007890:	20000228 	.word	0x20000228
 8007894:	20000220 	.word	0x20000220
 8007898:	0801bac0 	.word	0x0801bac0
 800789c:	0801bad4 	.word	0x0801bad4

080078a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80078a4:	f3bf 8f4f 	dsb	sy
}
 80078a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <__NVIC_SystemReset+0x24>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80078b2:	4904      	ldr	r1, [pc, #16]	; (80078c4 <__NVIC_SystemReset+0x24>)
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <__NVIC_SystemReset+0x28>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80078ba:	f3bf 8f4f 	dsb	sy
}
 80078be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <__NVIC_SystemReset+0x20>
 80078c4:	e000ed00 	.word	0xe000ed00
 80078c8:	05fa0004 	.word	0x05fa0004

080078cc <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  /* PWR SET UP */
  if(USBPD_OK !=  USBPD_PWR_IF_Init())
 80078d2:	f002 fa45 	bl	8009d60 <USBPD_PWR_IF_Init>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <USBPD_DPM_UserInit+0x14>
  {
    return USBPD_ERROR;
 80078dc:	2302      	movs	r3, #2
 80078de:	e017      	b.n	8007910 <USBPD_DPM_UserInit+0x44>
  }

#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
  osMessageQDef(MsgBox, DPM_BOX_MESSAGES_MAX, uint32_t);
 80078e0:	4a0d      	ldr	r2, [pc, #52]	; (8007918 <USBPD_DPM_UserInit+0x4c>)
 80078e2:	463b      	mov	r3, r7
 80078e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078e8:	e883 0003 	stmia.w	r3, {r0, r1}
  DPMMsgBox = osMessageCreate(osMessageQ(MsgBox), NULL);
 80078ec:	463b      	mov	r3, r7
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f00b fcb5 	bl	8013260 <osMessageCreate>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4a08      	ldr	r2, [pc, #32]	; (800791c <USBPD_DPM_UserInit+0x50>)
 80078fa:	6013      	str	r3, [r2, #0]

  if(NULL == osThreadCreate(osThread(DPM), &DPMMsgBox))
 80078fc:	4907      	ldr	r1, [pc, #28]	; (800791c <USBPD_DPM_UserInit+0x50>)
 80078fe:	4808      	ldr	r0, [pc, #32]	; (8007920 <USBPD_DPM_UserInit+0x54>)
 8007900:	f00b fc67 	bl	80131d2 <osThreadCreate>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <USBPD_DPM_UserInit+0x42>
#else
  DPMMsgBox = osMessageQueueNew (DPM_BOX_MESSAGES_MAX, sizeof(uint32_t), NULL);
  if (NULL == osThreadNew(USBPD_DPM_UserExecute, &DPMMsgBox, &DPM_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 800790a:	2302      	movs	r3, #2
 800790c:	e000      	b.n	8007910 <USBPD_DPM_UserInit+0x44>
  }
#endif /* _RTOS */

  return USBPD_OK;
 800790e:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	0801ad80 	.word	0x0801ad80
 800791c:	200002c0 	.word	0x200002c0
 8007920:	0801bb58 	.word	0x0801bb58

08007924 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 8007930:	4a07      	ldr	r2, [pc, #28]	; (8007950 <USBPD_DPM_SetNotification_GUI+0x2c>)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6013      	str	r3, [r2, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 8007936:	4a07      	ldr	r2, [pc, #28]	; (8007954 <USBPD_DPM_SetNotification_GUI+0x30>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6013      	str	r3, [r2, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 800793c:	4a06      	ldr	r2, [pc, #24]	; (8007958 <USBPD_DPM_SetNotification_GUI+0x34>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6013      	str	r3, [r2, #0]
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	200002b4 	.word	0x200002b4
 8007954:	200002b8 	.word	0x200002b8
 8007958:	200002bc 	.word	0x200002bc

0800795c <USBPD_DPM_WaitForTime>:
  * @brief  User delay implementation which is OS dependent
  * @param  Time time in ms
  * @retval None
  */
void USBPD_DPM_WaitForTime(uint32_t Time)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_WaitForTime */
  osDelay(Time);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f00b fc67 	bl	8013238 <osDelay>
/* USER CODE END USBPD_DPM_WaitForTime */
}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBPD_DPM_UserExecute>:
#if (osCMSIS < 0x20000U)
void USBPD_DPM_UserExecute(void const *argument)
#else
void USBPD_DPM_UserExecute(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b088      	sub	sp, #32
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_UserExecute */
#if defined(_RTOS)
  /* User code implementation */
  uint32_t _timing = osWaitForever;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	61fb      	str	r3, [r7, #28]
  osMessageQId  queue = *(osMessageQId *)argument;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	61bb      	str	r3, [r7, #24]

  do
  {
    osEvent event = osMessageGet(queue, _timing);
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	4618      	mov	r0, r3
 8007990:	f00b fcb8 	bl	8013304 <osMessageGet>
    switch (((DPM_USER_EVENT)event.value.v & 0xF))
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	2b00      	cmp	r3, #0
      {
        break;
      }

    default:
      break;
 800799e:	bf00      	nop
    }
    _timing = CheckDPMTimers();
 80079a0:	f002 f98e 	bl	8009cc0 <CheckDPMTimers>
 80079a4:	61f8      	str	r0, [r7, #28]
  {
 80079a6:	e7ee      	b.n	8007986 <USBPD_DPM_UserExecute+0x14>

080079a8 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	460a      	mov	r2, r1
 80079b2:	71fb      	strb	r3, [r7, #7]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
  switch(State)
 80079b8:	79bb      	ldrb	r3, [r7, #6]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d001      	beq.n	80079c2 <USBPD_DPM_UserCableDetection+0x1a>
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d12a      	bne.n	8007a18 <USBPD_DPM_UserCableDetection+0x70>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 80079c2:	4b2c      	ldr	r3, [pc, #176]	; (8007a74 <USBPD_DPM_UserCableDetection+0xcc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <USBPD_DPM_UserCableDetection+0x2e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 80079ca:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <USBPD_DPM_UserCableDetection+0xcc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	79f8      	ldrb	r0, [r7, #7]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2120      	movs	r1, #32
 80079d4:	4798      	blx	r3
    }
    if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	4a27      	ldr	r2, [pc, #156]	; (8007a78 <USBPD_DPM_UserCableDetection+0xd0>)
 80079da:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80079de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10c      	bne.n	8007a02 <USBPD_DPM_UserCableDetection+0x5a>
    {
      if (USBPD_OK != USBPD_PWR_IF_VBUSEnable(PortNum))
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f002 fa6e 	bl	8009ecc <USBPD_PWR_IF_VBUSEnable>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <USBPD_DPM_UserCableDetection+0x5a>
      {
        /* Should not occur */
        osDelay(6000);
 80079f6:	f241 7070 	movw	r0, #6000	; 0x1770
 80079fa:	f00b fc1d 	bl	8013238 <osDelay>
        NVIC_SystemReset();
 80079fe:	f7ff ff4f 	bl	80078a0 <__NVIC_SystemReset>
      }
    }
    DPM_Ports[PortNum].DPM_IsConnected = 1;
 8007a02:	79fa      	ldrb	r2, [r7, #7]
 8007a04:	491d      	ldr	r1, [pc, #116]	; (8007a7c <USBPD_DPM_UserCableDetection+0xd4>)
 8007a06:	4613      	mov	r3, r2
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3364      	adds	r3, #100	; 0x64
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
    break;
 8007a16:	e028      	b.n	8007a6a <USBPD_DPM_UserCableDetection+0xc2>

  case USBPD_CAD_EVENT_DETACHED :
  case USBPD_CAD_EVENT_EMC :
  default :
    if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <USBPD_DPM_UserCableDetection+0xd0>)
 8007a1c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8007a20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d107      	bne.n	8007a3a <USBPD_DPM_UserCableDetection+0x92>
    {
      if (USBPD_OK != USBPD_PWR_IF_VBUSDisable(PortNum))
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f002 fa61 	bl	8009ef4 <USBPD_PWR_IF_VBUSDisable>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d000      	beq.n	8007a3a <USBPD_DPM_UserCableDetection+0x92>
      {
        /* Should not occur */
        while(1);
 8007a38:	e7fe      	b.n	8007a38 <USBPD_DPM_UserCableDetection+0x90>
      }
    }
    /* reset all values received from port partner */
    memset(&DPM_Ports[PortNum], 0, sizeof(DPM_Ports[PortNum]));
 8007a3a:	79fa      	ldrb	r2, [r7, #7]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <USBPD_DPM_UserCableDetection+0xd4>)
 8007a46:	4413      	add	r3, r2
 8007a48:	2288      	movs	r2, #136	; 0x88
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f012 fcc3 	bl	801a3d8 <memset>

    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8007a52:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <USBPD_DPM_UserCableDetection+0xcc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d006      	beq.n	8007a68 <USBPD_DPM_UserCableDetection+0xc0>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 8007a5a:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <USBPD_DPM_UserCableDetection+0xcc>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	79f8      	ldrb	r0, [r7, #7]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f248 0120 	movw	r1, #32800	; 0x8020
 8007a66:	4798      	blx	r3
    }
    break;
 8007a68:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200002b8 	.word	0x200002b8
 8007a78:	20000228 	.word	0x20000228
 8007a7c:	2000022c 	.word	0x2000022c

08007a80 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	6039      	str	r1, [r7, #0]
 8007aa0:	71fb      	strb	r3, [r7, #7]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  switch (Status)
 8007aa6:	79bb      	ldrb	r3, [r7, #6]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d002      	beq.n	8007ab2 <USBPD_DPM_HardReset+0x1c>
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d009      	beq.n	8007ac4 <USBPD_DPM_HardReset+0x2e>
      DPM_TurnOnPower(PortNum, CurrentRole);
    }
    break;

  default:
    break;
 8007ab0:	e014      	b.n	8007adc <USBPD_DPM_HardReset+0x46>
    if (USBPD_PORTPOWERROLE_SRC == CurrentRole)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d10e      	bne.n	8007ad6 <USBPD_DPM_HardReset+0x40>
      DPM_TurnOffPower(PortNum, USBPD_PORTPOWERROLE_SRC);
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2101      	movs	r1, #1
 8007abc:	4618      	mov	r0, r3
 8007abe:	f002 f90c 	bl	8009cda <DPM_TurnOffPower>
    break;
 8007ac2:	e008      	b.n	8007ad6 <USBPD_DPM_HardReset+0x40>
    if (CurrentRole == USBPD_PORTPOWERROLE_SRC)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d107      	bne.n	8007ada <USBPD_DPM_HardReset+0x44>
      DPM_TurnOnPower(PortNum, CurrentRole);
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f002 f914 	bl	8009cfc <DPM_TurnOnPower>
    break;
 8007ad4:	e001      	b.n	8007ada <USBPD_DPM_HardReset+0x44>
    break;
 8007ad6:	bf00      	nop
 8007ad8:	e000      	b.n	8007adc <USBPD_DPM_HardReset+0x46>
    break;
 8007ada:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_HardReset */
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f002 f97b 	bl	8009dec <USBPD_PWR_IF_SetProfile>
 8007af6:	4603      	mov	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBPD_DPM_EvaluatePowerRoleSwap>:
  * @brief  Evaluate the swap request from PE.
  * @param  PortNum The current port number
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluatePowerRoleSwap(uint8_t PortNum)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluatePowerRoleSwap */
  return USBPD_ACCEPT;
 8007b0a:	230a      	movs	r3, #10
/* USER CODE END USBPD_DPM_EvaluatePowerRoleSwap */
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8007b18:	b590      	push	{r4, r7, lr}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	460a      	mov	r2, r1
 8007b22:	71fb      	strb	r3, [r7, #7]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71bb      	strb	r3, [r7, #6]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 8007b28:	4b49      	ldr	r3, [pc, #292]	; (8007c50 <USBPD_DPM_Notification+0x138>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d006      	beq.n	8007b3e <USBPD_DPM_Notification+0x26>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 8007b30:	4b47      	ldr	r3, [pc, #284]	; (8007c50 <USBPD_DPM_Notification+0x138>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	79ba      	ldrb	r2, [r7, #6]
 8007b36:	b291      	uxth	r1, r2
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  switch(EventVal)
 8007b3e:	79bb      	ldrb	r3, [r7, #6]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d87d      	bhi.n	8007c42 <USBPD_DPM_Notification+0x12a>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <USBPD_DPM_Notification+0x34>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007bd1 	.word	0x08007bd1
 8007b50:	08007c43 	.word	0x08007c43
 8007b54:	08007c43 	.word	0x08007c43
 8007b58:	08007c43 	.word	0x08007c43
 8007b5c:	08007c43 	.word	0x08007c43
 8007b60:	08007c43 	.word	0x08007c43
 8007b64:	08007c43 	.word	0x08007c43
 8007b68:	08007c43 	.word	0x08007c43
 8007b6c:	08007c43 	.word	0x08007c43
 8007b70:	08007c43 	.word	0x08007c43
 8007b74:	08007c43 	.word	0x08007c43
 8007b78:	08007c43 	.word	0x08007c43
 8007b7c:	08007c43 	.word	0x08007c43
 8007b80:	08007c43 	.word	0x08007c43
 8007b84:	08007c43 	.word	0x08007c43
 8007b88:	08007c43 	.word	0x08007c43
 8007b8c:	08007c43 	.word	0x08007c43
 8007b90:	08007c43 	.word	0x08007c43
 8007b94:	08007c43 	.word	0x08007c43
 8007b98:	08007c39 	.word	0x08007c39
 8007b9c:	08007c43 	.word	0x08007c43
 8007ba0:	08007c43 	.word	0x08007c43
 8007ba4:	08007c43 	.word	0x08007c43
 8007ba8:	08007c43 	.word	0x08007c43
 8007bac:	08007c43 	.word	0x08007c43
 8007bb0:	08007c43 	.word	0x08007c43
 8007bb4:	08007c43 	.word	0x08007c43
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c43 	.word	0x08007c43
 8007bc0:	08007c43 	.word	0x08007c43
 8007bc4:	08007c43 	.word	0x08007c43
 8007bc8:	08007c43 	.word	0x08007c43
 8007bcc:	08007c43 	.word	0x08007c43
    /***************************************************************************
                               REQUEST ANSWER NOTIFICATION
    */
    case USBPD_NOTIFY_REQUEST_ACCEPTED:
      /* Update DPM_RDOPosition only if current role is SNK */
      if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <USBPD_DPM_Notification+0x13c>)
 8007bd4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8007bd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d131      	bne.n	8007c46 <USBPD_DPM_Notification+0x12e>
      {
        USBPD_SNKRDO_TypeDef rdo;
        rdo.d32                             = DPM_Ports[PortNum].DPM_RequestDOMsg;
 8007be2:	79fa      	ldrb	r2, [r7, #7]
 8007be4:	491c      	ldr	r1, [pc, #112]	; (8007c58 <USBPD_DPM_Notification+0x140>)
 8007be6:	4613      	mov	r3, r2
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	4413      	add	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	440b      	add	r3, r1
 8007bf0:	3354      	adds	r3, #84	; 0x54
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
        DPM_Ports[PortNum].DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	79fa      	ldrb	r2, [r7, #7]
 8007c00:	4618      	mov	r0, r3
 8007c02:	4915      	ldr	r1, [pc, #84]	; (8007c58 <USBPD_DPM_Notification+0x140>)
 8007c04:	4613      	mov	r3, r2
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	4413      	add	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	440b      	add	r3, r1
 8007c0e:	3340      	adds	r3, #64	; 0x40
 8007c10:	6018      	str	r0, [r3, #0]
        if (NULL != DPM_GUI_SaveInfo)
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <USBPD_DPM_Notification+0x144>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d015      	beq.n	8007c46 <USBPD_DPM_Notification+0x12e>
        {
          DPM_GUI_SaveInfo(PortNum, USBPD_CORE_DATATYPE_RDO_POSITION, (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPosition, 4);
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <USBPD_DPM_Notification+0x144>)
 8007c1c:	681c      	ldr	r4, [r3, #0]
 8007c1e:	79fa      	ldrb	r2, [r7, #7]
 8007c20:	4613      	mov	r3, r2
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	4413      	add	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	3340      	adds	r3, #64	; 0x40
 8007c2a:	4a0b      	ldr	r2, [pc, #44]	; (8007c58 <USBPD_DPM_Notification+0x140>)
 8007c2c:	441a      	add	r2, r3
 8007c2e:	79f8      	ldrb	r0, [r7, #7]
 8007c30:	2304      	movs	r3, #4
 8007c32:	2102      	movs	r1, #2
 8007c34:	47a0      	blx	r4
        }
      }
    break;
 8007c36:	e006      	b.n	8007c46 <USBPD_DPM_Notification+0x12e>
    case USBPD_NOTIFY_REQUEST_WAIT:
      /* Requested rejected by the source */
      break;

    case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE:
      USBPD_PWR_IF_ResetVbusThreshold(PortNum);
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f002 fa92 	bl	800a164 <USBPD_PWR_IF_ResetVbusThreshold>
      break;
 8007c40:	e002      	b.n	8007c48 <USBPD_DPM_Notification+0x130>
        /* SINK Port Partner is not PD capable. Legacy cable may have been connected
           In this state, VBUS is set to 5V */
      }
      break;
    default :
      break;
 8007c42:	bf00      	nop
 8007c44:	e000      	b.n	8007c48 <USBPD_DPM_Notification+0x130>
    break;
 8007c46:	bf00      	nop
  }

/* USER CODE END USBPD_DPM_Notification */
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd90      	pop	{r4, r7, pc}
 8007c50:	200002b4 	.word	0x200002b4
 8007c54:	20000228 	.word	0x20000228
 8007c58:	2000022c 	.word	0x2000022c
 8007c5c:	200002bc 	.word	0x200002bc

08007c60 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60ba      	str	r2, [r7, #8]
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch (DataId)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b15      	cmp	r3, #21
 8007c76:	f200 808f 	bhi.w	8007d98 <USBPD_DPM_GetDataInfo+0x138>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <USBPD_DPM_GetDataInfo+0x20>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007d99 	.word	0x08007d99
 8007c8c:	08007cf1 	.word	0x08007cf1
 8007c90:	08007d99 	.word	0x08007d99
 8007c94:	08007d99 	.word	0x08007d99
 8007c98:	08007d99 	.word	0x08007d99
 8007c9c:	08007d99 	.word	0x08007d99
 8007ca0:	08007d99 	.word	0x08007d99
 8007ca4:	08007d99 	.word	0x08007d99
 8007ca8:	08007d17 	.word	0x08007d17
 8007cac:	08007d99 	.word	0x08007d99
 8007cb0:	08007d99 	.word	0x08007d99
 8007cb4:	08007d99 	.word	0x08007d99
 8007cb8:	08007d99 	.word	0x08007d99
 8007cbc:	08007d99 	.word	0x08007d99
 8007cc0:	08007d99 	.word	0x08007d99
 8007cc4:	08007d99 	.word	0x08007d99
 8007cc8:	08007d99 	.word	0x08007d99
 8007ccc:	08007d33 	.word	0x08007d33
 8007cd0:	08007d99 	.word	0x08007d99
 8007cd4:	08007d55 	.word	0x08007d55
    Case Port SINK PDO Data information :
    Call PWR_IF PDO reading request.
    */
    case USBPD_CORE_DATATYPE_SRC_PDO :
    case USBPD_CORE_DATATYPE_SNK_PDO :
      USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 8007cd8:	7bb9      	ldrb	r1, [r7, #14]
 8007cda:	7bf8      	ldrb	r0, [r7, #15]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	f002 f91c 	bl	8009f1c <USBPD_PWR_IF_GetPortPDOs>
      *Size *= 4;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	009a      	lsls	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
      break;
 8007cee:	e057      	b.n	8007da0 <USBPD_DPM_GetDataInfo+0x140>

      /* Case Requested voltage value Data information */
    case USBPD_CORE_DATATYPE_REQ_VOLTAGE :
      *Size = 4;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	601a      	str	r2, [r3, #0]
      (void)memcpy((uint8_t*)Ptr, (uint8_t *)&DPM_Ports[PortNum].DPM_RequestedVoltage, *Size);
 8007cf6:	7bfa      	ldrb	r2, [r7, #15]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	3340      	adds	r3, #64	; 0x40
 8007d02:	4a29      	ldr	r2, [pc, #164]	; (8007da8 <USBPD_DPM_GetDataInfo+0x148>)
 8007d04:	4413      	add	r3, r2
 8007d06:	1d19      	adds	r1, r3, #4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	f012 fb54 	bl	801a3bc <memcpy>
      break;
 8007d14:	e044      	b.n	8007da0 <USBPD_DPM_GetDataInfo+0x140>

    case USBPD_CORE_PPS_STATUS :
      {
        /* Get current drawn by sink */
        USBPD_PPSSDB_TypeDef pps_status = {0};
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]

        *Size = 4;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	601a      	str	r2, [r3, #0]
        (void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	f107 0314 	add.w	r3, r7, #20
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68b8      	ldr	r0, [r7, #8]
 8007d2c:	f012 fb46 	bl	801a3bc <memcpy>
      }
      break;
 8007d30:	e036      	b.n	8007da0 <USBPD_DPM_GetDataInfo+0x140>
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
      {
        *Size = sizeof(USBPD_SKEDB_TypeDef);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2218      	movs	r2, #24
 8007d36:	601a      	str	r2, [r3, #0]
        memcpy((uint8_t*)Ptr, (uint8_t *)&DPM_USER_Settings[PortNum].DPM_SNKExtendedCapa, *Size);
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2274      	movs	r2, #116	; 0x74
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	3350      	adds	r3, #80	; 0x50
 8007d42:	4a1a      	ldr	r2, [pc, #104]	; (8007dac <USBPD_DPM_GetDataInfo+0x14c>)
 8007d44:	1899      	adds	r1, r3, r2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68b8      	ldr	r0, [r7, #8]
 8007d4e:	f012 fb35 	bl	801a3bc <memcpy>
       }
       break;
 8007d52:	e025      	b.n	8007da0 <USBPD_DPM_GetDataInfo+0x140>
#endif /* USBPDCORE_SNK_CAPA_EXT */

    case USBPD_CORE_REVISION:
      {
        *Size = sizeof(USBPD_RevisionDO_TypeDef);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2204      	movs	r2, #4
 8007d58:	601a      	str	r2, [r3, #0]
        USBPD_RevisionDO_TypeDef rev =
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	7cbb      	ldrb	r3, [r7, #18]
 8007d60:	2207      	movs	r2, #7
 8007d62:	f362 0303 	bfi	r3, r2, #0, #4
 8007d66:	74bb      	strb	r3, [r7, #18]
 8007d68:	7cbb      	ldrb	r3, [r7, #18]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f362 1307 	bfi	r3, r2, #4, #4
 8007d70:	74bb      	strb	r3, [r7, #18]
 8007d72:	7cfb      	ldrb	r3, [r7, #19]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f362 0303 	bfi	r3, r2, #0, #4
 8007d7a:	74fb      	strb	r3, [r7, #19]
 8007d7c:	7cfb      	ldrb	r3, [r7, #19]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	f362 1307 	bfi	r3, r2, #4, #4
 8007d84:	74fb      	strb	r3, [r7, #19]
          .b.Revision_major = 3,                  /*!< Major revision */
          .b.Revision_minor = 1,                  /*!< Minor revision */
          .b.Version_major  = 1,                  /*!< Major version  */
          .b.Version_minor  = 7,                  /*!< Minor version  */
        };
        memcpy((uint8_t *)Ptr, &rev, *Size);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	f107 0310 	add.w	r3, r7, #16
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68b8      	ldr	r0, [r7, #8]
 8007d92:	f012 fb13 	bl	801a3bc <memcpy>
      }
      break;
 8007d96:	e003      	b.n	8007da0 <USBPD_DPM_GetDataInfo+0x140>

    default :
      *Size = 0;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
      break;
 8007d9e:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8007da0:	bf00      	nop
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2000022c 	.word	0x2000022c
 8007dac:	20000018 	.word	0x20000018

08007db0 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b09b      	sub	sp, #108	; 0x6c
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60ba      	str	r2, [r7, #8]
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	3b02      	subs	r3, #2
 8007dc6:	2b11      	cmp	r3, #17
 8007dc8:	f200 80e4 	bhi.w	8007f94 <USBPD_DPM_SetDataInfo+0x1e4>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBPD_DPM_SetDataInfo+0x24>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007e1d 	.word	0x08007e1d
 8007dd8:	08007f95 	.word	0x08007f95
 8007ddc:	08007e77 	.word	0x08007e77
 8007de0:	08007ed3 	.word	0x08007ed3
 8007de4:	08007f31 	.word	0x08007f31
 8007de8:	08007f95 	.word	0x08007f95
 8007dec:	08007f95 	.word	0x08007f95
 8007df0:	08007f95 	.word	0x08007f95
 8007df4:	08007f57 	.word	0x08007f57
 8007df8:	08007f95 	.word	0x08007f95
 8007dfc:	08007f95 	.word	0x08007f95
 8007e00:	08007f95 	.word	0x08007f95
 8007e04:	08007f95 	.word	0x08007f95
 8007e08:	08007f95 	.word	0x08007f95
 8007e0c:	08007f95 	.word	0x08007f95
 8007e10:	08007f95 	.word	0x08007f95
 8007e14:	08007f95 	.word	0x08007f95
 8007e18:	08007f75 	.word	0x08007f75
  {
    /* Case Received Request PDO Data information :
     */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	f040 80df 	bne.w	8007fe2 <USBPD_DPM_SetDataInfo+0x232>
      {
        uint8_t* temp;
        temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPosition;
 8007e24:	7bfa      	ldrb	r2, [r7, #15]
 8007e26:	4613      	mov	r3, r2
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	3340      	adds	r3, #64	; 0x40
 8007e30:	4a77      	ldr	r2, [pc, #476]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007e32:	4413      	add	r3, r2
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
        (void)memcpy(temp, Ptr, Size);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e3c:	f012 fabe 	bl	801a3bc <memcpy>
        DPM_Ports[PortNum].DPM_RDOPositionPrevious = *Ptr;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	4618      	mov	r0, r3
 8007e48:	4971      	ldr	r1, [pc, #452]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	4413      	add	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	440b      	add	r3, r1
 8007e54:	3350      	adds	r3, #80	; 0x50
 8007e56:	6018      	str	r0, [r3, #0]
        temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPositionPrevious;
 8007e58:	7bfa      	ldrb	r2, [r7, #15]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	4413      	add	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	3350      	adds	r3, #80	; 0x50
 8007e64:	4a6a      	ldr	r2, [pc, #424]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007e66:	4413      	add	r3, r2
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
        (void)memcpy(temp, Ptr, Size);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e70:	f012 faa4 	bl	801a3bc <memcpy>
      }
      break;
 8007e74:	e0b5      	b.n	8007fe2 <USBPD_DPM_SetDataInfo+0x232>

      /* Case Received Source PDO values Data information :
      */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b1c      	cmp	r3, #28
 8007e7a:	f200 80b4 	bhi.w	8007fe6 <USBPD_DPM_SetDataInfo+0x236>
      {
        uint8_t* rdo;
        DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4);
 8007e7e:	7bfa      	ldrb	r2, [r7, #15]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	0899      	lsrs	r1, r3, #2
 8007e84:	4862      	ldr	r0, [pc, #392]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007e86:	4613      	mov	r3, r2
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	4413      	add	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4403      	add	r3, r0
 8007e90:	331c      	adds	r3, #28
 8007e92:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0; index < (Size / 4); index++)
 8007e94:	2300      	movs	r3, #0
 8007e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e98:	e015      	b.n	8007ec6 <USBPD_DPM_SetDataInfo+0x116>
        {
          rdo = (uint8_t*)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 8007e9a:	7bfa      	ldrb	r2, [r7, #15]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	4413      	add	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4a59      	ldr	r2, [pc, #356]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007eac:	4413      	add	r3, r2
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
          (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 8007eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ebe:	601a      	str	r2, [r3, #0]
        for (index = 0; index < (Size / 4); index++)
 8007ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	089b      	lsrs	r3, r3, #2
 8007eca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d3e4      	bcc.n	8007e9a <USBPD_DPM_SetDataInfo+0xea>
        }
      }
      break;
 8007ed0:	e089      	b.n	8007fe6 <USBPD_DPM_SetDataInfo+0x236>

      /* Case Received Sink PDO values Data information :
      */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b1c      	cmp	r3, #28
 8007ed6:	f200 8088 	bhi.w	8007fea <USBPD_DPM_SetDataInfo+0x23a>
      {
        uint8_t* rdo;
        DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO = (Size / 4);
 8007eda:	7bfa      	ldrb	r2, [r7, #15]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	0899      	lsrs	r1, r3, #2
 8007ee0:	484b      	ldr	r0, [pc, #300]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4403      	add	r3, r0
 8007eec:	333c      	adds	r3, #60	; 0x3c
 8007eee:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0; index < (Size / 4); index++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef4:	e016      	b.n	8007f24 <USBPD_DPM_SetDataInfo+0x174>
        {
          rdo = (uint8_t*)&DPM_Ports[PortNum].DPM_ListOfRcvSNKPDO[index];
 8007ef6:	7bfa      	ldrb	r2, [r7, #15]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	4413      	add	r3, r2
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f02:	4413      	add	r3, r2
 8007f04:	3308      	adds	r3, #8
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4a41      	ldr	r2, [pc, #260]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007f0a:	4413      	add	r3, r2
 8007f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
          (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 8007f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1c:	601a      	str	r2, [r3, #0]
        for (index = 0; index < (Size / 4); index++)
 8007f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f20:	3301      	adds	r3, #1
 8007f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	089b      	lsrs	r3, r3, #2
 8007f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d3e3      	bcc.n	8007ef6 <USBPD_DPM_SetDataInfo+0x146>
        }
      }
      break;
 8007f2e:	e05c      	b.n	8007fea <USBPD_DPM_SetDataInfo+0x23a>

      /* Case Received Request PDO Data information :
      */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d15b      	bne.n	8007fee <USBPD_DPM_SetDataInfo+0x23e>
      {
        uint8_t* rdo;
        rdo = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 8007f36:	7bfa      	ldrb	r2, [r7, #15]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	3358      	adds	r3, #88	; 0x58
 8007f42:	4a33      	ldr	r2, [pc, #204]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007f44:	4413      	add	r3, r2
 8007f46:	3304      	adds	r3, #4
 8007f48:	653b      	str	r3, [r7, #80]	; 0x50
        (void)memcpy(rdo, Ptr, Size);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007f50:	f012 fa34 	bl	801a3bc <memcpy>
      }
      break;
 8007f54:	e04b      	b.n	8007fee <USBPD_DPM_SetDataInfo+0x23e>

    case USBPD_CORE_PPS_STATUS :
      {
        uint8_t*  ext_capa;
        ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 8007f56:	7bfa      	ldrb	r2, [r7, #15]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	3368      	adds	r3, #104	; 0x68
 8007f62:	4a2b      	ldr	r2, [pc, #172]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007f64:	4413      	add	r3, r2
 8007f66:	657b      	str	r3, [r7, #84]	; 0x54
        memcpy(ext_capa, Ptr, Size);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007f6e:	f012 fa25 	bl	801a3bc <memcpy>
      }
      break;
 8007f72:	e03d      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
      {
        uint8_t*  _snk_ext_capa;
        _snk_ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvSNKExtendedCapa;
 8007f74:	7bfa      	ldrb	r2, [r7, #15]
 8007f76:	4613      	mov	r3, r2
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	4413      	add	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	3368      	adds	r3, #104	; 0x68
 8007f80:	4a23      	ldr	r2, [pc, #140]	; (8008010 <USBPD_DPM_SetDataInfo+0x260>)
 8007f82:	4413      	add	r3, r2
 8007f84:	3304      	adds	r3, #4
 8007f86:	65bb      	str	r3, [r7, #88]	; 0x58
        memcpy(_snk_ext_capa, Ptr, Size);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007f8e:	f012 fa15 	bl	801a3bc <memcpy>
      }
      break;
 8007f92:	e02d      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
#endif /* USBPDCORE_SNK_CAPA_EXT */

      /* In case of unexpected data type (Set request could not be fulfilled) :
      */
    default :
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	f107 0010 	add.w	r0, r7, #16
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <USBPD_DPM_SetDataInfo+0x264>)
 8007f9c:	2132      	movs	r1, #50	; 0x32
 8007f9e:	f012 fb13 	bl	801a5c8 <sniprintf>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fac:	2b31      	cmp	r3, #49	; 0x31
 8007fae:	d80e      	bhi.n	8007fce <USBPD_DPM_SetDataInfo+0x21e>
 8007fb0:	f107 0310 	add.w	r3, r7, #16
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fcb9 	bl	800692c <strlen>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	7bf9      	ldrb	r1, [r7, #15]
 8007fc2:	9200      	str	r2, [sp, #0]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2006      	movs	r0, #6
 8007fc8:	f007 fd24 	bl	800fa14 <USBPD_TRACE_Add>
      break;
 8007fcc:	e010      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 8007fce:	f107 0310 	add.w	r3, r7, #16
 8007fd2:	7bf9      	ldrb	r1, [r7, #15]
 8007fd4:	2232      	movs	r2, #50	; 0x32
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2006      	movs	r0, #6
 8007fdc:	f007 fd1a 	bl	800fa14 <USBPD_TRACE_Add>
      break;
 8007fe0:	e006      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e004      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
      break;
 8007fe6:	bf00      	nop
 8007fe8:	e002      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
      break;
 8007fea:	bf00      	nop
 8007fec:	e000      	b.n	8007ff0 <USBPD_DPM_SetDataInfo+0x240>
      break;
 8007fee:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 8007ff0:	4b09      	ldr	r3, [pc, #36]	; (8008018 <USBPD_DPM_SetDataInfo+0x268>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <USBPD_DPM_SetDataInfo+0x256>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <USBPD_DPM_SetDataInfo+0x268>)
 8007ffa:	681c      	ldr	r4, [r3, #0]
 8007ffc:	7bb9      	ldrb	r1, [r7, #14]
 8007ffe:	7bf8      	ldrb	r0, [r7, #15]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	47a0      	blx	r4
  }
}
 8008006:	bf00      	nop
 8008008:	3764      	adds	r7, #100	; 0x64
 800800a:	46bd      	mov	sp, r7
 800800c:	bd90      	pop	{r4, r7, pc}
 800800e:	bf00      	nop
 8008010:	2000022c 	.word	0x2000022c
 8008014:	0801ad88 	.word	0x0801ad88
 8008018:	200002bc 	.word	0x200002bc

0800801c <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateRequest */
  USBPD_StatusTypeDef _retr = USBPD_REJECT;
 8008028:	230c      	movs	r3, #12
 800802a:	75fb      	strb	r3, [r7, #23]
  USBPD_PDO_TypeDef pdo;
  USBPD_SNKRDO_TypeDef rdo;

  /* read the request value received */
  rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 800802c:	79fa      	ldrb	r2, [r7, #7]
 800802e:	493a      	ldr	r1, [pc, #232]	; (8008118 <USBPD_DPM_EvaluateRequest+0xfc>)
 8008030:	4613      	mov	r3, r2
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	4413      	add	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	440b      	add	r3, r1
 800803a:	335c      	adds	r3, #92	; 0x5c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Search PDO in Port Source PDO list, that corresponds to Position provided in Request RDO */
  if (USBPD_PWR_IF_SearchRequestedPDO(PortNum,  rdo.GenericRDO.ObjectPosition, &pdo.d32) == USBPD_OK)
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008046:	b2db      	uxtb	r3, r3
 8008048:	4619      	mov	r1, r3
 800804a:	f107 0210 	add.w	r2, r7, #16
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4618      	mov	r0, r3
 8008052:	f002 f81d 	bl	800a090 <USBPD_PWR_IF_SearchRequestedPDO>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d157      	bne.n	800810c <USBPD_DPM_EvaluateRequest+0xf0>
  {

    /* Evaluate the request */
    if(pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 800805c:	7cfb      	ldrb	r3, [r7, #19]
 800805e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d151      	bne.n	800810c <USBPD_DPM_EvaluateRequest+0xf0>
    {
      if((rdo.FixedVariableRDO.OperatingCurrentIn10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800806e:	b29a      	uxth	r2, r3
 8008070:	8a3b      	ldrh	r3, [r7, #16]
 8008072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008076:	b29b      	uxth	r3, r3
 8008078:	429a      	cmp	r2, r3
 800807a:	d809      	bhi.n	8008090 <USBPD_DPM_EvaluateRequest+0x74>
         || (rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits))
 800807c:	89bb      	ldrh	r3, [r7, #12]
 800807e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008082:	b29a      	uxth	r2, r3
 8008084:	8a3b      	ldrh	r3, [r7, #16]
 8008086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800808a:	b29b      	uxth	r3, r3
 800808c:	429a      	cmp	r2, r3
 800808e:	d902      	bls.n	8008096 <USBPD_DPM_EvaluateRequest+0x7a>
      {
        /* Sink requests too much maximum operating current */
        /* USBPD_DPM_EvaluateRequest: Sink requests too much maximum operating current */
        _retr =  USBPD_REJECT;
 8008090:	230c      	movs	r3, #12
 8008092:	75fb      	strb	r3, [r7, #23]
 8008094:	e03a      	b.n	800810c <USBPD_DPM_EvaluateRequest+0xf0>
      }
      else
      {
        /* Save the power object */
        *PtrPowerObject = pdo.GenericPDO.PowerObject;
 8008096:	7cfb      	ldrb	r3, [r7, #19]
 8008098:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	601a      	str	r2, [r3, #0]
        /* Set RDO position and requested voltage in DPM port structure */
        DPM_Ports[PortNum].DPM_RequestedVoltage = pdo.SRCFixedPDO.VoltageIn50mVunits * 50;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	2332      	movs	r3, #50	; 0x32
 80080b0:	fb02 f303 	mul.w	r3, r2, r3
 80080b4:	79fa      	ldrb	r2, [r7, #7]
 80080b6:	4618      	mov	r0, r3
 80080b8:	4917      	ldr	r1, [pc, #92]	; (8008118 <USBPD_DPM_EvaluateRequest+0xfc>)
 80080ba:	4613      	mov	r3, r2
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	4413      	add	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	440b      	add	r3, r1
 80080c4:	3344      	adds	r3, #68	; 0x44
 80080c6:	6018      	str	r0, [r3, #0]
        DPM_Ports[PortNum].DPM_RDOPositionPrevious = DPM_Ports[PortNum].DPM_RDOPosition;
 80080c8:	79f9      	ldrb	r1, [r7, #7]
 80080ca:	79fa      	ldrb	r2, [r7, #7]
 80080cc:	4812      	ldr	r0, [pc, #72]	; (8008118 <USBPD_DPM_EvaluateRequest+0xfc>)
 80080ce:	460b      	mov	r3, r1
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	440b      	add	r3, r1
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	4403      	add	r3, r0
 80080d8:	3340      	adds	r3, #64	; 0x40
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	480e      	ldr	r0, [pc, #56]	; (8008118 <USBPD_DPM_EvaluateRequest+0xfc>)
 80080de:	4613      	mov	r3, r2
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	4413      	add	r3, r2
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	4403      	add	r3, r0
 80080e8:	3350      	adds	r3, #80	; 0x50
 80080ea:	6019      	str	r1, [r3, #0]
        DPM_Ports[PortNum].DPM_RDOPosition = rdo.GenericRDO.ObjectPosition;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	79fa      	ldrb	r2, [r7, #7]
 80080f6:	4618      	mov	r0, r3
 80080f8:	4907      	ldr	r1, [pc, #28]	; (8008118 <USBPD_DPM_EvaluateRequest+0xfc>)
 80080fa:	4613      	mov	r3, r2
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	4413      	add	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	440b      	add	r3, r1
 8008104:	3340      	adds	r3, #64	; 0x40
 8008106:	6018      	str	r0, [r3, #0]
         _retr = USBPD_ACCEPT;
 8008108:	230a      	movs	r3, #10
 800810a:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return _retr;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2000022c 	.word	0x2000022c

0800811c <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b09b      	sub	sp, #108	; 0x6c
 8008120:	af02      	add	r7, sp, #8
 8008122:	4603      	mov	r3, r0
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	4613      	mov	r3, r2
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	4413      	add	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4a44      	ldr	r2, [pc, #272]	; (8008248 <USBPD_DPM_SNK_EvaluateCapabilities+0x12c>)
 8008136:	4413      	add	r3, r2
 8008138:	65fb      	str	r3, [r7, #92]	; 0x5c
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2274      	movs	r2, #116	; 0x74
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	4a42      	ldr	r2, [pc, #264]	; (800824c <USBPD_DPM_SNK_EvaluateCapabilities+0x130>)
 8008144:	4413      	add	r3, r2
 8008146:	65bb      	str	r3, [r7, #88]	; 0x58
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* USBPD_DPM_EvaluateCapabilities: Port Partner Requests Max Voltage */

  /* Find the Pdo index for the requested voltage */
  pdoindex = DPM_FindVoltageIndex(PortNum, &snkpowerrequestdetails);
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fb49 	bl	80097e8 <DPM_FindVoltageIndex>
 8008156:	6578      	str	r0, [r7, #84]	; 0x54

  /* Initialize RDO */
  rdo.d32 = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND*/
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 800815c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008162:	429a      	cmp	r2, r3
 8008164:	d35c      	bcc.n	8008220 <USBPD_DPM_SNK_EvaluateCapabilities+0x104>
  {
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "PE_EvaluateCapability: could not find desired voltage", sizeof("PE_EvaluateCapability: could not find desired voltage"));
 8008166:	7bf9      	ldrb	r1, [r7, #15]
 8008168:	2336      	movs	r3, #54	; 0x36
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4b38      	ldr	r3, [pc, #224]	; (8008250 <USBPD_DPM_SNK_EvaluateCapabilities+0x134>)
 800816e:	2200      	movs	r2, #0
 8008170:	2006      	movs	r0, #6
 8008172:	f007 fc4f 	bl	800fa14 <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8008176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	653b      	str	r3, [r7, #80]	; 0x50
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)&snkpdolist[0], &size);
 800817c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008180:	f107 0218 	add.w	r2, r7, #24
 8008184:	7bf8      	ldrb	r0, [r7, #15]
 8008186:	2101      	movs	r1, #1
 8008188:	f001 fec8 	bl	8009f1c <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	617b      	str	r3, [r7, #20]
    rdo.FixedVariableRDO.ObjectPosition = 1;
 8008190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008194:	2201      	movs	r2, #1
 8008196:	f362 1307 	bfi	r3, r2, #4, #4
 800819a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 800819e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80081a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	f362 2393 	bfi	r3, r2, #10, #10
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 80081b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	4a27      	ldr	r2, [pc, #156]	; (8008254 <USBPD_DPM_SNK_EvaluateCapabilities+0x138>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	08db      	lsrs	r3, r3, #3
 80081bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80081c6:	f362 0309 	bfi	r3, r2, #0, #10
 80081ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    rdo.FixedVariableRDO.CapabilityMismatch = 1;
 80081ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80081d2:	f043 0304 	orr.w	r3, r3, #4
 80081d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80081e6:	f362 0341 	bfi	r3, r2, #1, #1
 80081ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 80081ee:	7bfa      	ldrb	r2, [r7, #15]
 80081f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081f2:	6859      	ldr	r1, [r3, #4]
 80081f4:	4814      	ldr	r0, [pc, #80]	; (8008248 <USBPD_DPM_SNK_EvaluateCapabilities+0x12c>)
 80081f6:	4613      	mov	r3, r2
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	4413      	add	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	4403      	add	r3, r0
 8008200:	3348      	adds	r3, #72	; 0x48
 8008202:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 8008204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
    *PtrRequestData     = rdo.d32;
 8008210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000;
 8008216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008218:	f241 3288 	movw	r2, #5000	; 0x1388
 800821c:	645a      	str	r2, [r3, #68]	; 0x44
 800821e:	e00f      	b.n	8008240 <USBPD_DPM_SNK_EvaluateCapabilities+0x124>
    return;
  }

  DPM_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails,&rdo, PtrPowerObjectType);
 8008220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008222:	b2d9      	uxtb	r1, r3
 8008224:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800822c:	7bf8      	ldrb	r0, [r7, #15]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4623      	mov	r3, r4
 8008234:	f001 fb5c 	bl	80098f0 <DPM_SNK_BuildRDOfromSelectedPDO>


  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 8008238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	601a      	str	r2, [r3, #0]
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8008240:	3764      	adds	r7, #100	; 0x64
 8008242:	46bd      	mov	sp, r7
 8008244:	bd90      	pop	{r4, r7, pc}
 8008246:	bf00      	nop
 8008248:	2000022c 	.word	0x2000022c
 800824c:	20000018 	.word	0x20000018
 8008250:	0801adb0 	.word	0x0801adb0
 8008254:	cccccccd 	.word	0xcccccccd

08008258 <USBPD_DPM_PowerRoleSwap>:
  * @param  CurrentRole the current role
  * @param  Status status on power role swap event
  * @retval None
  */
void USBPD_DPM_PowerRoleSwap(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_PRS_Status_TypeDef Status)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
 8008264:	4613      	mov	r3, r2
 8008266:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_PowerRoleSwap */
    switch (Status)
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	3b06      	subs	r3, #6
 800826c:	2b05      	cmp	r3, #5
 800826e:	d82b      	bhi.n	80082c8 <USBPD_DPM_PowerRoleSwap+0x70>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBPD_DPM_PowerRoleSwap+0x20>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008291 	.word	0x08008291
 800827c:	080082a3 	.word	0x080082a3
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082b3 	.word	0x080082b3
 800828c:	080082bd 	.word	0x080082bd
    {
    case USBPD_PRS_STATUS_VBUS_OFF:
      if (CurrentRole == USBPD_PORTPOWERROLE_SRC)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d11a      	bne.n	80082cc <USBPD_DPM_PowerRoleSwap+0x74>
        uint32_t _vconnstate = DPM_Params[PortNum].VconnStatus;
        DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
#endif /* _VCONN_SUPPORT */

        /* In case of power role swap keep VCONN On */
        DPM_TurnOffPower(PortNum, CurrentRole);
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fd1d 	bl	8009cda <DPM_TurnOffPower>
#if defined(_VCONN_SUPPORT)
        /* restore vconn status */
        DPM_Params[PortNum].VconnStatus = _vconnstate;
#endif /* _VCONN_SUPPORT */
      }
      break;
 80082a0:	e014      	b.n	80082cc <USBPD_DPM_PowerRoleSwap+0x74>
    case USBPD_PRS_STATUS_SRC_RP2RD:
      DPM_AssertRd(PortNum);
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fd4d 	bl	8009d44 <DPM_AssertRd>
      USBPD_DPM_WaitForTime(5);
 80082aa:	2005      	movs	r0, #5
 80082ac:	f7ff fb56 	bl	800795c <USBPD_DPM_WaitForTime>
      break;
 80082b0:	e00d      	b.n	80082ce <USBPD_DPM_PowerRoleSwap+0x76>
    case USBPD_PRS_STATUS_SNK_RD2RP:
      DPM_AssertRp(PortNum);
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 fd38 	bl	8009d2a <DPM_AssertRp>
      break;
 80082ba:	e008      	b.n	80082ce <USBPD_DPM_PowerRoleSwap+0x76>
    case USBPD_PRS_STATUS_VBUS_ON:
      DPM_TurnOnPower(PortNum, CurrentRole);
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fd1b 	bl	8009cfc <DPM_TurnOnPower>
      break;
 80082c6:	e002      	b.n	80082ce <USBPD_DPM_PowerRoleSwap+0x76>
    default:
      break;
 80082c8:	bf00      	nop
 80082ca:	e000      	b.n	80082ce <USBPD_DPM_PowerRoleSwap+0x76>
      break;
 80082cc:	bf00      	nop
    }
/* USER CODE END USBPD_DPM_PowerRoleSwap */
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop

080082d8 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	603a      	str	r2, [r7, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
 80082e6:	460b      	mov	r3, r1
 80082e8:	71bb      	strb	r3, [r7, #6]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */
  if (DataSize == 0)
 80082ee:	88bb      	ldrh	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
  {
    /* No data received. */
    return;
 80082f2:	bf00      	nop
  {
    default:
      break;
  }
/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	4603      	mov	r3, r0
 8008306:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f8 f848 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8008322:	230c      	movs	r3, #12
 8008324:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4a2c      	ldr	r2, [pc, #176]	; (80083dc <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 800832a:	2174      	movs	r1, #116	; 0x74
 800832c:	fb01 f303 	mul.w	r3, r1, r3
 8008330:	4413      	add	r3, r2
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d017      	beq.n	800836e <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	4a26      	ldr	r2, [pc, #152]	; (80083dc <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8008342:	2174      	movs	r1, #116	; 0x74
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10e      	bne.n	8008374 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	4a20      	ldr	r2, [pc, #128]	; (80083dc <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 800835a:	2174      	movs	r1, #116	; 0x74
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	4413      	add	r3, r2
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
  {
    status = USBPD_NOTSUPPORTED;
 800836e:	2301      	movs	r3, #1
 8008370:	73fb      	strb	r3, [r7, #15]
 8008372:	e02b      	b.n	80083cc <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	4a19      	ldr	r2, [pc, #100]	; (80083dc <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8008378:	2174      	movs	r1, #116	; 0x74
 800837a:	fb01 f303 	mul.w	r3, r1, r3
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b01      	cmp	r3, #1
 800838a:	d108      	bne.n	800839e <USBPD_DPM_EvaluateDataRoleSwap+0x86>
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 8008390:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8008394:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d014      	beq.n	80083c8 <USBPD_DPM_EvaluateDataRoleSwap+0xb0>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	4a0e      	ldr	r2, [pc, #56]	; (80083dc <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 80083a2:	2174      	movs	r1, #116	; 0x74
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	4413      	add	r3, r2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d10a      	bne.n	80083cc <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 80083ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80083be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
    {
      status = USBPD_ACCEPT;
 80083c8:	230a      	movs	r3, #10
 80083ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000018 	.word	0x20000018
 80083e0:	20000228 	.word	0x20000228

080083e4 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	460a      	mov	r2, r1
 80083ee:	71fb      	strb	r3, [r7, #7]
 80083f0:	4613      	mov	r3, r2
 80083f2:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 80083f4:	79ba      	ldrb	r2, [r7, #6]
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fd36 	bl	8009e6c <USBPD_PWR_IF_SupplyReady>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b092      	sub	sp, #72	; 0x48
 8008418:	af02      	add	r7, sp, #8
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	4618      	mov	r0, r3
 8008422:	f7f8 f8e2 	bl	80005ea <USBPD_PE_Request_HardReset>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 800842c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008430:	2b00      	cmp	r3, #0
 8008432:	d025      	beq.n	8008480 <USBPD_DPM_RequestHardReset+0x6c>
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	4a14      	ldr	r2, [pc, #80]	; (800848c <USBPD_DPM_RequestHardReset+0x78>)
 800843a:	2132      	movs	r1, #50	; 0x32
 800843c:	4618      	mov	r0, r3
 800843e:	f012 f8c3 	bl	801a5c8 <sniprintf>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008448:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800844c:	2b31      	cmp	r3, #49	; 0x31
 800844e:	d80e      	bhi.n	800846e <USBPD_DPM_RequestHardReset+0x5a>
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe fa69 	bl	800692c <strlen>
 800845a:	4602      	mov	r2, r0
 800845c:	f107 030c 	add.w	r3, r7, #12
 8008460:	79f9      	ldrb	r1, [r7, #7]
 8008462:	9200      	str	r2, [sp, #0]
 8008464:	2200      	movs	r2, #0
 8008466:	2006      	movs	r0, #6
 8008468:	f007 fad4 	bl	800fa14 <USBPD_TRACE_Add>
 800846c:	e008      	b.n	8008480 <USBPD_DPM_RequestHardReset+0x6c>
 800846e:	f107 030c 	add.w	r3, r7, #12
 8008472:	79f9      	ldrb	r1, [r7, #7]
 8008474:	2232      	movs	r2, #50	; 0x32
 8008476:	9200      	str	r2, [sp, #0]
 8008478:	2200      	movs	r2, #0
 800847a:	2006      	movs	r0, #6
 800847c:	f007 faca 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008480:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008484:	4618      	mov	r0, r3
 8008486:	3740      	adds	r7, #64	; 0x40
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	0801ade8 	.word	0x0801ade8

08008490 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b092      	sub	sp, #72	; 0x48
 8008494:	af02      	add	r7, sp, #8
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	4618      	mov	r0, r3
 800849e:	f7f8 f8b2 	bl	8000606 <USBPD_PE_Request_CableReset>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 80084a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d025      	beq.n	80084fc <USBPD_DPM_RequestCableReset+0x6c>
 80084b0:	f107 030c 	add.w	r3, r7, #12
 80084b4:	4a14      	ldr	r2, [pc, #80]	; (8008508 <USBPD_DPM_RequestCableReset+0x78>)
 80084b6:	2132      	movs	r1, #50	; 0x32
 80084b8:	4618      	mov	r0, r3
 80084ba:	f012 f885 	bl	801a5c8 <sniprintf>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80084c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80084c8:	2b31      	cmp	r3, #49	; 0x31
 80084ca:	d80e      	bhi.n	80084ea <USBPD_DPM_RequestCableReset+0x5a>
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fa2b 	bl	800692c <strlen>
 80084d6:	4602      	mov	r2, r0
 80084d8:	f107 030c 	add.w	r3, r7, #12
 80084dc:	79f9      	ldrb	r1, [r7, #7]
 80084de:	9200      	str	r2, [sp, #0]
 80084e0:	2200      	movs	r2, #0
 80084e2:	2006      	movs	r0, #6
 80084e4:	f007 fa96 	bl	800fa14 <USBPD_TRACE_Add>
 80084e8:	e008      	b.n	80084fc <USBPD_DPM_RequestCableReset+0x6c>
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	79f9      	ldrb	r1, [r7, #7]
 80084f0:	2232      	movs	r2, #50	; 0x32
 80084f2:	9200      	str	r2, [sp, #0]
 80084f4:	2200      	movs	r2, #0
 80084f6:	2006      	movs	r0, #6
 80084f8:	f007 fa8c 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 80084fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008500:	4618      	mov	r0, r3
 8008502:	3740      	adds	r7, #64	; 0x40
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	0801ae10 	.word	0x0801ae10

0800850c <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b092      	sub	sp, #72	; 0x48
 8008510:	af02      	add	r7, sp, #8
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	2200      	movs	r2, #0
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f7f8 f88d 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 8008528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800852c:	2b00      	cmp	r3, #0
 800852e:	d025      	beq.n	800857c <USBPD_DPM_RequestGotoMin+0x70>
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	4a14      	ldr	r2, [pc, #80]	; (8008588 <USBPD_DPM_RequestGotoMin+0x7c>)
 8008536:	2132      	movs	r1, #50	; 0x32
 8008538:	4618      	mov	r0, r3
 800853a:	f012 f845 	bl	801a5c8 <sniprintf>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008544:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008548:	2b31      	cmp	r3, #49	; 0x31
 800854a:	d80e      	bhi.n	800856a <USBPD_DPM_RequestGotoMin+0x5e>
 800854c:	f107 030c 	add.w	r3, r7, #12
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe f9eb 	bl	800692c <strlen>
 8008556:	4602      	mov	r2, r0
 8008558:	f107 030c 	add.w	r3, r7, #12
 800855c:	79f9      	ldrb	r1, [r7, #7]
 800855e:	9200      	str	r2, [sp, #0]
 8008560:	2200      	movs	r2, #0
 8008562:	2006      	movs	r0, #6
 8008564:	f007 fa56 	bl	800fa14 <USBPD_TRACE_Add>
 8008568:	e008      	b.n	800857c <USBPD_DPM_RequestGotoMin+0x70>
 800856a:	f107 030c 	add.w	r3, r7, #12
 800856e:	79f9      	ldrb	r1, [r7, #7]
 8008570:	2232      	movs	r2, #50	; 0x32
 8008572:	9200      	str	r2, [sp, #0]
 8008574:	2200      	movs	r2, #0
 8008576:	2006      	movs	r0, #6
 8008578:	f007 fa4c 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 800857c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008580:	4618      	mov	r0, r3
 8008582:	3740      	adds	r7, #64	; 0x40
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	0801ae38 	.word	0x0801ae38

0800858c <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b092      	sub	sp, #72	; 0x48
 8008590:	af02      	add	r7, sp, #8
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2200      	movs	r2, #0
 800859a:	2105      	movs	r1, #5
 800859c:	4618      	mov	r0, r3
 800859e:	f7f8 f84d 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 80085a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d025      	beq.n	80085fc <USBPD_DPM_RequestPing+0x70>
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	4a14      	ldr	r2, [pc, #80]	; (8008608 <USBPD_DPM_RequestPing+0x7c>)
 80085b6:	2132      	movs	r1, #50	; 0x32
 80085b8:	4618      	mov	r0, r3
 80085ba:	f012 f805 	bl	801a5c8 <sniprintf>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80085c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80085c8:	2b31      	cmp	r3, #49	; 0x31
 80085ca:	d80e      	bhi.n	80085ea <USBPD_DPM_RequestPing+0x5e>
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe f9ab 	bl	800692c <strlen>
 80085d6:	4602      	mov	r2, r0
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	79f9      	ldrb	r1, [r7, #7]
 80085de:	9200      	str	r2, [sp, #0]
 80085e0:	2200      	movs	r2, #0
 80085e2:	2006      	movs	r0, #6
 80085e4:	f007 fa16 	bl	800fa14 <USBPD_TRACE_Add>
 80085e8:	e008      	b.n	80085fc <USBPD_DPM_RequestPing+0x70>
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	79f9      	ldrb	r1, [r7, #7]
 80085f0:	2232      	movs	r2, #50	; 0x32
 80085f2:	9200      	str	r2, [sp, #0]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2006      	movs	r0, #6
 80085f8:	f007 fa0c 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 80085fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008600:	4618      	mov	r0, r3
 8008602:	3740      	adds	r7, #64	; 0x40
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	0801ae5c 	.word	0x0801ae5c

0800860c <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b09f      	sub	sp, #124	; 0x7c
 8008610:	af02      	add	r7, sp, #8
 8008612:	4603      	mov	r3, r0
 8008614:	71fb      	strb	r3, [r7, #7]
 8008616:	460b      	mov	r3, r1
 8008618:	71bb      	strb	r3, [r7, #6]
 800861a:	4613      	mov	r3, r2
 800861c:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 800861e:	2302      	movs	r3, #2
 8008620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
/* USER CODE BEGIN USBPD_DPM_RequestMessageRequest */
  uint32_t voltage, allowablepower;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_PDO_TypeDef  pdo;
  USBPD_CORE_PDO_Type_TypeDef pdo_object;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2274      	movs	r2, #116	; 0x74
 8008628:	fb02 f303 	mul.w	r3, r2, r3
 800862c:	4a56      	ldr	r2, [pc, #344]	; (8008788 <USBPD_DPM_RequestMessageRequest+0x17c>)
 800862e:	4413      	add	r3, r2
 8008630:	66bb      	str	r3, [r7, #104]	; 0x68
  USBPD_DPM_SNKPowerRequestDetails_TypeDef request_details;
  rdo.d32 = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	65bb      	str	r3, [r7, #88]	; 0x58

  /* selected SRC PDO */
  pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 8008636:	79fa      	ldrb	r2, [r7, #7]
 8008638:	79bb      	ldrb	r3, [r7, #6]
 800863a:	1e59      	subs	r1, r3, #1
 800863c:	4853      	ldr	r0, [pc, #332]	; (800878c <USBPD_DPM_RequestMessageRequest+0x180>)
 800863e:	4613      	mov	r3, r2
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	4413      	add	r3, r2
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	440b      	add	r3, r1
 8008648:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800864c:	657b      	str	r3, [r7, #84]	; 0x54
  voltage = RequestedVoltage;
 800864e:	88bb      	ldrh	r3, [r7, #4]
 8008650:	663b      	str	r3, [r7, #96]	; 0x60
  allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000;
 8008652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	88ba      	ldrh	r2, [r7, #4]
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	4a4c      	ldr	r2, [pc, #304]	; (8008790 <USBPD_DPM_RequestMessageRequest+0x184>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (USBPD_TRUE == USBPD_DPM_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 8008666:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008668:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800866c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008670:	79f8      	ldrb	r0, [r7, #7]
 8008672:	f000 fd69 	bl	8009148 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	d12f      	bne.n	80086dc <USBPD_DPM_RequestMessageRequest+0xd0>
  {
    /* Check that voltage has been correctly selected */
    if (RequestedVoltage == voltage)
 800867c:	88ba      	ldrh	r2, [r7, #4]
 800867e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008680:	429a      	cmp	r2, r3
 8008682:	d151      	bne.n	8008728 <USBPD_DPM_RequestMessageRequest+0x11c>
    {
      request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 8008684:	88bb      	ldrh	r3, [r7, #4]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
      request_details.OperatingCurrentInmAunits    = (1000 * allowablepower)/RequestedVoltage;
 8008688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800868e:	fb03 f202 	mul.w	r2, r3, r2
 8008692:	88bb      	ldrh	r3, [r7, #4]
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	647b      	str	r3, [r7, #68]	; 0x44
      request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 800869a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	643b      	str	r3, [r7, #64]	; 0x40
      request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 80086a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	64bb      	str	r3, [r7, #72]	; 0x48
      request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 80086a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      DPM_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 80086ac:	79bb      	ldrb	r3, [r7, #6]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b2d9      	uxtb	r1, r3
 80086b2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80086b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80086ba:	79f8      	ldrb	r0, [r7, #7]
 80086bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4623      	mov	r3, r4
 80086c4:	f001 f914 	bl	80098f0 <DPM_SNK_BuildRDOfromSelectedPDO>

      _status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 80086c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f8 f906 	bl	80008e0 <USBPD_PE_Send_Request>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80086da:	e025      	b.n	8008728 <USBPD_DPM_RequestMessageRequest+0x11c>
    }
  }
  else
  {
    DPM_USER_DEBUG_TRACE(PortNum, "REQUEST not accepted by the stack");
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <USBPD_DPM_RequestMessageRequest+0x188>)
 80086e2:	2132      	movs	r1, #50	; 0x32
 80086e4:	4618      	mov	r0, r3
 80086e6:	f011 ff6f 	bl	801a5c8 <sniprintf>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80086f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086f4:	2b31      	cmp	r3, #49	; 0x31
 80086f6:	d80e      	bhi.n	8008716 <USBPD_DPM_RequestMessageRequest+0x10a>
 80086f8:	f107 0308 	add.w	r3, r7, #8
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe f915 	bl	800692c <strlen>
 8008702:	4602      	mov	r2, r0
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	79f9      	ldrb	r1, [r7, #7]
 800870a:	9200      	str	r2, [sp, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	2006      	movs	r0, #6
 8008710:	f007 f980 	bl	800fa14 <USBPD_TRACE_Add>
 8008714:	e008      	b.n	8008728 <USBPD_DPM_RequestMessageRequest+0x11c>
 8008716:	f107 0308 	add.w	r3, r7, #8
 800871a:	79f9      	ldrb	r1, [r7, #7]
 800871c:	2232      	movs	r2, #50	; 0x32
 800871e:	9200      	str	r2, [sp, #0]
 8008720:	2200      	movs	r2, #0
 8008722:	2006      	movs	r0, #6
 8008724:	f007 f976 	bl	800fa14 <USBPD_TRACE_Add>
  }
/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 8008728:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800872c:	2b00      	cmp	r3, #0
 800872e:	d025      	beq.n	800877c <USBPD_DPM_RequestMessageRequest+0x170>
 8008730:	f107 0308 	add.w	r3, r7, #8
 8008734:	4a17      	ldr	r2, [pc, #92]	; (8008794 <USBPD_DPM_RequestMessageRequest+0x188>)
 8008736:	2132      	movs	r1, #50	; 0x32
 8008738:	4618      	mov	r0, r3
 800873a:	f011 ff45 	bl	801a5c8 <sniprintf>
 800873e:	4603      	mov	r3, r0
 8008740:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8008744:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8008748:	2b31      	cmp	r3, #49	; 0x31
 800874a:	d80e      	bhi.n	800876a <USBPD_DPM_RequestMessageRequest+0x15e>
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe f8eb 	bl	800692c <strlen>
 8008756:	4602      	mov	r2, r0
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	79f9      	ldrb	r1, [r7, #7]
 800875e:	9200      	str	r2, [sp, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	2006      	movs	r0, #6
 8008764:	f007 f956 	bl	800fa14 <USBPD_TRACE_Add>
 8008768:	e008      	b.n	800877c <USBPD_DPM_RequestMessageRequest+0x170>
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	79f9      	ldrb	r1, [r7, #7]
 8008770:	2232      	movs	r2, #50	; 0x32
 8008772:	9200      	str	r2, [sp, #0]
 8008774:	2200      	movs	r2, #0
 8008776:	2006      	movs	r0, #6
 8008778:	f007 f94c 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 800877c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008780:	4618      	mov	r0, r3
 8008782:	3774      	adds	r7, #116	; 0x74
 8008784:	46bd      	mov	sp, r7
 8008786:	bd90      	pop	{r4, r7, pc}
 8008788:	20000018 	.word	0x20000018
 800878c:	2000022c 	.word	0x2000022c
 8008790:	10624dd3 	.word	0x10624dd3
 8008794:	0801ae7c 	.word	0x0801ae7c

08008798 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b092      	sub	sp, #72	; 0x48
 800879c:	af02      	add	r7, sp, #8
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2107      	movs	r1, #7
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f7 ff47 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 80087b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d025      	beq.n	8008808 <USBPD_DPM_RequestGetSourceCapability+0x70>
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4a14      	ldr	r2, [pc, #80]	; (8008814 <USBPD_DPM_RequestGetSourceCapability+0x7c>)
 80087c2:	2132      	movs	r1, #50	; 0x32
 80087c4:	4618      	mov	r0, r3
 80087c6:	f011 feff 	bl	801a5c8 <sniprintf>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80087d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087d4:	2b31      	cmp	r3, #49	; 0x31
 80087d6:	d80e      	bhi.n	80087f6 <USBPD_DPM_RequestGetSourceCapability+0x5e>
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fe f8a5 	bl	800692c <strlen>
 80087e2:	4602      	mov	r2, r0
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	79f9      	ldrb	r1, [r7, #7]
 80087ea:	9200      	str	r2, [sp, #0]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2006      	movs	r0, #6
 80087f0:	f007 f910 	bl	800fa14 <USBPD_TRACE_Add>
 80087f4:	e008      	b.n	8008808 <USBPD_DPM_RequestGetSourceCapability+0x70>
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	79f9      	ldrb	r1, [r7, #7]
 80087fc:	2232      	movs	r2, #50	; 0x32
 80087fe:	9200      	str	r2, [sp, #0]
 8008800:	2200      	movs	r2, #0
 8008802:	2006      	movs	r0, #6
 8008804:	f007 f906 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800880c:	4618      	mov	r0, r3
 800880e:	3740      	adds	r7, #64	; 0x40
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	0801aea0 	.word	0x0801aea0

08008818 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b092      	sub	sp, #72	; 0x48
 800881c:	af02      	add	r7, sp, #8
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2200      	movs	r2, #0
 8008826:	2108      	movs	r1, #8
 8008828:	4618      	mov	r0, r3
 800882a:	f7f7 ff07 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 800882e:	4603      	mov	r3, r0
 8008830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 8008834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008838:	2b00      	cmp	r3, #0
 800883a:	d025      	beq.n	8008888 <USBPD_DPM_RequestGetSinkCapability+0x70>
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4a14      	ldr	r2, [pc, #80]	; (8008894 <USBPD_DPM_RequestGetSinkCapability+0x7c>)
 8008842:	2132      	movs	r1, #50	; 0x32
 8008844:	4618      	mov	r0, r3
 8008846:	f011 febf 	bl	801a5c8 <sniprintf>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008850:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008854:	2b31      	cmp	r3, #49	; 0x31
 8008856:	d80e      	bhi.n	8008876 <USBPD_DPM_RequestGetSinkCapability+0x5e>
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe f865 	bl	800692c <strlen>
 8008862:	4602      	mov	r2, r0
 8008864:	f107 030c 	add.w	r3, r7, #12
 8008868:	79f9      	ldrb	r1, [r7, #7]
 800886a:	9200      	str	r2, [sp, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	2006      	movs	r0, #6
 8008870:	f007 f8d0 	bl	800fa14 <USBPD_TRACE_Add>
 8008874:	e008      	b.n	8008888 <USBPD_DPM_RequestGetSinkCapability+0x70>
 8008876:	f107 030c 	add.w	r3, r7, #12
 800887a:	79f9      	ldrb	r1, [r7, #7]
 800887c:	2232      	movs	r2, #50	; 0x32
 800887e:	9200      	str	r2, [sp, #0]
 8008880:	2200      	movs	r2, #0
 8008882:	2006      	movs	r0, #6
 8008884:	f007 f8c6 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800888c:	4618      	mov	r0, r3
 800888e:	3740      	adds	r7, #64	; 0x40
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	0801aec8 	.word	0x0801aec8

08008898 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b092      	sub	sp, #72	; 0x48
 800889c:	af02      	add	r7, sp, #8
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2109      	movs	r1, #9
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f7 fec7 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 80088b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d025      	beq.n	8008908 <USBPD_DPM_RequestDataRoleSwap+0x70>
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	4a14      	ldr	r2, [pc, #80]	; (8008914 <USBPD_DPM_RequestDataRoleSwap+0x7c>)
 80088c2:	2132      	movs	r1, #50	; 0x32
 80088c4:	4618      	mov	r0, r3
 80088c6:	f011 fe7f 	bl	801a5c8 <sniprintf>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80088d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80088d4:	2b31      	cmp	r3, #49	; 0x31
 80088d6:	d80e      	bhi.n	80088f6 <USBPD_DPM_RequestDataRoleSwap+0x5e>
 80088d8:	f107 030c 	add.w	r3, r7, #12
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe f825 	bl	800692c <strlen>
 80088e2:	4602      	mov	r2, r0
 80088e4:	f107 030c 	add.w	r3, r7, #12
 80088e8:	79f9      	ldrb	r1, [r7, #7]
 80088ea:	9200      	str	r2, [sp, #0]
 80088ec:	2200      	movs	r2, #0
 80088ee:	2006      	movs	r0, #6
 80088f0:	f007 f890 	bl	800fa14 <USBPD_TRACE_Add>
 80088f4:	e008      	b.n	8008908 <USBPD_DPM_RequestDataRoleSwap+0x70>
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	79f9      	ldrb	r1, [r7, #7]
 80088fc:	2232      	movs	r2, #50	; 0x32
 80088fe:	9200      	str	r2, [sp, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	2006      	movs	r0, #6
 8008904:	f007 f886 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800890c:	4618      	mov	r0, r3
 800890e:	3740      	adds	r7, #64	; 0x40
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	0801aef0 	.word	0x0801aef0

08008918 <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b092      	sub	sp, #72	; 0x48
 800891c:	af02      	add	r7, sp, #8
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PR_SWAP, USBPD_SOPTYPE_SOP);
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	2200      	movs	r2, #0
 8008926:	210a      	movs	r1, #10
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fe87 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "PRS not accepted by the stack");
 8008934:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008938:	2b00      	cmp	r3, #0
 800893a:	d025      	beq.n	8008988 <USBPD_DPM_RequestPowerRoleSwap+0x70>
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	4a14      	ldr	r2, [pc, #80]	; (8008994 <USBPD_DPM_RequestPowerRoleSwap+0x7c>)
 8008942:	2132      	movs	r1, #50	; 0x32
 8008944:	4618      	mov	r0, r3
 8008946:	f011 fe3f 	bl	801a5c8 <sniprintf>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008950:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008954:	2b31      	cmp	r3, #49	; 0x31
 8008956:	d80e      	bhi.n	8008976 <USBPD_DPM_RequestPowerRoleSwap+0x5e>
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd ffe5 	bl	800692c <strlen>
 8008962:	4602      	mov	r2, r0
 8008964:	f107 030c 	add.w	r3, r7, #12
 8008968:	79f9      	ldrb	r1, [r7, #7]
 800896a:	9200      	str	r2, [sp, #0]
 800896c:	2200      	movs	r2, #0
 800896e:	2006      	movs	r0, #6
 8008970:	f007 f850 	bl	800fa14 <USBPD_TRACE_Add>
 8008974:	e008      	b.n	8008988 <USBPD_DPM_RequestPowerRoleSwap+0x70>
 8008976:	f107 030c 	add.w	r3, r7, #12
 800897a:	79f9      	ldrb	r1, [r7, #7]
 800897c:	2232      	movs	r2, #50	; 0x32
 800897e:	9200      	str	r2, [sp, #0]
 8008980:	2200      	movs	r2, #0
 8008982:	2006      	movs	r0, #6
 8008984:	f007 f846 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008988:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800898c:	4618      	mov	r0, r3
 800898e:	3740      	adds	r7, #64	; 0x40
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	0801af10 	.word	0x0801af10

08008998 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b092      	sub	sp, #72	; 0x48
 800899c:	af02      	add	r7, sp, #8
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	2200      	movs	r2, #0
 80089a6:	210b      	movs	r1, #11
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7f7 fe47 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 80089b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d025      	beq.n	8008a08 <USBPD_DPM_RequestVconnSwap+0x70>
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <USBPD_DPM_RequestVconnSwap+0x7c>)
 80089c2:	2132      	movs	r1, #50	; 0x32
 80089c4:	4618      	mov	r0, r3
 80089c6:	f011 fdff 	bl	801a5c8 <sniprintf>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80089d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80089d4:	2b31      	cmp	r3, #49	; 0x31
 80089d6:	d80e      	bhi.n	80089f6 <USBPD_DPM_RequestVconnSwap+0x5e>
 80089d8:	f107 030c 	add.w	r3, r7, #12
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd ffa5 	bl	800692c <strlen>
 80089e2:	4602      	mov	r2, r0
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	79f9      	ldrb	r1, [r7, #7]
 80089ea:	9200      	str	r2, [sp, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	2006      	movs	r0, #6
 80089f0:	f007 f810 	bl	800fa14 <USBPD_TRACE_Add>
 80089f4:	e008      	b.n	8008a08 <USBPD_DPM_RequestVconnSwap+0x70>
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	79f9      	ldrb	r1, [r7, #7]
 80089fc:	2232      	movs	r2, #50	; 0x32
 80089fe:	9200      	str	r2, [sp, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2006      	movs	r0, #6
 8008a04:	f007 f806 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3740      	adds	r7, #64	; 0x40
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	0801af30 	.word	0x0801af30

08008a18 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b092      	sub	sp, #72	; 0x48
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	4603      	mov	r3, r0
 8008a20:	460a      	mov	r2, r1
 8008a22:	71fb      	strb	r3, [r7, #7]
 8008a24:	4613      	mov	r3, r2
 8008a26:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 8008a28:	79ba      	ldrb	r2, [r7, #6]
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	210d      	movs	r1, #13
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f7 fe04 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 8008a3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d025      	beq.n	8008a8e <USBPD_DPM_RequestSoftReset+0x76>
 8008a42:	f107 030c 	add.w	r3, r7, #12
 8008a46:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <USBPD_DPM_RequestSoftReset+0x84>)
 8008a48:	2132      	movs	r1, #50	; 0x32
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f011 fdbc 	bl	801a5c8 <sniprintf>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008a56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008a5a:	2b31      	cmp	r3, #49	; 0x31
 8008a5c:	d80e      	bhi.n	8008a7c <USBPD_DPM_RequestSoftReset+0x64>
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd ff62 	bl	800692c <strlen>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f107 030c 	add.w	r3, r7, #12
 8008a6e:	79f9      	ldrb	r1, [r7, #7]
 8008a70:	9200      	str	r2, [sp, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	2006      	movs	r0, #6
 8008a76:	f006 ffcd 	bl	800fa14 <USBPD_TRACE_Add>
 8008a7a:	e008      	b.n	8008a8e <USBPD_DPM_RequestSoftReset+0x76>
 8008a7c:	f107 030c 	add.w	r3, r7, #12
 8008a80:	79f9      	ldrb	r1, [r7, #7]
 8008a82:	2232      	movs	r2, #50	; 0x32
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2006      	movs	r0, #6
 8008a8a:	f006 ffc3 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3740      	adds	r7, #64	; 0x40
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0801af50 	.word	0x0801af50

08008aa0 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b092      	sub	sp, #72	; 0x48
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	2200      	movs	r2, #0
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f7 fe66 	bl	8000782 <USBPD_PE_Request_DataMessage>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 8008abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d025      	beq.n	8008b10 <USBPD_DPM_RequestSourceCapability+0x70>
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <USBPD_DPM_RequestSourceCapability+0x7c>)
 8008aca:	2132      	movs	r1, #50	; 0x32
 8008acc:	4618      	mov	r0, r3
 8008ace:	f011 fd7b 	bl	801a5c8 <sniprintf>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008ad8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008adc:	2b31      	cmp	r3, #49	; 0x31
 8008ade:	d80e      	bhi.n	8008afe <USBPD_DPM_RequestSourceCapability+0x5e>
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd ff21 	bl	800692c <strlen>
 8008aea:	4602      	mov	r2, r0
 8008aec:	f107 030c 	add.w	r3, r7, #12
 8008af0:	79f9      	ldrb	r1, [r7, #7]
 8008af2:	9200      	str	r2, [sp, #0]
 8008af4:	2200      	movs	r2, #0
 8008af6:	2006      	movs	r0, #6
 8008af8:	f006 ff8c 	bl	800fa14 <USBPD_TRACE_Add>
 8008afc:	e008      	b.n	8008b10 <USBPD_DPM_RequestSourceCapability+0x70>
 8008afe:	f107 030c 	add.w	r3, r7, #12
 8008b02:	79f9      	ldrb	r1, [r7, #7]
 8008b04:	2232      	movs	r2, #50	; 0x32
 8008b06:	9200      	str	r2, [sp, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2006      	movs	r0, #6
 8008b0c:	f006 ff82 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3740      	adds	r7, #64	; 0x40
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	0801af78 	.word	0x0801af78

08008b20 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b092      	sub	sp, #72	; 0x48
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	4603      	mov	r3, r0
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 8008b2c:	463a      	mov	r2, r7
 8008b2e:	79fb      	ldrb	r3, [r7, #7]
 8008b30:	2106      	movs	r1, #6
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f7 fe25 	bl	8000782 <USBPD_PE_Request_DataMessage>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 8008b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d025      	beq.n	8008b92 <USBPD_DPM_RequestAlert+0x72>
 8008b46:	f107 030c 	add.w	r3, r7, #12
 8008b4a:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <USBPD_DPM_RequestAlert+0x80>)
 8008b4c:	2132      	movs	r1, #50	; 0x32
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f011 fd3a 	bl	801a5c8 <sniprintf>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008b5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008b5e:	2b31      	cmp	r3, #49	; 0x31
 8008b60:	d80e      	bhi.n	8008b80 <USBPD_DPM_RequestAlert+0x60>
 8008b62:	f107 030c 	add.w	r3, r7, #12
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fd fee0 	bl	800692c <strlen>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	79f9      	ldrb	r1, [r7, #7]
 8008b74:	9200      	str	r2, [sp, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	2006      	movs	r0, #6
 8008b7a:	f006 ff4b 	bl	800fa14 <USBPD_TRACE_Add>
 8008b7e:	e008      	b.n	8008b92 <USBPD_DPM_RequestAlert+0x72>
 8008b80:	f107 030c 	add.w	r3, r7, #12
 8008b84:	79f9      	ldrb	r1, [r7, #7]
 8008b86:	2232      	movs	r2, #50	; 0x32
 8008b88:	9200      	str	r2, [sp, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	2006      	movs	r0, #6
 8008b8e:	f006 ff41 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008b92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3740      	adds	r7, #64	; 0x40
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	0801b108 	.word	0x0801b108

08008ba4 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b092      	sub	sp, #72	; 0x48
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	4603      	mov	r3, r0
 8008bac:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2111      	movs	r1, #17
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f7 fd41 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 8008bc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d025      	beq.n	8008c14 <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	4a14      	ldr	r2, [pc, #80]	; (8008c20 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7c>)
 8008bce:	2132      	movs	r1, #50	; 0x32
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f011 fcf9 	bl	801a5c8 <sniprintf>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008bdc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008be0:	2b31      	cmp	r3, #49	; 0x31
 8008be2:	d80e      	bhi.n	8008c02 <USBPD_DPM_RequestGetSourceCapabilityExt+0x5e>
 8008be4:	f107 030c 	add.w	r3, r7, #12
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fd fe9f 	bl	800692c <strlen>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	79f9      	ldrb	r1, [r7, #7]
 8008bf6:	9200      	str	r2, [sp, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2006      	movs	r0, #6
 8008bfc:	f006 ff0a 	bl	800fa14 <USBPD_TRACE_Add>
 8008c00:	e008      	b.n	8008c14 <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8008c02:	f107 030c 	add.w	r3, r7, #12
 8008c06:	79f9      	ldrb	r1, [r7, #7]
 8008c08:	2232      	movs	r2, #50	; 0x32
 8008c0a:	9200      	str	r2, [sp, #0]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2006      	movs	r0, #6
 8008c10:	f006 ff00 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3740      	adds	r7, #64	; 0x40
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	0801b128 	.word	0x0801b128

08008c24 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b092      	sub	sp, #72	; 0x48
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	2200      	movs	r2, #0
 8008c32:	2116      	movs	r1, #22
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f7 fd01 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 8008c40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d025      	beq.n	8008c94 <USBPD_DPM_RequestGetSinkCapabilityExt+0x70>
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4a14      	ldr	r2, [pc, #80]	; (8008ca0 <USBPD_DPM_RequestGetSinkCapabilityExt+0x7c>)
 8008c4e:	2132      	movs	r1, #50	; 0x32
 8008c50:	4618      	mov	r0, r3
 8008c52:	f011 fcb9 	bl	801a5c8 <sniprintf>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008c5c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008c60:	2b31      	cmp	r3, #49	; 0x31
 8008c62:	d80e      	bhi.n	8008c82 <USBPD_DPM_RequestGetSinkCapabilityExt+0x5e>
 8008c64:	f107 030c 	add.w	r3, r7, #12
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fd fe5f 	bl	800692c <strlen>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	79f9      	ldrb	r1, [r7, #7]
 8008c76:	9200      	str	r2, [sp, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2006      	movs	r0, #6
 8008c7c:	f006 feca 	bl	800fa14 <USBPD_TRACE_Add>
 8008c80:	e008      	b.n	8008c94 <USBPD_DPM_RequestGetSinkCapabilityExt+0x70>
 8008c82:	f107 030c 	add.w	r3, r7, #12
 8008c86:	79f9      	ldrb	r1, [r7, #7]
 8008c88:	2232      	movs	r2, #50	; 0x32
 8008c8a:	9200      	str	r2, [sp, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2006      	movs	r0, #6
 8008c90:	f006 fec0 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008c94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3740      	adds	r7, #64	; 0x40
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	0801b154 	.word	0x0801b154

08008ca4 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b092      	sub	sp, #72	; 0x48
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	4603      	mov	r3, r0
 8008cac:	603a      	str	r2, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (USBPD_SOPTYPE_SOP == SOPType)
 8008cba:	79bb      	ldrb	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <USBPD_DPM_RequestGetManufacturerInfo+0x32>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 8008cc0:	79b9      	ldrb	r1, [r7, #6]
 8008cc2:	79f8      	ldrb	r0, [r7, #7]
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2206      	movs	r2, #6
 8008ccc:	f7f7 fe36 	bl	800093c <USBPD_PE_SendExtendedMessage>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 8008cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d025      	beq.n	8008d2a <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <USBPD_DPM_RequestGetManufacturerInfo+0x94>)
 8008ce4:	2132      	movs	r1, #50	; 0x32
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f011 fc6e 	bl	801a5c8 <sniprintf>
 8008cec:	4603      	mov	r3, r0
 8008cee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008cf2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008cf6:	2b31      	cmp	r3, #49	; 0x31
 8008cf8:	d80e      	bhi.n	8008d18 <USBPD_DPM_RequestGetManufacturerInfo+0x74>
 8008cfa:	f107 030c 	add.w	r3, r7, #12
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fd fe14 	bl	800692c <strlen>
 8008d04:	4602      	mov	r2, r0
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	79f9      	ldrb	r1, [r7, #7]
 8008d0c:	9200      	str	r2, [sp, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2006      	movs	r0, #6
 8008d12:	f006 fe7f 	bl	800fa14 <USBPD_TRACE_Add>
 8008d16:	e008      	b.n	8008d2a <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8008d18:	f107 030c 	add.w	r3, r7, #12
 8008d1c:	79f9      	ldrb	r1, [r7, #7]
 8008d1e:	2232      	movs	r2, #50	; 0x32
 8008d20:	9200      	str	r2, [sp, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	2006      	movs	r0, #6
 8008d26:	f006 fe75 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008d2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3740      	adds	r7, #64	; 0x40
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	0801b180 	.word	0x0801b180

08008d3c <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b092      	sub	sp, #72	; 0x48
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2114      	movs	r1, #20
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f7 fc75 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 8008d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d025      	beq.n	8008dac <USBPD_DPM_RequestGetPPS_Status+0x70>
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <USBPD_DPM_RequestGetPPS_Status+0x7c>)
 8008d66:	2132      	movs	r1, #50	; 0x32
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f011 fc2d 	bl	801a5c8 <sniprintf>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008d74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008d78:	2b31      	cmp	r3, #49	; 0x31
 8008d7a:	d80e      	bhi.n	8008d9a <USBPD_DPM_RequestGetPPS_Status+0x5e>
 8008d7c:	f107 030c 	add.w	r3, r7, #12
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fd fdd3 	bl	800692c <strlen>
 8008d86:	4602      	mov	r2, r0
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	79f9      	ldrb	r1, [r7, #7]
 8008d8e:	9200      	str	r2, [sp, #0]
 8008d90:	2200      	movs	r2, #0
 8008d92:	2006      	movs	r0, #6
 8008d94:	f006 fe3e 	bl	800fa14 <USBPD_TRACE_Add>
 8008d98:	e008      	b.n	8008dac <USBPD_DPM_RequestGetPPS_Status+0x70>
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	79f9      	ldrb	r1, [r7, #7]
 8008da0:	2232      	movs	r2, #50	; 0x32
 8008da2:	9200      	str	r2, [sp, #0]
 8008da4:	2200      	movs	r2, #0
 8008da6:	2006      	movs	r0, #6
 8008da8:	f006 fe34 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008dac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3740      	adds	r7, #64	; 0x40
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	0801b1a8 	.word	0x0801b1a8

08008dbc <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b092      	sub	sp, #72	; 0x48
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2112      	movs	r1, #18
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f7 fc35 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 8008dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d025      	beq.n	8008e2c <USBPD_DPM_RequestGetStatus+0x70>
 8008de0:	f107 030c 	add.w	r3, r7, #12
 8008de4:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <USBPD_DPM_RequestGetStatus+0x7c>)
 8008de6:	2132      	movs	r1, #50	; 0x32
 8008de8:	4618      	mov	r0, r3
 8008dea:	f011 fbed 	bl	801a5c8 <sniprintf>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008df4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008df8:	2b31      	cmp	r3, #49	; 0x31
 8008dfa:	d80e      	bhi.n	8008e1a <USBPD_DPM_RequestGetStatus+0x5e>
 8008dfc:	f107 030c 	add.w	r3, r7, #12
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fd fd93 	bl	800692c <strlen>
 8008e06:	4602      	mov	r2, r0
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	79f9      	ldrb	r1, [r7, #7]
 8008e0e:	9200      	str	r2, [sp, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	2006      	movs	r0, #6
 8008e14:	f006 fdfe 	bl	800fa14 <USBPD_TRACE_Add>
 8008e18:	e008      	b.n	8008e2c <USBPD_DPM_RequestGetStatus+0x70>
 8008e1a:	f107 030c 	add.w	r3, r7, #12
 8008e1e:	79f9      	ldrb	r1, [r7, #7]
 8008e20:	2232      	movs	r2, #50	; 0x32
 8008e22:	9200      	str	r2, [sp, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	2006      	movs	r0, #6
 8008e28:	f006 fdf4 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008e2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3740      	adds	r7, #64	; 0x40
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	0801b1d4 	.word	0x0801b1d4

08008e3c <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b092      	sub	sp, #72	; 0x48
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	4603      	mov	r3, r0
 8008e44:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2113      	movs	r1, #19
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7f7 fbf5 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 8008e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d025      	beq.n	8008eac <USBPD_DPM_RequestFastRoleSwap+0x70>
 8008e60:	f107 030c 	add.w	r3, r7, #12
 8008e64:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <USBPD_DPM_RequestFastRoleSwap+0x7c>)
 8008e66:	2132      	movs	r1, #50	; 0x32
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f011 fbad 	bl	801a5c8 <sniprintf>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008e74:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008e78:	2b31      	cmp	r3, #49	; 0x31
 8008e7a:	d80e      	bhi.n	8008e9a <USBPD_DPM_RequestFastRoleSwap+0x5e>
 8008e7c:	f107 030c 	add.w	r3, r7, #12
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fd fd53 	bl	800692c <strlen>
 8008e86:	4602      	mov	r2, r0
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	79f9      	ldrb	r1, [r7, #7]
 8008e8e:	9200      	str	r2, [sp, #0]
 8008e90:	2200      	movs	r2, #0
 8008e92:	2006      	movs	r0, #6
 8008e94:	f006 fdbe 	bl	800fa14 <USBPD_TRACE_Add>
 8008e98:	e008      	b.n	8008eac <USBPD_DPM_RequestFastRoleSwap+0x70>
 8008e9a:	f107 030c 	add.w	r3, r7, #12
 8008e9e:	79f9      	ldrb	r1, [r7, #7]
 8008ea0:	2232      	movs	r2, #50	; 0x32
 8008ea2:	9200      	str	r2, [sp, #0]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2006      	movs	r0, #6
 8008ea8:	f006 fdb4 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3740      	adds	r7, #64	; 0x40
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	0801b1fc 	.word	0x0801b1fc

08008ebc <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b092      	sub	sp, #72	; 0x48
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2115      	movs	r1, #21
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f7 fbb5 	bl	800063c <USBPD_PE_Request_CtrlMessage>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 8008ed8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d025      	beq.n	8008f2c <USBPD_DPM_RequestGetCountryCodes+0x70>
 8008ee0:	f107 030c 	add.w	r3, r7, #12
 8008ee4:	4a14      	ldr	r2, [pc, #80]	; (8008f38 <USBPD_DPM_RequestGetCountryCodes+0x7c>)
 8008ee6:	2132      	movs	r1, #50	; 0x32
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f011 fb6d 	bl	801a5c8 <sniprintf>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008ef4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ef8:	2b31      	cmp	r3, #49	; 0x31
 8008efa:	d80e      	bhi.n	8008f1a <USBPD_DPM_RequestGetCountryCodes+0x5e>
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fd fd13 	bl	800692c <strlen>
 8008f06:	4602      	mov	r2, r0
 8008f08:	f107 030c 	add.w	r3, r7, #12
 8008f0c:	79f9      	ldrb	r1, [r7, #7]
 8008f0e:	9200      	str	r2, [sp, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	2006      	movs	r0, #6
 8008f14:	f006 fd7e 	bl	800fa14 <USBPD_TRACE_Add>
 8008f18:	e008      	b.n	8008f2c <USBPD_DPM_RequestGetCountryCodes+0x70>
 8008f1a:	f107 030c 	add.w	r3, r7, #12
 8008f1e:	79f9      	ldrb	r1, [r7, #7]
 8008f20:	2232      	movs	r2, #50	; 0x32
 8008f22:	9200      	str	r2, [sp, #0]
 8008f24:	2200      	movs	r2, #0
 8008f26:	2006      	movs	r0, #6
 8008f28:	f006 fd74 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008f2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3740      	adds	r7, #64	; 0x40
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	0801b21c 	.word	0x0801b21c

08008f3c <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b092      	sub	sp, #72	; 0x48
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	4603      	mov	r3, r0
 8008f44:	460a      	mov	r2, r1
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 8008f4c:	1d3a      	adds	r2, r7, #4
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	2107      	movs	r1, #7
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7f7 fc15 	bl	8000782 <USBPD_PE_Request_DataMessage>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 8008f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d025      	beq.n	8008fb2 <USBPD_DPM_RequestGetCountryInfo+0x76>
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <USBPD_DPM_RequestGetCountryInfo+0x84>)
 8008f6c:	2132      	movs	r1, #50	; 0x32
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f011 fb2a 	bl	801a5c8 <sniprintf>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008f7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008f7e:	2b31      	cmp	r3, #49	; 0x31
 8008f80:	d80e      	bhi.n	8008fa0 <USBPD_DPM_RequestGetCountryInfo+0x64>
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fd fcd0 	bl	800692c <strlen>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	f107 030c 	add.w	r3, r7, #12
 8008f92:	79f9      	ldrb	r1, [r7, #7]
 8008f94:	9200      	str	r2, [sp, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2006      	movs	r0, #6
 8008f9a:	f006 fd3b 	bl	800fa14 <USBPD_TRACE_Add>
 8008f9e:	e008      	b.n	8008fb2 <USBPD_DPM_RequestGetCountryInfo+0x76>
 8008fa0:	f107 030c 	add.w	r3, r7, #12
 8008fa4:	79f9      	ldrb	r1, [r7, #7]
 8008fa6:	2232      	movs	r2, #50	; 0x32
 8008fa8:	9200      	str	r2, [sp, #0]
 8008faa:	2200      	movs	r2, #0
 8008fac:	2006      	movs	r0, #6
 8008fae:	f006 fd31 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8008fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3740      	adds	r7, #64	; 0x40
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0801b248 	.word	0x0801b248

08008fc4 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b092      	sub	sp, #72	; 0x48
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 8008fd0:	79f8      	ldrb	r0, [r7, #7]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2203      	movs	r2, #3
 8008fda:	2100      	movs	r1, #0
 8008fdc:	f7f7 fcae 	bl	800093c <USBPD_PE_SendExtendedMessage>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 8008fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d025      	beq.n	800903a <USBPD_DPM_RequestGetBatteryCapability+0x76>
 8008fee:	f107 030c 	add.w	r3, r7, #12
 8008ff2:	4a15      	ldr	r2, [pc, #84]	; (8009048 <USBPD_DPM_RequestGetBatteryCapability+0x84>)
 8008ff4:	2132      	movs	r1, #50	; 0x32
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f011 fae6 	bl	801a5c8 <sniprintf>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009002:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009006:	2b31      	cmp	r3, #49	; 0x31
 8009008:	d80e      	bhi.n	8009028 <USBPD_DPM_RequestGetBatteryCapability+0x64>
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f7fd fc8c 	bl	800692c <strlen>
 8009014:	4602      	mov	r2, r0
 8009016:	f107 030c 	add.w	r3, r7, #12
 800901a:	79f9      	ldrb	r1, [r7, #7]
 800901c:	9200      	str	r2, [sp, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	2006      	movs	r0, #6
 8009022:	f006 fcf7 	bl	800fa14 <USBPD_TRACE_Add>
 8009026:	e008      	b.n	800903a <USBPD_DPM_RequestGetBatteryCapability+0x76>
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	79f9      	ldrb	r1, [r7, #7]
 800902e:	2232      	movs	r2, #50	; 0x32
 8009030:	9200      	str	r2, [sp, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	2006      	movs	r0, #6
 8009036:	f006 fced 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 800903a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800903e:	4618      	mov	r0, r3
 8009040:	3740      	adds	r7, #64	; 0x40
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	0801b274 	.word	0x0801b274

0800904c <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b092      	sub	sp, #72	; 0x48
 8009050:	af02      	add	r7, sp, #8
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 8009058:	79f8      	ldrb	r0, [r7, #7]
 800905a:	2301      	movs	r3, #1
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2204      	movs	r2, #4
 8009062:	2100      	movs	r1, #0
 8009064:	f7f7 fc6a 	bl	800093c <USBPD_PE_SendExtendedMessage>
 8009068:	4603      	mov	r3, r0
 800906a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 800906e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009072:	2b00      	cmp	r3, #0
 8009074:	d025      	beq.n	80090c2 <USBPD_DPM_RequestGetBatteryStatus+0x76>
 8009076:	f107 030c 	add.w	r3, r7, #12
 800907a:	4a15      	ldr	r2, [pc, #84]	; (80090d0 <USBPD_DPM_RequestGetBatteryStatus+0x84>)
 800907c:	2132      	movs	r1, #50	; 0x32
 800907e:	4618      	mov	r0, r3
 8009080:	f011 faa2 	bl	801a5c8 <sniprintf>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800908a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800908e:	2b31      	cmp	r3, #49	; 0x31
 8009090:	d80e      	bhi.n	80090b0 <USBPD_DPM_RequestGetBatteryStatus+0x64>
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	4618      	mov	r0, r3
 8009098:	f7fd fc48 	bl	800692c <strlen>
 800909c:	4602      	mov	r2, r0
 800909e:	f107 030c 	add.w	r3, r7, #12
 80090a2:	79f9      	ldrb	r1, [r7, #7]
 80090a4:	9200      	str	r2, [sp, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	2006      	movs	r0, #6
 80090aa:	f006 fcb3 	bl	800fa14 <USBPD_TRACE_Add>
 80090ae:	e008      	b.n	80090c2 <USBPD_DPM_RequestGetBatteryStatus+0x76>
 80090b0:	f107 030c 	add.w	r3, r7, #12
 80090b4:	79f9      	ldrb	r1, [r7, #7]
 80090b6:	2232      	movs	r2, #50	; 0x32
 80090b8:	9200      	str	r2, [sp, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2006      	movs	r0, #6
 80090be:	f006 fca9 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 80090c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3740      	adds	r7, #64	; 0x40
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0801b2a0 	.word	0x0801b2a0

080090d4 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b092      	sub	sp, #72	; 0x48
 80090d8:	af02      	add	r7, sp, #8
 80090da:	4603      	mov	r3, r0
 80090dc:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 80090de:	2302      	movs	r3, #2
 80090e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 80090e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d025      	beq.n	8009138 <USBPD_DPM_RequestSecurityRequest+0x64>
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	4a14      	ldr	r2, [pc, #80]	; (8009144 <USBPD_DPM_RequestSecurityRequest+0x70>)
 80090f2:	2132      	movs	r1, #50	; 0x32
 80090f4:	4618      	mov	r0, r3
 80090f6:	f011 fa67 	bl	801a5c8 <sniprintf>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009100:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009104:	2b31      	cmp	r3, #49	; 0x31
 8009106:	d80e      	bhi.n	8009126 <USBPD_DPM_RequestSecurityRequest+0x52>
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4618      	mov	r0, r3
 800910e:	f7fd fc0d 	bl	800692c <strlen>
 8009112:	4602      	mov	r2, r0
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	79f9      	ldrb	r1, [r7, #7]
 800911a:	9200      	str	r2, [sp, #0]
 800911c:	2200      	movs	r2, #0
 800911e:	2006      	movs	r0, #6
 8009120:	f006 fc78 	bl	800fa14 <USBPD_TRACE_Add>
 8009124:	e008      	b.n	8009138 <USBPD_DPM_RequestSecurityRequest+0x64>
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	79f9      	ldrb	r1, [r7, #7]
 800912c:	2232      	movs	r2, #50	; 0x32
 800912e:	9200      	str	r2, [sp, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	2006      	movs	r0, #6
 8009134:	f006 fc6e 	bl	800fa14 <USBPD_TRACE_Add>
  return _status;
 8009138:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800913c:	4618      	mov	r0, r3
 800913e:	3740      	adds	r7, #64	; 0x40
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	0801b2d0 	.word	0x0801b2d0

08009148 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO>:
  * @param  PtrRequestedVoltage Pointer on Voltage value that could be reached if SRC PDO is requested (only valid if USBPD_TRUE is returned) in mV
  * @param  PtrRequestedPower   Pointer on Power value that could be reached if SRC PDO is requested (only valid if USBPD_TRUE is returned) in mW
  * @retval USBPD_FALSE of USBPD_TRUE (USBPD_TRUE returned in SRC PDO is considered matching with SNK profile)
  */
uint32_t USBPD_DPM_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum, uint32_t SrcPDO, uint32_t* PtrRequestedVoltage, uint32_t* PtrRequestedPower)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b09e      	sub	sp, #120	; 0x78
 800914c:	af00      	add	r7, sp, #0
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBPD_PDO_TypeDef  srcpdo, snkpdo;
  uint32_t match = USBPD_FALSE;
 8009158:	2300      	movs	r3, #0
 800915a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t maxrequestedpower, currentrequestedpower;
  uint32_t maxrequestedvoltage, currentrequestedvoltage;
  uint32_t snkoppower250mw, srcmaxpower250mw;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)snkpdo_array, &nbsnkpdo);
 800915c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009160:	f107 0214 	add.w	r2, r7, #20
 8009164:	7bf8      	ldrb	r0, [r7, #15]
 8009166:	2101      	movs	r1, #1
 8009168:	f000 fed8 	bl	8009f1c <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2e>
  {
    return(USBPD_FALSE);
 8009172:	2300      	movs	r3, #0
 8009174:	e32f      	b.n	80097d6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x68e>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	66fb      	str	r3, [r7, #108]	; 0x6c
  maxrequestedvoltage  = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
  switch(srcpdo.GenericPDO.PowerObject)
 8009182:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009186:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b03      	cmp	r3, #3
 800918e:	f200 8313 	bhi.w	80097b8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x670>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x50>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091a9 	.word	0x080091a9
 800919c:	080094ab 	.word	0x080094ab
 80091a0:	0800933b 	.word	0x0800933b
 80091a4:	0800960b 	.word	0x0800960b
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 80091b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80091c4:	e0b2      	b.n	800932c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1e4>
      {
        currentrequestedpower = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	66bb      	str	r3, [r7, #104]	; 0x68
        currentrequestedvoltage = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	663b      	str	r3, [r7, #96]	; 0x60

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 80091ce:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	3378      	adds	r3, #120	; 0x78
 80091d6:	443b      	add	r3, r7
 80091d8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 80091de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091e2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	f200 8089 	bhi.w	8009300 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1b8>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xac>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009205 	.word	0x08009205
 80091f8:	080092a3 	.word	0x080092a3
 80091fc:	08009247 	.word	0x08009247
 8009200:	08009301 	.word	0x08009301
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800920a:	b29b      	uxth	r3, r3
 800920c:	87bb      	strh	r3, [r7, #60]	; 0x3c
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 800920e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009214:	b29b      	uxth	r3, r3
 8009216:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

               Requested Voltage : SNK Voltage
               Requested Op Current : SNK Op Current
               Requested Max Current : SNK Op Current
            */
            if (  (snkvoltage50mv == srcvoltage50mv)
 800921a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800921c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800921e:	429a      	cmp	r2, r3
 8009220:	d170      	bne.n	8009304 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1bc>
                &&(snkopcurrent10ma <= srcmaxcurrent10ma))
 8009222:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800922a:	429a      	cmp	r2, r3
 800922c:	d86a      	bhi.n	8009304 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1bc>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 800922e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009230:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	0fda      	lsrs	r2, r3, #31
 800923a:	4413      	add	r3, r2
 800923c:	105b      	asrs	r3, r3, #1
 800923e:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = snkvoltage50mv;
 8009240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009242:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 8009244:	e05e      	b.n	8009304 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1bc>
          }
            /* SNK Variable Supply (non-battery) PDO */
          case USBPD_CORE_PDO_TYPE_VARIABLE:
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 8009246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009248:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800924c:	b29b      	uxth	r3, r3
 800924e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8009258:	b29b      	uxth	r3, r3
 800925a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 800925e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009264:	b29b      	uxth	r3, r3
 8009266:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

               Requested Voltage : SRC Voltage
               Requested Op Current : SNK Op Current
               Requested Max Current : SNK Op Current
            */
            if (  (snkmaxvoltage50mv >= srcvoltage50mv)
 800926a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800926e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009270:	429a      	cmp	r2, r3
 8009272:	d349      	bcc.n	8009308 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c0>
                &&(snkminvoltage50mv <= srcvoltage50mv)
 8009274:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009278:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800927a:	429a      	cmp	r2, r3
 800927c:	d844      	bhi.n	8009308 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c0>
                &&(snkopcurrent10ma  <= srcmaxcurrent10ma))
 800927e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009282:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009286:	429a      	cmp	r2, r3
 8009288:	d83e      	bhi.n	8009308 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c0>
            {
              currentrequestedpower = (srcvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 800928a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800928c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	0fda      	lsrs	r2, r3, #31
 8009296:	4413      	add	r3, r2
 8009298:	105b      	asrs	r3, r3, #1
 800929a:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = srcvoltage50mv;
 800929c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800929e:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 80092a0:	e032      	b.n	8009308 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c0>

            /* SNK Battery Supply PDO */
          case USBPD_CORE_PDO_TYPE_BATTERY:
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 80092a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092a4:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 80092ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 80092ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80092bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	647b      	str	r3, [r7, #68]	; 0x44

               Requested Voltage : SRC Voltage
               Requested Op Current : SNK Op Power/ SRC Voltage
               Requested Max Current : SNK Op Power/ SRC Voltage
            */
            if (  (snkmaxvoltage50mv >= srcvoltage50mv)
 80092c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80092c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d31e      	bcc.n	800930c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c4>
                &&(snkminvoltage50mv <= srcvoltage50mv)
 80092ce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80092d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d819      	bhi.n	800930c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c4>
                &&(snkoppower250mw <= ((srcvoltage50mv * srcmaxcurrent10ma)/500)))  /* to get value in 250 mw units */
 80092d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80092de:	fb02 f303 	mul.w	r3, r2, r3
 80092e2:	4aa6      	ldr	r2, [pc, #664]	; (800957c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x434>)
 80092e4:	fb82 1203 	smull	r1, r2, r2, r3
 80092e8:	1152      	asrs	r2, r2, #5
 80092ea:	17db      	asrs	r3, r3, #31
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d80a      	bhi.n	800930c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c4>
            {
              currentrequestedvoltage = srcvoltage50mv;
 80092f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092f8:	663b      	str	r3, [r7, #96]	; 0x60
              currentrequestedpower = snkoppower250mw;
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            break;
 80092fe:	e005      	b.n	800930c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c4>
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;

          default:
            break;
 8009300:	bf00      	nop
 8009302:	e004      	b.n	800930e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c6>
            break;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c6>
            break;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1c6>
            break;
 800930c:	bf00      	nop
        }

        if (currentrequestedpower > maxrequestedpower)
 800930e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	429a      	cmp	r2, r3
 8009314:	d905      	bls.n	8009322 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1da>
        {
          match = USBPD_TRUE;
 8009316:	2301      	movs	r3, #1
 8009318:	677b      	str	r3, [r7, #116]	; 0x74
          maxrequestedpower   = currentrequestedpower;
 800931a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800931c:	66fb      	str	r3, [r7, #108]	; 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 800931e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009320:	667b      	str	r3, [r7, #100]	; 0x64
      for (i=0; i<nbsnkpdo; i++)
 8009322:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8009326:	3301      	adds	r3, #1
 8009328:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800932c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	429a      	cmp	r2, r3
 8009334:	f4ff af47 	bcc.w	80091c6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x7e>
        }
      }
      break;
 8009338:	e240      	b.n	80097bc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x674>

    /* SRC Variable Supply (non-battery) PDO */
    case USBPD_CORE_PDO_TYPE_VARIABLE:
      srcmaxvoltage50mv = srcpdo.SRCVariablePDO.MaxVoltageIn50mVunits;
 800933a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800933c:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8009340:	b29b      	uxth	r3, r3
 8009342:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      srcminvoltage50mv = srcpdo.SRCVariablePDO.MinVoltageIn50mVunits;
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800934c:	b29b      	uxth	r3, r3
 800934e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      srcmaxcurrent10ma = srcpdo.SRCVariablePDO.MaxCurrentIn10mAunits;
 8009352:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009358:	b29b      	uxth	r3, r3
 800935a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 800935e:	2300      	movs	r3, #0
 8009360:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8009364:	e09a      	b.n	800949c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x354>
      {
        currentrequestedpower = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	66bb      	str	r3, [r7, #104]	; 0x68
        currentrequestedvoltage = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	663b      	str	r3, [r7, #96]	; 0x60

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 800936e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3378      	adds	r3, #120	; 0x78
 8009376:	443b      	add	r3, r7
 8009378:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 800937e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009382:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b03      	cmp	r3, #3
 800938a:	d873      	bhi.n	8009474 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x32c>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x24c>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	08009475 	.word	0x08009475
 8009398:	08009409 	.word	0x08009409
 800939c:	080093a5 	.word	0x080093a5
 80093a0:	08009475 	.word	0x08009475
            /* No match */
            break;

            /* SNK Variable Supply (non-battery) PDO */
          case USBPD_CORE_PDO_TYPE_VARIABLE:
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 80093a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093a6:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 80093bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80093be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

               Requested Voltage : Any value between SRC Min Voltage and SRC Max Voltage
               Requested Op Current : SNK Op Current
               Requested Max Current : SNK Op Current
            */
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 80093c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80093cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d351      	bcc.n	8009478 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x330>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 80093d4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80093d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80093dc:	429a      	cmp	r2, r3
 80093de:	d84b      	bhi.n	8009478 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x330>
                &&(snkopcurrent10ma <= srcmaxcurrent10ma))
 80093e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80093e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d845      	bhi.n	8009478 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x330>
            {
              currentrequestedpower = (srcmaxvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 80093ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80093f0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	0fda      	lsrs	r2, r3, #31
 80093fa:	4413      	add	r3, r2
 80093fc:	105b      	asrs	r3, r3, #1
 80093fe:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 8009400:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009404:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 8009406:	e037      	b.n	8009478 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x330>

            /* SNK Battery Supply PDO */
          case USBPD_CORE_PDO_TYPE_BATTERY:
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 8009408:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800940a:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800940e:	b29b      	uxth	r3, r3
 8009410:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800941a:	b29b      	uxth	r3, r3
 800941c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 8009420:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009426:	b29b      	uxth	r3, r3
 8009428:	647b      	str	r3, [r7, #68]	; 0x44
               Requested Voltage : Any value between SRC Min Voltage and SRC Max Voltage, that fulfill
                                   SNK Op power <= Voltage * SRC Max Current
               Requested Op Current : SNK Op Power/ SRC Voltage
               Requested Max Current : SNK Op Power/ SRC Voltage
            */
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 800942a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800942e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009432:	429a      	cmp	r2, r3
 8009434:	d322      	bcc.n	800947c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x334>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 8009436:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800943a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800943e:	429a      	cmp	r2, r3
 8009440:	d81c      	bhi.n	800947c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x334>
                &&(snkoppower250mw <= ((srcmaxvoltage50mv * srcmaxcurrent10ma)/500)))  /* to get value in 250 mw units */
 8009442:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009446:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800944a:	fb02 f303 	mul.w	r3, r2, r3
 800944e:	4a4b      	ldr	r2, [pc, #300]	; (800957c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x434>)
 8009450:	fb82 1203 	smull	r1, r2, r2, r3
 8009454:	1152      	asrs	r2, r2, #5
 8009456:	17db      	asrs	r3, r3, #31
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	461a      	mov	r2, r3
 800945c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945e:	4293      	cmp	r3, r2
 8009460:	d80c      	bhi.n	800947c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x334>
            {
              currentrequestedpower   = snkoppower250mw * 250; /* to get value in mw */
 8009462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009464:	22fa      	movs	r2, #250	; 0xfa
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 800946c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009470:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 8009472:	e003      	b.n	800947c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x334>
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;

          default:
            break;
 8009474:	bf00      	nop
 8009476:	e002      	b.n	800947e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x336>
            break;
 8009478:	bf00      	nop
 800947a:	e000      	b.n	800947e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x336>
            break;
 800947c:	bf00      	nop
        }

        if (currentrequestedpower > maxrequestedpower)
 800947e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009482:	429a      	cmp	r2, r3
 8009484:	d905      	bls.n	8009492 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x34a>
        {
          match = USBPD_TRUE;
 8009486:	2301      	movs	r3, #1
 8009488:	677b      	str	r3, [r7, #116]	; 0x74
          maxrequestedpower   = currentrequestedpower;
 800948a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800948c:	66fb      	str	r3, [r7, #108]	; 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 800948e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009490:	667b      	str	r3, [r7, #100]	; 0x64
      for (i=0; i<nbsnkpdo; i++)
 8009492:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8009496:	3301      	adds	r3, #1
 8009498:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800949c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	429a      	cmp	r2, r3
 80094a4:	f4ff af5f 	bcc.w	8009366 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x21e>
        }
      }
      break;
 80094a8:	e188      	b.n	80097bc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x674>

    /* SRC Battery Supply PDO */
    case USBPD_CORE_PDO_TYPE_BATTERY:
      srcmaxvoltage50mv = srcpdo.SRCBatteryPDO.MaxVoltageIn50mVunits;
 80094aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094ac:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      srcminvoltage50mv = srcpdo.SRCBatteryPDO.MinVoltageIn50mVunits;
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      srcmaxpower250mw  = srcpdo.SRCBatteryPDO.MaxAllowablePowerIn250mWunits;
 80094c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80094d2:	e093      	b.n	80095fc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x4b4>
      {
        currentrequestedpower = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	66bb      	str	r3, [r7, #104]	; 0x68
        currentrequestedvoltage = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	663b      	str	r3, [r7, #96]	; 0x60

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 80094dc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	3378      	adds	r3, #120	; 0x78
 80094e4:	443b      	add	r3, r7
 80094e6:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80094ea:	637b      	str	r3, [r7, #52]	; 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 80094ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094f0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d86c      	bhi.n	80095d4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x48c>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3b8>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	080095d5 	.word	0x080095d5
 8009504:	08009581 	.word	0x08009581
 8009508:	08009511 	.word	0x08009511
 800950c:	080095d5 	.word	0x080095d5
            /* No match */
            break;

            /* SNK Variable Supply (non-battery) PDO */
          case USBPD_CORE_PDO_TYPE_VARIABLE:
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 8009510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009512:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8009516:	b29b      	uxth	r3, r3
 8009518:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8009522:	b29b      	uxth	r3, r3
 8009524:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 8009528:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800952a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800952e:	b29b      	uxth	r3, r3
 8009530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

               Requested Voltage : Any value between SRC Min Voltage and SRC Max Voltage : SRC Max Voltage
               Requested Op Current : SNK Op Current
               Requested Max Current : SNK Op Current
            */
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 8009534:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009538:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800953c:	429a      	cmp	r2, r3
 800953e:	d34b      	bcc.n	80095d8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x490>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 8009540:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009544:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009548:	429a      	cmp	r2, r3
 800954a:	d845      	bhi.n	80095d8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x490>
                &&(srcmaxvoltage50mv * snkopcurrent10ma <= srcmaxpower250mw))
 800954c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009550:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009554:	fb02 f303 	mul.w	r3, r2, r3
 8009558:	461a      	mov	r2, r3
 800955a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800955c:	4293      	cmp	r3, r2
 800955e:	d33b      	bcc.n	80095d8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x490>
            {
              currentrequestedpower = (srcmaxvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 8009560:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009564:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8009568:	fb02 f303 	mul.w	r3, r2, r3
 800956c:	0fda      	lsrs	r2, r3, #31
 800956e:	4413      	add	r3, r2
 8009570:	105b      	asrs	r3, r3, #1
 8009572:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 8009574:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009578:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 800957a:	e02d      	b.n	80095d8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x490>
 800957c:	10624dd3 	.word	0x10624dd3

            /* SNK Battery Supply PDO */
          case USBPD_CORE_PDO_TYPE_BATTERY:
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 8009580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009582:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8009586:	b29b      	uxth	r3, r3
 8009588:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 800958c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800958e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8009592:	b29b      	uxth	r3, r3
 8009594:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 8009598:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800959a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800959e:	b29b      	uxth	r3, r3
 80095a0:	647b      	str	r3, [r7, #68]	; 0x44
               Requested Voltage : Any value between SRC Min Voltage and SRC Max Voltage, that fulfill
                                   SNK Op power <= Voltage * SRC Max Current
               Requested Op Current : SNK Op Power/ SRC Voltage
               Requested Max Current : SNK Op Power/ SRC Voltage
            */
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 80095a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80095a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d316      	bcc.n	80095dc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x494>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 80095ae:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80095b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d810      	bhi.n	80095dc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x494>
                &&(snkoppower250mw <= srcmaxpower250mw))
 80095ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095be:	429a      	cmp	r2, r3
 80095c0:	d80c      	bhi.n	80095dc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x494>
            {
              currentrequestedpower   = snkoppower250mw * 250; /* to get value in mw */
 80095c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c4:	22fa      	movs	r2, #250	; 0xfa
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	66bb      	str	r3, [r7, #104]	; 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 80095cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095d0:	663b      	str	r3, [r7, #96]	; 0x60
            }
            break;
 80095d2:	e003      	b.n	80095dc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x494>
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;

          default:
            break;
 80095d4:	bf00      	nop
 80095d6:	e002      	b.n	80095de <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x496>
            break;
 80095d8:	bf00      	nop
 80095da:	e000      	b.n	80095de <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x496>
            break;
 80095dc:	bf00      	nop
        }

        if (currentrequestedpower > maxrequestedpower)
 80095de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d905      	bls.n	80095f2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x4aa>
        {
          match = USBPD_TRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	677b      	str	r3, [r7, #116]	; 0x74
          maxrequestedpower   = currentrequestedpower;
 80095ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095ec:	66fb      	str	r3, [r7, #108]	; 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 80095ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f0:	667b      	str	r3, [r7, #100]	; 0x64
      for (i=0; i<nbsnkpdo; i++)
 80095f2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80095f6:	3301      	adds	r3, #1
 80095f8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80095fc:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	429a      	cmp	r2, r3
 8009604:	f4ff af66 	bcc.w	80094d4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x38c>
        }
      }
      break;
 8009608:	e0d8      	b.n	80097bc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x674>

    /* Augmented Power Data Object (APDO) */
    case USBPD_CORE_PDO_TYPE_APDO:
      {
        uint16_t srcmaxvoltage100mv, srcmaxcurrent50ma;
        srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 800960a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800960c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8009616:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800961a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        /* Loop through SNK PDO list */
        for (i=0; i<nbsnkpdo; i++)
 8009624:	2300      	movs	r3, #0
 8009626:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800962a:	e0be      	b.n	80097aa <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x662>
        {
          currentrequestedpower = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	66bb      	str	r3, [r7, #104]	; 0x68
          currentrequestedvoltage = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	663b      	str	r3, [r7, #96]	; 0x60

          /* Retrieve SNK PDO value according to its type */
          snkpdo.d32 = snkpdo_array[i];
 8009634:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	3378      	adds	r3, #120	; 0x78
 800963c:	443b      	add	r3, r7
 800963e:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8009642:	637b      	str	r3, [r7, #52]	; 0x34
          switch(snkpdo.GenericPDO.PowerObject)
 8009644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009648:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	dc01      	bgt.n	8009656 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x50e>
 8009652:	2b00      	cmp	r3, #0
          {
            case USBPD_CORE_PDO_TYPE_FIXED:
            case USBPD_CORE_PDO_TYPE_VARIABLE:
            case USBPD_CORE_PDO_TYPE_BATTERY:
              /* No match */
              break;
 8009654:	e09a      	b.n	800978c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x644>
 8009656:	2b03      	cmp	r3, #3
 8009658:	f040 8095 	bne.w	8009786 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x63e>
            /* SNK Augmented Power Data Object (APDO) */
            case USBPD_CORE_PDO_TYPE_APDO:
              {
                uint16_t snkmaxvoltage100mv, snkminvoltage100mv, snkmaxcurrent50ma;

                snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 800965c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009660:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8009664:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009666:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8009670:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009674:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

                /* Match if voltage matches with the APDO voltage range */
                if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage))
 800967e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009682:	461a      	mov	r2, r3
 8009684:	0092      	lsls	r2, r2, #2
 8009686:	4413      	add	r3, r2
 8009688:	461a      	mov	r2, r3
 800968a:	0091      	lsls	r1, r2, #2
 800968c:	461a      	mov	r2, r3
 800968e:	460b      	mov	r3, r1
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	b29b      	uxth	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d874      	bhi.n	800978a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x642>
                 && ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80096a8:	4619      	mov	r1, r3
 80096aa:	0089      	lsls	r1, r1, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	4619      	mov	r1, r3
 80096b0:	0088      	lsls	r0, r1, #2
 80096b2:	4619      	mov	r1, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	440b      	add	r3, r1
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	429a      	cmp	r2, r3
 80096be:	d864      	bhi.n	800978a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x642>
                 && (snkmaxcurrent50ma <= srcmaxcurrent50ma))
 80096c0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80096c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d85e      	bhi.n	800978a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x642>
                {
                  if (0 != *PtrRequestedPower)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01c      	beq.n	800970e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5c6>
                  {
                    currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma)) / 1000; /* to get value in mw */
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80096dc:	4619      	mov	r1, r3
 80096de:	0089      	lsls	r1, r1, #2
 80096e0:	440b      	add	r3, r1
 80096e2:	4619      	mov	r1, r3
 80096e4:	0088      	lsls	r0, r1, #2
 80096e6:	4619      	mov	r1, r3
 80096e8:	4603      	mov	r3, r0
 80096ea:	440b      	add	r3, r1
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	4a3a      	ldr	r2, [pc, #232]	; (80097e0 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x698>)
 80096f6:	fba2 2303 	umull	r2, r3, r2, r3
 80096fa:	099b      	lsrs	r3, r3, #6
 80096fc:	66bb      	str	r3, [r7, #104]	; 0x68
                    currentrequestedvoltage = (*PtrRequestedVoltage / 50);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a38      	ldr	r2, [pc, #224]	; (80097e4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x69c>)
 8009704:	fba2 2303 	umull	r2, r3, r2, r3
 8009708:	091b      	lsrs	r3, r3, #4
 800970a:	663b      	str	r3, [r7, #96]	; 0x60
                    currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma)) / 1000; /* to get value in mw */
                    currentrequestedvoltage = (*PtrRequestedVoltage / 50);
                  }
                }
              }
              break;
 800970c:	e03d      	b.n	800978a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x642>
                    *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv), PWR_DECODE_100MV(snkmaxvoltage100mv));
 800970e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009712:	461a      	mov	r2, r3
 8009714:	0092      	lsls	r2, r2, #2
 8009716:	4413      	add	r3, r2
 8009718:	461a      	mov	r2, r3
 800971a:	0091      	lsls	r1, r2, #2
 800971c:	461a      	mov	r2, r3
 800971e:	460b      	mov	r3, r1
 8009720:	4413      	add	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	b29a      	uxth	r2, r3
 8009726:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800972a:	4619      	mov	r1, r3
 800972c:	0089      	lsls	r1, r1, #2
 800972e:	440b      	add	r3, r1
 8009730:	4619      	mov	r1, r3
 8009732:	0088      	lsls	r0, r1, #2
 8009734:	4619      	mov	r1, r3
 8009736:	4603      	mov	r3, r0
 8009738:	440b      	add	r3, r1
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	b29b      	uxth	r3, r3
 800973e:	4293      	cmp	r3, r2
 8009740:	bf28      	it	cs
 8009742:	4613      	movcs	r3, r2
 8009744:	b29b      	uxth	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	601a      	str	r2, [r3, #0]
                    currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma)) / 1000; /* to get value in mw */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009754:	4619      	mov	r1, r3
 8009756:	0089      	lsls	r1, r1, #2
 8009758:	440b      	add	r3, r1
 800975a:	4619      	mov	r1, r3
 800975c:	0088      	lsls	r0, r1, #2
 800975e:	4619      	mov	r1, r3
 8009760:	4603      	mov	r3, r0
 8009762:	440b      	add	r3, r1
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	b29b      	uxth	r3, r3
 8009768:	fb02 f303 	mul.w	r3, r2, r3
 800976c:	4a1c      	ldr	r2, [pc, #112]	; (80097e0 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x698>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	099b      	lsrs	r3, r3, #6
 8009774:	66bb      	str	r3, [r7, #104]	; 0x68
                    currentrequestedvoltage = (*PtrRequestedVoltage / 50);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1a      	ldr	r2, [pc, #104]	; (80097e4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x69c>)
 800977c:	fba2 2303 	umull	r2, r3, r2, r3
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	663b      	str	r3, [r7, #96]	; 0x60
              break;
 8009784:	e001      	b.n	800978a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x642>

            default:
              break;
 8009786:	bf00      	nop
 8009788:	e000      	b.n	800978c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x644>
              break;
 800978a:	bf00      	nop
          }

          if (currentrequestedpower > maxrequestedpower)
 800978c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800978e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009790:	429a      	cmp	r2, r3
 8009792:	d905      	bls.n	80097a0 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x658>
          {
            match = USBPD_TRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	677b      	str	r3, [r7, #116]	; 0x74
            maxrequestedpower   = currentrequestedpower;
 8009798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800979a:	66fb      	str	r3, [r7, #108]	; 0x6c
            maxrequestedvoltage = currentrequestedvoltage;
 800979c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800979e:	667b      	str	r3, [r7, #100]	; 0x64
        for (i=0; i<nbsnkpdo; i++)
 80097a0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80097a4:	3301      	adds	r3, #1
 80097a6:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80097aa:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	429a      	cmp	r2, r3
 80097b2:	f4ff af3b 	bcc.w	800962c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x4e4>
          }
        }
      }
      break;
 80097b6:	e001      	b.n	80097bc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x674>

    default:
      return(USBPD_FALSE);
 80097b8:	2300      	movs	r3, #0
 80097ba:	e00c      	b.n	80097d6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x68e>
  }

  if (maxrequestedpower > 0)
 80097bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x68c>
  {
    *PtrRequestedPower   = maxrequestedpower;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097c6:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50; /* value in mV */
 80097c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ca:	2232      	movs	r2, #50	; 0x32
 80097cc:	fb03 f202 	mul.w	r2, r3, r2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
  }
  return(match);
 80097d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3778      	adds	r7, #120	; 0x78
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	10624dd3 	.word	0x10624dd3
 80097e4:	51eb851f 	.word	0x51eb851f

080097e8 <DPM_FindVoltageIndex>:
  * @param  PortNum Port number
  * @param  PtrRequestPowerDetails  Sink requested power details structure pointer
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
static uint32_t DPM_FindVoltageIndex(uint32_t PortNum, USBPD_DPM_SNKPowerRequestDetails_TypeDef* PtrRequestPowerDetails)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	; 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t *ptpdoarray;
  USBPD_PDO_TypeDef  pdo;
  uint32_t voltage, reqvoltage, nbpdo, allowablepower, maxpower;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND, temp_index;
 80097f2:	23ff      	movs	r3, #255	; 0xff
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2274      	movs	r2, #116	; 0x74
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	4a3a      	ldr	r2, [pc, #232]	; (80098e8 <DPM_FindVoltageIndex+0x100>)
 8009800:	4413      	add	r3, r2
 8009802:	61fb      	str	r3, [r7, #28]

  allowablepower = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	60bb      	str	r3, [r7, #8]
  maxpower       = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
  reqvoltage     = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
  voltage        = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 8009814:	4935      	ldr	r1, [pc, #212]	; (80098ec <DPM_FindVoltageIndex+0x104>)
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	331c      	adds	r3, #28
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	61bb      	str	r3, [r7, #24]
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	4413      	add	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	4a2e      	ldr	r2, [pc, #184]	; (80098ec <DPM_FindVoltageIndex+0x104>)
 8009834:	4413      	add	r3, r2
 8009836:	617b      	str	r3, [r7, #20]

  /* search the better PDO in the list of source PDOs */
  for(temp_index = 0; temp_index < nbpdo; temp_index++)
 8009838:	2300      	movs	r3, #0
 800983a:	623b      	str	r3, [r7, #32]
 800983c:	e02f      	b.n	800989e <DPM_FindVoltageIndex+0xb6>
  {
    pdo.d32 = ptpdoarray[temp_index];
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4413      	add	r3, r2
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	613b      	str	r3, [r7, #16]
    /* check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	60bb      	str	r3, [r7, #8]
    if (USBPD_TRUE == USBPD_DPM_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	b2d8      	uxtb	r0, r3
 8009852:	6939      	ldr	r1, [r7, #16]
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	f107 020c 	add.w	r2, r7, #12
 800985c:	f7ff fc74 	bl	8009148 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO>
 8009860:	4603      	mov	r3, r0
 8009862:	2b01      	cmp	r3, #1
 8009864:	d118      	bne.n	8009898 <DPM_FindVoltageIndex+0xb0>
    {
      /* choose the "better" PDO, in this case only the distance in absolute value from the target voltage */
      if (allowablepower >= maxpower)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986a:	429a      	cmp	r2, r3
 800986c:	d814      	bhi.n	8009898 <DPM_FindVoltageIndex+0xb0>
      {
        /* Add additional check for compatibility of this SRC PDO with port characteristics (defined in DPM_USER_Settings) */
        if (  (voltage >= puser->DPM_SNKRequestedPower.MinOperatingVoltageInmVunits)
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	691a      	ldr	r2, [r3, #16]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d80f      	bhi.n	8009898 <DPM_FindVoltageIndex+0xb0>
            &&(voltage <= puser->DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits)
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	429a      	cmp	r2, r3
 8009880:	d30a      	bcc.n	8009898 <DPM_FindVoltageIndex+0xb0>
              &&(allowablepower <= puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits))
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	d305      	bcc.n	8009898 <DPM_FindVoltageIndex+0xb0>
        {
          /* consider the current PDO the better one until now */
          curr_index = temp_index;
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
          maxpower   = allowablepower;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	62bb      	str	r3, [r7, #40]	; 0x28
          reqvoltage = voltage;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(temp_index = 0; temp_index < nbpdo; temp_index++)
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	3301      	adds	r3, #1
 800989c:	623b      	str	r3, [r7, #32]
 800989e:	6a3a      	ldr	r2, [r7, #32]
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d3cb      	bcc.n	800983e <DPM_FindVoltageIndex+0x56>
        }
      }
    }
  }

  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	2bff      	cmp	r3, #255	; 0xff
 80098aa:	d017      	beq.n	80098dc <DPM_FindVoltageIndex+0xf4>
  {
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000 * maxpower)/voltage;
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098ba:	fb03 f202 	mul.w	r2, r3, r2
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	699a      	ldr	r2, [r3, #24]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = maxpower;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d4:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098da:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3730      	adds	r7, #48	; 0x30
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000018 	.word	0x20000018
 80098ec:	2000022c 	.word	0x2000022c

080098f0 <DPM_SNK_BuildRDOfromSelectedPDO>:
  * @retval None
  */
void DPM_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum, uint8_t IndexSrcPDO,
                                     USBPD_DPM_SNKPowerRequestDetails_TypeDef *PtrRequestPowerDetails,
                                     USBPD_SNKRDO_TypeDef* Rdo, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b096      	sub	sp, #88	; 0x58
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	60ba      	str	r2, [r7, #8]
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
 80098fe:	460b      	mov	r3, r1
 8009900:	73bb      	strb	r3, [r7, #14]
  uint32_t mv = 0, mw = 0, ma = 0, size;
 8009902:	2300      	movs	r3, #0
 8009904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009906:	2300      	movs	r3, #0
 8009908:	64bb      	str	r3, [r7, #72]	; 0x48
 800990a:	2300      	movs	r3, #0
 800990c:	647b      	str	r3, [r7, #68]	; 0x44
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 800990e:	7bfa      	ldrb	r2, [r7, #15]
 8009910:	4613      	mov	r3, r2
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	4413      	add	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4a91      	ldr	r2, [pc, #580]	; (8009b60 <DPM_SNK_BuildRDOfromSelectedPDO+0x270>)
 800991a:	4413      	add	r3, r2
 800991c:	643b      	str	r3, [r7, #64]	; 0x40
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2274      	movs	r2, #116	; 0x74
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	4a8f      	ldr	r2, [pc, #572]	; (8009b64 <DPM_SNK_BuildRDOfromSelectedPDO+0x274>)
 8009928:	4413      	add	r3, r2
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)&snkpdolist[0], &size);
 8009930:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009934:	f107 0214 	add.w	r2, r7, #20
 8009938:	7bf8      	ldrb	r0, [r7, #15]
 800993a:	2101      	movs	r1, #1
 800993c:	f000 faee 	bl	8009f1c <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	613b      	str	r3, [r7, #16]

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8009944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 800994a:	7cfb      	ldrb	r3, [r7, #19]
 800994c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009956:	f362 0341 	bfi	r3, r2, #1, #1
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4a81      	ldr	r2, [pc, #516]	; (8009b68 <DPM_SNK_BuildRDOfromSelectedPDO+0x278>)
 8009962:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009966:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b01      	cmp	r3, #1
 800996e:	d928      	bls.n	80099c2 <DPM_SNK_BuildRDOfromSelectedPDO+0xd2>
  {
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 8009970:	7bfa      	ldrb	r2, [r7, #15]
 8009972:	497e      	ldr	r1, [pc, #504]	; (8009b6c <DPM_SNK_BuildRDOfromSelectedPDO+0x27c>)
 8009974:	4613      	mov	r3, r2
 8009976:	005b      	lsls	r3, r3, #1
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	3308      	adds	r3, #8
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800998c:	f362 13c7 	bfi	r3, r2, #7, #1
 8009990:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4a74      	ldr	r2, [pc, #464]	; (8009b68 <DPM_SNK_BuildRDOfromSelectedPDO+0x278>)
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	78da      	ldrb	r2, [r3, #3]
 800999e:	f36f 0241 	bfc	r2, #1, #1
 80099a2:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 80099a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d007      	beq.n	80099c2 <DPM_SNK_BuildRDOfromSelectedPDO+0xd2>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4a6c      	ldr	r2, [pc, #432]	; (8009b68 <DPM_SNK_BuildRDOfromSelectedPDO+0x278>)
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	78da      	ldrb	r2, [r3, #3]
 80099bc:	f042 0202 	orr.w	r2, r2, #2
 80099c0:	70da      	strb	r2, [r3, #3]
    }
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <DPM_SNK_BuildRDOfromSelectedPDO+0xe2>
 80099c8:	7bba      	ldrb	r2, [r7, #14]
 80099ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d342      	bcc.n	8009a58 <DPM_SNK_BuildRDOfromSelectedPDO+0x168>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)"DPM_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection",
 80099d2:	7bf9      	ldrb	r1, [r7, #15]
 80099d4:	2339      	movs	r3, #57	; 0x39
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4b65      	ldr	r3, [pc, #404]	; (8009b70 <DPM_SNK_BuildRDOfromSelectedPDO+0x280>)
 80099da:	2200      	movs	r2, #0
 80099dc:	2006      	movs	r0, #6
 80099de:	f006 f819 	bl	800fa14 <USBPD_TRACE_Add>
                    sizeof("DPM_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection"));
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1;
 80099e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099e6:	2201      	movs	r2, #1
 80099e8:	f362 1307 	bfi	r3, r2, #4, #4
 80099ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 80099f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80099f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	f362 2393 	bfi	r3, r2, #10, #10
 80099fe:	633b      	str	r3, [r7, #48]	; 0x30
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 8009a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4a5b      	ldr	r2, [pc, #364]	; (8009b74 <DPM_SNK_BuildRDOfromSelectedPDO+0x284>)
 8009a06:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0a:	08db      	lsrs	r3, r3, #3
 8009a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009a14:	f362 0309 	bfi	r3, r2, #0, #10
 8009a18:	863b      	strh	r3, [r7, #48]	; 0x30
    rdo.FixedVariableRDO.CapabilityMismatch           = 1;
 8009a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a1e:	f043 0304 	orr.w	r3, r3, #4
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8009a26:	7cfb      	ldrb	r3, [r7, #19]
 8009a28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a32:	f362 0341 	bfi	r3, r2, #1, #1
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8009a3a:	7bfa      	ldrb	r2, [r7, #15]
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	6859      	ldr	r1, [r3, #4]
 8009a40:	4847      	ldr	r0, [pc, #284]	; (8009b60 <DPM_SNK_BuildRDOfromSelectedPDO+0x270>)
 8009a42:	4613      	mov	r3, r2
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	4413      	add	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	4403      	add	r3, r0
 8009a4c:	3348      	adds	r3, #72	; 0x48
 8009a4e:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 8009a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a54:	655a      	str	r2, [r3, #84]	; 0x54
 8009a56:	e128      	b.n	8009caa <DPM_SNK_BuildRDOfromSelectedPDO+0x3ba>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1;
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a68:	f362 1307 	bfi	r3, r2, #4, #4
 8009a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  rdo.GenericRDO.NoUSBSuspend                 = 1;
 8009a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a74:	f043 0301 	orr.w	r3, r3, #1
 8009a78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 8009a7c:	7bba      	ldrb	r2, [r7, #14]
 8009a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 8009a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a94:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	647b      	str	r3, [r7, #68]	; 0x44

  switch(pdo.GenericPDO.PowerObject)
 8009aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	f200 80e5 	bhi.w	8009c7c <DPM_SNK_BuildRDOfromSelectedPDO+0x38c>
 8009ab2:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <DPM_SNK_BuildRDOfromSelectedPDO+0x1c8>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009b7d 	.word	0x08009b7d
 8009ac0:	08009ac9 	.word	0x08009ac9
 8009ac4:	08009c1b 	.word	0x08009c1b
  {
  case USBPD_CORE_PDO_TYPE_FIXED:
  case USBPD_CORE_PDO_TYPE_VARIABLE:
    {
      /* USBPD_DPM_EvaluateCapabilities: Mismatch, less power offered than the operating power */
      ma = USBPD_MIN(ma, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	bf28      	it	cs
 8009ad2:	4613      	movcs	r3, r2
 8009ad4:	647b      	str	r3, [r7, #68]	; 0x44
      mw = (ma * mv)/1000; /* mW */
 8009ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <DPM_SNK_BuildRDOfromSelectedPDO+0x288>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	099b      	lsrs	r3, r3, #6
 8009ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 8009ae8:	7bfa      	ldrb	r2, [r7, #15]
 8009aea:	491d      	ldr	r1, [pc, #116]	; (8009b60 <DPM_SNK_BuildRDOfromSelectedPDO+0x270>)
 8009aec:	4613      	mov	r3, r2
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	4413      	add	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	440b      	add	r3, r1
 8009af6:	3348      	adds	r3, #72	; 0x48
 8009af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009afa:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10;
 8009afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009afe:	4a1d      	ldr	r2, [pc, #116]	; (8009b74 <DPM_SNK_BuildRDOfromSelectedPDO+0x284>)
 8009b00:	fba2 2303 	umull	r2, r3, r2, r3
 8009b04:	08db      	lsrs	r3, r3, #3
 8009b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	f362 2393 	bfi	r3, r2, #10, #10
 8009b12:	633b      	str	r3, [r7, #48]	; 0x30
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10;
 8009b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b16:	4a17      	ldr	r2, [pc, #92]	; (8009b74 <DPM_SNK_BuildRDOfromSelectedPDO+0x284>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	08db      	lsrs	r3, r3, #3
 8009b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b26:	f362 0309 	bfi	r3, r2, #0, #10
 8009b2a:	863b      	strh	r3, [r7, #48]	; 0x30
      if(mw < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b32:	429a      	cmp	r2, r3
 8009b34:	f080 80a4 	bcs.w	8009c80 <DPM_SNK_BuildRDOfromSelectedPDO+0x390>
      {
        /* USBPD_DPM_EvaluateCapabilities: Mismatch, less power offered than the operating power */
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 8009b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	; (8009b74 <DPM_SNK_BuildRDOfromSelectedPDO+0x284>)
 8009b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b42:	08db      	lsrs	r3, r3, #3
 8009b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009b4c:	f362 0309 	bfi	r3, r2, #0, #10
 8009b50:	863b      	strh	r3, [r7, #48]	; 0x30
        rdo.FixedVariableRDO.CapabilityMismatch = 1;
 8009b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b56:	f043 0304 	orr.w	r3, r3, #4
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
    break;
 8009b5e:	e08f      	b.n	8009c80 <DPM_SNK_BuildRDOfromSelectedPDO+0x390>
 8009b60:	2000022c 	.word	0x2000022c
 8009b64:	20000018 	.word	0x20000018
 8009b68:	20000228 	.word	0x20000228
 8009b6c:	20000004 	.word	0x20000004
 8009b70:	0801b2fc 	.word	0x0801b2fc
 8009b74:	cccccccd 	.word	0xcccccccd
 8009b78:	10624dd3 	.word	0x10624dd3

  case USBPD_CORE_PDO_TYPE_BATTERY:
    {
      /* USBPD_DPM_EvaluateCapabilities: Battery Request Data Object */
      mw = USBPD_MIN(PtrRequestPowerDetails->OperatingPowerInmWunits, puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits); /* mW */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bf28      	it	cs
 8009b88:	4613      	movcs	r3, r2
 8009b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      ma = (1000 * mw) / mv; /* mA */
 8009b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b92:	fb03 f202 	mul.w	r2, r3, r2
 8009b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9c:	647b      	str	r3, [r7, #68]	; 0x44
      ma = USBPD_MIN(ma, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	647b      	str	r3, [r7, #68]	; 0x44
      DPM_Ports[PortNum].DPM_RequestedCurrent       = ma;
 8009bac:	7bfa      	ldrb	r2, [r7, #15]
 8009bae:	4940      	ldr	r1, [pc, #256]	; (8009cb0 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	4413      	add	r3, r2
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	440b      	add	r3, r1
 8009bba:	3348      	adds	r3, #72	; 0x48
 8009bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bbe:	601a      	str	r2, [r3, #0]
      mw = (ma * mv)/1000; /* mW */
 8009bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bc4:	fb02 f303 	mul.w	r3, r2, r3
 8009bc8:	4a3a      	ldr	r2, [pc, #232]	; (8009cb4 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 8009bca:	fba2 2303 	umull	r2, r3, r2, r3
 8009bce:	099b      	lsrs	r3, r3, #6
 8009bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      rdo.BatteryRDO.OperatingPowerIn250mWunits     = mw / 250;
 8009bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd4:	4a37      	ldr	r2, [pc, #220]	; (8009cb4 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	091b      	lsrs	r3, r3, #4
 8009bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	f362 2393 	bfi	r3, r2, #10, #10
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30
      rdo.BatteryRDO.MaxOperatingPowerIn250mWunits  = mw / 250;
 8009bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bec:	4a31      	ldr	r2, [pc, #196]	; (8009cb4 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	091b      	lsrs	r3, r3, #4
 8009bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009bfc:	f362 0309 	bfi	r3, r2, #0, #10
 8009c00:	863b      	strh	r3, [r7, #48]	; 0x30
      if(mw < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 8009c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d23b      	bcs.n	8009c84 <DPM_SNK_BuildRDOfromSelectedPDO+0x394>
      {
        /* Mismatch, less power offered than the operating power */
        rdo.BatteryRDO.CapabilityMismatch = 1;
 8009c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
    break;
 8009c18:	e034      	b.n	8009c84 <DPM_SNK_BuildRDOfromSelectedPDO+0x394>

  case USBPD_CORE_PDO_TYPE_APDO:
    {
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 8009c1a:	7bfa      	ldrb	r2, [r7, #15]
 8009c1c:	4924      	ldr	r1, [pc, #144]	; (8009cb0 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 8009c1e:	4613      	mov	r3, r2
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	4413      	add	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	440b      	add	r3, r1
 8009c28:	3348      	adds	r3, #72	; 0x48
 8009c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c2c:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1;
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	3301      	adds	r3, #1
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c3e:	f362 1307 	bfi	r3, r2, #4, #4
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50;
 8009c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c48:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 8009c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4e:	091b      	lsrs	r3, r3, #4
 8009c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009c5a:	f362 0306 	bfi	r3, r2, #0, #7
 8009c5e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20;
 8009c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c64:	4a15      	ldr	r2, [pc, #84]	; (8009cbc <DPM_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	091b      	lsrs	r3, r3, #4
 8009c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	f362 2353 	bfi	r3, r2, #9, #11
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30
    }
    break;
 8009c7a:	e004      	b.n	8009c86 <DPM_SNK_BuildRDOfromSelectedPDO+0x396>
  default:
    break;
 8009c7c:	bf00      	nop
 8009c7e:	e002      	b.n	8009c86 <DPM_SNK_BuildRDOfromSelectedPDO+0x396>
    break;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <DPM_SNK_BuildRDOfromSelectedPDO+0x396>
    break;
 8009c84:	bf00      	nop
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 8009c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 8009c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 8009c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 8009ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ca8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009caa:	3750      	adds	r7, #80	; 0x50
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	2000022c 	.word	0x2000022c
 8009cb4:	10624dd3 	.word	0x10624dd3
 8009cb8:	51eb851f 	.word	0x51eb851f
 8009cbc:	cccccccd 	.word	0xcccccccd

08009cc0 <CheckDPMTimers>:

#if defined(_RTOS)
static uint32_t CheckDPMTimers(void)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
  uint32_t _timing = osWaitForever;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	607b      	str	r3, [r7, #4]
  return _timing;
 8009ccc:	687b      	ldr	r3, [r7, #4]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <DPM_TurnOffPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_OK, USBPD_ERROR
  */
static USBPD_StatusTypeDef DPM_TurnOffPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	6039      	str	r1, [r7, #0]
 8009ce4:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef status;

  status = USBPD_PWR_IF_VBUSDisable(PortNum);
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f903 	bl	8009ef4 <USBPD_PWR_IF_VBUSDisable>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  return status;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <DPM_TurnOnPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
static USBPD_StatusTypeDef DPM_TurnOnPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef status;

  /* Enable the output */
  status = USBPD_PWR_IF_VBUSEnable(PortNum);
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f8de 	bl	8009ecc <USBPD_PWR_IF_VBUSEnable>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
  if (USBPD_PORTPOWERROLE_SRC == Role)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d102      	bne.n	8009d20 <DPM_TurnOnPower+0x24>
  {
    /* Enable the output */
    USBPD_DPM_WaitForTime(20);
 8009d1a:	2014      	movs	r0, #20
 8009d1c:	f7fd fe1e 	bl	800795c <USBPD_DPM_WaitForTime>
  }
  else
  {
    /* stop current sink */
  }
  return status;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <DPM_AssertRp>:
  * @brief  Assert Rp resistor.
  * @param  PortNum The current port number
  * @retval None
  */
static void DPM_AssertRp(uint8_t PortNum)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	4603      	mov	r3, r0
 8009d32:	71fb      	strb	r3, [r7, #7]
  USBPD_CAD_AssertRp(PortNum);
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f6 fb29 	bl	800038e <USBPD_CAD_AssertRp>
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <DPM_AssertRd>:
  * @brief  Assert Rd resistor.
  * @param  PortNum The current port number
  * @retval None
  */
static void DPM_AssertRd(uint8_t PortNum)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	71fb      	strb	r3, [r7, #7]
  USBPD_CAD_AssertRd(PortNum);
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f6 fb13 	bl	800037c <USBPD_CAD_AssertRd>
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <USBPD_PWR_IF_Init>:
  * @brief  Initialize structures and variables related to power board profiles
  *         used by Sink and Source, for all available ports.
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_Init(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_PWR_IF_Init */
  USBPD_StatusTypeDef _status = USBPD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	71fb      	strb	r3, [r7, #7]

  /* Set links to PDO values and number for Port 0 (defined in PDO arrays in H file).
   */
  PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.ListOfPDO = (uint32_t *) PORT0_PDO_ListSRC;
 8009d6a:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <USBPD_PWR_IF_Init+0x74>)
 8009d6c:	4a1a      	ldr	r2, [pc, #104]	; (8009dd8 <USBPD_PWR_IF_Init+0x78>)
 8009d6e:	601a      	str	r2, [r3, #0]
  PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.NumberOfPDO = &USBPD_NbPDO[1];
 8009d70:	4b18      	ldr	r3, [pc, #96]	; (8009dd4 <USBPD_PWR_IF_Init+0x74>)
 8009d72:	4a1a      	ldr	r2, [pc, #104]	; (8009ddc <USBPD_PWR_IF_Init+0x7c>)
 8009d74:	605a      	str	r2, [r3, #4]

  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.ListOfPDO = (uint32_t *)PORT0_PDO_ListSNK;
 8009d76:	4b17      	ldr	r3, [pc, #92]	; (8009dd4 <USBPD_PWR_IF_Init+0x74>)
 8009d78:	4a19      	ldr	r2, [pc, #100]	; (8009de0 <USBPD_PWR_IF_Init+0x80>)
 8009d7a:	609a      	str	r2, [r3, #8]
  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.NumberOfPDO = &USBPD_NbPDO[0];
 8009d7c:	4b15      	ldr	r3, [pc, #84]	; (8009dd4 <USBPD_PWR_IF_Init+0x74>)
 8009d7e:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <USBPD_PWR_IF_Init+0x84>)
 8009d80:	60da      	str	r2, [r3, #12]

  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits = USBPD_CORE_PDO_SNK_FIXED_MAX_CURRENT;
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009d84:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009d88:	605a      	str	r2, [r3, #4]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.OperatingVoltageInmVunits    = USBPD_BOARD_REQUESTED_VOLTAGE_MV;
 8009d8a:	4b17      	ldr	r3, [pc, #92]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d90:	609a      	str	r2, [r3, #8]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits = USBPD_BOARD_MAX_VOLTAGE_MV;
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d98:	60da      	str	r2, [r3, #12]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits = USBPD_BOARD_MIN_VOLTAGE_MV;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	611a      	str	r2, [r3, #16]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.OperatingPowerInmWunits      = (USBPD_CORE_PDO_SNK_FIXED_MAX_CURRENT * USBPD_BOARD_REQUESTED_VOLTAGE_MV) / 1000U;
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009da4:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8009da8:	615a      	str	r2, [r3, #20]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits   = (USBPD_CORE_PDO_SNK_FIXED_MAX_CURRENT * USBPD_BOARD_MAX_VOLTAGE_MV) / 1000U;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <USBPD_PWR_IF_Init+0x88>)
 8009dac:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8009db0:	619a      	str	r2, [r3, #24]
  _status |= PWR_IF_CheckUpdateSNKPower(USBPD_PORT_0);
 8009db2:	2000      	movs	r0, #0
 8009db4:	f000 f9f6 	bl	800a1a4 <PWR_IF_CheckUpdateSNKPower>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	71fb      	strb	r3, [r7, #7]


  /* Add consistency check on PDO definition
     Could help to detect unexpected flash settings content */
  _PWR_CheckPDOContent(USBPD_PORT_0);
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f000 fb52 	bl	800a46c <_PWR_CheckPDOContent>
#if USBPD_PORT_COUNT == 2
  _PWR_CheckPDOContent(USBPD_PORT_1);
#endif /* USBPD_PORT_COUNT == 2 */

  return _status;
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
/* USER CODE END USBPD_PWR_IF_Init */
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200002cc 	.word	0x200002cc
 8009dd8:	20000090 	.word	0x20000090
 8009ddc:	2000008d 	.word	0x2000008d
 8009de0:	200000ac 	.word	0x200000ac
 8009de4:	2000008c 	.word	0x2000008c
 8009de8:	20000018 	.word	0x20000018

08009dec <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 8009dec:	b590      	push	{r4, r7, lr}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_PDO_TypeDef        _pdo;
  USBPD_SNKRDO_TypeDef     _rdo;

  _rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 8009df6:	79fa      	ldrb	r2, [r7, #7]
 8009df8:	491a      	ldr	r1, [pc, #104]	; (8009e64 <USBPD_PWR_IF_SetProfile+0x78>)
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	4413      	add	r3, r2
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	440b      	add	r3, r1
 8009e04:	335c      	adds	r3, #92	; 0x5c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60bb      	str	r3, [r7, #8]
  _pdo.d32 = PORT0_PDO_ListSRC[0];
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <USBPD_PWR_IF_SetProfile+0x7c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	60fb      	str	r3, [r7, #12]

  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, _pdo.SRCFixedPDO.VoltageIn50mVunits * 50,
 8009e10:	79f8      	ldrb	r0, [r7, #7]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	2332      	movs	r3, #50	; 0x32
 8009e1e:	fb02 f303 	mul.w	r3, r2, r3
 8009e22:	4619      	mov	r1, r3
                                                     (_rdo.FixedVariableRDO.OperatingCurrentIn10mAunits * 10),
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	005b      	lsls	r3, r3, #1
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, _pdo.SRCFixedPDO.VoltageIn50mVunits * 50,
 8009e36:	461c      	mov	r4, r3
                                                     (_rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits * 10)) ? USBPD_OK : USBPD_ERROR);
 8009e38:	893b      	ldrh	r3, [r7, #8]
 8009e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	005b      	lsls	r3, r3, #1
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, _pdo.SRCFixedPDO.VoltageIn50mVunits * 50,
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	f002 fc0c 	bl	800c668 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>
 8009e50:	4603      	mov	r3, r0
                                                     (_rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits * 10)) ? USBPD_OK : USBPD_ERROR);
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <USBPD_PWR_IF_SetProfile+0x6e>
 8009e56:	2300      	movs	r3, #0
 8009e58:	e000      	b.n	8009e5c <USBPD_PWR_IF_SetProfile+0x70>
 8009e5a:	2302      	movs	r3, #2
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd90      	pop	{r4, r7, pc}
 8009e64:	2000022c 	.word	0x2000022c
 8009e68:	20000090 	.word	0x20000090

08009e6c <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	460a      	mov	r2, r1
 8009e76:	71fb      	strb	r3, [r7, #7]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8009e86:	2302      	movs	r3, #2
 8009e88:	e01c      	b.n	8009ec4 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	f107 0208 	add.w	r2, r7, #8
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fc22 	bl	800c6dc <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8009e98:	79bb      	ldrb	r3, [r7, #6]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD)? USBPD_OK: USBPD_ERROR);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d801      	bhi.n	8009eac <USBPD_PWR_IF_SupplyReady+0x40>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e000      	b.n	8009eae <USBPD_PWR_IF_SupplyReady+0x42>
 8009eac:	2302      	movs	r3, #2
 8009eae:	73fb      	strb	r3, [r7, #15]
 8009eb0:	e007      	b.n	8009ec2 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD)? USBPD_OK: USBPD_ERROR);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8009eb8:	d901      	bls.n	8009ebe <USBPD_PWR_IF_SupplyReady+0x52>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e000      	b.n	8009ec0 <USBPD_PWR_IF_SupplyReady+0x54>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBPD_PWR_IF_VBUSEnable>:
  * @brief  Enables VBUS power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSEnable(uint8_t PortNum)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSEnable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_ENABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 8009ed6:	79f8      	ldrb	r0, [r7, #7]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2300      	movs	r3, #0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	f008 fde3 	bl	8012aac <HW_IF_PWR_Enable>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  return _status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_VBUSEnable */
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBPD_PWR_IF_VBUSDisable>:
  * @brief  Disable VBUS/VCONN the power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSDisable(uint8_t PortNum)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSDisable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_DISABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 8009efe:	79f8      	ldrb	r0, [r7, #7]
 8009f00:	2301      	movs	r3, #1
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	2200      	movs	r2, #0
 8009f08:	2100      	movs	r1, #0
 8009f0a:	f008 fdcf 	bl	8012aac <HW_IF_PWR_Enable>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]
  return _status;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_VBUSDisable */
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60ba      	str	r2, [r7, #8]
 8009f24:	607b      	str	r3, [r7, #4]
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	73bb      	strb	r3, [r7, #14]
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10d      	bne.n	8009f50 <USBPD_PWR_IF_GetPortPDOs+0x34>
    {
      *Size = USBPD_NbPDO[1];
 8009f34:	4b51      	ldr	r3, [pc, #324]	; (800a07c <USBPD_PWR_IF_GetPortPDOs+0x160>)
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * USBPD_NbPDO[1]);
 8009f3e:	4b4f      	ldr	r3, [pc, #316]	; (800a07c <USBPD_PWR_IF_GetPortPDOs+0x160>)
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	461a      	mov	r2, r3
 8009f46:	494e      	ldr	r1, [pc, #312]	; (800a080 <USBPD_PWR_IF_GetPortPDOs+0x164>)
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f010 fa37 	bl	801a3bc <memcpy>
 8009f4e:	e00c      	b.n	8009f6a <USBPD_PWR_IF_GetPortPDOs+0x4e>
    }
    else
    {
      *Size = USBPD_NbPDO[0];
 8009f50:	4b4a      	ldr	r3, [pc, #296]	; (800a07c <USBPD_PWR_IF_GetPortPDOs+0x160>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 8009f5a:	4b48      	ldr	r3, [pc, #288]	; (800a07c <USBPD_PWR_IF_GetPortPDOs+0x160>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	461a      	mov	r2, r3
 8009f62:	4948      	ldr	r1, [pc, #288]	; (800a084 <USBPD_PWR_IF_GetPortPDOs+0x168>)
 8009f64:	68b8      	ldr	r0, [r7, #8]
 8009f66:	f010 fa29 	bl	801a3bc <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */
  uint32_t   nbpdo, index, nb_valid_pdo = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
  uint32_t   *ptpdoarray = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef pdo_first;
  USBPD_PDO_TypeDef pdo;

  /* Check if valid port */
  if (USBPD_PORT_IsValid(PortNum))
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d17d      	bne.n	800a074 <USBPD_PWR_IF_GetPortPDOs+0x158>
  {
    /* According to type of PDO to be read, set pointer on values and nb of elements */
    switch (DataId)
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <USBPD_PWR_IF_GetPortPDOs+0x68>
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d01f      	beq.n	8009fc2 <USBPD_PWR_IF_GetPortPDOs+0xa6>
 8009f82:	e03e      	b.n	800a002 <USBPD_PWR_IF_GetPortPDOs+0xe6>
    {
    case USBPD_CORE_DATATYPE_SRC_PDO :
      nbpdo = *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	4a40      	ldr	r2, [pc, #256]	; (800a088 <USBPD_PWR_IF_GetPortPDOs+0x16c>)
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
      ptpdoarray = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO;
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	4a3c      	ldr	r2, [pc, #240]	; (800a088 <USBPD_PWR_IF_GetPortPDOs+0x16c>)
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	4413      	add	r3, r2
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	61bb      	str	r3, [r7, #24]
      /* Save the 1st PDO */
      pdo_first.d32 = *ptpdoarray;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	617b      	str	r3, [r7, #20]
      /* Reset unchunked bit if current revision is PD2.0*/
      if (USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	4a38      	ldr	r2, [pc, #224]	; (800a08c <USBPD_PWR_IF_GetPortPDOs+0x170>)
 8009faa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009fae:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d127      	bne.n	800a008 <USBPD_PWR_IF_GetPortPDOs+0xec>
      {
        pdo_first.SRCFixedPDO.UnchunkedExtendedMessage  = USBPD_PDO_SRC_FIXED_UNCHUNK_NOT_SUPPORTED;
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	f36f 0300 	bfc	r3, #0, #1
 8009fbe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fc0:	e022      	b.n	800a008 <USBPD_PWR_IF_GetPortPDOs+0xec>

    case USBPD_CORE_DATATYPE_SNK_PDO:
      nbpdo       = *PWR_Port_PDO_Storage[PortNum].SinkPDO.NumberOfPDO;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	4a30      	ldr	r2, [pc, #192]	; (800a088 <USBPD_PWR_IF_GetPortPDOs+0x16c>)
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	4413      	add	r3, r2
 8009fca:	330c      	adds	r3, #12
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
      ptpdoarray  = PWR_Port_PDO_Storage[PortNum].SinkPDO.ListOfPDO;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	4a2c      	ldr	r2, [pc, #176]	; (800a088 <USBPD_PWR_IF_GetPortPDOs+0x16c>)
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	4413      	add	r3, r2
 8009fda:	3308      	adds	r3, #8
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	61bb      	str	r3, [r7, #24]
      /* Save the 1st PDO */
      pdo_first.d32 = *ptpdoarray;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	617b      	str	r3, [r7, #20]
      /* Reset FRS bit if current revision is PD2.0*/
      if (USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	4a28      	ldr	r2, [pc, #160]	; (800a08c <USBPD_PWR_IF_GetPortPDOs+0x170>)
 8009fea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009fee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d109      	bne.n	800a00c <USBPD_PWR_IF_GetPortPDOs+0xf0>
      {
        pdo_first.SNKFixedPDO.FastRoleSwapRequiredCurrent = USBPD_PDO_SNK_FIXED_FRS_NOT_SUPPORTED;
 8009ff8:	7dbb      	ldrb	r3, [r7, #22]
 8009ffa:	f36f 1305 	bfc	r3, #4, #2
 8009ffe:	75bb      	strb	r3, [r7, #22]
      }
      break;
 800a000:	e004      	b.n	800a00c <USBPD_PWR_IF_GetPortPDOs+0xf0>
    default:
      nbpdo = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a006:	e002      	b.n	800a00e <USBPD_PWR_IF_GetPortPDOs+0xf2>
      break;
 800a008:	bf00      	nop
 800a00a:	e000      	b.n	800a00e <USBPD_PWR_IF_GetPortPDOs+0xf2>
      break;
 800a00c:	bf00      	nop
    }

    /* Copy PDO data in output buffer */
    for (index = 0; index < nbpdo; index++)
 800a00e:	2300      	movs	r3, #0
 800a010:	623b      	str	r3, [r7, #32]
 800a012:	e028      	b.n	800a066 <USBPD_PWR_IF_GetPortPDOs+0x14a>
    {
      pdo.d32 = *ptpdoarray;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	613b      	str	r3, [r7, #16]
      /* Copy only PDO (and not APDO in case of current revision is PD2.0) */
      if ((USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	4a1b      	ldr	r2, [pc, #108]	; (800a08c <USBPD_PWR_IF_GetPortPDOs+0x170>)
 800a01e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a022:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d105      	bne.n	800a038 <USBPD_PWR_IF_GetPortPDOs+0x11c>
       && (pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_APDO))
 800a02c:	7cfb      	ldrb	r3, [r7, #19]
 800a02e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2bc0      	cmp	r3, #192	; 0xc0
 800a036:	d010      	beq.n	800a05a <USBPD_PWR_IF_GetPortPDOs+0x13e>
      {
      }
      else
      {
        /* Copy 1st PDO as potentially FRS or UNCHUNKED bits have been reset */
        if (0 == index)
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d103      	bne.n	800a046 <USBPD_PWR_IF_GetPortPDOs+0x12a>
 800a03e:	697a      	ldr	r2, [r7, #20]
        {
          (void)memcpy(Ptr, (uint8_t*)&pdo_first.d32, 4u);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e006      	b.n	800a054 <USBPD_PWR_IF_GetPortPDOs+0x138>
        }
        else
        {
          (void)memcpy((Ptr + (nb_valid_pdo * 4u)), (uint8_t*)ptpdoarray, 4u);
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	4413      	add	r3, r2
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	601a      	str	r2, [r3, #0]
        }
        nb_valid_pdo++;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3301      	adds	r3, #1
 800a058:	61fb      	str	r3, [r7, #28]
      }
      ptpdoarray++;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	3304      	adds	r3, #4
 800a05e:	61bb      	str	r3, [r7, #24]
    for (index = 0; index < nbpdo; index++)
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	3301      	adds	r3, #1
 800a064:	623b      	str	r3, [r7, #32]
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3d2      	bcc.n	800a014 <USBPD_PWR_IF_GetPortPDOs+0xf8>
    }
    /* Set nb of read PDO (nb of u32 elements); */
    *Size = nb_valid_pdo;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	601a      	str	r2, [r3, #0]
  }
/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 800a074:	bf00      	nop
 800a076:	3728      	adds	r7, #40	; 0x28
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	2000008c 	.word	0x2000008c
 800a080:	20000090 	.word	0x20000090
 800a084:	200000ac 	.word	0x200000ac
 800a088:	200002cc 	.word	0x200002cc
 800a08c:	20000228 	.word	0x20000228

0800a090 <USBPD_PWR_IF_SearchRequestedPDO>:
  * @retval Status of search
  *         USBPD_OK : Src PDO found for requested DO position (output Pdo parameter is set)
  *         USBPD_FAIL : Position is not compliant with current Src PDO for this port (no corresponding PDO value)
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SearchRequestedPDO(uint8_t PortNum, uint32_t RdoPosition, uint32_t *Pdo)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_PWR_IF_SearchRequestedPDO */
  if((RdoPosition == 0) || (RdoPosition > *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO))
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00a      	beq.n	800a0ba <USBPD_PWR_IF_SearchRequestedPDO+0x2a>
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	4a10      	ldr	r2, [pc, #64]	; (800a0e8 <USBPD_PWR_IF_SearchRequestedPDO+0x58>)
 800a0a8:	011b      	lsls	r3, r3, #4
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d901      	bls.n	800a0be <USBPD_PWR_IF_SearchRequestedPDO+0x2e>
  {
    /* Invalid PDO index */
  return USBPD_FAIL;
 800a0ba:	2310      	movs	r3, #16
 800a0bc:	e00e      	b.n	800a0dc <USBPD_PWR_IF_SearchRequestedPDO+0x4c>
  }

  *Pdo = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO[RdoPosition - 1];
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	4a09      	ldr	r2, [pc, #36]	; (800a0e8 <USBPD_PWR_IF_SearchRequestedPDO+0x58>)
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	4413      	add	r3, r2
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	601a      	str	r2, [r3, #0]
  return USBPD_OK;
 800a0da:	2300      	movs	r3, #0
/* USER CODE END USBPD_PWR_IF_SearchRequestedPDO */
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	200002cc 	.word	0x200002cc

0800a0ec <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	71fb      	strb	r3, [r7, #7]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	4618      	mov	r0, r3
 800a104:	f008 fcae 	bl	8012a64 <HW_IF_PWR_GetVoltage>
 800a108:	4603      	mov	r3, r0
 800a10a:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 800a10c:	79bb      	ldrb	r3, [r7, #6]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d015      	beq.n	800a13e <USBPD_PWR_IF_GetVBUSStatus+0x52>
 800a112:	2b02      	cmp	r3, #2
 800a114:	dc1a      	bgt.n	800a14c <USBPD_PWR_IF_GetVBUSStatus+0x60>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d008      	beq.n	800a130 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 800a11e:	e015      	b.n	800a14c <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a126:	4293      	cmp	r3, r2
 800a128:	d812      	bhi.n	800a150 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e00f      	b.n	800a150 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800a136:	d30d      	bcc.n	800a154 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]
    break;
 800a13c:	e00a      	b.n	800a154 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800a144:	d208      	bcs.n	800a158 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 800a146:	2301      	movs	r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]
    break;
 800a14a:	e005      	b.n	800a158 <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 800a14c:	bf00      	nop
 800a14e:	e004      	b.n	800a15a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 800a158:	bf00      	nop
  }
  return _status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBPD_PWR_IF_ResetVbusThreshold>:
  * @brief Function is called to reset the VBUS threshold when there is a power reset.
  * @param PortNum Port number
  * @retval None
  */
void USBPD_PWR_IF_ResetVbusThreshold(uint8_t PortNum)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af02      	add	r7, sp, #8
 800a16a:	4603      	mov	r3, r0
 800a16c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN USBPD_PWR_IF_ResetVbusThreshold */
  PWR_IF_DEBUG_TRACE(PortNum, "RESET THRESHOLD");
 800a16e:	79f9      	ldrb	r1, [r7, #7]
 800a170:	230f      	movs	r3, #15
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	4b08      	ldr	r3, [pc, #32]	; (800a198 <USBPD_PWR_IF_ResetVbusThreshold+0x34>)
 800a176:	2200      	movs	r2, #0
 800a178:	2006      	movs	r0, #6
 800a17a:	f005 fc4b 	bl	800fa14 <USBPD_TRACE_Add>
  vbus_disconnect = vbus_transition = USBPD_PWR_HIGH_VBUS_THRESHOLD;
 800a17e:	4b07      	ldr	r3, [pc, #28]	; (800a19c <USBPD_PWR_IF_ResetVbusThreshold+0x38>)
 800a180:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	4b05      	ldr	r3, [pc, #20]	; (800a19c <USBPD_PWR_IF_ResetVbusThreshold+0x38>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a05      	ldr	r2, [pc, #20]	; (800a1a0 <USBPD_PWR_IF_ResetVbusThreshold+0x3c>)
 800a18c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USBPD_PWR_IF_ResetVbusThreshold */
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	0801b338 	.word	0x0801b338
 800a19c:	200002c8 	.word	0x200002c8
 800a1a0:	200002c4 	.word	0x200002c4

0800a1a4 <PWR_IF_CheckUpdateSNKPower>:
  * @brief  Function to check validity between SNK PDO and power user settings
  * @param  PortNum Port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef PWR_IF_CheckUpdateSNKPower(uint8_t PortNum)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b08b      	sub	sp, #44	; 0x2c
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t _voltage = 0, _current = 0, _power = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	82bb      	strh	r3, [r7, #20]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	827b      	strh	r3, [r7, #18]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	823b      	strh	r3, [r7, #16]
  uint16_t _min_voltage = 0xFFFF, _max_voltage = 0, _max_current = 0;
 800a1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1c6:	847b      	strh	r3, [r7, #34]	; 0x22
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	843b      	strh	r3, [r7, #32]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	83fb      	strh	r3, [r7, #30]

  for (uint32_t _index = 0; _index < *PWR_Port_PDO_Storage[PortNum].SinkPDO.NumberOfPDO; _index++)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	e102      	b.n	800a3dc <PWR_IF_CheckUpdateSNKPower+0x238>
  {
    pdo.d32 = PWR_Port_PDO_Storage[PortNum].SinkPDO.ListOfPDO[_index];
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	4aa1      	ldr	r2, [pc, #644]	; (800a460 <PWR_IF_CheckUpdateSNKPower+0x2bc>)
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	4413      	add	r3, r2
 800a1de:	3308      	adds	r3, #8
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]
    switch (pdo.GenericPDO.PowerObject)
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	f200 80e5 	bhi.w	800a3c4 <PWR_IF_CheckUpdateSNKPower+0x220>
 800a1fa:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <PWR_IF_CheckUpdateSNKPower+0x5c>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a211 	.word	0x0800a211
 800a204:	0800a267 	.word	0x0800a267
 800a208:	0800a2db 	.word	0x0800a2db
 800a20c:	0800a34b 	.word	0x0800a34b
    {
      case USBPD_CORE_PDO_TYPE_FIXED:    /*!< Fixed Supply PDO                             */
        _voltage = PWR_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a216:	b29b      	uxth	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	461a      	mov	r2, r3
 800a220:	0091      	lsls	r1, r2, #2
 800a222:	461a      	mov	r2, r3
 800a224:	460b      	mov	r3, r1
 800a226:	4413      	add	r3, r2
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 800a22c:	8aba      	ldrh	r2, [r7, #20]
 800a22e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a230:	429a      	cmp	r2, r3
 800a232:	d201      	bcs.n	800a238 <PWR_IF_CheckUpdateSNKPower+0x94>
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	847b      	strh	r3, [r7, #34]	; 0x22
        _PWR_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 800a238:	8aba      	ldrh	r2, [r7, #20]
 800a23a:	8c3b      	ldrh	r3, [r7, #32]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d901      	bls.n	800a244 <PWR_IF_CheckUpdateSNKPower+0xa0>
 800a240:	8abb      	ldrh	r3, [r7, #20]
 800a242:	843b      	strh	r3, [r7, #32]
        _current = PWR_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 800a244:	89bb      	ldrh	r3, [r7, #12]
 800a246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	461a      	mov	r2, r3
 800a24e:	0092      	lsls	r2, r2, #2
 800a250:	4413      	add	r3, r2
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	827b      	strh	r3, [r7, #18]
        _PWR_UPDATE_CURRENT_MAX(_current, _max_current);
 800a256:	8a7a      	ldrh	r2, [r7, #18]
 800a258:	8bfb      	ldrh	r3, [r7, #30]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	f240 80b4 	bls.w	800a3c8 <PWR_IF_CheckUpdateSNKPower+0x224>
 800a260:	8a7b      	ldrh	r3, [r7, #18]
 800a262:	83fb      	strh	r3, [r7, #30]
        break;
 800a264:	e0b0      	b.n	800a3c8 <PWR_IF_CheckUpdateSNKPower+0x224>
      case USBPD_CORE_PDO_TYPE_BATTERY:  /*!< Battery Supply PDO                           */
        _voltage = PWR_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	461a      	mov	r2, r3
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	4413      	add	r3, r2
 800a274:	461a      	mov	r2, r3
 800a276:	0091      	lsls	r1, r2, #2
 800a278:	461a      	mov	r2, r3
 800a27a:	460b      	mov	r3, r1
 800a27c:	4413      	add	r3, r2
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 800a282:	8aba      	ldrh	r2, [r7, #20]
 800a284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a286:	429a      	cmp	r2, r3
 800a288:	d201      	bcs.n	800a28e <PWR_IF_CheckUpdateSNKPower+0xea>
 800a28a:	8abb      	ldrh	r3, [r7, #20]
 800a28c:	847b      	strh	r3, [r7, #34]	; 0x22
        _voltage = PWR_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 800a28e:	89fb      	ldrh	r3, [r7, #14]
 800a290:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800a294:	b29b      	uxth	r3, r3
 800a296:	461a      	mov	r2, r3
 800a298:	0092      	lsls	r2, r2, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	461a      	mov	r2, r3
 800a29e:	0091      	lsls	r1, r2, #2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4413      	add	r3, r2
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 800a2aa:	8aba      	ldrh	r2, [r7, #20]
 800a2ac:	8c3b      	ldrh	r3, [r7, #32]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d901      	bls.n	800a2b6 <PWR_IF_CheckUpdateSNKPower+0x112>
 800a2b2:	8abb      	ldrh	r3, [r7, #20]
 800a2b4:	843b      	strh	r3, [r7, #32]
        _power = PWR_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 800a2b6:	89bb      	ldrh	r3, [r7, #12]
 800a2b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	461a      	mov	r2, r3
 800a2c0:	0152      	lsls	r2, r2, #5
 800a2c2:	1ad2      	subs	r2, r2, r3
 800a2c4:	0092      	lsls	r2, r2, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	823b      	strh	r3, [r7, #16]
        _PWR_UPDATE_POWER_MAX(_power, _max_power);
 800a2cc:	8a3b      	ldrh	r3, [r7, #16]
 800a2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d27b      	bcs.n	800a3cc <PWR_IF_CheckUpdateSNKPower+0x228>
 800a2d4:	8a3b      	ldrh	r3, [r7, #16]
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2d8:	e078      	b.n	800a3cc <PWR_IF_CheckUpdateSNKPower+0x228>
      case USBPD_CORE_PDO_TYPE_VARIABLE: /*!< Variable Supply (non-battery) PDO            */
        _voltage = PWR_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	0092      	lsls	r2, r2, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	0091      	lsls	r1, r2, #2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4413      	add	r3, r2
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 800a2f6:	8aba      	ldrh	r2, [r7, #20]
 800a2f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d201      	bcs.n	800a302 <PWR_IF_CheckUpdateSNKPower+0x15e>
 800a2fe:	8abb      	ldrh	r3, [r7, #20]
 800a300:	847b      	strh	r3, [r7, #34]	; 0x22
        _voltage = PWR_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 800a302:	89fb      	ldrh	r3, [r7, #14]
 800a304:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800a308:	b29b      	uxth	r3, r3
 800a30a:	461a      	mov	r2, r3
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	4413      	add	r3, r2
 800a310:	461a      	mov	r2, r3
 800a312:	0091      	lsls	r1, r2, #2
 800a314:	461a      	mov	r2, r3
 800a316:	460b      	mov	r3, r1
 800a318:	4413      	add	r3, r2
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 800a31e:	8aba      	ldrh	r2, [r7, #20]
 800a320:	8c3b      	ldrh	r3, [r7, #32]
 800a322:	429a      	cmp	r2, r3
 800a324:	d901      	bls.n	800a32a <PWR_IF_CheckUpdateSNKPower+0x186>
 800a326:	8abb      	ldrh	r3, [r7, #20]
 800a328:	843b      	strh	r3, [r7, #32]
        _current = PWR_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 800a32a:	89bb      	ldrh	r3, [r7, #12]
 800a32c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a330:	b29b      	uxth	r3, r3
 800a332:	461a      	mov	r2, r3
 800a334:	0092      	lsls	r2, r2, #2
 800a336:	4413      	add	r3, r2
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	827b      	strh	r3, [r7, #18]
        _PWR_UPDATE_CURRENT_MAX(_current, _max_current);
 800a33c:	8a7a      	ldrh	r2, [r7, #18]
 800a33e:	8bfb      	ldrh	r3, [r7, #30]
 800a340:	429a      	cmp	r2, r3
 800a342:	d945      	bls.n	800a3d0 <PWR_IF_CheckUpdateSNKPower+0x22c>
 800a344:	8a7b      	ldrh	r3, [r7, #18]
 800a346:	83fb      	strh	r3, [r7, #30]
        break;
 800a348:	e042      	b.n	800a3d0 <PWR_IF_CheckUpdateSNKPower+0x22c>
      case USBPD_CORE_PDO_TYPE_APDO:     /*!< Augmented Power Data Object (APDO)           */
        _voltage = PWR_DECODE_100MV(pdo.SRCSNKAPDO.MinVoltageIn100mV);
 800a34a:	7b7b      	ldrb	r3, [r7, #13]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	461a      	mov	r2, r3
 800a350:	0092      	lsls	r2, r2, #2
 800a352:	4413      	add	r3, r2
 800a354:	461a      	mov	r2, r3
 800a356:	0091      	lsls	r1, r2, #2
 800a358:	461a      	mov	r2, r3
 800a35a:	460b      	mov	r3, r1
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 800a362:	8aba      	ldrh	r2, [r7, #20]
 800a364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a366:	429a      	cmp	r2, r3
 800a368:	d201      	bcs.n	800a36e <PWR_IF_CheckUpdateSNKPower+0x1ca>
 800a36a:	8abb      	ldrh	r3, [r7, #20]
 800a36c:	847b      	strh	r3, [r7, #34]	; 0x22
        _voltage = PWR_DECODE_100MV(pdo.SRCSNKAPDO.MaxVoltageIn100mV);
 800a36e:	89fb      	ldrh	r3, [r7, #14]
 800a370:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800a374:	b2db      	uxtb	r3, r3
 800a376:	b29b      	uxth	r3, r3
 800a378:	461a      	mov	r2, r3
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	461a      	mov	r2, r3
 800a380:	0091      	lsls	r1, r2, #2
 800a382:	461a      	mov	r2, r3
 800a384:	460b      	mov	r3, r1
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	82bb      	strh	r3, [r7, #20]
        _PWR_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 800a38c:	8aba      	ldrh	r2, [r7, #20]
 800a38e:	8c3b      	ldrh	r3, [r7, #32]
 800a390:	429a      	cmp	r2, r3
 800a392:	d901      	bls.n	800a398 <PWR_IF_CheckUpdateSNKPower+0x1f4>
 800a394:	8abb      	ldrh	r3, [r7, #20]
 800a396:	843b      	strh	r3, [r7, #32]
        _current = PWR_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
 800a398:	7b3b      	ldrb	r3, [r7, #12]
 800a39a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	0092      	lsls	r2, r2, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	0091      	lsls	r1, r2, #2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4413      	add	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	827b      	strh	r3, [r7, #18]
        _PWR_UPDATE_CURRENT_MAX(_current, _max_current);
 800a3b6:	8a7a      	ldrh	r2, [r7, #18]
 800a3b8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d90a      	bls.n	800a3d4 <PWR_IF_CheckUpdateSNKPower+0x230>
 800a3be:	8a7b      	ldrh	r3, [r7, #18]
 800a3c0:	83fb      	strh	r3, [r7, #30]
        break;
 800a3c2:	e007      	b.n	800a3d4 <PWR_IF_CheckUpdateSNKPower+0x230>
      default:
        break;
 800a3c4:	bf00      	nop
 800a3c6:	e006      	b.n	800a3d6 <PWR_IF_CheckUpdateSNKPower+0x232>
        break;
 800a3c8:	bf00      	nop
 800a3ca:	e004      	b.n	800a3d6 <PWR_IF_CheckUpdateSNKPower+0x232>
        break;
 800a3cc:	bf00      	nop
 800a3ce:	e002      	b.n	800a3d6 <PWR_IF_CheckUpdateSNKPower+0x232>
        break;
 800a3d0:	bf00      	nop
 800a3d2:	e000      	b.n	800a3d6 <PWR_IF_CheckUpdateSNKPower+0x232>
        break;
 800a3d4:	bf00      	nop
  for (uint32_t _index = 0; _index < *PWR_Port_PDO_Storage[PortNum].SinkPDO.NumberOfPDO; _index++)
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	4a20      	ldr	r2, [pc, #128]	; (800a460 <PWR_IF_CheckUpdateSNKPower+0x2bc>)
 800a3e0:	011b      	lsls	r3, r3, #4
 800a3e2:	4413      	add	r3, r2
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f4ff aef1 	bcc.w	800a1d6 <PWR_IF_CheckUpdateSNKPower+0x32>
    }
  }

  _PWR_CHECK_VOLTAGE_MIN(_min_voltage, DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a3f8:	491a      	ldr	r1, [pc, #104]	; (800a464 <PWR_IF_CheckUpdateSNKPower+0x2c0>)
 800a3fa:	2074      	movs	r0, #116	; 0x74
 800a3fc:	fb00 f303 	mul.w	r3, r0, r3
 800a400:	440b      	add	r3, r1
 800a402:	3310      	adds	r3, #16
 800a404:	601a      	str	r2, [r3, #0]
  _PWR_CHECK_VOLTAGE_MAX(_max_voltage, DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	8c3a      	ldrh	r2, [r7, #32]
 800a40a:	4916      	ldr	r1, [pc, #88]	; (800a464 <PWR_IF_CheckUpdateSNKPower+0x2c0>)
 800a40c:	2074      	movs	r0, #116	; 0x74
 800a40e:	fb00 f303 	mul.w	r3, r0, r3
 800a412:	440b      	add	r3, r1
 800a414:	330c      	adds	r3, #12
 800a416:	601a      	str	r2, [r3, #0]
  _PWR_CHECK_CURRENT_MAX(_max_current, DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	8bfa      	ldrh	r2, [r7, #30]
 800a41c:	4911      	ldr	r1, [pc, #68]	; (800a464 <PWR_IF_CheckUpdateSNKPower+0x2c0>)
 800a41e:	2074      	movs	r0, #116	; 0x74
 800a420:	fb00 f303 	mul.w	r3, r0, r3
 800a424:	440b      	add	r3, r1
 800a426:	3304      	adds	r3, #4
 800a428:	601a      	str	r2, [r3, #0]
  _max_power = (_max_voltage * _max_current) / 1000;
 800a42a:	8c3b      	ldrh	r3, [r7, #32]
 800a42c:	8bfa      	ldrh	r2, [r7, #30]
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	4a0d      	ldr	r2, [pc, #52]	; (800a468 <PWR_IF_CheckUpdateSNKPower+0x2c4>)
 800a434:	fb82 1203 	smull	r1, r2, r2, r3
 800a438:	1192      	asrs	r2, r2, #6
 800a43a:	17db      	asrs	r3, r3, #31
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  _PWR_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	4a08      	ldr	r2, [pc, #32]	; (800a464 <PWR_IF_CheckUpdateSNKPower+0x2c0>)
 800a444:	2174      	movs	r1, #116	; 0x74
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	3318      	adds	r3, #24
 800a44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a450:	601a      	str	r2, [r3, #0]

  return _status;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	372c      	adds	r7, #44	; 0x2c
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	200002cc 	.word	0x200002cc
 800a464:	20000018 	.word	0x20000018
 800a468:	10624dd3 	.word	0x10624dd3

0800a46c <_PWR_CheckPDOContent>:
  * @brief  Add consistency check on PDO definition (Could help to detect unexpected flash settings content)
  * @param  PortNum Port number
  * @retval None
  */
void _PWR_CheckPDOContent(uint8_t PortNum)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
  uint32_t firstpdo;
  uint8_t error_in_content = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
     - if SRC PDO are defined, 1st SRC PDO should at least have following characteristics :
         Type Fixed (bits 31-30)
         bits 23-22 shall be reserved
         Voltage in 50mv units = 5V (bits19-10 should be equal to 100)
  */
  if (*PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO > USBPD_MAX_NB_PDO)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	4a29      	ldr	r2, [pc, #164]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	4413      	add	r3, r2
 800a482:	3304      	adds	r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	2b07      	cmp	r3, #7
 800a48a:	d902      	bls.n	800a492 <_PWR_CheckPDOContent+0x26>
  {
    error_in_content = 1U;
 800a48c:	2301      	movs	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
 800a490:	e017      	b.n	800a4c2 <_PWR_CheckPDOContent+0x56>
  }
  else
  {
    if (*PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO >= 1U)
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	4a23      	ldr	r2, [pc, #140]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	4413      	add	r3, r2
 800a49a:	3304      	adds	r3, #4
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00e      	beq.n	800a4c2 <_PWR_CheckPDOContent+0x56>
    {
      firstpdo = (PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO[0U])
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	4413      	add	r3, r2
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <_PWR_CheckPDOContent+0xbc>)
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	60bb      	str	r3, [r7, #8]
                 & (USBPD_PDO_TYPE_Msk | USBPD_PDO_SRC_FIXED_VOLTAGE_Msk | (0x3U << 22U));
      if (firstpdo != (USBPD_PDO_TYPE_FIXED | (100U << USBPD_PDO_SRC_FIXED_VOLTAGE_Pos)))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 800a4bc:	d001      	beq.n	800a4c2 <_PWR_CheckPDOContent+0x56>
      {
        error_in_content = 1U;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	73fb      	strb	r3, [r7, #15]
     - if SNK PDO are defined, 1st SNK PDO should at least have following characteristics :
         Type Fixed (bits 31-30)
         bits 22-20 shall be reserved
         Voltage in 50mv units = 5V (bits19-10 should be equal to 100)
  */
  if (*PWR_Port_PDO_Storage[PortNum].SinkPDO.NumberOfPDO > USBPD_MAX_NB_PDO)
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	4a17      	ldr	r2, [pc, #92]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a4c6:	011b      	lsls	r3, r3, #4
 800a4c8:	4413      	add	r3, r2
 800a4ca:	330c      	adds	r3, #12
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b07      	cmp	r3, #7
 800a4d2:	d902      	bls.n	800a4da <_PWR_CheckPDOContent+0x6e>
  {
    error_in_content = 1U;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
 800a4d8:	e018      	b.n	800a50c <_PWR_CheckPDOContent+0xa0>
  }
  else
  {
    if (*PWR_Port_PDO_Storage[PortNum].SinkPDO.NumberOfPDO >= 1U)
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	4a11      	ldr	r2, [pc, #68]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00f      	beq.n	800a50c <_PWR_CheckPDOContent+0xa0>
    {
      firstpdo = (PWR_Port_PDO_Storage[PortNum].SinkPDO.ListOfPDO[0U])
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	4a0d      	ldr	r2, [pc, #52]	; (800a524 <_PWR_CheckPDOContent+0xb8>)
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <_PWR_CheckPDOContent+0xc0>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60bb      	str	r3, [r7, #8]
                 & (USBPD_PDO_TYPE_Msk | USBPD_PDO_SNK_FIXED_VOLTAGE_Msk | (0x3U << 20U));
      if (firstpdo != (USBPD_PDO_TYPE_FIXED | (100U << USBPD_PDO_SNK_FIXED_VOLTAGE_Pos)))
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 800a506:	d001      	beq.n	800a50c <_PWR_CheckPDOContent+0xa0>
      {
        error_in_content = 1U;
 800a508:	2301      	movs	r3, #1
 800a50a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* _SNK || _DRP */

  if (error_in_content == 1U)
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d104      	bne.n	800a51c <_PWR_CheckPDOContent+0xb0>
  {
    /* Stop RTOS scheduling */
    vTaskSuspendAll();
 800a512:	f009 ff8b 	bl	801442c <vTaskSuspendAll>
  __ASM volatile ("cpsid i" : : : "memory");
 800a516:	b672      	cpsid	i
}
 800a518:	bf00      	nop


    /* disable all interrupt to lock the system */
    __disable_irq();
    while(1);
 800a51a:	e7fe      	b.n	800a51a <_PWR_CheckPDOContent+0xae>
  }
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200002cc 	.word	0x200002cc
 800a528:	c0cffc00 	.word	0xc0cffc00
 800a52c:	c03ffc00 	.word	0xc03ffc00

0800a530 <TCPP0203_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Status of execution
  */
int32_t TCPP0203_RegisterBusIO(TCPP0203_Object_t *pObj, TCPP0203_IO_t *pIO)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <TCPP0203_RegisterBusIO+0x18>
  {
    ret = TCPP0203_ERROR;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e02c      	b.n	800a5a2 <TCPP0203_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	891a      	ldrh	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	691a      	ldr	r2, [r3, #16]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	695a      	ldr	r2, [r3, #20]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = TCPP0203_ReadRegWrap;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a0c      	ldr	r2, [pc, #48]	; (800a5ac <TCPP0203_RegisterBusIO+0x7c>)
 800a57c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = TCPP0203_WriteRegWrap;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a0b      	ldr	r2, [pc, #44]	; (800a5b0 <TCPP0203_RegisterBusIO+0x80>)
 800a582:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d004      	beq.n	800a59c <TCPP0203_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4798      	blx	r3
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	e002      	b.n	800a5a2 <TCPP0203_RegisterBusIO+0x72>
    }
    else
    {
      ret = TCPP0203_ERROR;
 800a59c:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	0800abcb 	.word	0x0800abcb
 800a5b0:	0800ac01 	.word	0x0800ac01

0800a5b4 <TCPP0203_Init>:
  * @brief  Initializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Init(TCPP0203_Object_t *pObj)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d11d      	bne.n	800a606 <TCPP0203_Init+0x52>
  {
    /* Read TCPP Device type */
    ret += tcpp0203_read_reg(&pObj->Ctx, TCPP0203_READ_REG2, &tmp, 1);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f103 0018 	add.w	r0, r3, #24
 800a5d0:	f107 020b 	add.w	r2, r7, #11
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	2102      	movs	r1, #2
 800a5d8:	f000 fb63 	bl	800aca2 <tcpp0203_read_reg>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]

    if (ret == TCPP0203_OK)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <TCPP0203_Init+0x44>
    {
      TCPP0203_DeviceType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <TCPP0203_Init+0x68>)
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	e002      	b.n	800a5fe <TCPP0203_Init+0x4a>
    }
    else
    {
      TCPP0203_DeviceType = TCPP0203_DEVICE_TYPE_02;
 800a5f8:	4b08      	ldr	r3, [pc, #32]	; (800a61c <TCPP0203_Init+0x68>)
 800a5fa:	2280      	movs	r2, #128	; 0x80
 800a5fc:	701a      	strb	r2, [r3, #0]
    }
    pObj->IsInitialized = 1U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if (ret != TCPP0203_OK)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <TCPP0203_Init+0x5e>
  {
    ret = TCPP0203_ERROR;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a612:	68fb      	ldr	r3, [r7, #12]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	200002dc 	.word	0x200002dc

0800a620 <TCPP0203_DeInit>:
  * @brief  Deinitializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_DeInit(TCPP0203_Object_t *pObj)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d106      	bne.n	800a640 <TCPP0203_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4798      	blx	r3

    pObj->IsInitialized = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return TCPP0203_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <TCPP0203_Reset>:
  * @brief  Resets TCPP0203 register (Reg0)
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Reset(TCPP0203_Object_t *pObj)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  int32_t ret = TCPP0203_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = TCPP0203_REG0_RST_VALUE;
 800a656:	2300      	movs	r3, #0
 800a658:	72fb      	strb	r3, [r7, #11]

  /* Write reset values in Reg0 register */
  if (tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1) != TCPP0203_OK)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f103 0018 	add.w	r0, r3, #24
 800a660:	f107 020b 	add.w	r2, r7, #11
 800a664:	2301      	movs	r3, #1
 800a666:	2100      	movs	r1, #0
 800a668:	f000 fb32 	bl	800acd0 <tcpp0203_write_reg>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <TCPP0203_Reset+0x2e>
  {
    ret = TCPP0203_ERROR;
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	60fb      	str	r3, [r7, #12]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = TCPP0203_REG0_RST_VALUE;
  Reg1_LastRead_Value = TCPP0203_REG0_RST_VALUE;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 800a678:	68fb      	ldr	r3, [r7, #12]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <TCPP0203_SetVConnSwitch>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2
  * @retval Component status
  */
int32_t TCPP0203_SetVConnSwitch(TCPP0203_Object_t *pObj, uint8_t VConnSwitch)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]

  if ((VConnSwitch != TCPP0203_VCONN_SWITCH_OPEN)
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d009      	beq.n	800a6ac <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC1)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d006      	beq.n	800a6ac <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC2))
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d003      	beq.n	800a6ac <TCPP0203_SetVConnSwitch+0x2a>
  {
    ret = TCPP0203_ERROR;
 800a6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e009      	b.n	800a6c0 <TCPP0203_SetVConnSwitch+0x3e>
  }
  else
  {
    /* Update VConn switch setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnSwitch, TCPP0203_VCONN_SWITCH_MSK);
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fabf 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <TCPP0203_SetGateDriverProvider>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_OPEN    GDP Switch Load Open
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_CLOSED  GDP Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverProvider(TCPP0203_Object_t *pObj, uint8_t GateDriverProvider)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]

  if ((GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_OPEN)
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d006      	beq.n	800a6ee <TCPP0203_SetGateDriverProvider+0x24>
      && (GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_CLOSED))
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d003      	beq.n	800a6ee <TCPP0203_SetGateDriverProvider+0x24>
  {
    ret = TCPP0203_ERROR;
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	e01a      	b.n	800a724 <TCPP0203_SetGateDriverProvider+0x5a>
  }
  else
  {
    /* Update GDP Switch Load setting in Writing register Reg0 */
    if (GateDriverProvider == TCPP0203_GD_PROVIDER_SWITCH_CLOSED)
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d10d      	bne.n	800a710 <TCPP0203_SetGateDriverProvider+0x46>
    {
      /* If Gate Driver Provider is to be closed, Gate Driver Consumer should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverProvider | TCPP0203_GD_CONSUMER_SWITCH_OPEN),
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	f043 0308 	orr.w	r3, r3, #8
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	220c      	movs	r2, #12
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fa98 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a706:	4602      	mov	r2, r0
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	e009      	b.n	800a724 <TCPP0203_SetGateDriverProvider+0x5a>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverProvider, TCPP0203_GD_PROVIDER_SWITCH_MSK);
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	2204      	movs	r2, #4
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fa8d 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a71c:	4602      	mov	r2, r0
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4413      	add	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <TCPP0203_SetGateDriverConsumer>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_OPEN    GDC Switch Load Open
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_CLOSED  GDC Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverConsumer(TCPP0203_Object_t *pObj, uint8_t GateDriverConsumer)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 800a740:	4b16      	ldr	r3, [pc, #88]	; (800a79c <TCPP0203_SetGateDriverConsumer+0x6c>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <TCPP0203_SetGateDriverConsumer+0x1e>
  {
    return (TCPP0203_ERROR);
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	e022      	b.n	800a794 <TCPP0203_SetGateDriverConsumer+0x64>
  }

  if ((GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_OPEN)
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	2b08      	cmp	r3, #8
 800a752:	d006      	beq.n	800a762 <TCPP0203_SetGateDriverConsumer+0x32>
      && (GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_CLOSED))
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <TCPP0203_SetGateDriverConsumer+0x32>
  {
    ret = TCPP0203_ERROR;
 800a75a:	f04f 33ff 	mov.w	r3, #4294967295
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	e017      	b.n	800a792 <TCPP0203_SetGateDriverConsumer+0x62>
  }
  else
  {
    /* Update GDC Switch Load setting in Writing register Reg0 */
    if (GateDriverConsumer == TCPP0203_GD_CONSUMER_SWITCH_CLOSED)
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <TCPP0203_SetGateDriverConsumer+0x4e>
    {
      /* If Gate Driver Consumer is to be closed, Gate Driver Provider should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverConsumer | TCPP0203_GD_PROVIDER_SWITCH_OPEN),
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	220c      	movs	r2, #12
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa61 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a774:	4602      	mov	r2, r0
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e009      	b.n	800a792 <TCPP0203_SetGateDriverConsumer+0x62>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverConsumer, TCPP0203_GD_CONSUMER_SWITCH_MSK);
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	2208      	movs	r2, #8
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fa56 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a78a:	4602      	mov	r2, r0
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a792:	68fb      	ldr	r3, [r7, #12]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200002dc 	.word	0x200002dc

0800a7a0 <TCPP0203_SetPowerMode>:
  *          @arg TCPP0203_POWER_MODE_LOWPOWER     Low Power
  *          @arg TCPP0203_POWER_MODE_NORMAL       Normal
  * @retval Component status
  */
int32_t TCPP0203_SetPowerMode(TCPP0203_Object_t *pObj, uint8_t PowerMode)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]

  if ((PowerMode != TCPP0203_POWER_MODE_HIBERNATE)
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_LOWPOWER)
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d006      	beq.n	800a7ca <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_NORMAL))
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	2b10      	cmp	r3, #16
 800a7c0:	d003      	beq.n	800a7ca <TCPP0203_SetPowerMode+0x2a>
  {
    ret = TCPP0203_ERROR;
 800a7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e009      	b.n	800a7de <TCPP0203_SetPowerMode+0x3e>
  }
  else
  {
    /* Update Power Mode setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, PowerMode, TCPP0203_POWER_MODE_MSK);
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	2230      	movs	r2, #48	; 0x30
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa30 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a7de:	68fb      	ldr	r3, [r7, #12]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <TCPP0203_SetVBusDischarge>:
  *          @arg TCPP0203_VBUS_DISCHARGE_OFF    VBUS Discharge Off
  *          @arg TCPP0203_VBUS_DISCHARGE_ON     VBUS Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVBusDischarge(TCPP0203_Object_t *pObj, uint8_t VBusDischarge)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]

  if ((VBusDischarge != TCPP0203_VBUS_DISCHARGE_OFF)
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d006      	beq.n	800a80c <TCPP0203_SetVBusDischarge+0x24>
      && (VBusDischarge != TCPP0203_VBUS_DISCHARGE_ON))
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d003      	beq.n	800a80c <TCPP0203_SetVBusDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 800a804:	f04f 33ff 	mov.w	r3, #4294967295
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	e009      	b.n	800a820 <TCPP0203_SetVBusDischarge+0x38>
  }
  else
  {
    /* Update VBUS Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VBusDischarge, TCPP0203_VBUS_DISCHARGE_MSK);
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	2240      	movs	r2, #64	; 0x40
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa0f 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a818:	4602      	mov	r2, r0
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a820:	68fb      	ldr	r3, [r7, #12]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <TCPP0203_SetVConnDischarge>:
  *          @arg TCPP0203_VCONN_DISCHARGE_OFF    VConn Discharge Off
  *          @arg TCPP0203_VCONN_DISCHARGE_ON     VConn Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVConnDischarge(TCPP0203_Object_t *pObj, uint8_t VConnDischarge)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]

  if ((VConnDischarge != TCPP0203_VCONN_DISCHARGE_OFF)
 800a83a:	78fb      	ldrb	r3, [r7, #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <TCPP0203_SetVConnDischarge+0x24>
      && (VConnDischarge != TCPP0203_VCONN_DISCHARGE_ON))
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d003      	beq.n	800a84e <TCPP0203_SetVConnDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e009      	b.n	800a862 <TCPP0203_SetVConnDischarge+0x38>
  }
  else
  {
    /* Update VConn Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnDischarge, TCPP0203_VCONN_DISCHARGE_MSK);
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	2280      	movs	r2, #128	; 0x80
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f9ee 	bl	800ac36 <TCPP0203_ModifyReg0>
 800a85a:	4602      	mov	r2, r0
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a862:	68fb      	ldr	r3, [r7, #12]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <TCPP0203_GetVConnSwitchAck>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1 Ack
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2 Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnSwitchAck(TCPP0203_Object_t *pObj, uint8_t *pVConnSwitchAck)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f103 0018 	add.w	r0, r3, #24
 800a87c:	f107 020b 	add.w	r2, r7, #11
 800a880:	2301      	movs	r3, #1
 800a882:	2101      	movs	r1, #1
 800a884:	f000 fa0d 	bl	800aca2 <tcpp0203_read_reg>
 800a888:	60f8      	str	r0, [r7, #12]
  *pVConnSwitchAck = (tmp & TCPP0203_VCONN_SWITCH_ACK_MSK);
 800a88a:	7afb      	ldrb	r3, [r7, #11]
 800a88c:	f003 0303 	and.w	r3, r3, #3
 800a890:	b2da      	uxtb	r2, r3
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	701a      	strb	r2, [r3, #0]

  return ret;
 800a896:	68fb      	ldr	r3, [r7, #12]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <TCPP0203_GetGateDriverProviderAck>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_OPEN    Gate Driver Provider Open Ack
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_CLOSED  Gate Driver Provider Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverProviderAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverProviderAck)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f103 0018 	add.w	r0, r3, #24
 800a8b0:	f107 020b 	add.w	r2, r7, #11
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	f000 f9f3 	bl	800aca2 <tcpp0203_read_reg>
 800a8bc:	60f8      	str	r0, [r7, #12]
  *pGateDriverProviderAck = (tmp & TCPP0203_GD_PROVIDER_SWITCH_ACK_MSK);
 800a8be:	7afb      	ldrb	r3, [r7, #11]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	701a      	strb	r2, [r3, #0]

  return ret;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <TCPP0203_GetGateDriverConsumerAck>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_OPEN    Gate Driver Consumer Open Ack
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_CLOSED  Gate Driver Consumer Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverConsumerAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverConsumerAck)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 800a8de:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <TCPP0203_GetGateDriverConsumerAck+0x44>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <TCPP0203_GetGateDriverConsumerAck+0x18>
  {
    return (TCPP0203_ERROR);
 800a8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ea:	e010      	b.n	800a90e <TCPP0203_GetGateDriverConsumerAck+0x3a>
  }

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f103 0018 	add.w	r0, r3, #24
 800a8f2:	f107 020b 	add.w	r2, r7, #11
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	f000 f9d2 	bl	800aca2 <tcpp0203_read_reg>
 800a8fe:	60f8      	str	r0, [r7, #12]
  *pGateDriverConsumerAck = (tmp & TCPP0203_GD_CONSUMER_SWITCH_ACK_MSK);
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	b2da      	uxtb	r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	701a      	strb	r2, [r3, #0]

  return ret;
 800a90c:	68fb      	ldr	r3, [r7, #12]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200002dc 	.word	0x200002dc

0800a91c <TCPP0203_GetPowerModeAck>:
  *          @arg TCPP0203_POWER_MODE_ACK_LOWPOWER   Power Mode Low Power Ack
  *          @arg TCPP0203_POWER_MODE_ACK_NORMAL     Power Mode Normal Ack
  * @retval Component status
  */
int32_t TCPP0203_GetPowerModeAck(TCPP0203_Object_t *pObj, uint8_t *pPowerModeAck)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f103 0018 	add.w	r0, r3, #24
 800a92c:	f107 020b 	add.w	r2, r7, #11
 800a930:	2301      	movs	r3, #1
 800a932:	2101      	movs	r1, #1
 800a934:	f000 f9b5 	bl	800aca2 <tcpp0203_read_reg>
 800a938:	60f8      	str	r0, [r7, #12]
  *pPowerModeAck = (tmp & TCPP0203_POWER_MODE_ACK_MSK);
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a940:	b2da      	uxtb	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	701a      	strb	r2, [r3, #0]

  return ret;
 800a946:	68fb      	ldr	r3, [r7, #12]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <TCPP0203_GetVBusDischargeAck>:
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_OFF   VBUS Discharge Off Ack
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_ON    VBUS Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVBusDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVBusDischargeAck)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f103 0018 	add.w	r0, r3, #24
 800a960:	f107 020b 	add.w	r2, r7, #11
 800a964:	2301      	movs	r3, #1
 800a966:	2101      	movs	r1, #1
 800a968:	f000 f99b 	bl	800aca2 <tcpp0203_read_reg>
 800a96c:	60f8      	str	r0, [r7, #12]
  *pVBusDischargeAck = (tmp & TCPP0203_VBUS_DISCHARGE_ACK_MSK);
 800a96e:	7afb      	ldrb	r3, [r7, #11]
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	b2da      	uxtb	r2, r3
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	701a      	strb	r2, [r3, #0]

  return ret;
 800a97a:	68fb      	ldr	r3, [r7, #12]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <TCPP0203_GetVConnDischargeAck>:
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_OFF   VConn Discharge Off Ack
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_ON    VConn Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVConnDischargeAck)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 0018 	add.w	r0, r3, #24
 800a994:	f107 020b 	add.w	r2, r7, #11
 800a998:	2301      	movs	r3, #1
 800a99a:	2101      	movs	r1, #1
 800a99c:	f000 f981 	bl	800aca2 <tcpp0203_read_reg>
 800a9a0:	60f8      	str	r0, [r7, #12]
  *pVConnDischargeAck = (tmp & TCPP0203_VCONN_DISCHARGE_ACK_MSK);
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	701a      	strb	r2, [r3, #0]

  return ret;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <TCPP0203_GetOCPVConnFlag>:
  *          @arg TCPP0203_FLAG_OCP_VCONN_RESET   OCP VConn flag not set
  *          @arg TCPP0203_FLAG_OCP_VCONN_SET     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVConnFlag(TCPP0203_Object_t *pObj, uint8_t *pOCPVConnFlag)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f103 0018 	add.w	r0, r3, #24
 800a9c8:	f107 020b 	add.w	r2, r7, #11
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	f000 f967 	bl	800aca2 <tcpp0203_read_reg>
 800a9d4:	60f8      	str	r0, [r7, #12]
  *pOCPVConnFlag = (tmp & TCPP0203_FLAG_OCP_VCONN_MSK);
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]

  return ret;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <TCPP0203_GetOCPVBusFlag>:
  *          @arg TCPP0203_FLAG_OCP_VBUS_RESET   OCP VBUS flag not set
  *          @arg TCPP0203_FLAG_OCP_VBUS_SET     OCP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pGetOCPVBusFlag)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f103 0018 	add.w	r0, r3, #24
 800a9fc:	f107 020b 	add.w	r2, r7, #11
 800aa00:	2301      	movs	r3, #1
 800aa02:	2102      	movs	r1, #2
 800aa04:	f000 f94d 	bl	800aca2 <tcpp0203_read_reg>
 800aa08:	60f8      	str	r0, [r7, #12]
  *pGetOCPVBusFlag = (tmp & TCPP0203_FLAG_OCP_VBUS_MSK);
 800aa0a:	7afb      	ldrb	r3, [r7, #11]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	701a      	strb	r2, [r3, #0]

  return ret;
 800aa16:	68fb      	ldr	r3, [r7, #12]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <TCPP0203_GetOVPVBusFlag>:
  *          @arg TCPP0203_FLAG_OVP_VBUS_RESET   OVP VBUS flag not set
  *          @arg TCPP0203_FLAG_OVP_VBUS_SET     OVP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPVBusFlag)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f103 0018 	add.w	r0, r3, #24
 800aa30:	f107 020b 	add.w	r2, r7, #11
 800aa34:	2301      	movs	r3, #1
 800aa36:	2102      	movs	r1, #2
 800aa38:	f000 f933 	bl	800aca2 <tcpp0203_read_reg>
 800aa3c:	60f8      	str	r0, [r7, #12]
  *pOVPVBusFlag = (tmp & TCPP0203_FLAG_OVP_VBUS_MSK);
 800aa3e:	7afb      	ldrb	r3, [r7, #11]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	701a      	strb	r2, [r3, #0]

  return ret;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <TCPP0203_GetOVPCCFlag>:
  *          @arg TCPP0203_FLAG_OVP_CC_RESET   OVP CC flag not set
  *          @arg TCPP0203_FLAG_OVP_CC_SET     OVP CC flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPCCFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPCCFlag)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f103 0018 	add.w	r0, r3, #24
 800aa64:	f107 020b 	add.w	r2, r7, #11
 800aa68:	2301      	movs	r3, #1
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	f000 f919 	bl	800aca2 <tcpp0203_read_reg>
 800aa70:	60f8      	str	r0, [r7, #12]
  *pOVPCCFlag = (tmp & TCPP0203_FLAG_OVP_CC_MSK);
 800aa72:	7afb      	ldrb	r3, [r7, #11]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	701a      	strb	r2, [r3, #0]

  return ret;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <TCPP0203_GetOTPFlag>:
  *          @arg TCPP0203_FLAG_OTP_RESET   Over Temperature flag not set
  *          @arg TCPP0203_FLAG_OTP_SET     Over Temperature flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOTPFlag(TCPP0203_Object_t *pObj, uint8_t *pOTPFlag)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f103 0018 	add.w	r0, r3, #24
 800aa98:	f107 020b 	add.w	r2, r7, #11
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	2102      	movs	r1, #2
 800aaa0:	f000 f8ff 	bl	800aca2 <tcpp0203_read_reg>
 800aaa4:	60f8      	str	r0, [r7, #12]
  *pOTPFlag = (tmp & TCPP0203_FLAG_OTP_MSK);
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	701a      	strb	r2, [r3, #0]

  return ret;
 800aab2:	68fb      	ldr	r3, [r7, #12]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <TCPP0203_GetVBusOkFlag>:
  *          @arg TCPP0203_FLAG_VBUS_OK_RESET   VBUS OK flag not set
  *          @arg TCPP0203_FLAG_VBUS_OK_SET     VBUS OK flag set
  * @retval Component status
  */
int32_t TCPP0203_GetVBusOkFlag(TCPP0203_Object_t *pObj, uint8_t *pVBusOkFlag)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f103 0018 	add.w	r0, r3, #24
 800aacc:	f107 020b 	add.w	r2, r7, #11
 800aad0:	2301      	movs	r3, #1
 800aad2:	2102      	movs	r1, #2
 800aad4:	f000 f8e5 	bl	800aca2 <tcpp0203_read_reg>
 800aad8:	60f8      	str	r0, [r7, #12]
  *pVBusOkFlag = (tmp & TCPP0203_FLAG_VBUS_OK_MSK);
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	701a      	strb	r2, [r3, #0]

  return ret;
 800aae6:	68fb      	ldr	r3, [r7, #12]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <TCPP0203_ReadTCPPType>:
  *          @arg TCPP0203_DEVICE_TYPE_02   TCPP02 Type
  *          @arg TCPP0203_DEVICE_TYPE_03   TCPP03 Type
  * @retval Component status
  */
int32_t TCPP0203_ReadTCPPType(TCPP0203_Object_t *pObj, uint8_t *pTCPPType)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f103 0018 	add.w	r0, r3, #24
 800ab00:	f107 020b 	add.w	r2, r7, #11
 800ab04:	2301      	movs	r3, #1
 800ab06:	2102      	movs	r1, #2
 800ab08:	f000 f8cb 	bl	800aca2 <tcpp0203_read_reg>
 800ab0c:	60f8      	str	r0, [r7, #12]
  *pTCPPType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	701a      	strb	r2, [r3, #0]

  return ret;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <TCPP0203_ReadVCONNPower>:
  *          @arg TCPP0203_FLAG_VCONN_PWR_1W       OCP VConn flag not set
  *          @arg TCPP0203_FLAG_VCONN_PWR_0_1W     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_ReadVCONNPower(TCPP0203_Object_t *pObj, uint8_t *pVCONNPower)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f103 0018 	add.w	r0, r3, #24
 800ab34:	f107 020b 	add.w	r2, r7, #11
 800ab38:	2301      	movs	r3, #1
 800ab3a:	2102      	movs	r1, #2
 800ab3c:	f000 f8b1 	bl	800aca2 <tcpp0203_read_reg>
 800ab40:	60f8      	str	r0, [r7, #12]
  *pVCONNPower = (tmp & TCPP0203_FLAG_VCONN_PWR_MSK);
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	701a      	strb	r2, [r3, #0]

  return ret;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <TCPP0203_WriteCtrlRegister>:
  * @param  pObj Pointer to component object
  * @param  pCtrlRegister Pointer on Ctrl register value
  * @retval Component status
  */
int32_t TCPP0203_WriteCtrlRegister(TCPP0203_Object_t *pObj, uint8_t *pCtrlRegister)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  /* Update value in writing register (reg0) */
  ret = tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, pCtrlRegister, 1);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f103 0018 	add.w	r0, r3, #24
 800ab68:	2301      	movs	r3, #1
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	f000 f8af 	bl	800acd0 <tcpp0203_write_reg>
 800ab72:	60f8      	str	r0, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pCtrlRegister;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 800ab74:	68fb      	ldr	r3, [r7, #12]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <TCPP0203_ReadAckRegister>:
  * @param  pObj Pointer to component object
  * @param  pAckRegister Pointer on Ack register value
  * @retval Component status
  */
int32_t TCPP0203_ReadAckRegister(TCPP0203_Object_t *pObj, uint8_t *pAckRegister)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, pAckRegister, 1);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f103 0018 	add.w	r0, r3, #24
 800ab8e:	2301      	movs	r3, #1
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	2101      	movs	r1, #1
 800ab94:	f000 f885 	bl	800aca2 <tcpp0203_read_reg>
 800ab98:	60f8      	str	r0, [r7, #12]

  return ret;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <TCPP0203_ReadFlagRegister>:
  * @param  pObj Pointer to component object
  * @param  pFlagRegister Pointer on Flag register value
  * @retval Component status
  */
int32_t TCPP0203_ReadFlagRegister(TCPP0203_Object_t *pObj, uint8_t *pFlagRegister)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, pFlagRegister, 1);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f103 0018 	add.w	r0, r3, #24
 800abb4:	2301      	movs	r3, #1
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	2102      	movs	r1, #2
 800abba:	f000 f872 	bl	800aca2 <tcpp0203_read_reg>
 800abbe:	60f8      	str	r0, [r7, #12]

  return ret;
 800abc0:	68fb      	ldr	r3, [r7, #12]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <TCPP0203_ReadRegWrap>:
  * @param  pData   Buffer where Target register value should be stored
  * @param  Length  buffer size to be read
  * @retval error status
  */
static int32_t TCPP0203_ReadRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800abca:	b590      	push	{r4, r7, lr}
 800abcc:	b087      	sub	sp, #28
 800abce:	af00      	add	r7, sp, #0
 800abd0:	60f8      	str	r0, [r7, #12]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	461a      	mov	r2, r3
 800abd6:	460b      	mov	r3, r1
 800abd8:	72fb      	strb	r3, [r7, #11]
 800abda:	4613      	mov	r3, r2
 800abdc:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	691c      	ldr	r4, [r3, #16]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	8918      	ldrh	r0, [r3, #8]
 800abea:	7afb      	ldrb	r3, [r7, #11]
 800abec:	b299      	uxth	r1, r3
 800abee:	7abb      	ldrb	r3, [r7, #10]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	47a0      	blx	r4
 800abf6:	4603      	mov	r3, r0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	371c      	adds	r7, #28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd90      	pop	{r4, r7, pc}

0800ac00 <TCPP0203_WriteRegWrap>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_WriteRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800ac00:	b590      	push	{r4, r7, lr}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	72fb      	strb	r3, [r7, #11]
 800ac10:	4613      	mov	r3, r2
 800ac12:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	617b      	str	r3, [r7, #20]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pData;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	68dc      	ldr	r4, [r3, #12]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	8918      	ldrh	r0, [r3, #8]
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	b299      	uxth	r1, r3
 800ac24:	7abb      	ldrb	r3, [r7, #10]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	47a0      	blx	r4
 800ac2c:	4603      	mov	r3, r0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd90      	pop	{r4, r7, pc}

0800ac36 <TCPP0203_ModifyReg0>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_ModifyReg0(TCPP0203_Object_t *pObj, uint8_t Value, uint8_t Mask)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
 800ac42:	4613      	mov	r3, r2
 800ac44:	70bb      	strb	r3, [r7, #2]
  int32_t ret;
  uint8_t tmp;

  /* Read current content of ACK register (reflects content of bits set to 1 in Writing register Reg0) */
  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f103 0018 	add.w	r0, r3, #24
 800ac4c:	f107 020b 	add.w	r2, r7, #11
 800ac50:	2301      	movs	r3, #1
 800ac52:	2101      	movs	r1, #1
 800ac54:	f000 f825 	bl	800aca2 <tcpp0203_read_reg>
 800ac58:	60f8      	str	r0, [r7, #12]

  /* Update only the area dedicated to Mask */
  tmp &= ~(Mask);
 800ac5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac5e:	43db      	mvns	r3, r3
 800ac60:	b25a      	sxtb	r2, r3
 800ac62:	7afb      	ldrb	r3, [r7, #11]
 800ac64:	b25b      	sxtb	r3, r3
 800ac66:	4013      	ands	r3, r2
 800ac68:	b25b      	sxtb	r3, r3
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	72fb      	strb	r3, [r7, #11]
  tmp |= (Value & Mask);
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	78bb      	ldrb	r3, [r7, #2]
 800ac72:	4013      	ands	r3, r2
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	72fb      	strb	r3, [r7, #11]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = tmp;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  /* Update value in writing register (reg0) */
  ret += tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f103 0018 	add.w	r0, r3, #24
 800ac84:	f107 020b 	add.w	r2, r7, #11
 800ac88:	2301      	movs	r3, #1
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	f000 f820 	bl	800acd0 <tcpp0203_write_reg>
 800ac90:	4602      	mov	r2, r0
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	4413      	add	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  ret += TCPP0203_CheckReg0Reg1(pObj, Reg0_Expected_Value);
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 800ac98:	68fb      	ldr	r3, [r7, #12]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <tcpp0203_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : data Read
  *******************************************************************************/
int32_t tcpp0203_read_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 800aca2:	b590      	push	{r4, r7, lr}
 800aca4:	b085      	sub	sp, #20
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	461a      	mov	r2, r3
 800acae:	460b      	mov	r3, r1
 800acb0:	72fb      	strb	r3, [r7, #11]
 800acb2:	4613      	mov	r3, r2
 800acb4:	72bb      	strb	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	685c      	ldr	r4, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6898      	ldr	r0, [r3, #8]
 800acbe:	7abb      	ldrb	r3, [r7, #10]
 800acc0:	7af9      	ldrb	r1, [r7, #11]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	47a0      	blx	r4
 800acc6:	4603      	mov	r3, r0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bd90      	pop	{r4, r7, pc}

0800acd0 <tcpp0203_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t tcpp0203_write_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	607a      	str	r2, [r7, #4]
 800acda:	461a      	mov	r2, r3
 800acdc:	460b      	mov	r3, r1
 800acde:	72fb      	strb	r3, [r7, #11]
 800ace0:	4613      	mov	r3, r2
 800ace2:	72bb      	strb	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681c      	ldr	r4, [r3, #0]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6898      	ldr	r0, [r3, #8]
 800acec:	7abb      	ldrb	r3, [r7, #10]
 800acee:	7af9      	ldrb	r1, [r7, #11]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	47a0      	blx	r4
 800acf4:	4603      	mov	r3, r0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd90      	pop	{r4, r7, pc}
	...

0800ad00 <MX_I2C_Init>:
/**
  * @brief  MX I2C1 Initialization as generated by CubeMX.
  * @retval Status
  */
__weak HAL_StatusTypeDef MX_I2C_Init(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	71fb      	strb	r3, [r7, #7]

  TCPP0X_HANDLE_I2C.Init.Timing           = I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C_FREQUENCY);
 800ad0a:	f003 ff33 	bl	800eb74 <HAL_RCC_GetPCLK1Freq>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	491e      	ldr	r1, [pc, #120]	; (800ad8c <MX_I2C_Init+0x8c>)
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f97c 	bl	800b010 <I2C_GetTiming>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	4a1d      	ldr	r2, [pc, #116]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad1c:	6053      	str	r3, [r2, #4]
  TCPP0X_HANDLE_I2C.Init.OwnAddress1      = 0;
 800ad1e:	4b1c      	ldr	r3, [pc, #112]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	609a      	str	r2, [r3, #8]
  TCPP0X_HANDLE_I2C.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ad24:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	60da      	str	r2, [r3, #12]
  TCPP0X_HANDLE_I2C.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ad2a:	4b19      	ldr	r3, [pc, #100]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	611a      	str	r2, [r3, #16]
  TCPP0X_HANDLE_I2C.Init.OwnAddress2      = 0;
 800ad30:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	615a      	str	r2, [r3, #20]
  TCPP0X_HANDLE_I2C.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800ad36:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	61da      	str	r2, [r3, #28]
  TCPP0X_HANDLE_I2C.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ad3c:	4b14      	ldr	r3, [pc, #80]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  /* Init the I2C Msp */
  I2C_MspInit(&TCPP0X_HANDLE_I2C);
 800ad42:	4813      	ldr	r0, [pc, #76]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad44:	f000 f8da 	bl	800aefc <I2C_MspInit>
      return BSP_ERROR_MSP_FAILURE;
    }
  }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS == 0 */

  if (HAL_I2C_Init(&TCPP0X_HANDLE_I2C) != HAL_OK)
 800ad48:	4811      	ldr	r0, [pc, #68]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad4a:	f003 f8af 	bl	800deac <HAL_I2C_Init>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <MX_I2C_Init+0x5a>
  {
    ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	71fb      	strb	r3, [r7, #7]
 800ad58:	e012      	b.n	800ad80 <MX_I2C_Init+0x80>
  }
  else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	480c      	ldr	r0, [pc, #48]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad5e:	f003 fe65 	bl	800ea2c <HAL_I2CEx_ConfigAnalogFilter>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <MX_I2C_Init+0x6e>
  {
    ret = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	71fb      	strb	r3, [r7, #7]
 800ad6c:	e008      	b.n	800ad80 <MX_I2C_Init+0x80>
  }
  else
  {
    if (HAL_I2CEx_ConfigDigitalFilter(&TCPP0X_HANDLE_I2C, 0) != HAL_OK)
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4807      	ldr	r0, [pc, #28]	; (800ad90 <MX_I2C_Init+0x90>)
 800ad72:	f003 fea6 	bl	800eac2 <HAL_I2CEx_ConfigDigitalFilter>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <MX_I2C_Init+0x80>
    {
      ret = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return ret;
 800ad80:	79fb      	ldrb	r3, [r7, #7]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	00061a80 	.word	0x00061a80
 800ad90:	200002e0 	.word	0x200002e0

0800ad94 <BSP_I2C_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_Init(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	607b      	str	r3, [r7, #4]

  TCPP0X_HANDLE_I2C.Instance  = BUS_I2C_INSTANCE;
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <BSP_I2C_Init+0x54>)
 800ada0:	4a12      	ldr	r2, [pc, #72]	; (800adec <BSP_I2C_Init+0x58>)
 800ada2:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&TCPP0X_HANDLE_I2C) == HAL_I2C_STATE_RESET)
 800ada4:	4810      	ldr	r0, [pc, #64]	; (800ade8 <BSP_I2C_Init+0x54>)
 800ada6:	f003 fb81 	bl	800e4ac <HAL_I2C_GetState>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d115      	bne.n	800addc <BSP_I2C_Init+0x48>
  {
    /* Init the I2C */
    if (MX_I2C_Init() != HAL_OK)
 800adb0:	f7ff ffa6 	bl	800ad00 <MX_I2C_Init>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <BSP_I2C_Init+0x2e>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800adba:	f06f 0307 	mvn.w	r3, #7
 800adbe:	607b      	str	r3, [r7, #4]
 800adc0:	e00c      	b.n	800addc <BSP_I2C_Init+0x48>
    }
    else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800adc2:	2100      	movs	r1, #0
 800adc4:	4808      	ldr	r0, [pc, #32]	; (800ade8 <BSP_I2C_Init+0x54>)
 800adc6:	f003 fe31 	bl	800ea2c <HAL_I2CEx_ConfigAnalogFilter>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <BSP_I2C_Init+0x44>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800add0:	f06f 0307 	mvn.w	r3, #7
 800add4:	607b      	str	r3, [r7, #4]
 800add6:	e001      	b.n	800addc <BSP_I2C_Init+0x48>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800add8:	2300      	movs	r3, #0
 800adda:	607b      	str	r3, [r7, #4]
    }
  }
  return ret;
 800addc:	687b      	ldr	r3, [r7, #4]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	200002e0 	.word	0x200002e0
 800adec:	40005400 	.word	0x40005400

0800adf0 <BSP_I2C_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_DeInit(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	607b      	str	r3, [r7, #4]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  I2C_MspDeInit(&TCPP0X_HANDLE_I2C);
 800adfa:	4808      	ldr	r0, [pc, #32]	; (800ae1c <BSP_I2C_DeInit+0x2c>)
 800adfc:	f000 f8da 	bl	800afb4 <I2C_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

  /* Init the I2C */
  if (HAL_I2C_DeInit(&TCPP0X_HANDLE_I2C) != HAL_OK)
 800ae00:	4806      	ldr	r0, [pc, #24]	; (800ae1c <BSP_I2C_DeInit+0x2c>)
 800ae02:	f003 f8e2 	bl	800dfca <HAL_I2C_DeInit>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <BSP_I2C_DeInit+0x22>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800ae0c:	f06f 0303 	mvn.w	r3, #3
 800ae10:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800ae12:	687b      	ldr	r3, [r7, #4]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200002e0 	.word	0x200002e0

0800ae20 <BSP_I2C_WriteReg>:
  * @param  pData    The target register value to written
  * @param  Length   buffer size to write
  * @retval BSP status
  */
int32_t BSP_I2C_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b08a      	sub	sp, #40	; 0x28
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	60ba      	str	r2, [r7, #8]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	81fb      	strh	r3, [r7, #14]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	81bb      	strh	r3, [r7, #12]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if (HAL_I2C_Mem_Write(&TCPP0X_HANDLE_I2C, (uint8_t)DevAddr,
 800ae36:	89fb      	ldrh	r3, [r7, #14]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	b299      	uxth	r1, r3
 800ae3c:	89ba      	ldrh	r2, [r7, #12]
 800ae3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	88fb      	ldrh	r3, [r7, #6]
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	480d      	ldr	r0, [pc, #52]	; (800ae84 <BSP_I2C_WriteReg+0x64>)
 800ae50:	f003 f8fe 	bl	800e050 <HAL_I2C_Mem_Write>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <BSP_I2C_WriteReg+0x40>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]
 800ae5e:	e00c      	b.n	800ae7a <BSP_I2C_WriteReg+0x5a>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 800ae60:	4808      	ldr	r0, [pc, #32]	; (800ae84 <BSP_I2C_WriteReg+0x64>)
 800ae62:	f003 fb31 	bl	800e4c8 <HAL_I2C_GetError>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d103      	bne.n	800ae74 <BSP_I2C_WriteReg+0x54>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800ae6c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e002      	b.n	800ae7a <BSP_I2C_WriteReg+0x5a>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800ae74:	f06f 0303 	mvn.w	r3, #3
 800ae78:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800ae7a:	697b      	ldr	r3, [r7, #20]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	200002e0 	.word	0x200002e0

0800ae88 <BSP_I2C_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af04      	add	r7, sp, #16
 800ae8e:	60ba      	str	r2, [r7, #8]
 800ae90:	461a      	mov	r2, r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	81fb      	strh	r3, [r7, #14]
 800ae96:	460b      	mov	r3, r1
 800ae98:	81bb      	strh	r3, [r7, #12]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if (HAL_I2C_Mem_Read(&TCPP0X_HANDLE_I2C, DevAddr, (uint16_t)Reg,
 800ae9e:	89ba      	ldrh	r2, [r7, #12]
 800aea0:	89f9      	ldrh	r1, [r7, #14]
 800aea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	88fb      	ldrh	r3, [r7, #6]
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	480d      	ldr	r0, [pc, #52]	; (800aee8 <BSP_I2C_ReadReg+0x60>)
 800aeb4:	f003 f9e0 	bl	800e278 <HAL_I2C_Mem_Read>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <BSP_I2C_ReadReg+0x3c>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
 800aec2:	e00c      	b.n	800aede <BSP_I2C_ReadReg+0x56>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 800aec4:	4808      	ldr	r0, [pc, #32]	; (800aee8 <BSP_I2C_ReadReg+0x60>)
 800aec6:	f003 faff 	bl	800e4c8 <HAL_I2C_GetError>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d103      	bne.n	800aed8 <BSP_I2C_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800aed0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e002      	b.n	800aede <BSP_I2C_ReadReg+0x56>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800aed8:	f06f 0303 	mvn.w	r3, #3
 800aedc:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800aede:	697b      	ldr	r3, [r7, #20]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	200002e0 	.word	0x200002e0

0800aeec <BSP_GetTick>:
/**
  * @brief  Return system tick (ms) function.
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aef0:	f002 f98e 	bl	800d210 <HAL_GetTick>
 800aef4:	4603      	mov	r3, r0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <I2C_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b0a0      	sub	sp, #128	; 0x80
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

  /* -1- Configure the I2C clock source. The clock is derived from the SYSCLK */
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800af04:	2340      	movs	r3, #64	; 0x40
 800af06:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800af08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800af0e:	f107 0318 	add.w	r3, r7, #24
 800af12:	4618      	mov	r0, r3
 800af14:	f003 fe44 	bl	800eba0 <HAL_RCCEx_PeriphCLKConfig>

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_ENABLE();
 800af18:	4b24      	ldr	r3, [pc, #144]	; (800afac <I2C_MspInit+0xb0>)
 800af1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1c:	4a23      	ldr	r2, [pc, #140]	; (800afac <I2C_MspInit+0xb0>)
 800af1e:	f043 0302 	orr.w	r3, r3, #2
 800af22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af24:	4b21      	ldr	r3, [pc, #132]	; (800afac <I2C_MspInit+0xb0>)
 800af26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af28:	f003 0302 	and.w	r3, r3, #2
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	697b      	ldr	r3, [r7, #20]
  /* Enable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_ENABLE();
 800af30:	4b1e      	ldr	r3, [pc, #120]	; (800afac <I2C_MspInit+0xb0>)
 800af32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af34:	4a1d      	ldr	r2, [pc, #116]	; (800afac <I2C_MspInit+0xb0>)
 800af36:	f043 0302 	orr.w	r3, r3, #2
 800af3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af3c:	4b1b      	ldr	r3, [pc, #108]	; (800afac <I2C_MspInit+0xb0>)
 800af3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SCL_GPIO_PIN;
 800af48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800af4e:	2312      	movs	r3, #18
 800af50:	673b      	str	r3, [r7, #112]	; 0x70
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800af52:	2301      	movs	r3, #1
 800af54:	677b      	str	r3, [r7, #116]	; 0x74
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800af56:	2302      	movs	r3, #2
 800af58:	67bb      	str	r3, [r7, #120]	; 0x78
  gpio_init_structure.Alternate = BUS_I2C_SCL_GPIO_AF;
 800af5a:	2304      	movs	r3, #4
 800af5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(BUS_I2C_SCL_GPIO_PORT, &gpio_init_structure);
 800af5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800af62:	4619      	mov	r1, r3
 800af64:	4812      	ldr	r0, [pc, #72]	; (800afb0 <I2C_MspInit+0xb4>)
 800af66:	f002 fd23 	bl	800d9b0 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SDA_GPIO_PIN;
 800af6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800af70:	2312      	movs	r3, #18
 800af72:	673b      	str	r3, [r7, #112]	; 0x70
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800af74:	2301      	movs	r3, #1
 800af76:	677b      	str	r3, [r7, #116]	; 0x74
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800af78:	2302      	movs	r3, #2
 800af7a:	67bb      	str	r3, [r7, #120]	; 0x78
  gpio_init_structure.Alternate = BUS_I2C_SDA_GPIO_AF;
 800af7c:	2304      	movs	r3, #4
 800af7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(BUS_I2C_SDA_GPIO_PORT, &gpio_init_structure);
 800af80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800af84:	4619      	mov	r1, r3
 800af86:	480a      	ldr	r0, [pc, #40]	; (800afb0 <I2C_MspInit+0xb4>)
 800af88:	f002 fd12 	bl	800d9b0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C_CLK_ENABLE();
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <I2C_MspInit+0xb0>)
 800af8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af90:	4a06      	ldr	r2, [pc, #24]	; (800afac <I2C_MspInit+0xb0>)
 800af92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af96:	6593      	str	r3, [r2, #88]	; 0x58
 800af98:	4b04      	ldr	r3, [pc, #16]	; (800afac <I2C_MspInit+0xb0>)
 800af9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	68fb      	ldr	r3, [r7, #12]
}
 800afa4:	bf00      	nop
 800afa6:	3780      	adds	r7, #128	; 0x80
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40021000 	.word	0x40021000
 800afb0:	48000400 	.word	0x48000400

0800afb4 <I2C_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

  /* Configure I2C SCL, SDA as alternate function */
  gpio_init_structure.Pin = BUS_I2C_SCL_GPIO_PIN;
 800afbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4619      	mov	r1, r3
 800afc6:	4810      	ldr	r0, [pc, #64]	; (800b008 <I2C_MspDeInit+0x54>)
 800afc8:	f002 fe74 	bl	800dcb4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C_SDA_GPIO_PIN;
 800afcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4619      	mov	r1, r3
 800afd6:	480c      	ldr	r0, [pc, #48]	; (800b008 <I2C_MspDeInit+0x54>)
 800afd8:	f002 fe6c 	bl	800dcb4 <HAL_GPIO_DeInit>

  /** Disable GPIO clock **/
  /* Disable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_DISABLE();
 800afdc:	4b0b      	ldr	r3, [pc, #44]	; (800b00c <I2C_MspDeInit+0x58>)
 800afde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe0:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <I2C_MspDeInit+0x58>)
 800afe2:	f023 0302 	bic.w	r3, r3, #2
 800afe6:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* Disable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_DISABLE();
 800afe8:	4b08      	ldr	r3, [pc, #32]	; (800b00c <I2C_MspDeInit+0x58>)
 800afea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afec:	4a07      	ldr	r2, [pc, #28]	; (800b00c <I2C_MspDeInit+0x58>)
 800afee:	f023 0302 	bic.w	r3, r3, #2
 800aff2:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* Disable I2C clock */
  BUS_I2C_CLK_DISABLE();
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <I2C_MspDeInit+0x58>)
 800aff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff8:	4a04      	ldr	r2, [pc, #16]	; (800b00c <I2C_MspDeInit+0x58>)
 800affa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800affe:	6593      	str	r3, [r2, #88]	; 0x58
}
 800b000:	bf00      	nop
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	48000400 	.word	0x48000400
 800b00c:	40021000 	.word	0x40021000

0800b010 <I2C_GetTiming>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_freq   I2C frequency in Hz.
  * @retval I2C timing value
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t itiming;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d06b      	beq.n	800b0fc <I2C_GetTiming+0xec>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d068      	beq.n	800b0fc <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 800b02a:	2300      	movs	r3, #0
 800b02c:	613b      	str	r3, [r7, #16]
 800b02e:	e060      	b.n	800b0f2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 800b030:	4a35      	ldr	r2, [pc, #212]	; (800b108 <I2C_GetTiming+0xf8>)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	212c      	movs	r1, #44	; 0x2c
 800b036:	fb01 f303 	mul.w	r3, r1, r3
 800b03a:	4413      	add	r3, r2
 800b03c:	3304      	adds	r3, #4
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d352      	bcc.n	800b0ec <I2C_GetTiming+0xdc>
          (i2c_freq <= i2c_charac[speed].freq_max))
 800b046:	4a30      	ldr	r2, [pc, #192]	; (800b108 <I2C_GetTiming+0xf8>)
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	212c      	movs	r1, #44	; 0x2c
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	4413      	add	r3, r2
 800b052:	3308      	adds	r3, #8
 800b054:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d847      	bhi.n	800b0ec <I2C_GetTiming+0xdc>
      {
        Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b05c:	6939      	ldr	r1, [r7, #16]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f856 	bl	800b110 <Compute_PRESC_SCLDEL_SDADEL>
        itiming = Compute_SCLL_SCLH(clock_src_freq, speed);
 800b064:	6939      	ldr	r1, [r7, #16]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f910 	bl	800b28c <Compute_SCLL_SCLH>
 800b06c:	60f8      	str	r0, [r7, #12]

        if (itiming < I2C_VALID_PRESC_NBR)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b63      	cmp	r3, #99	; 0x63
 800b072:	d842      	bhi.n	800b0fa <I2C_GetTiming+0xea>
        {
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 800b074:	4925      	ldr	r1, [pc, #148]	; (800b10c <I2C_GetTiming+0xfc>)
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4613      	mov	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	0719      	lsls	r1, r3, #28
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 800b086:	4821      	ldr	r0, [pc, #132]	; (800b10c <I2C_GetTiming+0xfc>)
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4403      	add	r3, r0
 800b094:	3304      	adds	r3, #4
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	051b      	lsls	r3, r3, #20
 800b09a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 800b09e:	4319      	orrs	r1, r3
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 800b0a0:	481a      	ldr	r0, [pc, #104]	; (800b10c <I2C_GetTiming+0xfc>)
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4403      	add	r3, r0
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 800b0b8:	4319      	orrs	r1, r3
                ((valid_timing[itiming].sclh & 0xFFU) << 8)     |
 800b0ba:	4814      	ldr	r0, [pc, #80]	; (800b10c <I2C_GetTiming+0xfc>)
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4403      	add	r3, r0
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	b29b      	uxth	r3, r3
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 800b0d0:	4319      	orrs	r1, r3
                ((valid_timing[itiming].scll & 0xFFU) << 0);
 800b0d2:	480e      	ldr	r0, [pc, #56]	; (800b10c <I2C_GetTiming+0xfc>)
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4403      	add	r3, r0
 800b0e0:	3310      	adds	r3, #16
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	b2db      	uxtb	r3, r3
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	617b      	str	r3, [r7, #20]
        }
        break;
 800b0ea:	e006      	b.n	800b0fa <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d99b      	bls.n	800b030 <I2C_GetTiming+0x20>
 800b0f8:	e000      	b.n	800b0fc <I2C_GetTiming+0xec>
        break;
 800b0fa:	bf00      	nop
      }
    }
  }

  return ret;
 800b0fc:	697b      	ldr	r3, [r7, #20]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	0801bb6c 	.word	0x0801bb6c
 800b10c:	2000032c 	.word	0x2000032c

0800b110 <Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval None
  */
static void Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t i2c_speed)
{
 800b110:	b480      	push	{r7}
 800b112:	b08d      	sub	sp, #52	; 0x34
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b11a:	2310      	movs	r3, #16
 800b11c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t  tscldel_min;
  uint32_t presc;
  uint32_t iscl;
  uint32_t isda;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	085a      	lsrs	r2, r3, #1
 800b122:	4b56      	ldr	r3, [pc, #344]	; (800b27c <Compute_PRESC_SCLDEL_SDADEL+0x16c>)
 800b124:	4413      	add	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	fbb3 f3f2 	udiv	r3, r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 800b12e:	4a54      	ldr	r2, [pc, #336]	; (800b280 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	212c      	movs	r1, #44	; 0x2c
 800b134:	fb01 f303 	mul.w	r3, r1, r3
 800b138:	4413      	add	r3, r2
 800b13a:	3324      	adds	r3, #36	; 0x24
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 800b140:	4a4f      	ldr	r2, [pc, #316]	; (800b280 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	212c      	movs	r1, #44	; 0x2c
 800b146:	fb01 f303 	mul.w	r3, r1, r3
 800b14a:	4413      	add	r3, r2
 800b14c:	330c      	adds	r3, #12
 800b14e:	681b      	ldr	r3, [r3, #0]
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 800b150:	4403      	add	r3, r0
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 800b152:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
                (int32_t)I2C_ANALOG_FILTER_DELAY_MIN     -
                (int32_t)(((int32_t)i2c_charac[i2c_speed].dnf + 3) * (int32_t)ti2cclk);
 800b156:	494a      	ldr	r1, [pc, #296]	; (800b280 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	202c      	movs	r0, #44	; 0x2c
 800b15c:	fb00 f303 	mul.w	r3, r0, r3
 800b160:	440b      	add	r3, r1
 800b162:	3328      	adds	r3, #40	; 0x28
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3303      	adds	r3, #3
 800b168:	69b9      	ldr	r1, [r7, #24]
 800b16a:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	62bb      	str	r3, [r7, #40]	; 0x28

  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)i2c_charac[i2c_speed].trise + (int32_t)i2c_charac[i2c_speed].sudat_min;
 800b172:	4a43      	ldr	r2, [pc, #268]	; (800b280 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	212c      	movs	r1, #44	; 0x2c
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	3320      	adds	r3, #32
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	4a3e      	ldr	r2, [pc, #248]	; (800b280 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	212c      	movs	r1, #44	; 0x2c
 800b18a:	fb01 f303 	mul.w	r3, r1, r3
 800b18e:	4413      	add	r3, r2
 800b190:	3314      	adds	r3, #20
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4403      	add	r3, r0
 800b196:	617b      	str	r3, [r7, #20]

  if (tsdadel_min <= 0)
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc01      	bgt.n	800b1a2 <Compute_PRESC_SCLDEL_SDADEL+0x92>
  {
    tsdadel_min = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1a6:	e05e      	b.n	800b266 <Compute_PRESC_SCLDEL_SDADEL+0x156>
  {
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	623b      	str	r3, [r7, #32]
 800b1ac:	e055      	b.n	800b25a <Compute_PRESC_SCLDEL_SDADEL+0x14a>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (iscl + 1U) * (presc + 1U) * ti2cclk;
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b4:	3201      	adds	r2, #1
 800b1b6:	fb03 f202 	mul.w	r2, r3, r2
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	fb02 f303 	mul.w	r3, r2, r3
 800b1c0:	613b      	str	r3, [r7, #16]

      if (tscldel >= (uint32_t)tscldel_min)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d344      	bcc.n	800b254 <Compute_PRESC_SCLDEL_SDADEL+0x144>
      {
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	e03e      	b.n	800b24e <Compute_PRESC_SCLDEL_SDADEL+0x13e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (isda * (presc + 1U)) * ti2cclk;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	fb03 f202 	mul.w	r2, r3, r2
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	fb02 f303 	mul.w	r3, r2, r3
 800b1e0:	60fb      	str	r3, [r7, #12]

          if (tsdadel >= (uint32_t)tsdadel_min)
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d32e      	bcc.n	800b248 <Compute_PRESC_SCLDEL_SDADEL+0x138>
          {
            if (presc != prev_presc)
 800b1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d02a      	beq.n	800b248 <Compute_PRESC_SCLDEL_SDADEL+0x138>
            {
              valid_timing[valid_timing_nbr].presc = presc;
 800b1f2:	4b24      	ldr	r3, [pc, #144]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	4924      	ldr	r1, [pc, #144]	; (800b288 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	440b      	add	r3, r1
 800b202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b204:	601a      	str	r2, [r3, #0]
              valid_timing[valid_timing_nbr].tscldel = iscl;
 800b206:	4b1f      	ldr	r3, [pc, #124]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	491f      	ldr	r1, [pc, #124]	; (800b288 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	440b      	add	r3, r1
 800b216:	3304      	adds	r3, #4
 800b218:	6a3a      	ldr	r2, [r7, #32]
 800b21a:	601a      	str	r2, [r3, #0]
              valid_timing[valid_timing_nbr].tsdadel = isda;
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	4919      	ldr	r1, [pc, #100]	; (800b288 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	3308      	adds	r3, #8
 800b22e:	69fa      	ldr	r2, [r7, #28]
 800b230:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
              valid_timing_nbr ++;
 800b236:	4b13      	ldr	r3, [pc, #76]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	4a11      	ldr	r2, [pc, #68]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b23e:	6013      	str	r3, [r2, #0]

              if (valid_timing_nbr >= I2C_VALID_PRESC_NBR)
 800b240:	4b10      	ldr	r3, [pc, #64]	; (800b284 <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b63      	cmp	r3, #99	; 0x63
 800b246:	d812      	bhi.n	800b26e <Compute_PRESC_SCLDEL_SDADEL+0x15e>
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	3301      	adds	r3, #1
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b0f      	cmp	r3, #15
 800b252:	d9bd      	bls.n	800b1d0 <Compute_PRESC_SCLDEL_SDADEL+0xc0>
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	3301      	adds	r3, #1
 800b258:	623b      	str	r3, [r7, #32]
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	2b0f      	cmp	r3, #15
 800b25e:	d9a6      	bls.n	800b1ae <Compute_PRESC_SCLDEL_SDADEL+0x9e>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	3301      	adds	r3, #1
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	2b0f      	cmp	r3, #15
 800b26a:	d99d      	bls.n	800b1a8 <Compute_PRESC_SCLDEL_SDADEL+0x98>
 800b26c:	e000      	b.n	800b270 <Compute_PRESC_SCLDEL_SDADEL+0x160>
              {
                return;
 800b26e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b270:	3734      	adds	r7, #52	; 0x34
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	3b9aca00 	.word	0x3b9aca00
 800b280:	0801bb6c 	.word	0x0801bb6c
 800b284:	20000afc 	.word	0x20000afc
 800b288:	2000032c 	.word	0x2000032c

0800b28c <Compute_SCLL_SCLH>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval > 0  config index, no valid config
  */
static uint32_t Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b093      	sub	sp, #76	; 0x4c
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t ret = I2C_VALID_PRESC_NBR;
 800b296:	2364      	movs	r3, #100	; 0x64
 800b298:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_min;
  uint32_t clk_max;
  uint32_t scll_tmp;
  uint32_t sclh_tmp;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	085a      	lsrs	r2, r3, #1
 800b29e:	4b79      	ldr	r3, [pc, #484]	; (800b484 <Compute_SCLL_SCLH+0x1f8>)
 800b2a0:	4413      	add	r3, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (i2c_charac[I2C_speed].freq / 2U)) / i2c_charac[I2C_speed].freq;
 800b2aa:	4a77      	ldr	r2, [pc, #476]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	212c      	movs	r1, #44	; 0x2c
 800b2b0:	fb01 f303 	mul.w	r3, r1, r3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	085a      	lsrs	r2, r3, #1
 800b2ba:	4b72      	ldr	r3, [pc, #456]	; (800b484 <Compute_SCLL_SCLH+0x1f8>)
 800b2bc:	4413      	add	r3, r2
 800b2be:	4972      	ldr	r1, [pc, #456]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	202c      	movs	r0, #44	; 0x2c
 800b2c4:	fb00 f202 	mul.w	r2, r0, r2
 800b2c8:	440a      	add	r2, r1
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = i2c_charac[I2C_speed].dnf * ti2cclk;
 800b2d2:	4a6d      	ldr	r2, [pc, #436]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	212c      	movs	r1, #44	; 0x2c
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	4413      	add	r3, r2
 800b2de:	3328      	adds	r3, #40	; 0x28
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	fb02 f303 	mul.w	r3, r2, r3
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24

  clk_max = SEC2NSEC / i2c_charac[I2C_speed].freq_min;
 800b2ea:	4a67      	ldr	r2, [pc, #412]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	212c      	movs	r1, #44	; 0x2c
 800b2f0:	fb01 f303 	mul.w	r3, r1, r3
 800b2f4:	4413      	add	r3, r2
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a62      	ldr	r2, [pc, #392]	; (800b484 <Compute_SCLL_SCLH+0x1f8>)
 800b2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b300:	623b      	str	r3, [r7, #32]
  clk_min = SEC2NSEC / i2c_charac[I2C_speed].freq_max;
 800b302:	4a61      	ldr	r2, [pc, #388]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	212c      	movs	r1, #44	; 0x2c
 800b308:	fb01 f303 	mul.w	r3, r1, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	3308      	adds	r3, #8
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a5c      	ldr	r2, [pc, #368]	; (800b484 <Compute_SCLL_SCLH+0x1f8>)
 800b314:	fbb2 f3f3 	udiv	r3, r2, r3
 800b318:	61fb      	str	r3, [r7, #28]

  prev_clk_error = ti2cspeed;
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800b31e:	2300      	movs	r3, #0
 800b320:	637b      	str	r3, [r7, #52]	; 0x34
 800b322:	e0a2      	b.n	800b46a <Compute_SCLL_SCLH+0x1de>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (valid_timing[count].presc + 1U) * ti2cclk;
 800b324:	4959      	ldr	r1, [pc, #356]	; (800b48c <Compute_SCLL_SCLH+0x200>)
 800b326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	fb02 f303 	mul.w	r3, r2, r3
 800b33c:	61bb      	str	r3, [r7, #24]

    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 800b33e:	2300      	movs	r3, #0
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b342:	e08b      	b.n	800b45c <Compute_SCLL_SCLH+0x1d0>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((scll_tmp + 1U) * tpresc);
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	005a      	lsls	r2, r3, #1
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	441a      	add	r2, r3
 800b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34e:	3301      	adds	r3, #1
 800b350:	69b9      	ldr	r1, [r7, #24]
 800b352:	fb01 f303 	mul.w	r3, r1, r3
 800b356:	4413      	add	r3, r2
 800b358:	3332      	adds	r3, #50	; 0x32
 800b35a:	617b      	str	r3, [r7, #20]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
         tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 800b35c:	4a4a      	ldr	r2, [pc, #296]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	212c      	movs	r1, #44	; 0x2c
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	4413      	add	r3, r2
 800b368:	3318      	adds	r3, #24
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d370      	bcc.n	800b454 <Compute_SCLL_SCLH+0x1c8>
          (ti2cclk >= ((tscl_l - I2C_ANALOG_FILTER_DELAY_MIN - dnf_delay) / 4U)))
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	3b32      	subs	r3, #50	; 0x32
 800b37a:	089b      	lsrs	r3, r3, #2
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 800b37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b37e:	429a      	cmp	r2, r3
 800b380:	d268      	bcs.n	800b454 <Compute_SCLL_SCLH+0x1c8>
      {
        continue;
      }

      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 800b382:	2300      	movs	r3, #0
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
 800b386:	e061      	b.n	800b44c <Compute_SCLL_SCLH+0x1c0>
      {
        /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
        uint32_t tscl_h = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((sclh_tmp + 1U) * tpresc);
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	005a      	lsls	r2, r3, #1
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	441a      	add	r2, r3
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	3301      	adds	r3, #1
 800b394:	69b9      	ldr	r1, [r7, #24]
 800b396:	fb01 f303 	mul.w	r3, r1, r3
 800b39a:	4413      	add	r3, r2
 800b39c:	3332      	adds	r3, #50	; 0x32
 800b39e:	613b      	str	r3, [r7, #16]

        /* tSCL = tf + tLOW + tr + tHIGH */
        uint32_t tscl = tscl_l + tscl_h + i2c_charac[I2C_speed].trise + i2c_charac[I2C_speed].tfall;
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	441a      	add	r2, r3
 800b3a6:	4938      	ldr	r1, [pc, #224]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	202c      	movs	r0, #44	; 0x2c
 800b3ac:	fb00 f303 	mul.w	r3, r0, r3
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3320      	adds	r3, #32
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	441a      	add	r2, r3
 800b3b8:	4933      	ldr	r1, [pc, #204]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	202c      	movs	r0, #44	; 0x2c
 800b3be:	fb00 f303 	mul.w	r3, r0, r3
 800b3c2:	440b      	add	r3, r1
 800b3c4:	3324      	adds	r3, #36	; 0x24
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]

        if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_charac[I2C_speed].h_min) && (ti2cclk < tscl_h))
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d338      	bcc.n	800b446 <Compute_SCLL_SCLH+0x1ba>
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d834      	bhi.n	800b446 <Compute_SCLL_SCLH+0x1ba>
 800b3dc:	4a2a      	ldr	r2, [pc, #168]	; (800b488 <Compute_SCLL_SCLH+0x1fc>)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	212c      	movs	r1, #44	; 0x2c
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	331c      	adds	r3, #28
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d329      	bcc.n	800b446 <Compute_SCLL_SCLH+0x1ba>
 800b3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d225      	bcs.n	800b446 <Compute_SCLL_SCLH+0x1ba>
        {
          int32_t clk_error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	633b      	str	r3, [r7, #48]	; 0x30

          if (clk_error < 0)
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	da02      	bge.n	800b40e <Compute_SCLL_SCLH+0x182>
          {
            clk_error = -clk_error;
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	425b      	negs	r3, r3
 800b40c:	633b      	str	r3, [r7, #48]	; 0x30
          }

          /* look for the timings with the lowest clock error */
          if ((uint32_t)clk_error < prev_clk_error)
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b412:	429a      	cmp	r2, r3
 800b414:	d917      	bls.n	800b446 <Compute_SCLL_SCLH+0x1ba>
          {
            prev_clk_error = (uint32_t)clk_error;
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	643b      	str	r3, [r7, #64]	; 0x40
            valid_timing[count].scll = scll_tmp;
 800b41a:	491c      	ldr	r1, [pc, #112]	; (800b48c <Compute_SCLL_SCLH+0x200>)
 800b41c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	440b      	add	r3, r1
 800b428:	3310      	adds	r3, #16
 800b42a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b42c:	601a      	str	r2, [r3, #0]
            valid_timing[count].sclh = sclh_tmp;
 800b42e:	4917      	ldr	r1, [pc, #92]	; (800b48c <Compute_SCLL_SCLH+0x200>)
 800b430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	440b      	add	r3, r1
 800b43c:	330c      	adds	r3, #12
 800b43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b440:	601a      	str	r2, [r3, #0]
            ret = count;
 800b442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b444:	647b      	str	r3, [r7, #68]	; 0x44
      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	3301      	adds	r3, #1
 800b44a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	2bff      	cmp	r3, #255	; 0xff
 800b450:	d99a      	bls.n	800b388 <Compute_SCLL_SCLH+0xfc>
 800b452:	e000      	b.n	800b456 <Compute_SCLL_SCLH+0x1ca>
        continue;
 800b454:	bf00      	nop
    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	3301      	adds	r3, #1
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45e:	2bff      	cmp	r3, #255	; 0xff
 800b460:	f67f af70 	bls.w	800b344 <Compute_SCLL_SCLH+0xb8>
  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 800b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b466:	3301      	adds	r3, #1
 800b468:	637b      	str	r3, [r7, #52]	; 0x34
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <Compute_SCLL_SCLH+0x204>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b470:	429a      	cmp	r2, r3
 800b472:	f4ff af57 	bcc.w	800b324 <Compute_SCLL_SCLH+0x98>
        }
      }
    }
  }

  return ret;
 800b476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b478:	4618      	mov	r0, r3
 800b47a:	374c      	adds	r7, #76	; 0x4c
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	3b9aca00 	.word	0x3b9aca00
 800b488:	0801bb6c 	.word	0x0801bb6c
 800b48c:	2000032c 	.word	0x2000032c
 800b490:	20000afc 	.word	0x20000afc

0800b494 <__NVIC_EnableIRQ>:
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	db0b      	blt.n	800b4be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	f003 021f 	and.w	r2, r3, #31
 800b4ac:	4907      	ldr	r1, [pc, #28]	; (800b4cc <__NVIC_EnableIRQ+0x38>)
 800b4ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4b2:	095b      	lsrs	r3, r3, #5
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	fa00 f202 	lsl.w	r2, r0, r2
 800b4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b4be:	bf00      	nop
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	e000e100 	.word	0xe000e100

0800b4d0 <__NVIC_SetPriority>:
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	db0a      	blt.n	800b4fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	490c      	ldr	r1, [pc, #48]	; (800b51c <__NVIC_SetPriority+0x4c>)
 800b4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ee:	0112      	lsls	r2, r2, #4
 800b4f0:	b2d2      	uxtb	r2, r2
 800b4f2:	440b      	add	r3, r1
 800b4f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b4f8:	e00a      	b.n	800b510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	4908      	ldr	r1, [pc, #32]	; (800b520 <__NVIC_SetPriority+0x50>)
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	3b04      	subs	r3, #4
 800b508:	0112      	lsls	r2, r2, #4
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	440b      	add	r3, r1
 800b50e:	761a      	strb	r2, [r3, #24]
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	e000e100 	.word	0xe000e100
 800b520:	e000ed00 	.word	0xe000ed00

0800b524 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <LL_ADC_DMA_GetRegAddr+0x18>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t) &(ADCx->DR);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3340      	adds	r3, #64	; 0x40
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e00c      	b.n	800b556 <LL_ADC_DMA_GetRegAddr+0x32>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b542:	d003      	beq.n	800b54c <LL_ADC_DMA_GetRegAddr+0x28>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a07      	ldr	r2, [pc, #28]	; (800b564 <LL_ADC_DMA_GetRegAddr+0x40>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d101      	bne.n	800b550 <LL_ADC_DMA_GetRegAddr+0x2c>
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <LL_ADC_DMA_GetRegAddr+0x44>)
 800b54e:	e000      	b.n	800b552 <LL_ADC_DMA_GetRegAddr+0x2e>
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <LL_ADC_DMA_GetRegAddr+0x48>)
 800b552:	330c      	adds	r3, #12
 800b554:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800b556:	68fb      	ldr	r3, [r7, #12]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	50000100 	.word	0x50000100
 800b568:	50000300 	.word	0x50000300
 800b56c:	50000700 	.word	0x50000700

0800b570 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b580:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	2a00      	cmp	r2, #0
 800b59e:	d002      	beq.n	800b5a6 <LL_ADC_SetGainCompensation+0x36>
 800b5a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b5a4:	e000      	b.n	800b5a8 <LL_ADC_SetGainCompensation+0x38>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	611a      	str	r2, [r3, #16]
}
 800b5ae:	bf00      	nop
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b087      	sub	sp, #28
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3330      	adds	r3, #48	; 0x30
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	f003 030c 	and.w	r3, r3, #12
 800b5d6:	4413      	add	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f003 031f 	and.w	r3, r3, #31
 800b5e4:	211f      	movs	r1, #31
 800b5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ea:	43db      	mvns	r3, r3
 800b5ec:	401a      	ands	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	0e9b      	lsrs	r3, r3, #26
 800b5f2:	f003 011f 	and.w	r1, r3, #31
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b600:	431a      	orrs	r2, r3
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f023 0203 	bic.w	r2, r3, #3
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	431a      	orrs	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	60da      	str	r2, [r3, #12]
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f003 0303 	and.w	r3, r3, #3
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3314      	adds	r3, #20
 800b664:	461a      	mov	r2, r3
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	0e5b      	lsrs	r3, r3, #25
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	4413      	add	r3, r2
 800b672:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	0d1b      	lsrs	r3, r3, #20
 800b67c:	f003 031f 	and.w	r3, r3, #31
 800b680:	2107      	movs	r1, #7
 800b682:	fa01 f303 	lsl.w	r3, r1, r3
 800b686:	43db      	mvns	r3, r3
 800b688:	401a      	ands	r2, r3
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	0d1b      	lsrs	r3, r3, #20
 800b68e:	f003 031f 	and.w	r3, r3, #31
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	fa01 f303 	lsl.w	r3, r1, r3
 800b698:	431a      	orrs	r2, r3
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b69e:	bf00      	nop
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
	...

0800b6ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a0f      	ldr	r2, [pc, #60]	; (800b6f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d10a      	bne.n	800b6d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800b6d4:	e00a      	b.n	800b6ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6e2:	43db      	mvns	r3, r3
 800b6e4:	401a      	ands	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b6ec:	bf00      	nop
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	407f0000 	.word	0x407f0000

0800b6fc <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b70e:	f023 0303 	bic.w	r3, r3, #3
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	611a      	str	r2, [r3, #16]
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b736:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	6093      	str	r3, [r2, #8]
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b75a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b75e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b786:	f043 0201 	orr.w	r2, r3, #1
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b78e:	bf00      	nop
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <LL_ADC_IsEnabled+0x18>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <LL_ADC_IsEnabled+0x1a>
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d4:	d101      	bne.n	800b7da <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e000      	b.n	800b7dc <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b7fc:	f043 0204 	orr.w	r2, r3, #4
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 800b824:	2301      	movs	r3, #1
 800b826:	e000      	b.n	800b82a <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800b846:	4a0c      	ldr	r2, [pc, #48]	; (800b878 <LL_DMA_EnableChannel+0x40>)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	4413      	add	r3, r2
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4908      	ldr	r1, [pc, #32]	; (800b878 <LL_DMA_EnableChannel+0x40>)
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	440a      	add	r2, r1
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	4611      	mov	r1, r2
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	440a      	add	r2, r1
 800b864:	f043 0301 	orr.w	r3, r3, #1
 800b868:	6013      	str	r3, [r2, #0]
}
 800b86a:	bf00      	nop
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	0801bbf0 	.word	0x0801bbf0

0800b87c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800b88c:	4a0e      	ldr	r2, [pc, #56]	; (800b8c8 <LL_DMA_SetDataTransferDirection+0x4c>)
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4413      	add	r3, r2
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	461a      	mov	r2, r3
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	4413      	add	r3, r2
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8a0:	f023 0310 	bic.w	r3, r3, #16
 800b8a4:	4908      	ldr	r1, [pc, #32]	; (800b8c8 <LL_DMA_SetDataTransferDirection+0x4c>)
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	7812      	ldrb	r2, [r2, #0]
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	440a      	add	r2, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800b8ba:	bf00      	nop
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	0801bbf0 	.word	0x0801bbf0

0800b8cc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800b8dc:	4a0d      	ldr	r2, [pc, #52]	; (800b914 <LL_DMA_SetMode+0x48>)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f023 0220 	bic.w	r2, r3, #32
 800b8f0:	4908      	ldr	r1, [pc, #32]	; (800b914 <LL_DMA_SetMode+0x48>)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	440b      	add	r3, r1
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	440b      	add	r3, r1
 800b8fe:	4619      	mov	r1, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4313      	orrs	r3, r2
 800b904:	600b      	str	r3, [r1, #0]
             Mode);
}
 800b906:	bf00      	nop
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	0801bbf0 	.word	0x0801bbf0

0800b918 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800b928:	4a0d      	ldr	r2, [pc, #52]	; (800b960 <LL_DMA_SetPeriphIncMode+0x48>)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	4413      	add	r3, r2
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b93c:	4908      	ldr	r1, [pc, #32]	; (800b960 <LL_DMA_SetPeriphIncMode+0x48>)
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	440b      	add	r3, r1
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	4619      	mov	r1, r3
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	440b      	add	r3, r1
 800b94a:	4619      	mov	r1, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4313      	orrs	r3, r2
 800b950:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	0801bbf0 	.word	0x0801bbf0

0800b964 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800b974:	4a0d      	ldr	r2, [pc, #52]	; (800b9ac <LL_DMA_SetMemoryIncMode+0x48>)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4413      	add	r3, r2
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b988:	4908      	ldr	r1, [pc, #32]	; (800b9ac <LL_DMA_SetMemoryIncMode+0x48>)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	440b      	add	r3, r1
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	4619      	mov	r1, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	440b      	add	r3, r1
 800b996:	4619      	mov	r1, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800b99e:	bf00      	nop
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	0801bbf0 	.word	0x0801bbf0

0800b9b0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <LL_DMA_SetPeriphSize+0x48>)
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9d4:	4908      	ldr	r1, [pc, #32]	; (800b9f8 <LL_DMA_SetPeriphSize+0x48>)
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	440b      	add	r3, r1
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	440b      	add	r3, r1
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	0801bbf0 	.word	0x0801bbf0

0800b9fc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800ba0c:	4a0d      	ldr	r2, [pc, #52]	; (800ba44 <LL_DMA_SetMemorySize+0x48>)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4413      	add	r3, r2
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	461a      	mov	r2, r3
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	4413      	add	r3, r2
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba20:	4908      	ldr	r1, [pc, #32]	; (800ba44 <LL_DMA_SetMemorySize+0x48>)
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	440b      	add	r3, r1
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	440b      	add	r3, r1
 800ba2e:	4619      	mov	r1, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800ba36:	bf00      	nop
 800ba38:	371c      	adds	r7, #28
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	0801bbf0 	.word	0x0801bbf0

0800ba48 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800ba58:	4a0d      	ldr	r2, [pc, #52]	; (800ba90 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	4413      	add	r3, r2
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ba6c:	4908      	ldr	r1, [pc, #32]	; (800ba90 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	440b      	add	r3, r1
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	440b      	add	r3, r1
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	600b      	str	r3, [r1, #0]
             Priority);
}
 800ba82:	bf00      	nop
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	0801bbf0 	.word	0x0801bbf0

0800ba94 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800baa4:	4a0d      	ldr	r2, [pc, #52]	; (800badc <LL_DMA_SetDataLength+0x48>)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4413      	add	r3, r2
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	4413      	add	r3, r2
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	041b      	lsls	r3, r3, #16
 800bab8:	4908      	ldr	r1, [pc, #32]	; (800badc <LL_DMA_SetDataLength+0x48>)
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	440a      	add	r2, r1
 800babe:	7812      	ldrb	r2, [r2, #0]
 800bac0:	4611      	mov	r1, r2
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	440a      	add	r2, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4313      	orrs	r3, r2
 800bacc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800bace:	bf00      	nop
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	0801bbf0 	.word	0x0801bbf0

0800bae0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	2b10      	cmp	r3, #16
 800baf6:	d114      	bne.n	800bb22 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 800baf8:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <LL_DMA_ConfigAddresses+0x78>)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	4413      	add	r3, r2
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	4413      	add	r3, r2
 800bb06:	461a      	mov	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 800bb0c:	4a12      	ldr	r2, [pc, #72]	; (800bb58 <LL_DMA_ConfigAddresses+0x78>)
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	4413      	add	r3, r2
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	4413      	add	r3, r2
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 800bb20:	e013      	b.n	800bb4a <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 800bb22:	4a0d      	ldr	r2, [pc, #52]	; (800bb58 <LL_DMA_ConfigAddresses+0x78>)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	4413      	add	r3, r2
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	4413      	add	r3, r2
 800bb30:	461a      	mov	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800bb36:	4a08      	ldr	r2, [pc, #32]	; (800bb58 <LL_DMA_ConfigAddresses+0x78>)
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	4413      	add	r3, r2
 800bb44:	461a      	mov	r2, r3
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	60d3      	str	r3, [r2, #12]
}
 800bb4a:	bf00      	nop
 800bb4c:	371c      	adds	r7, #28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	0801bbf0 	.word	0x0801bbf0

0800bb5c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	0a9b      	lsrs	r3, r3, #10
 800bb6c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800bb70:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb84:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb9a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800bbb8:	4b08      	ldr	r3, [pc, #32]	; (800bbdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bbba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbbc:	4907      	ldr	r1, [pc, #28]	; (800bbdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bbc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4013      	ands	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bbce:	68fb      	ldr	r3, [r7, #12]
}
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	40021000 	.word	0x40021000

0800bbe0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800bbe8:	4b08      	ldr	r3, [pc, #32]	; (800bc0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800bbea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbec:	4907      	ldr	r1, [pc, #28]	; (800bc0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800bbf4:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800bbf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
}
 800bc00:	bf00      	nop
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	40021000 	.word	0x40021000

0800bc10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b08b      	sub	sp, #44	; 0x2c
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	fa93 f3a3 	rbit	r3, r3
 800bc2a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800bc36:	2320      	movs	r3, #32
 800bc38:	e003      	b.n	800bc42 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	fab3 f383 	clz	r3, r3
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	2103      	movs	r1, #3
 800bc46:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4a:	43db      	mvns	r3, r3
 800bc4c:	401a      	ands	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	fa93 f3a3 	rbit	r3, r3
 800bc58:	61fb      	str	r3, [r7, #28]
  return result;
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800bc64:	2320      	movs	r3, #32
 800bc66:	e003      	b.n	800bc70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	fab3 f383 	clz	r3, r3
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	fa01 f303 	lsl.w	r3, r1, r3
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	601a      	str	r2, [r3, #0]
}
 800bc7e:	bf00      	nop
 800bc80:	372c      	adds	r7, #44	; 0x2c
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	401a      	ands	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	605a      	str	r2, [r3, #4]
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b08b      	sub	sp, #44	; 0x2c
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	fa93 f3a3 	rbit	r3, r3
 800bcd4:	613b      	str	r3, [r7, #16]
  return result;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800bce0:	2320      	movs	r3, #32
 800bce2:	e003      	b.n	800bcec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	fab3 f383 	clz	r3, r3
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	2103      	movs	r1, #3
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	43db      	mvns	r3, r3
 800bcf6:	401a      	ands	r2, r3
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	fa93 f3a3 	rbit	r3, r3
 800bd02:	61fb      	str	r3, [r7, #28]
  return result;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800bd0e:	2320      	movs	r3, #32
 800bd10:	e003      	b.n	800bd1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	fab3 f383 	clz	r3, r3
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd22:	431a      	orrs	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800bd28:	bf00      	nop
 800bd2a:	372c      	adds	r7, #44	; 0x2c
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b08b      	sub	sp, #44	; 0x2c
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	fa93 f3a3 	rbit	r3, r3
 800bd4e:	613b      	str	r3, [r7, #16]
  return result;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800bd5a:	2320      	movs	r3, #32
 800bd5c:	e003      	b.n	800bd66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	fab3 f383 	clz	r3, r3
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	2103      	movs	r1, #3
 800bd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6e:	43db      	mvns	r3, r3
 800bd70:	401a      	ands	r2, r3
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	fa93 f3a3 	rbit	r3, r3
 800bd7c:	61fb      	str	r3, [r7, #28]
  return result;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800bd88:	2320      	movs	r3, #32
 800bd8a:	e003      	b.n	800bd94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	fab3 f383 	clz	r3, r3
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	60da      	str	r2, [r3, #12]
}
 800bda2:	bf00      	nop
 800bda4:	372c      	adds	r7, #44	; 0x2c
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b083      	sub	sp, #12
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	619a      	str	r2, [r3, #24]
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <LL_RCC_SetADCClockSource>:
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <LL_RCC_SetADCClockSource+0x44>)
 800bdf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	0c1b      	lsrs	r3, r3, #16
 800bdfa:	f003 031f 	and.w	r3, r3, #31
 800bdfe:	2103      	movs	r1, #3
 800be00:	fa01 f303 	lsl.w	r3, r1, r3
 800be04:	43db      	mvns	r3, r3
 800be06:	401a      	ands	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	b2d9      	uxtb	r1, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	0c1b      	lsrs	r3, r3, #16
 800be10:	f003 031f 	and.w	r3, r3, #31
 800be14:	fa01 f303 	lsl.w	r3, r1, r3
 800be18:	4904      	ldr	r1, [pc, #16]	; (800be2c <LL_RCC_SetADCClockSource+0x44>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	40021000 	.word	0x40021000

0800be30 <LL_EXTI_EnableIT_0_31>:
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <LL_EXTI_EnableIT_0_31+0x20>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4904      	ldr	r1, [pc, #16]	; (800be50 <LL_EXTI_EnableIT_0_31+0x20>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4313      	orrs	r3, r2
 800be42:	600b      	str	r3, [r1, #0]
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	40010400 	.word	0x40010400

0800be54 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800be5e:	68da      	ldr	r2, [r3, #12]
 800be60:	4904      	ldr	r1, [pc, #16]	; (800be74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4313      	orrs	r3, r2
 800be66:	60cb      	str	r3, [r1, #12]
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	40010400 	.word	0x40010400

0800be78 <LL_SYSCFG_SetEXTISource>:
{
 800be78:	b480      	push	{r7}
 800be7a:	b087      	sub	sp, #28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800be82:	4a18      	ldr	r2, [pc, #96]	; (800bee4 <LL_SYSCFG_SetEXTISource+0x6c>)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	3302      	adds	r3, #2
 800be8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	0c1b      	lsrs	r3, r3, #16
 800be94:	43db      	mvns	r3, r3
 800be96:	ea02 0103 	and.w	r1, r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	0c1b      	lsrs	r3, r3, #16
 800be9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	fa93 f3a3 	rbit	r3, r3
 800bea6:	60fb      	str	r3, [r7, #12]
  return result;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <LL_SYSCFG_SetEXTISource+0x3e>
    return 32U;
 800beb2:	2320      	movs	r3, #32
 800beb4:	e003      	b.n	800bebe <LL_SYSCFG_SetEXTISource+0x46>
  return __builtin_clz(value);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	fab3 f383 	clz	r3, r3
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f003 031f 	and.w	r3, r3, #31
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	409a      	lsls	r2, r3
 800bec6:	4807      	ldr	r0, [pc, #28]	; (800bee4 <LL_SYSCFG_SetEXTISource+0x6c>)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	430a      	orrs	r2, r1
 800bed0:	3302      	adds	r3, #2
 800bed2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800bed6:	bf00      	nop
 800bed8:	371c      	adds	r7, #28
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	40010000 	.word	0x40010000

0800bee8 <BSP_USBPD_PWR_Init>:
  * @brief  Global initialization of PWR resource used by USB-PD
  * @param  PortNum Type-C port identifier
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_Init(uint32_t PortNum)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af02      	add	r7, sp, #8
 800beee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <BSP_USBPD_PWR_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800befa:	f06f 0301 	mvn.w	r3, #1
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	e068      	b.n	800bfd4 <BSP_USBPD_PWR_Init+0xec>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_Init --");
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	b2d9      	uxtb	r1, r3
 800bf06:	2318      	movs	r3, #24
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	4b35      	ldr	r3, [pc, #212]	; (800bfe0 <BSP_USBPD_PWR_Init+0xf8>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2006      	movs	r0, #6
 800bf10:	f003 fd80 	bl	800fa14 <USBPD_TRACE_Add>

    if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 0U)
 800bf14:	4933      	ldr	r1, [pc, #204]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	005b      	lsls	r3, r3, #1
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d155      	bne.n	800bfd4 <BSP_USBPD_PWR_Init+0xec>
    {
      /* Initialisation according to HW configuration type of port */
      switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800bf28:	4a2f      	ldr	r2, [pc, #188]	; (800bfe8 <BSP_USBPD_PWR_Init+0x100>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800bf30:	3b02      	subs	r3, #2
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d83e      	bhi.n	800bfb4 <BSP_USBPD_PWR_Init+0xcc>
      {
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
          /* Set default Role to SNK */
          USBPD_PWR_Port_Status[PortNum].PwrRole = POWER_ROLE_SINK;
 800bf36:	492b      	ldr	r1, [pc, #172]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	440b      	add	r3, r1
 800bf44:	3302      	adds	r3, #2
 800bf46:	2201      	movs	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]

          /* Set default Power Mode to Hibernate */
          USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_HIBERNATE;
 800bf4a:	4926      	ldr	r1, [pc, #152]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3303      	adds	r3, #3
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	701a      	strb	r2, [r3, #0]

          /* Reset port callback for VBUS detection event */
          USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = NULL;
 800bf5e:	4921      	ldr	r1, [pc, #132]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]

          /* Reset last detected fault Tick */
          USBPD_PWR_Port_Status[PortNum].LastFaultTick = 0;
 800bf72:	491c      	ldr	r1, [pc, #112]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4613      	mov	r3, r2
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	3304      	adds	r3, #4
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]

          /* Initialize required GPIOs */
          PWR_TCPP0203_GPIOConfigInit(PortNum);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fc1a 	bl	800c7c0 <PWR_TCPP0203_GPIOConfigInit>

          /* Initialize EXTI for FLGn signal */
          PWR_TCPP0203_ITConfigInit(PortNum);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fdbf 	bl	800cb10 <PWR_TCPP0203_ITConfigInit>

          /* Enable component */
          TCPP0203_PORT0_ENABLE_GPIO_SET();
 800bf92:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf96:	4815      	ldr	r0, [pc, #84]	; (800bfec <BSP_USBPD_PWR_Init+0x104>)
 800bf98:	f7ff ff09 	bl	800bdae <LL_GPIO_SetOutputPin>

          /* Initialize required BUS for communication */
          ret = PWR_TCPP0203_BUSConfigInit(PortNum, USBPD_PWR_Port_Configs[PortNum].Address);
 800bf9c:	4a12      	ldr	r2, [pc, #72]	; (800bfe8 <BSP_USBPD_PWR_Init+0x100>)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fe00 	bl	800cbb0 <PWR_TCPP0203_BUSConfigInit>
 800bfb0:	60f8      	str	r0, [r7, #12]
          break;
 800bfb2:	e003      	b.n	800bfbc <BSP_USBPD_PWR_Init+0xd4>

        case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
        default:
          ret = BSP_ERROR_WRONG_PARAM;
 800bfb4:	f06f 0301 	mvn.w	r3, #1
 800bfb8:	60fb      	str	r3, [r7, #12]
          break;
 800bfba:	bf00      	nop
      }

      if (ret == BSP_ERROR_NONE)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d108      	bne.n	800bfd4 <BSP_USBPD_PWR_Init+0xec>
      {
        /* Set Initialisation flag */
        USBPD_PWR_Port_Status[PortNum].IsInitialized = 1U;
 800bfc2:	4908      	ldr	r1, [pc, #32]	; (800bfe4 <BSP_USBPD_PWR_Init+0xfc>)
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	0801b348 	.word	0x0801b348
 800bfe4:	20000134 	.word	0x20000134
 800bfe8:	20000130 	.word	0x20000130
 800bfec:	48000800 	.word	0x48000800

0800bff0 <BSP_USBPD_PWR_SetRole>:
  *         @arg @ref POWER_ROLE_SOURCE
  *         @arg @ref POWER_ROLE_SINK
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetRole(uint32_t PortNum, USBPD_PWR_PowerRoleTypeDef Role)
{
 800bff0:	b590      	push	{r4, r7, lr}
 800bff2:	b087      	sub	sp, #28
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  int32_t ret = BSP_ERROR_NONE;
 800bffc:	2300      	movs	r3, #0
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <BSP_USBPD_PWR_SetRole+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c006:	f06f 0301 	mvn.w	r3, #1
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e05d      	b.n	800c0ca <BSP_USBPD_PWR_SetRole+0xda>
  }
  else
  {
    switch (Role)
 800c00e:	78fb      	ldrb	r3, [r7, #3]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <BSP_USBPD_PWR_SetRole+0x2a>
 800c014:	2b01      	cmp	r3, #1
 800c016:	d03f      	beq.n	800c098 <BSP_USBPD_PWR_SetRole+0xa8>
 800c018:	e052      	b.n	800c0c0 <BSP_USBPD_PWR_SetRole+0xd0>
    {
      case POWER_ROLE_SOURCE:
        /* Port Role is now SRC */
        BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetRole : SRC --");
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	b2d9      	uxtb	r1, r3
 800c01e:	2321      	movs	r3, #33	; 0x21
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4b2c      	ldr	r3, [pc, #176]	; (800c0d4 <BSP_USBPD_PWR_SetRole+0xe4>)
 800c024:	2200      	movs	r2, #0
 800c026:	2006      	movs	r0, #6
 800c028:	f003 fcf4 	bl	800fa14 <USBPD_TRACE_Add>
        /* Set port power Role */
        USBPD_PWR_Port_Status[PortNum].PwrRole = Role;
 800c02c:	492a      	ldr	r1, [pc, #168]	; (800c0d8 <BSP_USBPD_PWR_SetRole+0xe8>)
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	3302      	adds	r3, #2
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	701a      	strb	r2, [r3, #0]

        /* Ensure that TCPP0203 mode is not set to Hibernate */
        if (USBPD_PWR_Port_Status[PortNum].PwrSavingMode == USBPD_PWR_MODE_HIBERNATE)
 800c040:	4925      	ldr	r1, [pc, #148]	; (800c0d8 <BSP_USBPD_PWR_SetRole+0xe8>)
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	3303      	adds	r3, #3
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d138      	bne.n	800c0c8 <BSP_USBPD_PWR_SetRole+0xd8>
        {
          if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800c056:	4a21      	ldr	r2, [pc, #132]	; (800c0dc <BSP_USBPD_PWR_SetRole+0xec>)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05e:	699c      	ldr	r4, [r3, #24]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <BSP_USBPD_PWR_SetRole+0xf0>)
 800c06c:	4413      	add	r3, r2
 800c06e:	2120      	movs	r1, #32
 800c070:	4618      	mov	r0, r3
 800c072:	47a0      	blx	r4
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <BSP_USBPD_PWR_SetRole+0x92>
                                                           TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800c07a:	f06f 0304 	mvn.w	r3, #4
 800c07e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
          }
        }
        break;
 800c080:	e022      	b.n	800c0c8 <BSP_USBPD_PWR_SetRole+0xd8>
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
 800c082:	4915      	ldr	r1, [pc, #84]	; (800c0d8 <BSP_USBPD_PWR_SetRole+0xe8>)
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	3303      	adds	r3, #3
 800c092:	2202      	movs	r2, #2
 800c094:	701a      	strb	r2, [r3, #0]
        break;
 800c096:	e017      	b.n	800c0c8 <BSP_USBPD_PWR_SetRole+0xd8>

      case POWER_ROLE_SINK:
        /* Port Role is now SNK */
        BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetRole : SNK --");
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	b2d9      	uxtb	r1, r3
 800c09c:	2321      	movs	r3, #33	; 0x21
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	4b10      	ldr	r3, [pc, #64]	; (800c0e4 <BSP_USBPD_PWR_SetRole+0xf4>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2006      	movs	r0, #6
 800c0a6:	f003 fcb5 	bl	800fa14 <USBPD_TRACE_Add>
        /* Set port power Role */
        USBPD_PWR_Port_Status[PortNum].PwrRole = Role;
 800c0aa:	490b      	ldr	r1, [pc, #44]	; (800c0d8 <BSP_USBPD_PWR_SetRole+0xe8>)
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	78fa      	ldrb	r2, [r7, #3]
 800c0bc:	701a      	strb	r2, [r3, #0]
        break;
 800c0be:	e004      	b.n	800c0ca <BSP_USBPD_PWR_SetRole+0xda>

      default:
        ret = BSP_ERROR_WRONG_PARAM;
 800c0c0:	f06f 0301 	mvn.w	r3, #1
 800c0c4:	60fb      	str	r3, [r7, #12]
        break;
 800c0c6:	e000      	b.n	800c0ca <BSP_USBPD_PWR_SetRole+0xda>
        break;
 800c0c8:	bf00      	nop
    }
  }

  return ret;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd90      	pop	{r4, r7, pc}
 800c0d4:	0801b380 	.word	0x0801b380
 800c0d8:	20000134 	.word	0x20000134
 800c0dc:	20000b2c 	.word	0x20000b2c
 800c0e0:	20000b04 	.word	0x20000b04
 800c0e4:	0801b3a4 	.word	0x0801b3a4

0800c0e8 <BSP_USBPD_PWR_SetPowerMode>:
  *         @arg @ref USBPD_PWR_MODE_LOWPOWER
  *         @arg @ref USBPD_PWR_MODE_NORMAL
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetPowerMode(uint32_t PortNum, USBPD_PWR_PowerModeTypeDef PwrMode)
{
 800c0e8:	b590      	push	{r4, r7, lr}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  uint8_t flg_reg;
  int32_t ret = BSP_ERROR_NONE;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <BSP_USBPD_PWR_SetPowerMode+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c0fe:	f06f 0301 	mvn.w	r3, #1
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e0ee      	b.n	800c2e4 <BSP_USBPD_PWR_SetPowerMode+0x1fc>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetPowerMode --");
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	b2d9      	uxtb	r1, r3
 800c10a:	2320      	movs	r3, #32
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	4b78      	ldr	r3, [pc, #480]	; (800c2f0 <BSP_USBPD_PWR_SetPowerMode+0x208>)
 800c110:	2200      	movs	r2, #0
 800c112:	2006      	movs	r0, #6
 800c114:	f003 fc7e 	bl	800fa14 <USBPD_TRACE_Add>

    /* Evaluate requested Power config for port */
    switch (PwrMode)
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	f200 80cd 	bhi.w	800c2ba <BSP_USBPD_PWR_SetPowerMode+0x1d2>
 800c120:	a201      	add	r2, pc, #4	; (adr r2, 800c128 <BSP_USBPD_PWR_SetPowerMode+0x40>)
 800c122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c126:	bf00      	nop
 800c128:	0800c139 	.word	0x0800c139
 800c12c:	0800c165 	.word	0x0800c165
 800c130:	0800c23f 	.word	0x0800c23f
 800c134:	0800c27d 	.word	0x0800c27d
    {
      case USBPD_PWR_MODE_OFF:
        /* Port should enter OFF mode : Reset TCPP0203 Reg0 */
        if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800c138:	4a6e      	ldr	r2, [pc, #440]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c140:	6899      	ldr	r1, [r3, #8]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	00db      	lsls	r3, r3, #3
 800c14c:	4a6a      	ldr	r2, [pc, #424]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c14e:	4413      	add	r3, r2
 800c150:	4618      	mov	r0, r3
 800c152:	4788      	blx	r1
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 80b3 	beq.w	800c2c2 <BSP_USBPD_PWR_SetPowerMode+0x1da>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c15c:	f06f 0304 	mvn.w	r3, #4
 800c160:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c162:	e0ae      	b.n	800c2c2 <BSP_USBPD_PWR_SetPowerMode+0x1da>
        /* Port Mode is Hibernate : (Default state at startup) suitable for SNK role
             - Dead Batteries Enabled,
             - Gate Driver Consumer controlled by I2C, Gate Driver Provider OFF
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Hibernate --");
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	b2d9      	uxtb	r1, r3
 800c168:	230f      	movs	r3, #15
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4b63      	ldr	r3, [pc, #396]	; (800c2fc <BSP_USBPD_PWR_SetPowerMode+0x214>)
 800c16e:	2200      	movs	r2, #0
 800c170:	2006      	movs	r0, #6
 800c172:	f003 fc4f 	bl	800fa14 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800c176:	4a5f      	ldr	r2, [pc, #380]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c17e:	699c      	ldr	r4, [r3, #24]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	4a5b      	ldr	r2, [pc, #364]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c18c:	4413      	add	r3, r2
 800c18e:	2100      	movs	r1, #0
 800c190:	4618      	mov	r0, r3
 800c192:	47a0      	blx	r4
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <BSP_USBPD_PWR_SetPowerMode+0xb8>
                                                         TCPP0203_POWER_MODE_HIBERNATE) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c19a:	f06f 0304 	mvn.w	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
        }

        /* Check if VBUS is present (in case of SNK VBUS powered device) */
        /* Read Flags register (FLGn) */
        if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 800c1a0:	4a54      	ldr	r2, [pc, #336]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4a50      	ldr	r2, [pc, #320]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f107 020b 	add.w	r2, r7, #11
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	47a0      	blx	r4
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d17e      	bne.n	800c2c6 <BSP_USBPD_PWR_SetPowerMode+0x1de>
        {
          /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
             it is expected that a VBUS_OK condition is detected.
             In this case, if any, vBus Detection callback could be called */
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	f003 0320 	and.w	r3, r3, #32
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d079      	beq.n	800c2c6 <BSP_USBPD_PWR_SetPowerMode+0x1de>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 800c1d2:	494b      	ldr	r1, [pc, #300]	; (800c300 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d06e      	beq.n	800c2c6 <BSP_USBPD_PWR_SetPowerMode+0x1de>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP03 behavior on CC lines */
              /* Switch to Low Power mode */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	b2d9      	uxtb	r1, r3
 800c1ec:	230f      	movs	r3, #15
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4b44      	ldr	r3, [pc, #272]	; (800c304 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	2006      	movs	r0, #6
 800c1f6:	f003 fc0d 	bl	800fa14 <USBPD_TRACE_Add>
              if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800c1fa:	4a3e      	ldr	r2, [pc, #248]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c202:	699c      	ldr	r4, [r3, #24]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	4a3a      	ldr	r2, [pc, #232]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c210:	4413      	add	r3, r2
 800c212:	2120      	movs	r1, #32
 800c214:	4618      	mov	r0, r3
 800c216:	47a0      	blx	r4
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <BSP_USBPD_PWR_SetPowerMode+0x13c>
                                                               TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
              {
                ret = BSP_ERROR_COMPONENT_FAILURE;
 800c21e:	f06f 0304 	mvn.w	r3, #4
 800c222:	60fb      	str	r3, [r7, #12]
              }

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 800c224:	4936      	ldr	r1, [pc, #216]	; (800c300 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	440b      	add	r3, r1
 800c232:	3308      	adds	r3, #8
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
          else
          {
            /* VBUS indication not present in FLGn flags : nothing more to be done */
          }
        }
        break;
 800c23c:	e043      	b.n	800c2c6 <BSP_USBPD_PWR_SetPowerMode+0x1de>
        /* Port Mode is Low Power : suitable while toggling SNK/SRC is case of DRP
             - Dead Batteries Disabled,
             - Gate Driver Consumer or Provider controlled by I2C
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	b2d9      	uxtb	r1, r3
 800c242:	230f      	movs	r3, #15
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4b2f      	ldr	r3, [pc, #188]	; (800c304 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 800c248:	2200      	movs	r2, #0
 800c24a:	2006      	movs	r0, #6
 800c24c:	f003 fbe2 	bl	800fa14 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800c250:	4a28      	ldr	r2, [pc, #160]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c258:	699c      	ldr	r4, [r3, #24]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	4a24      	ldr	r2, [pc, #144]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c266:	4413      	add	r3, r2
 800c268:	2120      	movs	r1, #32
 800c26a:	4618      	mov	r0, r3
 800c26c:	47a0      	blx	r4
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d02a      	beq.n	800c2ca <BSP_USBPD_PWR_SetPowerMode+0x1e2>
                                                         TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c274:	f06f 0304 	mvn.w	r3, #4
 800c278:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c27a:	e026      	b.n	800c2ca <BSP_USBPD_PWR_SetPowerMode+0x1e2>

      case USBPD_PWR_MODE_NORMAL:
        /* Port Mode is Normal : No power saving measure (Explicit contract in place) */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Normal --");
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	b2d9      	uxtb	r1, r3
 800c280:	230c      	movs	r3, #12
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	4b20      	ldr	r3, [pc, #128]	; (800c308 <BSP_USBPD_PWR_SetPowerMode+0x220>)
 800c286:	2200      	movs	r2, #0
 800c288:	2006      	movs	r0, #6
 800c28a:	f003 fbc3 	bl	800fa14 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 800c28e:	4a19      	ldr	r2, [pc, #100]	; (800c2f4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c296:	699c      	ldr	r4, [r3, #24]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	4a15      	ldr	r2, [pc, #84]	; (800c2f8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	2110      	movs	r1, #16
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	47a0      	blx	r4
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <BSP_USBPD_PWR_SetPowerMode+0x1e6>
                                                         TCPP0203_POWER_MODE_NORMAL) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2b2:	f06f 0304 	mvn.w	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c2b8:	e009      	b.n	800c2ce <BSP_USBPD_PWR_SetPowerMode+0x1e6>

      default:
        ret = BSP_ERROR_WRONG_PARAM;
 800c2ba:	f06f 0301 	mvn.w	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
        break;
 800c2c0:	e006      	b.n	800c2d0 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800c2c2:	bf00      	nop
 800c2c4:	e004      	b.n	800c2d0 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800c2c6:	bf00      	nop
 800c2c8:	e002      	b.n	800c2d0 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800c2ca:	bf00      	nop
 800c2cc:	e000      	b.n	800c2d0 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 800c2ce:	bf00      	nop
    }

    /* Set port low power operating mode */
    USBPD_PWR_Port_Status[PortNum].PwrSavingMode = PwrMode;
 800c2d0:	490b      	ldr	r1, [pc, #44]	; (800c300 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	440b      	add	r3, r1
 800c2de:	3303      	adds	r3, #3
 800c2e0:	78fa      	ldrb	r2, [r7, #3]
 800c2e2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd90      	pop	{r4, r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0801b3c8 	.word	0x0801b3c8
 800c2f4:	20000b2c 	.word	0x20000b2c
 800c2f8:	20000b04 	.word	0x20000b04
 800c2fc:	0801b3ec 	.word	0x0801b3ec
 800c300:	20000134 	.word	0x20000134
 800c304:	0801b3fc 	.word	0x0801b3fc
 800c308:	0801b40c 	.word	0x0801b40c

0800c30c <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSInit(uint32_t PortNum)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af02      	add	r7, sp, #8
 800c312:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <BSP_USBPD_PWR_VBUSInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c31a:	f06f 0301 	mvn.w	r3, #1
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e021      	b.n	800c366 <BSP_USBPD_PWR_VBUSInit+0x5a>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSInit --");
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	b2d9      	uxtb	r1, r3
 800c326:	231c      	movs	r3, #28
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	4b11      	ldr	r3, [pc, #68]	; (800c370 <BSP_USBPD_PWR_VBUSInit+0x64>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	2006      	movs	r0, #6
 800c330:	f003 fb70 	bl	800fa14 <USBPD_TRACE_Add>

    /* Initialize required HW for VBUS management */
    switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800c334:	4a0f      	ldr	r2, [pc, #60]	; (800c374 <BSP_USBPD_PWR_VBUSInit+0x68>)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c33c:	3b02      	subs	r3, #2
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d80d      	bhi.n	800c35e <BSP_USBPD_PWR_VBUSInit+0x52>
    {
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
        /* Switch to Normal mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_NORMAL);
 800c342:	2103      	movs	r1, #3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff fecf 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>
 800c34a:	60f8      	str	r0, [r7, #12]

        PWR_TCPP0203_Configure_ADC();
 800c34c:	f000 fa86 	bl	800c85c <PWR_TCPP0203_Configure_ADC>
        PWR_TCPP0203_Activate_ADC();
 800c350:	f000 fb7a 	bl	800ca48 <PWR_TCPP0203_Activate_ADC>

        /*  Start Conversion */
        LL_ADC_REG_StartConversion(VISENSE_ADC_INSTANCE);
 800c354:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c358:	f7ff fa46 	bl	800b7e8 <LL_ADC_REG_StartConversion>
        break;
 800c35c:	e003      	b.n	800c366 <BSP_USBPD_PWR_VBUSInit+0x5a>

      case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
      default:
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c35e:	f06f 030a 	mvn.w	r3, #10
 800c362:	60fb      	str	r3, [r7, #12]
        break;
 800c364:	bf00      	nop
    }
  }
  return ret;
 800c366:	68fb      	ldr	r3, [r7, #12]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	0801b440 	.word	0x0801b440
 800c374:	20000130 	.word	0x20000130

0800c378 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t PortNum)
{
 800c378:	b590      	push	{r4, r7, lr}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <BSP_USBPD_PWR_VBUSDeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c386:	f06f 0301 	mvn.w	r3, #1
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	e054      	b.n	800c438 <BSP_USBPD_PWR_VBUSDeInit+0xc0>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSDeInit --");
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	b2d9      	uxtb	r1, r3
 800c392:	231e      	movs	r3, #30
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <BSP_USBPD_PWR_VBUSDeInit+0xcc>)
 800c398:	2200      	movs	r2, #0
 800c39a:	2006      	movs	r0, #6
 800c39c:	f003 fb3a 	bl	800fa14 <USBPD_TRACE_Add>

    /* Only for TCPP03 */
    if (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type)
 800c3a0:	4a29      	ldr	r2, [pc, #164]	; (800c448 <BSP_USBPD_PWR_VBUSDeInit+0xd0>)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d116      	bne.n	800c3da <BSP_USBPD_PWR_VBUSDeInit+0x62>
    {
      /* Close Gate Driver Consumer, only for TCPP03 */
      if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverConsumer(&USBPD_PWR_PortCompObj[PortNum],
 800c3ac:	4a27      	ldr	r2, [pc, #156]	; (800c44c <BSP_USBPD_PWR_VBUSDeInit+0xd4>)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b4:	695c      	ldr	r4, [r3, #20]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	4a23      	ldr	r2, [pc, #140]	; (800c450 <BSP_USBPD_PWR_VBUSDeInit+0xd8>)
 800c3c2:	4413      	add	r3, r2
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	47a0      	blx	r4
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d004      	beq.n	800c3da <BSP_USBPD_PWR_VBUSDeInit+0x62>
                                                                TCPP0203_GD_CONSUMER_SWITCH_CLOSED) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3d0:	f06f 0304 	mvn.w	r3, #4
 800c3d4:	60fb      	str	r3, [r7, #12]
        return ret;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	e02f      	b.n	800c43a <BSP_USBPD_PWR_VBUSDeInit+0xc2>
      }
    }

    /* Common for TCPP02 / TCPP03 */
    if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800c3da:	4a1b      	ldr	r2, [pc, #108]	; (800c448 <BSP_USBPD_PWR_VBUSDeInit+0xd0>)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d005      	beq.n	800c3f2 <BSP_USBPD_PWR_VBUSDeInit+0x7a>
        (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type))
 800c3e6:	4a18      	ldr	r2, [pc, #96]	; (800c448 <BSP_USBPD_PWR_VBUSDeInit+0xd0>)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
    if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d11f      	bne.n	800c432 <BSP_USBPD_PWR_VBUSDeInit+0xba>
    {
      /* Restore default gates configuration for Low power mode */
      BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : default --");
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	b2d9      	uxtb	r1, r3
 800c3f6:	231f      	movs	r3, #31
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	4b16      	ldr	r3, [pc, #88]	; (800c454 <BSP_USBPD_PWR_VBUSDeInit+0xdc>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2006      	movs	r0, #6
 800c400:	f003 fb08 	bl	800fa14 <USBPD_TRACE_Add>

      if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800c404:	4914      	ldr	r1, [pc, #80]	; (800c458 <BSP_USBPD_PWR_VBUSDeInit+0xe0>)
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	3302      	adds	r3, #2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d105      	bne.n	800c426 <BSP_USBPD_PWR_VBUSDeInit+0xae>
      {
        /* Switch to Low Power mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 800c41a:	2102      	movs	r1, #2
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fe63 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>
 800c422:	60f8      	str	r0, [r7, #12]
      if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800c424:	e008      	b.n	800c438 <BSP_USBPD_PWR_VBUSDeInit+0xc0>
      }
      else
      {
        /* Switch to Hibernate mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_HIBERNATE);
 800c426:	2101      	movs	r1, #1
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff fe5d 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>
 800c42e:	60f8      	str	r0, [r7, #12]
      if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800c430:	e002      	b.n	800c438 <BSP_USBPD_PWR_VBUSDeInit+0xc0>
      }
    }
    else
    {
      ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c432:	f06f 030a 	mvn.w	r3, #10
 800c436:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800c438:	68fb      	ldr	r3, [r7, #12]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd90      	pop	{r4, r7, pc}
 800c442:	bf00      	nop
 800c444:	0801b460 	.word	0x0801b460
 800c448:	20000130 	.word	0x20000130
 800c44c:	20000b2c 	.word	0x20000b2c
 800c450:	20000b04 	.word	0x20000b04
 800c454:	0801b480 	.word	0x0801b480
 800c458:	20000134 	.word	0x20000134

0800c45c <BSP_USBPD_PWR_VBUSOn>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOn(uint32_t PortNum)
{
 800c45c:	b590      	push	{r4, r7, lr}
 800c45e:	b087      	sub	sp, #28
 800c460:	af02      	add	r7, sp, #8
 800c462:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d003      	beq.n	800c476 <BSP_USBPD_PWR_VBUSOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c46e:	f06f 0301 	mvn.w	r3, #1
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	e065      	b.n	800c542 <BSP_USBPD_PWR_VBUSOn+0xe6>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOn --");
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	b2d9      	uxtb	r1, r3
 800c47a:	231a      	movs	r3, #26
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	4b33      	ldr	r3, [pc, #204]	; (800c54c <BSP_USBPD_PWR_VBUSOn+0xf0>)
 800c480:	2200      	movs	r2, #0
 800c482:	2006      	movs	r0, #6
 800c484:	f003 fac6 	bl	800fa14 <USBPD_TRACE_Add>

    /* Port Role is now SRC : Close Gate Driver Provider */
    if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800c488:	4931      	ldr	r1, [pc, #196]	; (800c550 <BSP_USBPD_PWR_VBUSOn+0xf4>)
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	3302      	adds	r3, #2
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d14e      	bne.n	800c53c <BSP_USBPD_PWR_VBUSOn+0xe0>
    {
      /* Only for TCPP03 */
      if (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type)
 800c49e:	4a2d      	ldr	r2, [pc, #180]	; (800c554 <BSP_USBPD_PWR_VBUSOn+0xf8>)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d116      	bne.n	800c4d8 <BSP_USBPD_PWR_VBUSOn+0x7c>
      {
        /* Open Gate Driver Consumer, only for TCPP03 */
        if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverConsumer(&USBPD_PWR_PortCompObj[PortNum],
 800c4aa:	4a2b      	ldr	r2, [pc, #172]	; (800c558 <BSP_USBPD_PWR_VBUSOn+0xfc>)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	695c      	ldr	r4, [r3, #20]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	4a27      	ldr	r2, [pc, #156]	; (800c55c <BSP_USBPD_PWR_VBUSOn+0x100>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	2108      	movs	r1, #8
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	47a0      	blx	r4
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d004      	beq.n	800c4d8 <BSP_USBPD_PWR_VBUSOn+0x7c>
                                                                  TCPP0203_GD_CONSUMER_SWITCH_OPEN) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4ce:	f06f 0304 	mvn.w	r3, #4
 800c4d2:	60fb      	str	r3, [r7, #12]
          return ret;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	e035      	b.n	800c544 <BSP_USBPD_PWR_VBUSOn+0xe8>
        }
      }

      /* Common for TCPP02 / TCPP03 */
      if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800c4d8:	4a1e      	ldr	r2, [pc, #120]	; (800c554 <BSP_USBPD_PWR_VBUSOn+0xf8>)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d005      	beq.n	800c4f0 <BSP_USBPD_PWR_VBUSOn+0x94>
          (USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type))
 800c4e4:	4a1b      	ldr	r2, [pc, #108]	; (800c554 <BSP_USBPD_PWR_VBUSOn+0xf8>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
      if ((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type) ||
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d121      	bne.n	800c534 <BSP_USBPD_PWR_VBUSOn+0xd8>
      {
        HAL_Delay(2);
 800c4f0:	2002      	movs	r0, #2
 800c4f2:	f000 fe99 	bl	800d228 <HAL_Delay>

        if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800c4f6:	4a18      	ldr	r2, [pc, #96]	; (800c558 <BSP_USBPD_PWR_VBUSOn+0xfc>)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4fe:	691c      	ldr	r4, [r3, #16]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4a14      	ldr	r2, [pc, #80]	; (800c55c <BSP_USBPD_PWR_VBUSOn+0x100>)
 800c50c:	4413      	add	r3, r2
 800c50e:	2104      	movs	r1, #4
 800c510:	4618      	mov	r0, r3
 800c512:	47a0      	blx	r4
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <BSP_USBPD_PWR_VBUSOn+0xc4>
                                                                  TCPP0203_GD_PROVIDER_SWITCH_CLOSED) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c51a:	f06f 0304 	mvn.w	r3, #4
 800c51e:	60fb      	str	r3, [r7, #12]
        }
        BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC --");
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	b2d9      	uxtb	r1, r3
 800c524:	231b      	movs	r3, #27
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <BSP_USBPD_PWR_VBUSOn+0x104>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	2006      	movs	r0, #6
 800c52e:	f003 fa71 	bl	800fa14 <USBPD_TRACE_Add>
 800c532:	e006      	b.n	800c542 <BSP_USBPD_PWR_VBUSOn+0xe6>
      }
      else
      {
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c534:	f06f 030a 	mvn.w	r3, #10
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	e002      	b.n	800c542 <BSP_USBPD_PWR_VBUSOn+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c53c:	f06f 0304 	mvn.w	r3, #4
 800c540:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800c542:	68fb      	ldr	r3, [r7, #12]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd90      	pop	{r4, r7, pc}
 800c54c:	0801b4a0 	.word	0x0801b4a0
 800c550:	20000134 	.word	0x20000134
 800c554:	20000130 	.word	0x20000130
 800c558:	20000b2c 	.word	0x20000b2c
 800c55c:	20000b04 	.word	0x20000b04
 800c560:	0801b4bc 	.word	0x0801b4bc

0800c564 <BSP_USBPD_PWR_VBUSOff>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOff(uint32_t PortNum)
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b089      	sub	sp, #36	; 0x24
 800c568:	af02      	add	r7, sp, #8
 800c56a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
  uint32_t vbus;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <BSP_USBPD_PWR_VBUSOff+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c576:	f06f 0301 	mvn.w	r3, #1
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	e069      	b.n	800c652 <BSP_USBPD_PWR_VBUSOff+0xee>
  }
  else
  {
    /* Open Gate driver provider */
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOff --");
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	b2d9      	uxtb	r1, r3
 800c582:	231b      	movs	r3, #27
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	4b35      	ldr	r3, [pc, #212]	; (800c65c <BSP_USBPD_PWR_VBUSOff+0xf8>)
 800c588:	2200      	movs	r2, #0
 800c58a:	2006      	movs	r0, #6
 800c58c:	f003 fa42 	bl	800fa14 <USBPD_TRACE_Add>
    if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800c590:	4a33      	ldr	r2, [pc, #204]	; (800c660 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c598:	691c      	ldr	r4, [r3, #16]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	4613      	mov	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	4a2f      	ldr	r2, [pc, #188]	; (800c664 <BSP_USBPD_PWR_VBUSOff+0x100>)
 800c5a6:	4413      	add	r3, r2
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	47a0      	blx	r4
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <BSP_USBPD_PWR_VBUSOff+0x58>
                                                              TCPP0203_GD_PROVIDER_SWITCH_OPEN) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5b4:	f06f 0304 	mvn.w	r3, #4
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e04a      	b.n	800c652 <BSP_USBPD_PWR_VBUSOff+0xee>
    }
    else
    {
      /* Set Discharge On */
      if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800c5bc:	4a28      	ldr	r2, [pc, #160]	; (800c660 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c4:	69dc      	ldr	r4, [r3, #28]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	4a24      	ldr	r2, [pc, #144]	; (800c664 <BSP_USBPD_PWR_VBUSOff+0x100>)
 800c5d2:	4413      	add	r3, r2
 800c5d4:	2140      	movs	r1, #64	; 0x40
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	47a0      	blx	r4
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d003      	beq.n	800c5e8 <BSP_USBPD_PWR_VBUSOff+0x84>
                                                           TCPP0203_VBUS_DISCHARGE_ON) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5e0:	f06f 0304 	mvn.w	r3, #4
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	e034      	b.n	800c652 <BSP_USBPD_PWR_VBUSOff+0xee>
      }
      else
      {
        /* Wait VBUS level becomes lower than USBPD_PWR_LOW_VBUS_THRESHOLD */
        uint8_t counter = 0;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	74fb      	strb	r3, [r7, #19]

        (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 800c5ec:	f107 030c 	add.w	r3, r7, #12
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f872 	bl	800c6dc <BSP_USBPD_PWR_VBUSGetVoltage>

        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 800c5f8:	e00b      	b.n	800c612 <BSP_USBPD_PWR_VBUSOff+0xae>
        {
          counter++;
 800c5fa:	7cfb      	ldrb	r3, [r7, #19]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	74fb      	strb	r3, [r7, #19]
          HAL_Delay(20);
 800c600:	2014      	movs	r0, #20
 800c602:	f000 fe11 	bl	800d228 <HAL_Delay>
          (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 800c606:	f107 030c 	add.w	r3, r7, #12
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f865 	bl	800c6dc <BSP_USBPD_PWR_VBUSGetVoltage>
        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f240 2225 	movw	r2, #549	; 0x225
 800c618:	4293      	cmp	r3, r2
 800c61a:	d902      	bls.n	800c622 <BSP_USBPD_PWR_VBUSOff+0xbe>
 800c61c:	7cfb      	ldrb	r3, [r7, #19]
 800c61e:	2b13      	cmp	r3, #19
 800c620:	d9eb      	bls.n	800c5fa <BSP_USBPD_PWR_VBUSOff+0x96>
        }

        /* Set Discharge Off */
        if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 800c622:	4a0f      	ldr	r2, [pc, #60]	; (800c660 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c62a:	69dc      	ldr	r4, [r3, #28]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	4613      	mov	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	4a0b      	ldr	r2, [pc, #44]	; (800c664 <BSP_USBPD_PWR_VBUSOff+0x100>)
 800c638:	4413      	add	r3, r2
 800c63a:	2100      	movs	r1, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	47a0      	blx	r4
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <BSP_USBPD_PWR_VBUSOff+0xe8>
                                                             TCPP0203_VBUS_DISCHARGE_OFF) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c646:	f06f 0304 	mvn.w	r3, #4
 800c64a:	617b      	str	r3, [r7, #20]
        }

        HAL_Delay(30);
 800c64c:	201e      	movs	r0, #30
 800c64e:	f000 fdeb 	bl	800d228 <HAL_Delay>
      }
    }
  }
  return ret;
 800c652:	697b      	ldr	r3, [r7, #20]
}
 800c654:	4618      	mov	r0, r3
 800c656:	371c      	adds	r7, #28
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd90      	pop	{r4, r7, pc}
 800c65c:	0801b4d8 	.word	0x0801b4d8
 800c660:	20000b2c 	.word	0x20000b2c
 800c664:	20000b04 	.word	0x20000b04

0800c668 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>:
  */
int32_t BSP_USBPD_PWR_VBUSSetVoltage_Fixed(uint32_t PortNum,
                                           uint32_t VbusTargetInmv,
                                           uint32_t OperatingCurrent,
                                           uint32_t MaxOperatingCurrent)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
  UNUSED(MaxOperatingCurrent);
  UNUSED(OperatingCurrent);
  UNUSED(VbusTargetInmv);

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <BSP_USBPD_PWR_VBUSSetVoltage_Fixed+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c680:	f06f 0301 	mvn.w	r3, #1
 800c684:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800c686:	697b      	ldr	r3, [r7, #20]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>:
  * @param  pfnVBUSDetectCallback callback function pointer
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_RegisterVBUSDetectCallback(uint32_t PortNum,
                                                 USBPD_PWR_VBUSDetectCallbackFunc *pfnVBUSDetectCallback)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pfnVBUSDetectCallback))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x1a>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d103      	bne.n	800c6b6 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c6ae:	f06f 0301 	mvn.w	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	e009      	b.n	800c6ca <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x36>
  }
  else
  {
    /* Set port callback for VBUS detection event */
    USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = pfnVBUSDetectCallback;
 800c6b6:	4908      	ldr	r1, [pc, #32]	; (800c6d8 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x44>)
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	4413      	add	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	440b      	add	r3, r1
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	20000134 	.word	0x20000134

0800c6dc <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t PortNum, uint32_t *pVoltage)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d103      	bne.n	800c6fe <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c6f6:	f06f 0301 	mvn.w	r3, #1
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e00f      	b.n	800c71e <BSP_USBPD_PWR_VBUSGetVoltage+0x42>
  }
  else
  {
    uint32_t voltage;
    static __IO uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_VSENSE];
 800c6fe:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <BSP_USBPD_PWR_VBUSGetVoltage+0x4c>)
 800c700:	881a      	ldrh	r2, [r3, #0]
 800c702:	4b0a      	ldr	r3, [pc, #40]	; (800c72c <BSP_USBPD_PWR_VBUSGetVoltage+0x50>)
 800c704:	801a      	strh	r2, [r3, #0]
    voltage = PWR_TCPP0203_ConvertADCDataToVoltage(adc_value, DRP1M1_VSENSE_RA, DRP1M1_VSENSE_RB);
 800c706:	4b09      	ldr	r3, [pc, #36]	; (800c72c <BSP_USBPD_PWR_VBUSGetVoltage+0x50>)
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2228      	movs	r2, #40	; 0x28
 800c70e:	21c8      	movs	r1, #200	; 0xc8
 800c710:	4618      	mov	r0, r3
 800c712:	f000 fc9d 	bl	800d050 <PWR_TCPP0203_ConvertADCDataToVoltage>
 800c716:	60b8      	str	r0, [r7, #8]

    *pVoltage = voltage;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800c71e:	68fb      	ldr	r3, [r7, #12]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	20000b00 	.word	0x20000b00
 800c72c:	20000b30 	.word	0x20000b30

0800c730 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t PortNum, int32_t *pCurrent)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d102      	bne.n	800c74a <BSP_USBPD_PWR_VBUSGetCurrent+0x1a>
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d103      	bne.n	800c752 <BSP_USBPD_PWR_VBUSGetCurrent+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c74a:	f06f 0301 	mvn.w	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
 800c750:	e00c      	b.n	800c76c <BSP_USBPD_PWR_VBUSGetCurrent+0x3c>
  }
  else
  {
    int32_t current;
    uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_ISENSE];
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <BSP_USBPD_PWR_VBUSGetCurrent+0x48>)
 800c754:	885b      	ldrh	r3, [r3, #2]
 800c756:	827b      	strh	r3, [r7, #18]
    current = PWR_TCPP0203_ConvertADCDataToCurrent(adc_value, DRP1M1_ISENSE_GA, DRP1M1_ISENSE_RS);
 800c758:	8a7b      	ldrh	r3, [r7, #18]
 800c75a:	2207      	movs	r2, #7
 800c75c:	212a      	movs	r1, #42	; 0x2a
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fca2 	bl	800d0a8 <PWR_TCPP0203_ConvertADCDataToCurrent>
 800c764:	60f8      	str	r0, [r7, #12]

    *pCurrent = current;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800c76c:	697b      	ldr	r3, [r7, #20]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20000b00 	.word	0x20000b00

0800c77c <BSP_USBPD_PWR_EventCallback>:
  *         any PWR related event detection mechanism)
  * @param  PortNum Type-C port identifier
  * @retval None
  */
void BSP_USBPD_PWR_EventCallback(uint32_t PortNum)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af02      	add	r7, sp, #8
 800c782:	6078      	str	r0, [r7, #4]
  BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_EventCallback --");
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	b2d9      	uxtb	r1, r3
 800c788:	2321      	movs	r3, #33	; 0x21
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <BSP_USBPD_PWR_EventCallback+0x3c>)
 800c78e:	2200      	movs	r2, #0
 800c790:	2006      	movs	r0, #6
 800c792:	f003 f93f 	bl	800fa14 <USBPD_TRACE_Add>

  /* Handle USBPD PWR event */
  switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800c796:	4a09      	ldr	r2, [pc, #36]	; (800c7bc <BSP_USBPD_PWR_EventCallback+0x40>)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c79e:	3b02      	subs	r3, #2
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d803      	bhi.n	800c7ac <BSP_USBPD_PWR_EventCallback+0x30>
  {
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
      /* In case of TCPP0203, this callback could be called when an event is detected
         on FLGn line */
      PWR_TCPP0203_EventCallback(PortNum);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fabf 	bl	800cd28 <PWR_TCPP0203_EventCallback>
      break;
 800c7aa:	e000      	b.n	800c7ae <BSP_USBPD_PWR_EventCallback+0x32>

    case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
    default:
      break;
 800c7ac:	bf00      	nop
  }
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0801b5d0 	.word	0x0801b5d0
 800c7bc:	20000130 	.word	0x20000130

0800c7c0 <PWR_TCPP0203_GPIOConfigInit>:
  * @note   GPIO used for TCPP0203 operation includes VBUS measurement, ENABLE pin driving
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_GPIOConfigInit(uint32_t PortNum)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  UNUSED(PortNum);

  /* Configure ENABLE GPIO */
  TCPP0203_PORT0_ENABLE_GPIO_CLK_ENABLE();
 800c7c8:	2004      	movs	r0, #4
 800c7ca:	f7ff fa09 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
  /* Configure IO in output push-pull mode to drive ENABLE */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_MODE);
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7d4:	4820      	ldr	r0, [pc, #128]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c7d6:	f7ff fa1b 	bl	800bc10 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN,
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7e0:	481d      	ldr	r0, [pc, #116]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c7e2:	f7ff fa52 	bl	800bc8a <LL_GPIO_SetPinOutputType>
                           TCPP0203_PORT0_ENABLE_GPIO_OUTPUT);
  LL_GPIO_SetPinSpeed(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, LL_GPIO_SPEED_FREQ_LOW);
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7ec:	481a      	ldr	r0, [pc, #104]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c7ee:	f7ff fa64 	bl	800bcba <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinPull(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_PUPD);
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7f8:	4817      	ldr	r0, [pc, #92]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c7fa:	f7ff fa9b 	bl	800bd34 <LL_GPIO_SetPinPull>

  /* Set ENABLE to default state */
  TCPP0203_PORT0_ENABLE_GPIO_DEFVALUE();
 800c7fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c802:	4815      	ldr	r0, [pc, #84]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c804:	f7ff fae1 	bl	800bdca <LL_GPIO_ResetOutputPin>

  /* Configure IANA GPIO */
  TCPP0203_PORT0_IANA_GPIO_CLK_ENABLE();
 800c808:	2004      	movs	r0, #4
 800c80a:	f7ff f9e9 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_IANA_GPIO_PORT, TCPP0203_PORT0_IANA_GPIO_PIN, TCPP0203_PORT0_IANA_GPIO_MODE);
 800c80e:	2203      	movs	r2, #3
 800c810:	2102      	movs	r1, #2
 800c812:	4811      	ldr	r0, [pc, #68]	; (800c858 <PWR_TCPP0203_GPIOConfigInit+0x98>)
 800c814:	f7ff f9fc 	bl	800bc10 <LL_GPIO_SetPinMode>

  /* Configure VBUS Connector sensing GPIO */
  TCPP0203_PORT0_VBUSC_GPIO_CLK_ENABLE();
 800c818:	2001      	movs	r0, #1
 800c81a:	f7ff f9e1 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSC_GPIO_PORT, TCPP0203_PORT0_VBUSC_GPIO_PIN, TCPP0203_PORT0_VBUSC_GPIO_MODE);
 800c81e:	2203      	movs	r2, #3
 800c820:	2101      	movs	r1, #1
 800c822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c826:	f7ff f9f3 	bl	800bc10 <LL_GPIO_SetPinMode>

  /* Configure VBUS Provider sensing GPIO */
  TCPP0203_PORT0_VBUSPROV_GPIO_CLK_ENABLE();
 800c82a:	2001      	movs	r0, #1
 800c82c:	f7ff f9d8 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSPROV_GPIO_PORT, TCPP0203_PORT0_VBUSPROV_GPIO_PIN,
 800c830:	2203      	movs	r2, #3
 800c832:	2102      	movs	r1, #2
 800c834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c838:	f7ff f9ea 	bl	800bc10 <LL_GPIO_SetPinMode>
                     TCPP0203_PORT0_VBUSPROV_GPIO_MODE);
  /* Configure VBUS Consumer sensing GPIO */
  TCPP0203_PORT0_VBUSCONS_GPIO_CLK_ENABLE();
 800c83c:	2001      	movs	r0, #1
 800c83e:	f7ff f9cf 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSCONS_GPIO_PORT, TCPP0203_PORT0_VBUSCONS_GPIO_PIN,
 800c842:	2203      	movs	r2, #3
 800c844:	2110      	movs	r1, #16
 800c846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c84a:	f7ff f9e1 	bl	800bc10 <LL_GPIO_SetPinMode>
                     TCPP0203_PORT0_VBUSCONS_GPIO_MODE);
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	48000800 	.word	0x48000800

0800c85c <PWR_TCPP0203_Configure_ADC>:
  * @brief  Configure ADC (ADC instance for Vsense and Isense: VISENSE_ADC_INSTANCE) and GPIO used by ADC channels.
  * @param  None
  * @retval None
  */
static void PWR_TCPP0203_Configure_ADC(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b090      	sub	sp, #64	; 0x40
 800c860:	af02      	add	r7, sp, #8
  uint32_t Timeout ; /* Variable used for Timeout management */
#endif /* USE_TIMEOUT */

  /* Init with LL driver */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 800c862:	4870      	ldr	r0, [pc, #448]	; (800ca24 <PWR_TCPP0203_Configure_ADC+0x1c8>)
 800c864:	f7ff fac0 	bl	800bde8 <LL_RCC_SetADCClockSource>
#endif /* USE_STM32G4XX_NUCLEO */


  /* DMA controller clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 800c868:	2004      	movs	r0, #4
 800c86a:	f7ff f9a1 	bl	800bbb0 <LL_AHB1_GRP1_EnableClock>
#endif /* USE_STM32G4XX_NUCLEO */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800c86e:	2001      	movs	r0, #1
 800c870:	f7ff f99e 	bl	800bbb0 <LL_AHB1_GRP1_EnableClock>

  LL_ADC_InitTypeDef ADC_InitStruct = {0U};
 800c874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c878:	2200      	movs	r2, #0
 800c87a:	601a      	str	r2, [r3, #0]
 800c87c:	605a      	str	r2, [r3, #4]
 800c87e:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0U};
 800c880:	f107 0310 	add.w	r3, r7, #16
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	605a      	str	r2, [r3, #4]
 800c88a:	609a      	str	r2, [r3, #8]
 800c88c:	60da      	str	r2, [r3, #12]
 800c88e:	611a      	str	r2, [r3, #16]
 800c890:	615a      	str	r2, [r3, #20]
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0U};
 800c892:	463b      	mov	r3, r7
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	605a      	str	r2, [r3, #4]
 800c89a:	609a      	str	r2, [r3, #8]
 800c89c:	60da      	str	r2, [r3, #12]
#endif /* USE_STM32G4XX_NUCLEO */

  /* Peripheral clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 800c89e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c8a2:	f7ff f99d 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
#else
#error "missing value definition for your your board"
#endif /* USE_STM32G4XX_NUCLEO */

  /* VISENSE_ADC_INSTANCE DMA Init */
  LL_DMA_SetDataTransferDirection(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2103      	movs	r1, #3
 800c8aa:	485f      	ldr	r0, [pc, #380]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8ac:	f7fe ffe6 	bl	800b87c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PRIORITY_LOW);
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2103      	movs	r1, #3
 800c8b4:	485c      	ldr	r0, [pc, #368]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8b6:	f7ff f8c7 	bl	800ba48 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MODE_CIRCULAR);
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	2103      	movs	r1, #3
 800c8be:	485a      	ldr	r0, [pc, #360]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8c0:	f7ff f804 	bl	800b8cc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2103      	movs	r1, #3
 800c8c8:	4857      	ldr	r0, [pc, #348]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8ca:	f7ff f825 	bl	800b918 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);
 800c8ce:	2280      	movs	r2, #128	; 0x80
 800c8d0:	2103      	movs	r1, #3
 800c8d2:	4855      	ldr	r0, [pc, #340]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8d4:	f7ff f846 	bl	800b964 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PDATAALIGN_HALFWORD);
 800c8d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8dc:	2103      	movs	r1, #3
 800c8de:	4852      	ldr	r0, [pc, #328]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8e0:	f7ff f866 	bl	800b9b0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MDATAALIGN_HALFWORD);
 800c8e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	484f      	ldr	r0, [pc, #316]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8ec:	f7ff f886 	bl	800b9fc <LL_DMA_SetMemorySize>

#if defined(USE_STM32G4XX_NUCLEO)
  LL_DMA_SetPeriphRequest(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_DMA_REQ);
 800c8f0:	2205      	movs	r2, #5
 800c8f2:	2103      	movs	r1, #3
 800c8f4:	484c      	ldr	r0, [pc, #304]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c8f6:	f7ff f931 	bl	800bb5c <LL_DMA_SetPeriphRequest>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_DMAMUX_SetRequestID(DMAMUX1, VISENSE_DMAMUX_CHANNEL, VISENSE_DMA_REQ);
#endif /* USE_STM32G4XX_NUCLEO */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(VISENSE_DMA_INSTANCE,
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c900:	f7fe fe10 	bl	800b524 <LL_ADC_DMA_GetRegAddr>
 800c904:	4602      	mov	r2, r0
 800c906:	4949      	ldr	r1, [pc, #292]	; (800ca2c <PWR_TCPP0203_Configure_ADC+0x1d0>)
 800c908:	2300      	movs	r3, #0
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	460b      	mov	r3, r1
 800c90e:	2103      	movs	r1, #3
 800c910:	4845      	ldr	r0, [pc, #276]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c912:	f7ff f8e5 	bl	800bae0 <LL_DMA_ConfigAddresses>
                         LL_ADC_DMA_GetRegAddr(VISENSE_ADC_INSTANCE, LL_ADC_DMA_REG_REGULAR_DATA),
                         (uint32_t)usbpd_pwr_adcx_buff,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_ADC_BUFFER_SIZE);
 800c916:	2202      	movs	r2, #2
 800c918:	2103      	movs	r1, #3
 800c91a:	4843      	ldr	r0, [pc, #268]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c91c:	f7ff f8ba 	bl	800ba94 <LL_DMA_SetDataLength>

  /* Activation of DMA ---------------------------------------------------------*/
  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL);
 800c920:	2103      	movs	r1, #3
 800c922:	4841      	ldr	r0, [pc, #260]	; (800ca28 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800c924:	f7fe ff88 	bl	800b838 <LL_DMA_EnableChannel>
  */
#if defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerConfigurable(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_FIXED);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
#endif /* USE_STM32G0XX_NUCLEO */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800c928:	2300      	movs	r3, #0
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800c92c:	2300      	movs	r3, #0
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800c930:	2300      	movs	r3, #0
 800c932:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_Init(VISENSE_ADC_INSTANCE, &ADC_InitStruct);
 800c934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c938:	4619      	mov	r1, r3
 800c93a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c93e:	f002 fc07 	bl	800f150 <LL_ADC_Init>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800c942:	2300      	movs	r3, #0
 800c944:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800c946:	2301      	movs	r3, #1
 800c948:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800c94e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c952:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800c954:	2303      	movs	r3, #3
 800c956:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800c958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_REG_Init(VISENSE_ADC_INSTANCE, &ADC_REG_InitStruct);
 800c95e:	f107 0310 	add.w	r3, r7, #16
 800c962:	4619      	mov	r1, r3
 800c964:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c968:	f002 fc18 	bl	800f19c <LL_ADC_REG_Init>
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_SetGainCompensation(VISENSE_ADC_INSTANCE, 0U);
 800c96c:	2100      	movs	r1, #0
 800c96e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c972:	f7fe fdfd 	bl	800b570 <LL_ADC_SetGainCompensation>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerScanDirection(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetTriggerFrequencyMode(VISENSE_ADC_INSTANCE, LL_ADC_CLOCK_FREQ_MODE_HIGH);
  LL_ADC_REG_SetSequencerChAdd(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL | ISENSE_ADC_CHANNEL);
#endif /* USE_STM32G4XX_NUCLEO */
  LL_ADC_SetOverSamplingScope(VISENSE_ADC_INSTANCE, LL_ADC_OVS_DISABLE);
 800c976:	2100      	movs	r1, #0
 800c978:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c97c:	f7fe febe 	bl	800b6fc <LL_ADC_SetOverSamplingScope>
#if defined(USE_STM32G4XX_NUCLEO)
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800c980:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800c984:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800c986:	2300      	movs	r3, #0
 800c988:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(VISENSE_ADC_INSTANCE), &ADC_CommonInitStruct);
 800c98a:	463b      	mov	r3, r7
 800c98c:	4619      	mov	r1, r3
 800c98e:	4828      	ldr	r0, [pc, #160]	; (800ca30 <PWR_TCPP0203_Configure_ADC+0x1d4>)
 800c990:	f002 fb7a 	bl	800f088 <LL_ADC_CommonInit>
  LL_ADC_DisableIT_EOS(VISENSE_ADC_INSTANCE);
#endif /* USE_STM32G4XX_NUCLEO */

#if defined(USE_STM32G4XX_NUCLEO)
  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
 800c994:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c998:	f7fe fec5 	bl	800b726 <LL_ADC_DisableDeepPowerDown>
#endif /* USE_STM32G4XX_NUCLEO */
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 800c99c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c9a0:	f7fe fed3 	bl	800b74a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially                    */
  /*       CPU processing cycles (depends on compilation optimization).     */
  /* Note: If system core clock frequency is below 200kHz, wait time        */
  /*       is only a few CPU processing cycles.                             */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2U))) / 10U);
 800c9a4:	4b23      	ldr	r3, [pc, #140]	; (800ca34 <PWR_TCPP0203_Configure_ADC+0x1d8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	099b      	lsrs	r3, r3, #6
 800c9aa:	4a23      	ldr	r2, [pc, #140]	; (800ca38 <PWR_TCPP0203_Configure_ADC+0x1dc>)
 800c9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b0:	099a      	lsrs	r2, r3, #6
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	4b1f      	ldr	r3, [pc, #124]	; (800ca3c <PWR_TCPP0203_Configure_ADC+0x1e0>)
 800c9be:	fba3 2302 	umull	r2, r3, r3, r2
 800c9c2:	08db      	lsrs	r3, r3, #3
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
  while (wait_loop_index != 0U)
 800c9c6:	e002      	b.n	800c9ce <PWR_TCPP0203_Configure_ADC+0x172>
  {
    wait_loop_index--;
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
  while (wait_loop_index != 0U)
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1f9      	bne.n	800c9c8 <PWR_TCPP0203_Configure_ADC+0x16c>
  }

  /** Configure Regular Channels
  */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_REG_SetSequencerRanks(VISENSE_ADC_INSTANCE, VSENSE_ADC_RANK, VSENSE_ADC_CHANNEL);
 800c9d4:	4a1a      	ldr	r2, [pc, #104]	; (800ca40 <PWR_TCPP0203_Configure_ADC+0x1e4>)
 800c9d6:	2106      	movs	r1, #6
 800c9d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c9dc:	f7fe fded 	bl	800b5ba <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	4917      	ldr	r1, [pc, #92]	; (800ca40 <PWR_TCPP0203_Configure_ADC+0x1e4>)
 800c9e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c9e8:	f7fe fe34 	bl	800b654 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SINGLE_ENDED);
 800c9ec:	227f      	movs	r2, #127	; 0x7f
 800c9ee:	4914      	ldr	r1, [pc, #80]	; (800ca40 <PWR_TCPP0203_Configure_ADC+0x1e4>)
 800c9f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800c9f4:	f7fe fe5a 	bl	800b6ac <LL_ADC_SetChannelSingleDiff>

  LL_ADC_REG_SetSequencerRanks(VISENSE_ADC_INSTANCE, ISENSE_ADC_RANK, ISENSE_ADC_CHANNEL);
 800c9f8:	4a12      	ldr	r2, [pc, #72]	; (800ca44 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800c9fa:	210c      	movs	r1, #12
 800c9fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca00:	f7fe fddb 	bl	800b5ba <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 800ca04:	2206      	movs	r2, #6
 800ca06:	490f      	ldr	r1, [pc, #60]	; (800ca44 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800ca08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca0c:	f7fe fe22 	bl	800b654 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SINGLE_ENDED);
 800ca10:	227f      	movs	r2, #127	; 0x7f
 800ca12:	490c      	ldr	r1, [pc, #48]	; (800ca44 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 800ca14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca18:	f7fe fe48 	bl	800b6ac <LL_ADC_SetChannelSingleDiff>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_COMMON_1);
#endif /* USE_STM32G4XX_NUCLEO */
}
 800ca1c:	bf00      	nop
 800ca1e:	3738      	adds	r7, #56	; 0x38
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	001c0002 	.word	0x001c0002
 800ca28:	40020000 	.word	0x40020000
 800ca2c:	20000b00 	.word	0x20000b00
 800ca30:	50000300 	.word	0x50000300
 800ca34:	20000140 	.word	0x20000140
 800ca38:	053e2d63 	.word	0x053e2d63
 800ca3c:	cccccccd 	.word	0xcccccccd
 800ca40:	04300002 	.word	0x04300002
 800ca44:	1d500080 	.word	0x1d500080

0800ca48 <PWR_TCPP0203_Activate_ADC>:
  *         - ADC group injected
  *           Feature not available          (feature not available on this STM32 series)
  * @retval None
  */
static void PWR_TCPP0203_Activate_ADC(void)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (0U == LL_ADC_IsEnabled(VISENSE_ADC_INSTANCE))
 800ca52:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca56:	f7fe fea0 	bl	800b79a <LL_ADC_IsEnabled>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d14d      	bne.n	800cafc <PWR_TCPP0203_Activate_ADC+0xb4>
  {
#if defined(STM32G474xx)
    LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
 800ca60:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca64:	f7fe fe5f 	bl	800b726 <LL_ADC_DisableDeepPowerDown>
#endif /* STM32G474xx */
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 800ca68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800ca6c:	f7fe fe6d 	bl	800b74a <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2u))) / 10u);
 800ca70:	4b24      	ldr	r3, [pc, #144]	; (800cb04 <PWR_TCPP0203_Activate_ADC+0xbc>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	099b      	lsrs	r3, r3, #6
 800ca76:	4a24      	ldr	r2, [pc, #144]	; (800cb08 <PWR_TCPP0203_Activate_ADC+0xc0>)
 800ca78:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7c:	099a      	lsrs	r2, r3, #6
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	461a      	mov	r2, r3
 800ca88:	4b20      	ldr	r3, [pc, #128]	; (800cb0c <PWR_TCPP0203_Activate_ADC+0xc4>)
 800ca8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca8e:	08db      	lsrs	r3, r3, #3
 800ca90:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800ca92:	e002      	b.n	800ca9a <PWR_TCPP0203_Activate_ADC+0x52>
    {
      wait_loop_index--;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1f9      	bne.n	800ca94 <PWR_TCPP0203_Activate_ADC+0x4c>
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in DMA destination address, DMA transfer must be disabled during */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(VISENSE_ADC_INSTANCE);
 800caa0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800caa4:	f7fe fdc8 	bl	800b638 <LL_ADC_REG_GetDMATransfer>
 800caa8:	4603      	mov	r3, r0
 800caaa:	603b      	str	r3, [r7, #0]
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, LL_ADC_REG_DMA_TRANSFER_NONE);
 800caac:	2100      	movs	r1, #0
 800caae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800cab2:	f7fe fdae 	bl	800b612 <LL_ADC_REG_SetDMATransfer>
    /* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U != LL_ADC_IsCalibrationOnGoing(VISENSE_ADC_INSTANCE))
 800cab6:	bf00      	nop
 800cab8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800cabc:	f7fe fe80 	bl	800b7c0 <LL_ADC_IsCalibrationOnGoing>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1f8      	bne.n	800cab8 <PWR_TCPP0203_Activate_ADC+0x70>
      }
#endif /* USE_TIMEOUT */
    }

    /* Restore ADC DMA transfer request after calibration */
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, backup_setting_adc_dma_transfer);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	4619      	mov	r1, r3
 800caca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800cace:	f7fe fda0 	bl	800b612 <LL_ADC_REG_SetDMATransfer>

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1U);
 800cad2:	2340      	movs	r3, #64	; 0x40
 800cad4:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800cad6:	e002      	b.n	800cade <PWR_TCPP0203_Activate_ADC+0x96>
    {
      wait_loop_index--;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	3b01      	subs	r3, #1
 800cadc:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1f9      	bne.n	800cad8 <PWR_TCPP0203_Activate_ADC+0x90>
    }

    /* Enable ADC */
    LL_ADC_Enable(VISENSE_ADC_INSTANCE);
 800cae4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800cae8:	f7fe fe43 	bl	800b772 <LL_ADC_Enable>
    /* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U == LL_ADC_IsActiveFlag_ADRDY(VISENSE_ADC_INSTANCE))
 800caec:	bf00      	nop
 800caee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800caf2:	f7fe fe8d 	bl	800b810 <LL_ADC_IsActiveFlag_ADRDY>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0f8      	beq.n	800caee <PWR_TCPP0203_Activate_ADC+0xa6>
  /*       using function:                                                    */
  /*       "LL_ADC_REG_StartConversion();"                                    */

  /* Operation on ADC hierarchical scope: ADC group injected -----------------*/
  /* Note: Feature not available on this STM32 series */
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20000140 	.word	0x20000140
 800cb08:	053e2d63 	.word	0x053e2d63
 800cb0c:	cccccccd 	.word	0xcccccccd

0800cb10 <PWR_TCPP0203_ITConfigInit>:
  * @note   Corresponds to EXTI mapped onto FLGn pin of TCPP0203
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_ITConfigInit(uint32_t PortNum)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  if (USBPD_PWR_Port_Status[PortNum].IsItEnabled == 0U)
 800cb18:	4921      	ldr	r1, [pc, #132]	; (800cba0 <PWR_TCPP0203_ITConfigInit+0x90>)
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	440b      	add	r3, r1
 800cb26:	3301      	adds	r3, #1
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d133      	bne.n	800cb96 <PWR_TCPP0203_ITConfigInit+0x86>
  {
    USBPD_PWR_Port_Status[PortNum].IsItEnabled = 1U;
 800cb2e:	491c      	ldr	r1, [pc, #112]	; (800cba0 <PWR_TCPP0203_ITConfigInit+0x90>)
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	2201      	movs	r2, #1
 800cb40:	701a      	strb	r2, [r3, #0]

    /* Enable the GPIO EXTI clock */
    TCPP0203_PORT0_FLG_GPIO_CLK_ENABLE();
 800cb42:	2004      	movs	r0, #4
 800cb44:	f7ff f84c 	bl	800bbe0 <LL_AHB2_GRP1_EnableClock>
    /* Configure IO */
    LL_GPIO_SetPinMode(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_MODE);
 800cb48:	2200      	movs	r2, #0
 800cb4a:	2120      	movs	r1, #32
 800cb4c:	4815      	ldr	r0, [pc, #84]	; (800cba4 <PWR_TCPP0203_ITConfigInit+0x94>)
 800cb4e:	f7ff f85f 	bl	800bc10 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_PUPD);
 800cb52:	2201      	movs	r2, #1
 800cb54:	2120      	movs	r1, #32
 800cb56:	4813      	ldr	r0, [pc, #76]	; (800cba4 <PWR_TCPP0203_ITConfigInit+0x94>)
 800cb58:	f7ff f8ec 	bl	800bd34 <LL_GPIO_SetPinPull>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb5c:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <PWR_TCPP0203_ITConfigInit+0x98>)
 800cb5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb60:	4a11      	ldr	r2, [pc, #68]	; (800cba8 <PWR_TCPP0203_ITConfigInit+0x98>)
 800cb62:	f043 0301 	orr.w	r3, r3, #1
 800cb66:	6613      	str	r3, [r2, #96]	; 0x60
 800cb68:	4b0f      	ldr	r3, [pc, #60]	; (800cba8 <PWR_TCPP0203_ITConfigInit+0x98>)
 800cb6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	68fb      	ldr	r3, [r7, #12]

    /* Connect External Line to the GPIO*/
    TCPP0203_PORT0_FLG_SET_EXTI();
 800cb74:	490d      	ldr	r1, [pc, #52]	; (800cbac <PWR_TCPP0203_ITConfigInit+0x9c>)
 800cb76:	2002      	movs	r0, #2
 800cb78:	f7ff f97e 	bl	800be78 <LL_SYSCFG_SetEXTISource>

    /* Enable a falling trigger EXTI line x Interrupt */
    TCPP0203_PORT0_FLG_EXTI_ENABLE();
 800cb7c:	2020      	movs	r0, #32
 800cb7e:	f7ff f957 	bl	800be30 <LL_EXTI_EnableIT_0_31>
    TCPP0203_PORT0_FLG_TRIG_ENABLE();
 800cb82:	2020      	movs	r0, #32
 800cb84:	f7ff f966 	bl	800be54 <LL_EXTI_EnableFallingTrig_0_31>

    /* Configure NVIC for EXTIx_IRQn */
    NVIC_SetPriority(TCPP0203_PORT0_FLG_EXTI_IRQN, TCPP0203_PORT0_FLG_IT_PRIORITY);
 800cb88:	210c      	movs	r1, #12
 800cb8a:	2017      	movs	r0, #23
 800cb8c:	f7fe fca0 	bl	800b4d0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TCPP0203_PORT0_FLG_EXTI_IRQN);
 800cb90:	2017      	movs	r0, #23
 800cb92:	f7fe fc7f 	bl	800b494 <__NVIC_EnableIRQ>
  }
}
 800cb96:	bf00      	nop
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000134 	.word	0x20000134
 800cba4:	48000800 	.word	0x48000800
 800cba8:	40021000 	.word	0x40021000
 800cbac:	00f00001 	.word	0x00f00001

0800cbb0 <PWR_TCPP0203_BUSConfigInit>:
  * @param  PortNum   Port number
  * @param  Address   I2C Address
  * @retval BSP status
  */
static int32_t PWR_TCPP0203_BUSConfigInit(uint32_t PortNum, uint16_t Address)
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b08d      	sub	sp, #52	; 0x34
 800cbb4:	af02      	add	r7, sp, #8
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	807b      	strh	r3, [r7, #2]
  int32_t                  ret = BSP_ERROR_NONE;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	627b      	str	r3, [r7, #36]	; 0x24
  TCPP0203_IO_t            TCPP0203IOCtx;
  uint8_t                  tcpp_type;

  /* Configure the TCPP0203 I2C driver */
  TCPP0203IOCtx.Address     = Address;
 800cbc0:	887b      	ldrh	r3, [r7, #2]
 800cbc2:	82bb      	strh	r3, [r7, #20]
  TCPP0203IOCtx.Init        = BSP_I2C_Init;
 800cbc4:	4b4d      	ldr	r3, [pc, #308]	; (800ccfc <PWR_TCPP0203_BUSConfigInit+0x14c>)
 800cbc6:	60fb      	str	r3, [r7, #12]
  TCPP0203IOCtx.DeInit      = BSP_I2C_DeInit;
 800cbc8:	4b4d      	ldr	r3, [pc, #308]	; (800cd00 <PWR_TCPP0203_BUSConfigInit+0x150>)
 800cbca:	613b      	str	r3, [r7, #16]
  TCPP0203IOCtx.ReadReg     = BSP_I2C_ReadReg;
 800cbcc:	4b4d      	ldr	r3, [pc, #308]	; (800cd04 <PWR_TCPP0203_BUSConfigInit+0x154>)
 800cbce:	61fb      	str	r3, [r7, #28]
  TCPP0203IOCtx.WriteReg    = BSP_I2C_WriteReg;
 800cbd0:	4b4d      	ldr	r3, [pc, #308]	; (800cd08 <PWR_TCPP0203_BUSConfigInit+0x158>)
 800cbd2:	61bb      	str	r3, [r7, #24]
  TCPP0203IOCtx.GetTick     = BSP_GetTick;
 800cbd4:	4b4d      	ldr	r3, [pc, #308]	; (800cd0c <PWR_TCPP0203_BUSConfigInit+0x15c>)
 800cbd6:	623b      	str	r3, [r7, #32]

  /* Register the component on BUS IO */
  if (TCPP0203_RegisterBusIO(&USBPD_PWR_PortCompObj[PortNum], &TCPP0203IOCtx) != TCPP0203_OK)
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4413      	add	r3, r2
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	4a4b      	ldr	r2, [pc, #300]	; (800cd10 <PWR_TCPP0203_BUSConfigInit+0x160>)
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f107 020c 	add.w	r2, r7, #12
 800cbea:	4611      	mov	r1, r2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd fc9f 	bl	800a530 <TCPP0203_RegisterBusIO>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <PWR_TCPP0203_BUSConfigInit+0x50>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800cbf8:	f06f 0307 	mvn.w	r3, #7
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24
 800cbfe:	e077      	b.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
  }
  else
  {
    /* Initialisation step */
    USBPD_PWR_PortCompDrv[PortNum] = &TCPP0203_Driver;
 800cc00:	4a44      	ldr	r2, [pc, #272]	; (800cd14 <PWR_TCPP0203_BUSConfigInit+0x164>)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4944      	ldr	r1, [pc, #272]	; (800cd18 <PWR_TCPP0203_BUSConfigInit+0x168>)
 800cc06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (USBPD_PWR_PortCompDrv[PortNum]->Init(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800cc0a:	4a42      	ldr	r2, [pc, #264]	; (800cd14 <PWR_TCPP0203_BUSConfigInit+0x164>)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc12:	6819      	ldr	r1, [r3, #0]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	4a3c      	ldr	r2, [pc, #240]	; (800cd10 <PWR_TCPP0203_BUSConfigInit+0x160>)
 800cc20:	4413      	add	r3, r2
 800cc22:	4618      	mov	r0, r3
 800cc24:	4788      	blx	r1
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <PWR_TCPP0203_BUSConfigInit+0x82>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc2c:	f06f 0304 	mvn.w	r3, #4
 800cc30:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Read the component type */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadTCPPType(&USBPD_PWR_PortCompObj[PortNum], &tcpp_type) != TCPP0203_OK)
 800cc32:	4a38      	ldr	r2, [pc, #224]	; (800cd14 <PWR_TCPP0203_BUSConfigInit+0x164>)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc3a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	4a32      	ldr	r2, [pc, #200]	; (800cd10 <PWR_TCPP0203_BUSConfigInit+0x160>)
 800cc48:	4413      	add	r3, r2
 800cc4a:	f107 020b 	add.w	r2, r7, #11
 800cc4e:	4611      	mov	r1, r2
 800cc50:	4618      	mov	r0, r3
 800cc52:	47a0      	blx	r4
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <PWR_TCPP0203_BUSConfigInit+0xb2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc5a:	f06f 0304 	mvn.w	r3, #4
 800cc5e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc60:	e046      	b.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
    }
    /* Check the component type */
    else if ((tcpp_type != TCPP0203_DEVICE_TYPE_02)
 800cc62:	7afb      	ldrb	r3, [r7, #11]
 800cc64:	2b80      	cmp	r3, #128	; 0x80
 800cc66:	d006      	beq.n	800cc76 <PWR_TCPP0203_BUSConfigInit+0xc6>
             && (tcpp_type != TCPP0203_DEVICE_TYPE_03))
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <PWR_TCPP0203_BUSConfigInit+0xc6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cc6e:	f06f 0306 	mvn.w	r3, #6
 800cc72:	627b      	str	r3, [r7, #36]	; 0x24
 800cc74:	e03c      	b.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
    }
    /* Reset TCPP0203 Reg0 register */
    else if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 800cc76:	4a27      	ldr	r2, [pc, #156]	; (800cd14 <PWR_TCPP0203_BUSConfigInit+0x164>)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc7e:	6899      	ldr	r1, [r3, #8]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	00db      	lsls	r3, r3, #3
 800cc8a:	4a21      	ldr	r2, [pc, #132]	; (800cd10 <PWR_TCPP0203_BUSConfigInit+0x160>)
 800cc8c:	4413      	add	r3, r2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	4788      	blx	r1
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <PWR_TCPP0203_BUSConfigInit+0xf0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cc98:	f06f 0304 	mvn.w	r3, #4
 800cc9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc9e:	e027      	b.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
    }
    else
    {
      /* Check the component type and update config accordingly */
      USBPD_PWR_Port_Configs[PortNum].Type = tcpp_type;
 800cca0:	7af9      	ldrb	r1, [r7, #11]
 800cca2:	4a1e      	ldr	r2, [pc, #120]	; (800cd1c <PWR_TCPP0203_BUSConfigInit+0x16c>)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]

      /* Update Port Config */
      if (TCPP0203_DEVICE_TYPE_02 == tcpp_type)
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d10e      	bne.n	800ccce <PWR_TCPP0203_BUSConfigInit+0x11e>
      {
        USBPD_PWR_Port_Configs[PortNum].Type = USBPD_PWR_HW_CONFIG_TYPE_TCPP02;
 800ccb0:	4a1a      	ldr	r2, [pc, #104]	; (800cd1c <PWR_TCPP0203_BUSConfigInit+0x16c>)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2102      	movs	r1, #2
 800ccb6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
        BSP_USBPD_PWR_TRACE(PortNum, "-- TCPP02 detected");
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	b2d9      	uxtb	r1, r3
 800ccbe:	2312      	movs	r3, #18
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	4b17      	ldr	r3, [pc, #92]	; (800cd20 <PWR_TCPP0203_BUSConfigInit+0x170>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2006      	movs	r0, #6
 800ccc8:	f002 fea4 	bl	800fa14 <USBPD_TRACE_Add>
 800cccc:	e010      	b.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
      }
      else if (TCPP0203_DEVICE_TYPE_03 == tcpp_type)
 800ccce:	7afb      	ldrb	r3, [r7, #11]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10d      	bne.n	800ccf0 <PWR_TCPP0203_BUSConfigInit+0x140>
      {
        USBPD_PWR_Port_Configs[PortNum].Type = USBPD_PWR_HW_CONFIG_TYPE_TCPP03;
 800ccd4:	4a11      	ldr	r2, [pc, #68]	; (800cd1c <PWR_TCPP0203_BUSConfigInit+0x16c>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2103      	movs	r1, #3
 800ccda:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
        BSP_USBPD_PWR_TRACE(PortNum, "-- TCPP03 detected");
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	b2d9      	uxtb	r1, r3
 800cce2:	2312      	movs	r3, #18
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <PWR_TCPP0203_BUSConfigInit+0x174>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	2006      	movs	r0, #6
 800ccec:	f002 fe92 	bl	800fa14 <USBPD_TRACE_Add>
      }

      /* Registration completed */
    }
  }
  return ret;
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	372c      	adds	r7, #44	; 0x2c
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd90      	pop	{r4, r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	0800ad95 	.word	0x0800ad95
 800cd00:	0800adf1 	.word	0x0800adf1
 800cd04:	0800ae89 	.word	0x0800ae89
 800cd08:	0800ae21 	.word	0x0800ae21
 800cd0c:	0800aeed 	.word	0x0800aeed
 800cd10:	20000b04 	.word	0x20000b04
 800cd14:	20000b2c 	.word	0x20000b2c
 800cd18:	200000c8 	.word	0x200000c8
 800cd1c:	20000130 	.word	0x20000130
 800cd20:	0801b5f4 	.word	0x0801b5f4
 800cd24:	0801b608 	.word	0x0801b608

0800cd28 <PWR_TCPP0203_EventCallback>:
  * @brief  Handle Event callback
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_EventCallback(uint32_t PortNum)
{
 800cd28:	b590      	push	{r4, r7, lr}
 800cd2a:	b08b      	sub	sp, #44	; 0x2c
 800cd2c:	af02      	add	r7, sp, #8
 800cd2e:	6078      	str	r0, [r7, #4]
  uint8_t flg_reg;

  /* In case of TCPP0203, this callback could be called when an event is detected
     on FLGn line */
  if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 1U)
 800cd30:	49b0      	ldr	r1, [pc, #704]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	440b      	add	r3, r1
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	f040 817e 	bne.w	800d042 <PWR_TCPP0203_EventCallback+0x31a>
  {
    /* Read Flags register (FLGn) */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 800cd46:	4aac      	ldr	r2, [pc, #688]	; (800cff8 <PWR_TCPP0203_EventCallback+0x2d0>)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd4e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	4aa8      	ldr	r2, [pc, #672]	; (800cffc <PWR_TCPP0203_EventCallback+0x2d4>)
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f107 021b 	add.w	r2, r7, #27
 800cd62:	4611      	mov	r1, r2
 800cd64:	4618      	mov	r0, r3
 800cd66:	47a0      	blx	r4
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 8169 	bne.w	800d042 <PWR_TCPP0203_EventCallback+0x31a>
    {
#ifdef _TRACE
      char _str[13];
      (void)sprintf(_str, "Reg2_0x%02x", flg_reg);
 800cd70:	7efb      	ldrb	r3, [r7, #27]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f107 030c 	add.w	r3, r7, #12
 800cd78:	49a1      	ldr	r1, [pc, #644]	; (800d000 <PWR_TCPP0203_EventCallback+0x2d8>)
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f00d fc58 	bl	801a630 <siprintf>
      BSP_USBPD_PWR_TRACE(PortNum, _str);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	b2d9      	uxtb	r1, r3
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	220c      	movs	r2, #12
 800cd8a:	9200      	str	r2, [sp, #0]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2006      	movs	r0, #6
 800cd90:	f002 fe40 	bl	800fa14 <USBPD_TRACE_Add>
#endif /* _TRACE */

      /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
         it is expected that a VBUS_OK condition is detected.
         In this case, if any, vBus Detection callback could be called */
      switch (USBPD_PWR_Port_Status[PortNum].PwrSavingMode)
 800cd94:	4997      	ldr	r1, [pc, #604]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	440b      	add	r3, r1
 800cda2:	3303      	adds	r3, #3
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d05b      	beq.n	800ce62 <PWR_TCPP0203_EventCallback+0x13a>
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	f300 813a 	bgt.w	800d024 <PWR_TCPP0203_EventCallback+0x2fc>
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d002      	beq.n	800cdba <PWR_TCPP0203_EventCallback+0x92>
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d02c      	beq.n	800ce12 <PWR_TCPP0203_EventCallback+0xea>
 800cdb8:	e134      	b.n	800d024 <PWR_TCPP0203_EventCallback+0x2fc>
      {
        case USBPD_PWR_MODE_HIBERNATE:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 800cdba:	7efb      	ldrb	r3, [r7, #27]
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d01c      	beq.n	800cdfe <PWR_TCPP0203_EventCallback+0xd6>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 800cdc4:	498b      	ldr	r1, [pc, #556]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	440b      	add	r3, r1
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f000 812e 	beq.w	800d038 <PWR_TCPP0203_EventCallback+0x310>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP03 behavior on CC lines */
              /* Switch to Low Power mode */
              (void)BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 800cddc:	2102      	movs	r1, #2
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff f982 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 800cde4:	4983      	ldr	r1, [pc, #524]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	4613      	mov	r3, r2
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	4413      	add	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	440b      	add	r3, r1
 800cdf2:	3308      	adds	r3, #8
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 800cdfc:	e11c      	b.n	800d038 <PWR_TCPP0203_EventCallback+0x310>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	b2d9      	uxtb	r1, r3
 800ce02:	2315      	movs	r3, #21
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4b7f      	ldr	r3, [pc, #508]	; (800d004 <PWR_TCPP0203_EventCallback+0x2dc>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	2006      	movs	r0, #6
 800ce0c:	f002 fe02 	bl	800fa14 <USBPD_TRACE_Add>
          break;
 800ce10:	e112      	b.n	800d038 <PWR_TCPP0203_EventCallback+0x310>
        }

        case USBPD_PWR_MODE_LOWPOWER:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 800ce12:	7efb      	ldrb	r3, [r7, #27]
 800ce14:	f003 0320 	and.w	r3, r3, #32
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d018      	beq.n	800ce4e <PWR_TCPP0203_EventCallback+0x126>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 800ce1c:	4975      	ldr	r1, [pc, #468]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4613      	mov	r3, r2
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	4413      	add	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	440b      	add	r3, r1
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8104 	beq.w	800d03c <PWR_TCPP0203_EventCallback+0x314>
            {
              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 800ce34:	496f      	ldr	r1, [pc, #444]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	440b      	add	r3, r1
 800ce42:	3308      	adds	r3, #8
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2100      	movs	r1, #0
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 800ce4c:	e0f6      	b.n	800d03c <PWR_TCPP0203_EventCallback+0x314>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	b2d9      	uxtb	r1, r3
 800ce52:	2315      	movs	r3, #21
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	4b6b      	ldr	r3, [pc, #428]	; (800d004 <PWR_TCPP0203_EventCallback+0x2dc>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	2006      	movs	r0, #6
 800ce5c:	f002 fdda 	bl	800fa14 <USBPD_TRACE_Add>
          break;
 800ce60:	e0ec      	b.n	800d03c <PWR_TCPP0203_EventCallback+0x314>
        }

        case USBPD_PWR_MODE_NORMAL:
        {
          uint32_t tickfault = HAL_GetTick();
 800ce62:	f000 f9d5 	bl	800d210 <HAL_GetTick>
 800ce66:	61f8      	str	r0, [r7, #28]
          uint8_t recoveryword;

          /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
          /* Check type of error raised in FLGn */
          if ((flg_reg & TCPP0203_FLAG_OCP_VCONN_SET) == TCPP0203_FLAG_OCP_VCONN_SET)
 800ce68:	7efb      	ldrb	r3, [r7, #27]
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d008      	beq.n	800ce84 <PWR_TCPP0203_EventCallback+0x15c>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VCONN detected --");
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	b2d9      	uxtb	r1, r3
 800ce76:	2318      	movs	r3, #24
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4b63      	ldr	r3, [pc, #396]	; (800d008 <PWR_TCPP0203_EventCallback+0x2e0>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2006      	movs	r0, #6
 800ce80:	f002 fdc8 	bl	800fa14 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OCP_VBUS_SET) == TCPP0203_FLAG_OCP_VBUS_SET)
 800ce84:	7efb      	ldrb	r3, [r7, #27]
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 8087 	beq.w	800cf9e <PWR_TCPP0203_EventCallback+0x276>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VBUS detected --");
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	b2d9      	uxtb	r1, r3
 800ce94:	2317      	movs	r3, #23
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	4b5c      	ldr	r3, [pc, #368]	; (800d00c <PWR_TCPP0203_EventCallback+0x2e4>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	2006      	movs	r0, #6
 800ce9e:	f002 fdb9 	bl	800fa14 <USBPD_TRACE_Add>

            /* Check if detected fault could be recovered */
            /* In case of OCP fault, allow to restart and check if a 2nd OCP fault occurs in a limited time */
            if ((tickfault > USBPD_PWR_Port_Status[PortNum].LastFaultTick)
 800cea2:	4954      	ldr	r1, [pc, #336]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	4613      	mov	r3, r2
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	440b      	add	r3, r1
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	69fa      	ldr	r2, [r7, #28]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d967      	bls.n	800cf8a <PWR_TCPP0203_EventCallback+0x262>
                && ((tickfault - USBPD_PWR_Port_Status[PortNum].LastFaultTick) > USBPD_PWR_FAULT_MIN_TIME_RECOVERY))
 800ceba:	494e      	ldr	r1, [pc, #312]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	4613      	mov	r3, r2
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	440b      	add	r3, r1
 800cec8:	3304      	adds	r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	69fa      	ldr	r2, [r7, #28]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ced4:	d959      	bls.n	800cf8a <PWR_TCPP0203_EventCallback+0x262>
            {
              /* Send Recovery word to TCPP0203 :
                 GDC and GDP open (TCPP0203_GD_PROVIDER_SWITCH_OPEN is 0) */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Send Recovery Word --");
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	b2d9      	uxtb	r1, r3
 800ceda:	2318      	movs	r3, #24
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	4b4c      	ldr	r3, [pc, #304]	; (800d010 <PWR_TCPP0203_EventCallback+0x2e8>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	2006      	movs	r0, #6
 800cee4:	f002 fd96 	bl	800fa14 <USBPD_TRACE_Add>
              recoveryword = TCPP0203_GD_CONSUMER_SWITCH_OPEN | TCPP0203_POWER_MODE_NORMAL;
 800cee8:	2318      	movs	r3, #24
 800ceea:	72fb      	strb	r3, [r7, #11]
              (void)TCPP0203_WriteCtrlRegister(&USBPD_PWR_PortCompObj[PortNum], &recoveryword);
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	4a41      	ldr	r2, [pc, #260]	; (800cffc <PWR_TCPP0203_EventCallback+0x2d4>)
 800cef8:	4413      	add	r3, r2
 800cefa:	f107 020b 	add.w	r2, r7, #11
 800cefe:	4611      	mov	r1, r2
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fd fe29 	bl	800ab58 <TCPP0203_WriteCtrlRegister>

              /* In case PWR Role is SRC, try to restore VBUS as soon as possible */
              if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 800cf06:	493b      	ldr	r1, [pc, #236]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	4413      	add	r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	3302      	adds	r3, #2
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d11f      	bne.n	800cf5c <PWR_TCPP0203_EventCallback+0x234>
              {
                (void)TCPP0203_SetPowerMode(&USBPD_PWR_PortCompObj[PortNum], TCPP0203_POWER_MODE_NORMAL);
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	4a35      	ldr	r2, [pc, #212]	; (800cffc <PWR_TCPP0203_EventCallback+0x2d4>)
 800cf28:	4413      	add	r3, r2
 800cf2a:	2110      	movs	r1, #16
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd fc37 	bl	800a7a0 <TCPP0203_SetPowerMode>
                (void)TCPP0203_SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4613      	mov	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	4a2f      	ldr	r2, [pc, #188]	; (800cffc <PWR_TCPP0203_EventCallback+0x2d4>)
 800cf3e:	4413      	add	r3, r2
 800cf40:	2104      	movs	r1, #4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fd fbc1 	bl	800a6ca <TCPP0203_SetGateDriverProvider>
                                                     TCPP0203_GD_PROVIDER_SWITCH_CLOSED);
                BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC (Restored) --");
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	b2d9      	uxtb	r1, r3
 800cf4c:	2326      	movs	r3, #38	; 0x26
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	4b30      	ldr	r3, [pc, #192]	; (800d014 <PWR_TCPP0203_EventCallback+0x2ec>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	2006      	movs	r0, #6
 800cf56:	f002 fd5d 	bl	800fa14 <USBPD_TRACE_Add>
 800cf5a:	e016      	b.n	800cf8a <PWR_TCPP0203_EventCallback+0x262>
              }
              else
              {
                if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 800cf5c:	4925      	ldr	r1, [pc, #148]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	4613      	mov	r3, r2
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	4413      	add	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	440b      	add	r3, r1
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00b      	beq.n	800cf8a <PWR_TCPP0203_EventCallback+0x262>
                {
                  /* Notify Error thanks to callback */
                  USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_NOT_CONNECTED);
 800cf72:	4920      	ldr	r1, [pc, #128]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4613      	mov	r3, r2
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	4413      	add	r3, r2
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	440b      	add	r3, r1
 800cf80:	3308      	adds	r3, #8
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2101      	movs	r1, #1
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
                }
              }
            }
            USBPD_PWR_Port_Status[PortNum].LastFaultTick = tickfault;
 800cf8a:	491a      	ldr	r1, [pc, #104]	; (800cff4 <PWR_TCPP0203_EventCallback+0x2cc>)
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	4413      	add	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	440b      	add	r3, r1
 800cf98:	3304      	adds	r3, #4
 800cf9a:	69fa      	ldr	r2, [r7, #28]
 800cf9c:	601a      	str	r2, [r3, #0]
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_VBUS_SET) == TCPP0203_FLAG_OVP_VBUS_SET)
 800cf9e:	7efb      	ldrb	r3, [r7, #27]
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d008      	beq.n	800cfba <PWR_TCPP0203_EventCallback+0x292>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP VBUS detected --");
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	b2d9      	uxtb	r1, r3
 800cfac:	2317      	movs	r3, #23
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	4b19      	ldr	r3, [pc, #100]	; (800d018 <PWR_TCPP0203_EventCallback+0x2f0>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2006      	movs	r0, #6
 800cfb6:	f002 fd2d 	bl	800fa14 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OTP_SET) == TCPP0203_FLAG_OTP_SET)
 800cfba:	7efb      	ldrb	r3, [r7, #27]
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d008      	beq.n	800cfd6 <PWR_TCPP0203_EventCallback+0x2ae>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- Over Temp detected --");
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	b2d9      	uxtb	r1, r3
 800cfc8:	2318      	movs	r3, #24
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	4b13      	ldr	r3, [pc, #76]	; (800d01c <PWR_TCPP0203_EventCallback+0x2f4>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2006      	movs	r0, #6
 800cfd2:	f002 fd1f 	bl	800fa14 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_CC_SET) == TCPP0203_FLAG_OVP_CC_SET)
 800cfd6:	7efb      	ldrb	r3, [r7, #27]
 800cfd8:	f003 0308 	and.w	r3, r3, #8
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d02f      	beq.n	800d040 <PWR_TCPP0203_EventCallback+0x318>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP CC detected --");
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	b2d9      	uxtb	r1, r3
 800cfe4:	2315      	movs	r3, #21
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	4b0d      	ldr	r3, [pc, #52]	; (800d020 <PWR_TCPP0203_EventCallback+0x2f8>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	2006      	movs	r0, #6
 800cfee:	f002 fd11 	bl	800fa14 <USBPD_TRACE_Add>
          }
          break;
 800cff2:	e025      	b.n	800d040 <PWR_TCPP0203_EventCallback+0x318>
 800cff4:	20000134 	.word	0x20000134
 800cff8:	20000b2c 	.word	0x20000b2c
 800cffc:	20000b04 	.word	0x20000b04
 800d000:	0801b61c 	.word	0x0801b61c
 800d004:	0801b628 	.word	0x0801b628
 800d008:	0801b640 	.word	0x0801b640
 800d00c:	0801b65c 	.word	0x0801b65c
 800d010:	0801b674 	.word	0x0801b674
 800d014:	0801b690 	.word	0x0801b690
 800d018:	0801b6b8 	.word	0x0801b6b8
 800d01c:	0801b6d0 	.word	0x0801b6d0
 800d020:	0801b6ec 	.word	0x0801b6ec
        }

        default:
        {
          /* Unexpected port state */
          BSP_USBPD_PWR_TRACE(PortNum, "-- Unexpected State for FLGn event --");
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	b2d9      	uxtb	r1, r3
 800d028:	2325      	movs	r3, #37	; 0x25
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	4b07      	ldr	r3, [pc, #28]	; (800d04c <PWR_TCPP0203_EventCallback+0x324>)
 800d02e:	2200      	movs	r2, #0
 800d030:	2006      	movs	r0, #6
 800d032:	f002 fcef 	bl	800fa14 <USBPD_TRACE_Add>
          break;
 800d036:	e004      	b.n	800d042 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 800d038:	bf00      	nop
 800d03a:	e002      	b.n	800d042 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 800d03c:	bf00      	nop
 800d03e:	e000      	b.n	800d042 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 800d040:	bf00      	nop
        }
      }
    }
  }
}
 800d042:	bf00      	nop
 800d044:	3724      	adds	r7, #36	; 0x24
 800d046:	46bd      	mov	sp, r7
 800d048:	bd90      	pop	{r4, r7, pc}
 800d04a:	bf00      	nop
 800d04c:	0801b704 	.word	0x0801b704

0800d050 <PWR_TCPP0203_ConvertADCDataToVoltage>:
  * @param  Ra       value of Ra resistance
  * @param  Rb       value of Rb resistance
  * @retval analog voltage (unit: mV)
  */
static uint32_t PWR_TCPP0203_ConvertADCDataToVoltage(uint32_t ADCData, uint32_t Ra, uint32_t Rb)
{
 800d050:	b480      	push	{r7}
 800d052:	b087      	sub	sp, #28
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
  uint32_t voltage;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if (Rb == 0u)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <PWR_TCPP0203_ConvertADCDataToVoltage+0x18>
  {
    voltage = 0u;
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	e016      	b.n	800d096 <PWR_TCPP0203_ConvertADCDataToVoltage+0x46>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d06e:	fb03 f202 	mul.w	r2, r3, r2
 800d072:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <PWR_TCPP0203_ConvertADCDataToVoltage+0x54>)
 800d074:	fba3 1302 	umull	r1, r3, r3, r2
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	0852      	lsrs	r2, r2, #1
 800d07c:	4413      	add	r3, r2
 800d07e:	0adb      	lsrs	r3, r3, #11
 800d080:	613b      	str	r3, [r7, #16]
    voltage = vadc * (Ra + Rb) / Rb;
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	fb03 f202 	mul.w	r2, r3, r2
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	fbb2 f3f3 	udiv	r3, r2, r3
 800d094:	617b      	str	r3, [r7, #20]
  }

  return voltage;
 800d096:	697b      	ldr	r3, [r7, #20]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	371c      	adds	r7, #28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	00100101 	.word	0x00100101

0800d0a8 <PWR_TCPP0203_ConvertADCDataToCurrent>:
  * @param  Ga       value of TCPP0X Iana gain in V/V
  * @param  Rs       value of shunt resistor in milliohm
  * @retval VBUS analog current (unit: mA)
  */
static int32_t PWR_TCPP0203_ConvertADCDataToCurrent(uint32_t ADCData, uint32_t Ga, uint32_t Rs)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
  int32_t current;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if ((Ga == 0u) || (Rs == 0u))
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <PWR_TCPP0203_ConvertADCDataToCurrent+0x18>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <PWR_TCPP0203_ConvertADCDataToCurrent+0x1e>
  {
    current = 0u;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	e018      	b.n	800d0f8 <PWR_TCPP0203_ConvertADCDataToCurrent+0x50>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d0cc:	fb03 f202 	mul.w	r2, r3, r2
 800d0d0:	4b0d      	ldr	r3, [pc, #52]	; (800d108 <PWR_TCPP0203_ConvertADCDataToCurrent+0x60>)
 800d0d2:	fba3 1302 	umull	r1, r3, r3, r2
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	0852      	lsrs	r2, r2, #1
 800d0da:	4413      	add	r3, r2
 800d0dc:	0adb      	lsrs	r3, r3, #11
 800d0de:	613b      	str	r3, [r7, #16]
    current = (int32_t)((vadc * 1000u) / (Ga * Rs));
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0e6:	fb03 f202 	mul.w	r2, r3, r2
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	fb01 f303 	mul.w	r3, r1, r3
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	617b      	str	r3, [r7, #20]
  }

  return current;
 800d0f8:	697b      	ldr	r3, [r7, #20]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	371c      	adds	r7, #28
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	00100101 	.word	0x00100101

0800d10c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800d10c:	b480      	push	{r7}
 800d10e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d110:	4b08      	ldr	r3, [pc, #32]	; (800d134 <SystemInit+0x28>)
 800d112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d116:	4a07      	ldr	r2, [pc, #28]	; (800d134 <SystemInit+0x28>)
 800d118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d11c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d120:	4b04      	ldr	r3, [pc, #16]	; (800d134 <SystemInit+0x28>)
 800d122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d126:	609a      	str	r2, [r3, #8]
#endif
}
 800d128:	bf00      	nop
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	e000ed00 	.word	0xe000ed00

0800d138 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d142:	2003      	movs	r0, #3
 800d144:	f000 f95a 	bl	800d3fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d148:	200f      	movs	r0, #15
 800d14a:	f000 f815 	bl	800d178 <HAL_InitTick>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	71fb      	strb	r3, [r7, #7]
 800d158:	e001      	b.n	800d15e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d15a:	f000 f805 	bl	800d168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d15e:	79fb      	ldrb	r3, [r7, #7]

}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800d168:	b480      	push	{r7}
 800d16a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800d16c:	bf00      	nop
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
	...

0800d178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800d184:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <HAL_InitTick+0x68>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d022      	beq.n	800d1d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800d18c:	4b15      	ldr	r3, [pc, #84]	; (800d1e4 <HAL_InitTick+0x6c>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <HAL_InitTick+0x68>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d198:	fbb1 f3f3 	udiv	r3, r1, r3
 800d19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f954 	bl	800d44e <HAL_SYSTICK_Config>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10f      	bne.n	800d1cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b0f      	cmp	r3, #15
 800d1b0:	d809      	bhi.n	800d1c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	6879      	ldr	r1, [r7, #4]
 800d1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ba:	f000 f92a 	bl	800d412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d1be:	4a0a      	ldr	r2, [pc, #40]	; (800d1e8 <HAL_InitTick+0x70>)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	e007      	b.n	800d1d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	73fb      	strb	r3, [r7, #15]
 800d1ca:	e004      	b.n	800d1d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	73fb      	strb	r3, [r7, #15]
 800d1d0:	e001      	b.n	800d1d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20000148 	.word	0x20000148
 800d1e4:	20000140 	.word	0x20000140
 800d1e8:	20000144 	.word	0x20000144

0800d1ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d1f0:	4b05      	ldr	r3, [pc, #20]	; (800d208 <HAL_IncTick+0x1c>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <HAL_IncTick+0x20>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	4a03      	ldr	r2, [pc, #12]	; (800d208 <HAL_IncTick+0x1c>)
 800d1fc:	6013      	str	r3, [r2, #0]
}
 800d1fe:	bf00      	nop
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	20000b34 	.word	0x20000b34
 800d20c:	20000148 	.word	0x20000148

0800d210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d210:	b480      	push	{r7}
 800d212:	af00      	add	r7, sp, #0
  return uwTick;
 800d214:	4b03      	ldr	r3, [pc, #12]	; (800d224 <HAL_GetTick+0x14>)
 800d216:	681b      	ldr	r3, [r3, #0]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	20000b34 	.word	0x20000b34

0800d228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d230:	f7ff ffee 	bl	800d210 <HAL_GetTick>
 800d234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d240:	d004      	beq.n	800d24c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800d242:	4b09      	ldr	r3, [pc, #36]	; (800d268 <HAL_Delay+0x40>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4413      	add	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d24c:	bf00      	nop
 800d24e:	f7ff ffdf 	bl	800d210 <HAL_GetTick>
 800d252:	4602      	mov	r2, r0
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d8f7      	bhi.n	800d24e <HAL_Delay+0x26>
  {
  }
}
 800d25e:	bf00      	nop
 800d260:	bf00      	nop
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20000148 	.word	0x20000148

0800d26c <__NVIC_SetPriorityGrouping>:
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f003 0307 	and.w	r3, r3, #7
 800d27a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d27c:	4b0c      	ldr	r3, [pc, #48]	; (800d2b0 <__NVIC_SetPriorityGrouping+0x44>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d288:	4013      	ands	r3, r2
 800d28a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d29c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d29e:	4a04      	ldr	r2, [pc, #16]	; (800d2b0 <__NVIC_SetPriorityGrouping+0x44>)
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	60d3      	str	r3, [r2, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	e000ed00 	.word	0xe000ed00

0800d2b4 <__NVIC_GetPriorityGrouping>:
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d2b8:	4b04      	ldr	r3, [pc, #16]	; (800d2cc <__NVIC_GetPriorityGrouping+0x18>)
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	0a1b      	lsrs	r3, r3, #8
 800d2be:	f003 0307 	and.w	r3, r3, #7
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	e000ed00 	.word	0xe000ed00

0800d2d0 <__NVIC_SetPriority>:
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	6039      	str	r1, [r7, #0]
 800d2da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d2dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	db0a      	blt.n	800d2fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	490c      	ldr	r1, [pc, #48]	; (800d31c <__NVIC_SetPriority+0x4c>)
 800d2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ee:	0112      	lsls	r2, r2, #4
 800d2f0:	b2d2      	uxtb	r2, r2
 800d2f2:	440b      	add	r3, r1
 800d2f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d2f8:	e00a      	b.n	800d310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	4908      	ldr	r1, [pc, #32]	; (800d320 <__NVIC_SetPriority+0x50>)
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	f003 030f 	and.w	r3, r3, #15
 800d306:	3b04      	subs	r3, #4
 800d308:	0112      	lsls	r2, r2, #4
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	440b      	add	r3, r1
 800d30e:	761a      	strb	r2, [r3, #24]
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	e000e100 	.word	0xe000e100
 800d320:	e000ed00 	.word	0xe000ed00

0800d324 <NVIC_EncodePriority>:
{
 800d324:	b480      	push	{r7}
 800d326:	b089      	sub	sp, #36	; 0x24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f003 0307 	and.w	r3, r3, #7
 800d336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	f1c3 0307 	rsb	r3, r3, #7
 800d33e:	2b04      	cmp	r3, #4
 800d340:	bf28      	it	cs
 800d342:	2304      	movcs	r3, #4
 800d344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	3304      	adds	r3, #4
 800d34a:	2b06      	cmp	r3, #6
 800d34c:	d902      	bls.n	800d354 <NVIC_EncodePriority+0x30>
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	3b03      	subs	r3, #3
 800d352:	e000      	b.n	800d356 <NVIC_EncodePriority+0x32>
 800d354:	2300      	movs	r3, #0
 800d356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d358:	f04f 32ff 	mov.w	r2, #4294967295
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	fa02 f303 	lsl.w	r3, r2, r3
 800d362:	43da      	mvns	r2, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	401a      	ands	r2, r3
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d36c:	f04f 31ff 	mov.w	r1, #4294967295
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	fa01 f303 	lsl.w	r3, r1, r3
 800d376:	43d9      	mvns	r1, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d37c:	4313      	orrs	r3, r2
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3724      	adds	r7, #36	; 0x24
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
	...

0800d38c <__NVIC_SystemReset>:
{
 800d38c:	b480      	push	{r7}
 800d38e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d390:	f3bf 8f4f 	dsb	sy
}
 800d394:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d396:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <__NVIC_SystemReset+0x24>)
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d39e:	4904      	ldr	r1, [pc, #16]	; (800d3b0 <__NVIC_SystemReset+0x24>)
 800d3a0:	4b04      	ldr	r3, [pc, #16]	; (800d3b4 <__NVIC_SystemReset+0x28>)
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d3a6:	f3bf 8f4f 	dsb	sy
}
 800d3aa:	bf00      	nop
    __NOP();
 800d3ac:	bf00      	nop
 800d3ae:	e7fd      	b.n	800d3ac <__NVIC_SystemReset+0x20>
 800d3b0:	e000ed00 	.word	0xe000ed00
 800d3b4:	05fa0004 	.word	0x05fa0004

0800d3b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d3c8:	d301      	bcc.n	800d3ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e00f      	b.n	800d3ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d3ce:	4a0a      	ldr	r2, [pc, #40]	; (800d3f8 <SysTick_Config+0x40>)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d3d6:	210f      	movs	r1, #15
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	f7ff ff78 	bl	800d2d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <SysTick_Config+0x40>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d3e6:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <SysTick_Config+0x40>)
 800d3e8:	2207      	movs	r2, #7
 800d3ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	e000e010 	.word	0xe000e010

0800d3fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff ff31 	bl	800d26c <__NVIC_SetPriorityGrouping>
}
 800d40a:	bf00      	nop
 800d40c:	3708      	adds	r7, #8
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b086      	sub	sp, #24
 800d416:	af00      	add	r7, sp, #0
 800d418:	4603      	mov	r3, r0
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	607a      	str	r2, [r7, #4]
 800d41e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d420:	f7ff ff48 	bl	800d2b4 <__NVIC_GetPriorityGrouping>
 800d424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	6978      	ldr	r0, [r7, #20]
 800d42c:	f7ff ff7a 	bl	800d324 <NVIC_EncodePriority>
 800d430:	4602      	mov	r2, r0
 800d432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff ff49 	bl	800d2d0 <__NVIC_SetPriority>
}
 800d43e:	bf00      	nop
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d44a:	f7ff ff9f 	bl	800d38c <__NVIC_SystemReset>

0800d44e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff ffae 	bl	800d3b8 <SysTick_Config>
 800d45c:	4603      	mov	r3, r0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
	...

0800d468 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <HAL_FLASH_Program+0xa4>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d101      	bne.n	800d486 <HAL_FLASH_Program+0x1e>
 800d482:	2302      	movs	r3, #2
 800d484:	e03e      	b.n	800d504 <HAL_FLASH_Program+0x9c>
 800d486:	4b21      	ldr	r3, [pc, #132]	; (800d50c <HAL_FLASH_Program+0xa4>)
 800d488:	2201      	movs	r2, #1
 800d48a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d48c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d490:	f000 f87c 	bl	800d58c <FLASH_WaitForLastOperation>
 800d494:	4603      	mov	r3, r0
 800d496:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800d498:	7dfb      	ldrb	r3, [r7, #23]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d12e      	bne.n	800d4fc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d49e:	4b1b      	ldr	r3, [pc, #108]	; (800d50c <HAL_FLASH_Program+0xa4>)
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d107      	bne.n	800d4ba <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d4aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ae:	68b8      	ldr	r0, [r7, #8]
 800d4b0:	f000 f8c0 	bl	800d634 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	613b      	str	r3, [r7, #16]
 800d4b8:	e010      	b.n	800d4dc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d002      	beq.n	800d4c6 <HAL_FLASH_Program+0x5e>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d10a      	bne.n	800d4dc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	68b8      	ldr	r0, [r7, #8]
 800d4cc:	f000 f8d8 	bl	800d680 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d102      	bne.n	800d4dc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d4d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d4da:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d4dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d4e0:	f000 f854 	bl	800d58c <FLASH_WaitForLastOperation>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d006      	beq.n	800d4fc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d4ee:	4b08      	ldr	r3, [pc, #32]	; (800d510 <HAL_FLASH_Program+0xa8>)
 800d4f0:	695a      	ldr	r2, [r3, #20]
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	43db      	mvns	r3, r3
 800d4f6:	4906      	ldr	r1, [pc, #24]	; (800d510 <HAL_FLASH_Program+0xa8>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d4fc:	4b03      	ldr	r3, [pc, #12]	; (800d50c <HAL_FLASH_Program+0xa4>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800d502:	7dfb      	ldrb	r3, [r7, #23]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	2000014c 	.word	0x2000014c
 800d510:	40022000 	.word	0x40022000

0800d514 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d51e:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <HAL_FLASH_Unlock+0x38>)
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	2b00      	cmp	r3, #0
 800d524:	da0b      	bge.n	800d53e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <HAL_FLASH_Unlock+0x38>)
 800d528:	4a09      	ldr	r2, [pc, #36]	; (800d550 <HAL_FLASH_Unlock+0x3c>)
 800d52a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d52c:	4b07      	ldr	r3, [pc, #28]	; (800d54c <HAL_FLASH_Unlock+0x38>)
 800d52e:	4a09      	ldr	r2, [pc, #36]	; (800d554 <HAL_FLASH_Unlock+0x40>)
 800d530:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d532:	4b06      	ldr	r3, [pc, #24]	; (800d54c <HAL_FLASH_Unlock+0x38>)
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	da01      	bge.n	800d53e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d53e:	79fb      	ldrb	r3, [r7, #7]
}
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	40022000 	.word	0x40022000
 800d550:	45670123 	.word	0x45670123
 800d554:	cdef89ab 	.word	0xcdef89ab

0800d558 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <HAL_FLASH_Lock+0x30>)
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	4a08      	ldr	r2, [pc, #32]	; (800d588 <HAL_FLASH_Lock+0x30>)
 800d568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d56c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d56e:	4b06      	ldr	r3, [pc, #24]	; (800d588 <HAL_FLASH_Lock+0x30>)
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	da01      	bge.n	800d57a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d57a:	79fb      	ldrb	r3, [r7, #7]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	40022000 	.word	0x40022000

0800d58c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d594:	f7ff fe3c 	bl	800d210 <HAL_GetTick>
 800d598:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d59a:	e009      	b.n	800d5b0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800d59c:	f7ff fe38 	bl	800d210 <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d201      	bcs.n	800d5b0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e038      	b.n	800d622 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d5b0:	4b1e      	ldr	r3, [pc, #120]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5bc:	d0ee      	beq.n	800d59c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d5be:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d5c0:	691a      	ldr	r2, [r3, #16]
 800d5c2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d01e      	beq.n	800d60e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800d5d0:	4b17      	ldr	r3, [pc, #92]	; (800d630 <FLASH_WaitForLastOperation+0xa4>)
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	4a15      	ldr	r2, [pc, #84]	; (800d630 <FLASH_WaitForLastOperation+0xa4>)
 800d5da:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d007      	beq.n	800d5f6 <FLASH_WaitForLastOperation+0x6a>
 800d5e6:	4b11      	ldr	r3, [pc, #68]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d5e8:	699a      	ldr	r2, [r3, #24]
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d5f0:	490e      	ldr	r1, [pc, #56]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	618b      	str	r3, [r1, #24]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <FLASH_WaitForLastOperation+0x7e>
 800d600:	4a0a      	ldr	r2, [pc, #40]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d608:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e009      	b.n	800d622 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d60e:	4b07      	ldr	r3, [pc, #28]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b01      	cmp	r3, #1
 800d618:	d102      	bne.n	800d620 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d61a:	4b04      	ldr	r3, [pc, #16]	; (800d62c <FLASH_WaitForLastOperation+0xa0>)
 800d61c:	2201      	movs	r2, #1
 800d61e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	40022000 	.word	0x40022000
 800d630:	2000014c 	.word	0x2000014c

0800d634 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d640:	4b0e      	ldr	r3, [pc, #56]	; (800d67c <FLASH_Program_DoubleWord+0x48>)
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	4a0d      	ldr	r2, [pc, #52]	; (800d67c <FLASH_Program_DoubleWord+0x48>)
 800d646:	f043 0301 	orr.w	r3, r3, #1
 800d64a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d652:	f3bf 8f6f 	isb	sy
}
 800d656:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800d658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d65c:	f04f 0200 	mov.w	r2, #0
 800d660:	f04f 0300 	mov.w	r3, #0
 800d664:	000a      	movs	r2, r1
 800d666:	2300      	movs	r3, #0
 800d668:	68f9      	ldr	r1, [r7, #12]
 800d66a:	3104      	adds	r1, #4
 800d66c:	4613      	mov	r3, r2
 800d66e:	600b      	str	r3, [r1, #0]
}
 800d670:	bf00      	nop
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	40022000 	.word	0x40022000

0800d680 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d680:	b480      	push	{r7}
 800d682:	b089      	sub	sp, #36	; 0x24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d68a:	2340      	movs	r3, #64	; 0x40
 800d68c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <FLASH_Program_Fast+0x68>)
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	4a13      	ldr	r2, [pc, #76]	; (800d6e8 <FLASH_Program_Fast+0x68>)
 800d69c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d6a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6a8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6ac:	b672      	cpsid	i
}
 800d6ae:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	617b      	str	r3, [r7, #20]
    row_index--;
 800d6c4:	7ffb      	ldrb	r3, [r7, #31]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800d6ca:	7ffb      	ldrb	r3, [r7, #31]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1ef      	bne.n	800d6b0 <FLASH_Program_Fast+0x30>
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f383 8810 	msr	PRIMASK, r3
}
 800d6da:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800d6dc:	bf00      	nop
 800d6de:	3724      	adds	r7, #36	; 0x24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	40022000 	.word	0x40022000

0800d6ec <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d6f6:	4b49      	ldr	r3, [pc, #292]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d101      	bne.n	800d702 <HAL_FLASHEx_Erase+0x16>
 800d6fe:	2302      	movs	r3, #2
 800d700:	e087      	b.n	800d812 <HAL_FLASHEx_Erase+0x126>
 800d702:	4b46      	ldr	r3, [pc, #280]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d704:	2201      	movs	r2, #1
 800d706:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d70c:	f7ff ff3e 	bl	800d58c <FLASH_WaitForLastOperation>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d177      	bne.n	800d80a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d71a:	4b40      	ldr	r3, [pc, #256]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d720:	4b3f      	ldr	r3, [pc, #252]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d013      	beq.n	800d754 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d72c:	4b3c      	ldr	r3, [pc, #240]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d738:	4b39      	ldr	r3, [pc, #228]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a38      	ldr	r2, [pc, #224]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d73e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d742:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d744:	4b35      	ldr	r3, [pc, #212]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d746:	2203      	movs	r2, #3
 800d748:	771a      	strb	r2, [r3, #28]
 800d74a:	e016      	b.n	800d77a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d74c:	4b33      	ldr	r3, [pc, #204]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d74e:	2201      	movs	r2, #1
 800d750:	771a      	strb	r2, [r3, #28]
 800d752:	e012      	b.n	800d77a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d754:	4b32      	ldr	r3, [pc, #200]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d009      	beq.n	800d774 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d760:	4b2f      	ldr	r3, [pc, #188]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a2e      	ldr	r2, [pc, #184]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d76a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d76c:	4b2b      	ldr	r3, [pc, #172]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d76e:	2202      	movs	r2, #2
 800d770:	771a      	strb	r2, [r3, #28]
 800d772:	e002      	b.n	800d77a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d774:	4b29      	ldr	r3, [pc, #164]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d776:	2200      	movs	r2, #0
 800d778:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d113      	bne.n	800d7aa <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 f84c 	bl	800d824 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d78c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d790:	f7ff fefc 	bl	800d58c <FLASH_WaitForLastOperation>
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d798:	4b21      	ldr	r3, [pc, #132]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	4a20      	ldr	r2, [pc, #128]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d79e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7a2:	f023 0304 	bic.w	r3, r3, #4
 800d7a6:	6153      	str	r3, [r2, #20]
 800d7a8:	e02d      	b.n	800d806 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	60bb      	str	r3, [r7, #8]
 800d7b8:	e01d      	b.n	800d7f6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	68b8      	ldr	r0, [r7, #8]
 800d7c2:	f000 f867 	bl	800d894 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d7ca:	f7ff fedf 	bl	800d58c <FLASH_WaitForLastOperation>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d7d2:	4b13      	ldr	r3, [pc, #76]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	4a12      	ldr	r2, [pc, #72]	; (800d820 <HAL_FLASHEx_Erase+0x134>)
 800d7d8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800d7dc:	f023 0302 	bic.w	r3, r3, #2
 800d7e0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	601a      	str	r2, [r3, #0]
          break;
 800d7ee:	e00a      	b.n	800d806 <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	60bb      	str	r3, [r7, #8]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	689a      	ldr	r2, [r3, #8]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	4413      	add	r3, r2
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	429a      	cmp	r2, r3
 800d804:	d3d9      	bcc.n	800d7ba <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d806:	f000 f889 	bl	800d91c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d80a:	4b04      	ldr	r3, [pc, #16]	; (800d81c <HAL_FLASHEx_Erase+0x130>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]

  return status;
 800d810:	7bfb      	ldrb	r3, [r7, #15]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	2000014c 	.word	0x2000014c
 800d820:	40022000 	.word	0x40022000

0800d824 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800d82c:	4b18      	ldr	r3, [pc, #96]	; (800d890 <FLASH_MassErase+0x6c>)
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d016      	beq.n	800d866 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d842:	4b13      	ldr	r3, [pc, #76]	; (800d890 <FLASH_MassErase+0x6c>)
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	4a12      	ldr	r2, [pc, #72]	; (800d890 <FLASH_MassErase+0x6c>)
 800d848:	f043 0304 	orr.w	r3, r3, #4
 800d84c:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f003 0302 	and.w	r3, r3, #2
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d858:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <FLASH_MassErase+0x6c>)
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	4a0c      	ldr	r2, [pc, #48]	; (800d890 <FLASH_MassErase+0x6c>)
 800d85e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d862:	6153      	str	r3, [r2, #20]
 800d864:	e007      	b.n	800d876 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d866:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <FLASH_MassErase+0x6c>)
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	4a09      	ldr	r2, [pc, #36]	; (800d890 <FLASH_MassErase+0x6c>)
 800d86c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d870:	f043 0304 	orr.w	r3, r3, #4
 800d874:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d876:	4b06      	ldr	r3, [pc, #24]	; (800d890 <FLASH_MassErase+0x6c>)
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	4a05      	ldr	r2, [pc, #20]	; (800d890 <FLASH_MassErase+0x6c>)
 800d87c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d880:	6153      	str	r3, [r2, #20]
}
 800d882:	bf00      	nop
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	40022000 	.word	0x40022000

0800d894 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800d89e:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <FLASH_PageErase+0x84>)
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d106      	bne.n	800d8b8 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d8aa:	4b1b      	ldr	r3, [pc, #108]	; (800d918 <FLASH_PageErase+0x84>)
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4a1a      	ldr	r2, [pc, #104]	; (800d918 <FLASH_PageErase+0x84>)
 800d8b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8b4:	6153      	str	r3, [r2, #20]
 800d8b6:	e011      	b.n	800d8dc <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	f003 0301 	and.w	r3, r3, #1
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d006      	beq.n	800d8d0 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <FLASH_PageErase+0x84>)
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	4a14      	ldr	r2, [pc, #80]	; (800d918 <FLASH_PageErase+0x84>)
 800d8c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8cc:	6153      	str	r3, [r2, #20]
 800d8ce:	e005      	b.n	800d8dc <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d8d0:	4b11      	ldr	r3, [pc, #68]	; (800d918 <FLASH_PageErase+0x84>)
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	4a10      	ldr	r2, [pc, #64]	; (800d918 <FLASH_PageErase+0x84>)
 800d8d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d8da:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <FLASH_PageErase+0x84>)
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800d8ec:	490a      	ldr	r1, [pc, #40]	; (800d918 <FLASH_PageErase+0x84>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d8f2:	4b09      	ldr	r3, [pc, #36]	; (800d918 <FLASH_PageErase+0x84>)
 800d8f4:	695b      	ldr	r3, [r3, #20]
 800d8f6:	4a08      	ldr	r2, [pc, #32]	; (800d918 <FLASH_PageErase+0x84>)
 800d8f8:	f043 0302 	orr.w	r3, r3, #2
 800d8fc:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d8fe:	4b06      	ldr	r3, [pc, #24]	; (800d918 <FLASH_PageErase+0x84>)
 800d900:	695b      	ldr	r3, [r3, #20]
 800d902:	4a05      	ldr	r2, [pc, #20]	; (800d918 <FLASH_PageErase+0x84>)
 800d904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d908:	6153      	str	r3, [r2, #20]
}
 800d90a:	bf00      	nop
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	40022000 	.word	0x40022000

0800d91c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d922:	4b21      	ldr	r3, [pc, #132]	; (800d9a8 <FLASH_FlushCaches+0x8c>)
 800d924:	7f1b      	ldrb	r3, [r3, #28]
 800d926:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d002      	beq.n	800d934 <FLASH_FlushCaches+0x18>
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	2b03      	cmp	r3, #3
 800d932:	d117      	bne.n	800d964 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d934:	4b1d      	ldr	r3, [pc, #116]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a1c      	ldr	r2, [pc, #112]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d93a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d93e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d940:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a19      	ldr	r2, [pc, #100]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a16      	ldr	r2, [pc, #88]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d956:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d958:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a13      	ldr	r2, [pc, #76]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d95e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d962:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	2b02      	cmp	r3, #2
 800d968:	d002      	beq.n	800d970 <FLASH_FlushCaches+0x54>
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	2b03      	cmp	r3, #3
 800d96e:	d111      	bne.n	800d994 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d970:	4b0e      	ldr	r3, [pc, #56]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a0d      	ldr	r2, [pc, #52]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d976:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a0a      	ldr	r2, [pc, #40]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d986:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d988:	4b08      	ldr	r3, [pc, #32]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a07      	ldr	r2, [pc, #28]	; (800d9ac <FLASH_FlushCaches+0x90>)
 800d98e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d992:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <FLASH_FlushCaches+0x8c>)
 800d996:	2200      	movs	r2, #0
 800d998:	771a      	strb	r2, [r3, #28]
}
 800d99a:	bf00      	nop
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	2000014c 	.word	0x2000014c
 800d9ac:	40022000 	.word	0x40022000

0800d9b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d9be:	e15a      	b.n	800dc76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 814c 	beq.w	800dc70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	f003 0303 	and.w	r3, r3, #3
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d005      	beq.n	800d9f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d130      	bne.n	800da52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800da00:	43db      	mvns	r3, r3
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	4013      	ands	r3, r2
 800da06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	68da      	ldr	r2, [r3, #12]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	fa02 f303 	lsl.w	r3, r2, r3
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	4313      	orrs	r3, r2
 800da18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800da26:	2201      	movs	r2, #1
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	fa02 f303 	lsl.w	r3, r2, r3
 800da2e:	43db      	mvns	r3, r3
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	4013      	ands	r3, r2
 800da34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	091b      	lsrs	r3, r3, #4
 800da3c:	f003 0201 	and.w	r2, r3, #1
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	fa02 f303 	lsl.w	r3, r2, r3
 800da46:	693a      	ldr	r2, [r7, #16]
 800da48:	4313      	orrs	r3, r2
 800da4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	693a      	ldr	r2, [r7, #16]
 800da50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	f003 0303 	and.w	r3, r3, #3
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d017      	beq.n	800da8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	2203      	movs	r2, #3
 800da6a:	fa02 f303 	lsl.w	r3, r2, r3
 800da6e:	43db      	mvns	r3, r3
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	4013      	ands	r3, r2
 800da74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	fa02 f303 	lsl.w	r3, r2, r3
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	4313      	orrs	r3, r2
 800da86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f003 0303 	and.w	r3, r3, #3
 800da96:	2b02      	cmp	r3, #2
 800da98:	d123      	bne.n	800dae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	08da      	lsrs	r2, r3, #3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3208      	adds	r2, #8
 800daa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	220f      	movs	r2, #15
 800dab2:	fa02 f303 	lsl.w	r3, r2, r3
 800dab6:	43db      	mvns	r3, r3
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	4013      	ands	r3, r2
 800dabc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	691a      	ldr	r2, [r3, #16]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	f003 0307 	and.w	r3, r3, #7
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	fa02 f303 	lsl.w	r3, r2, r3
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	08da      	lsrs	r2, r3, #3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	3208      	adds	r2, #8
 800dadc:	6939      	ldr	r1, [r7, #16]
 800dade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	2203      	movs	r2, #3
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	43db      	mvns	r3, r3
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	4013      	ands	r3, r2
 800daf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	f003 0203 	and.w	r2, r3, #3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	005b      	lsls	r3, r3, #1
 800db06:	fa02 f303 	lsl.w	r3, r2, r3
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	693a      	ldr	r2, [r7, #16]
 800db14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 80a6 	beq.w	800dc70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db24:	4b5b      	ldr	r3, [pc, #364]	; (800dc94 <HAL_GPIO_Init+0x2e4>)
 800db26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db28:	4a5a      	ldr	r2, [pc, #360]	; (800dc94 <HAL_GPIO_Init+0x2e4>)
 800db2a:	f043 0301 	orr.w	r3, r3, #1
 800db2e:	6613      	str	r3, [r2, #96]	; 0x60
 800db30:	4b58      	ldr	r3, [pc, #352]	; (800dc94 <HAL_GPIO_Init+0x2e4>)
 800db32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	60bb      	str	r3, [r7, #8]
 800db3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800db3c:	4a56      	ldr	r2, [pc, #344]	; (800dc98 <HAL_GPIO_Init+0x2e8>)
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	089b      	lsrs	r3, r3, #2
 800db42:	3302      	adds	r3, #2
 800db44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f003 0303 	and.w	r3, r3, #3
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	220f      	movs	r2, #15
 800db54:	fa02 f303 	lsl.w	r3, r2, r3
 800db58:	43db      	mvns	r3, r3
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	4013      	ands	r3, r2
 800db5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800db66:	d01f      	beq.n	800dba8 <HAL_GPIO_Init+0x1f8>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a4c      	ldr	r2, [pc, #304]	; (800dc9c <HAL_GPIO_Init+0x2ec>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d019      	beq.n	800dba4 <HAL_GPIO_Init+0x1f4>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a4b      	ldr	r2, [pc, #300]	; (800dca0 <HAL_GPIO_Init+0x2f0>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d013      	beq.n	800dba0 <HAL_GPIO_Init+0x1f0>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a4a      	ldr	r2, [pc, #296]	; (800dca4 <HAL_GPIO_Init+0x2f4>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d00d      	beq.n	800db9c <HAL_GPIO_Init+0x1ec>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4a49      	ldr	r2, [pc, #292]	; (800dca8 <HAL_GPIO_Init+0x2f8>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d007      	beq.n	800db98 <HAL_GPIO_Init+0x1e8>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4a48      	ldr	r2, [pc, #288]	; (800dcac <HAL_GPIO_Init+0x2fc>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d101      	bne.n	800db94 <HAL_GPIO_Init+0x1e4>
 800db90:	2305      	movs	r3, #5
 800db92:	e00a      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800db94:	2306      	movs	r3, #6
 800db96:	e008      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800db98:	2304      	movs	r3, #4
 800db9a:	e006      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800db9c:	2303      	movs	r3, #3
 800db9e:	e004      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800dba0:	2302      	movs	r3, #2
 800dba2:	e002      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800dba4:	2301      	movs	r3, #1
 800dba6:	e000      	b.n	800dbaa <HAL_GPIO_Init+0x1fa>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	f002 0203 	and.w	r2, r2, #3
 800dbb0:	0092      	lsls	r2, r2, #2
 800dbb2:	4093      	lsls	r3, r2
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dbba:	4937      	ldr	r1, [pc, #220]	; (800dc98 <HAL_GPIO_Init+0x2e8>)
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	089b      	lsrs	r3, r3, #2
 800dbc0:	3302      	adds	r3, #2
 800dbc2:	693a      	ldr	r2, [r7, #16]
 800dbc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dbc8:	4b39      	ldr	r3, [pc, #228]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	43db      	mvns	r3, r3
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800dbec:	4a30      	ldr	r2, [pc, #192]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800dbf2:	4b2f      	ldr	r3, [pc, #188]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	43db      	mvns	r3, r3
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800dc16:	4a26      	ldr	r2, [pc, #152]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800dc1c:	4b24      	ldr	r3, [pc, #144]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	43db      	mvns	r3, r3
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	4013      	ands	r3, r2
 800dc2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800dc40:	4a1b      	ldr	r2, [pc, #108]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800dc46:	4b1a      	ldr	r3, [pc, #104]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	43db      	mvns	r3, r3
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	4013      	ands	r3, r2
 800dc54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800dc62:	693a      	ldr	r2, [r7, #16]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800dc6a:	4a11      	ldr	r2, [pc, #68]	; (800dcb0 <HAL_GPIO_Init+0x300>)
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3301      	adds	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f47f ae9d 	bne.w	800d9c0 <HAL_GPIO_Init+0x10>
  }
}
 800dc86:	bf00      	nop
 800dc88:	bf00      	nop
 800dc8a:	371c      	adds	r7, #28
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	40021000 	.word	0x40021000
 800dc98:	40010000 	.word	0x40010000
 800dc9c:	48000400 	.word	0x48000400
 800dca0:	48000800 	.word	0x48000800
 800dca4:	48000c00 	.word	0x48000c00
 800dca8:	48001000 	.word	0x48001000
 800dcac:	48001400 	.word	0x48001400
 800dcb0:	40010400 	.word	0x40010400

0800dcb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800dcc2:	e0bd      	b.n	800de40 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	4013      	ands	r3, r2
 800dcd0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 80b0 	beq.w	800de3a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800dcda:	4a60      	ldr	r2, [pc, #384]	; (800de5c <HAL_GPIO_DeInit+0x1a8>)
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	089b      	lsrs	r3, r3, #2
 800dce0:	3302      	adds	r3, #2
 800dce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dce6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f003 0303 	and.w	r3, r3, #3
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	220f      	movs	r2, #15
 800dcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800dd02:	d01f      	beq.n	800dd44 <HAL_GPIO_DeInit+0x90>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a56      	ldr	r2, [pc, #344]	; (800de60 <HAL_GPIO_DeInit+0x1ac>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d019      	beq.n	800dd40 <HAL_GPIO_DeInit+0x8c>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a55      	ldr	r2, [pc, #340]	; (800de64 <HAL_GPIO_DeInit+0x1b0>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d013      	beq.n	800dd3c <HAL_GPIO_DeInit+0x88>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a54      	ldr	r2, [pc, #336]	; (800de68 <HAL_GPIO_DeInit+0x1b4>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d00d      	beq.n	800dd38 <HAL_GPIO_DeInit+0x84>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a53      	ldr	r2, [pc, #332]	; (800de6c <HAL_GPIO_DeInit+0x1b8>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d007      	beq.n	800dd34 <HAL_GPIO_DeInit+0x80>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a52      	ldr	r2, [pc, #328]	; (800de70 <HAL_GPIO_DeInit+0x1bc>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d101      	bne.n	800dd30 <HAL_GPIO_DeInit+0x7c>
 800dd2c:	2305      	movs	r3, #5
 800dd2e:	e00a      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd30:	2306      	movs	r3, #6
 800dd32:	e008      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd34:	2304      	movs	r3, #4
 800dd36:	e006      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e004      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	e002      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e000      	b.n	800dd46 <HAL_GPIO_DeInit+0x92>
 800dd44:	2300      	movs	r3, #0
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	f002 0203 	and.w	r2, r2, #3
 800dd4c:	0092      	lsls	r2, r2, #2
 800dd4e:	4093      	lsls	r3, r2
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d132      	bne.n	800ddbc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800dd56:	4b47      	ldr	r3, [pc, #284]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	43db      	mvns	r3, r3
 800dd5e:	4945      	ldr	r1, [pc, #276]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800dd64:	4b43      	ldr	r3, [pc, #268]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	43db      	mvns	r3, r3
 800dd6c:	4941      	ldr	r1, [pc, #260]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd6e:	4013      	ands	r3, r2
 800dd70:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800dd72:	4b40      	ldr	r3, [pc, #256]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	43db      	mvns	r3, r3
 800dd7a:	493e      	ldr	r1, [pc, #248]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800dd80:	4b3c      	ldr	r3, [pc, #240]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd82:	689a      	ldr	r2, [r3, #8]
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	43db      	mvns	r3, r3
 800dd88:	493a      	ldr	r1, [pc, #232]	; (800de74 <HAL_GPIO_DeInit+0x1c0>)
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f003 0303 	and.w	r3, r3, #3
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	220f      	movs	r2, #15
 800dd98:	fa02 f303 	lsl.w	r3, r2, r3
 800dd9c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dd9e:	4a2f      	ldr	r2, [pc, #188]	; (800de5c <HAL_GPIO_DeInit+0x1a8>)
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	089b      	lsrs	r3, r3, #2
 800dda4:	3302      	adds	r3, #2
 800dda6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	43da      	mvns	r2, r3
 800ddae:	482b      	ldr	r0, [pc, #172]	; (800de5c <HAL_GPIO_DeInit+0x1a8>)
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	089b      	lsrs	r3, r3, #2
 800ddb4:	400a      	ands	r2, r1
 800ddb6:	3302      	adds	r3, #2
 800ddb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	2103      	movs	r1, #3
 800ddc6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	08da      	lsrs	r2, r3, #3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3208      	adds	r2, #8
 800ddd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	220f      	movs	r2, #15
 800dde6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddea:	43db      	mvns	r3, r3
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	08d2      	lsrs	r2, r2, #3
 800ddf0:	4019      	ands	r1, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3208      	adds	r2, #8
 800ddf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68da      	ldr	r2, [r3, #12]
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	2103      	movs	r1, #3
 800de04:	fa01 f303 	lsl.w	r3, r1, r3
 800de08:	43db      	mvns	r3, r3
 800de0a:	401a      	ands	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685a      	ldr	r2, [r3, #4]
 800de14:	2101      	movs	r1, #1
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	fa01 f303 	lsl.w	r3, r1, r3
 800de1c:	43db      	mvns	r3, r3
 800de1e:	401a      	ands	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	689a      	ldr	r2, [r3, #8]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	2103      	movs	r1, #3
 800de2e:	fa01 f303 	lsl.w	r3, r1, r3
 800de32:	43db      	mvns	r3, r3
 800de34:	401a      	ands	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	609a      	str	r2, [r3, #8]
    }

    position++;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	3301      	adds	r3, #1
 800de3e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	fa22 f303 	lsr.w	r3, r2, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f47f af3b 	bne.w	800dcc4 <HAL_GPIO_DeInit+0x10>
  }
}
 800de4e:	bf00      	nop
 800de50:	bf00      	nop
 800de52:	371c      	adds	r7, #28
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	40010000 	.word	0x40010000
 800de60:	48000400 	.word	0x48000400
 800de64:	48000800 	.word	0x48000800
 800de68:	48000c00 	.word	0x48000c00
 800de6c:	48001000 	.word	0x48001000
 800de70:	48001400 	.word	0x48001400
 800de74:	40010400 	.word	0x40010400

0800de78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800de8a:	887a      	ldrh	r2, [r7, #2]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4013      	ands	r3, r2
 800de90:	041a      	lsls	r2, r3, #16
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	43d9      	mvns	r1, r3
 800de96:	887b      	ldrh	r3, [r7, #2]
 800de98:	400b      	ands	r3, r1
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	619a      	str	r2, [r3, #24]
}
 800dea0:	bf00      	nop
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800deba:	2301      	movs	r3, #1
 800debc:	e081      	b.n	800dfc2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f8a8 	bl	800e028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2224      	movs	r2, #36	; 0x24
 800dedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f022 0201 	bic.w	r2, r2, #1
 800deee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685a      	ldr	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800defc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d107      	bne.n	800df26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	689a      	ldr	r2, [r3, #8]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df22:	609a      	str	r2, [r3, #8]
 800df24:	e006      	b.n	800df34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	689a      	ldr	r2, [r3, #8]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800df32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d104      	bne.n	800df46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	6812      	ldr	r2, [r2, #0]
 800df50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800df54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68da      	ldr	r2, [r3, #12]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	691a      	ldr	r2, [r3, #16]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	430a      	orrs	r2, r1
 800df82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	69d9      	ldr	r1, [r3, #28]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a1a      	ldr	r2, [r3, #32]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f042 0201 	orr.w	r2, r2, #1
 800dfa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2220      	movs	r2, #32
 800dfae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b082      	sub	sp, #8
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e021      	b.n	800e020 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2224      	movs	r2, #36	; 0x24
 800dfe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f022 0201 	bic.w	r2, r2, #1
 800dff2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f821 	bl	800e03c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800e044:	bf00      	nop
 800e046:	370c      	adds	r7, #12
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af02      	add	r7, sp, #8
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	4608      	mov	r0, r1
 800e05a:	4611      	mov	r1, r2
 800e05c:	461a      	mov	r2, r3
 800e05e:	4603      	mov	r3, r0
 800e060:	817b      	strh	r3, [r7, #10]
 800e062:	460b      	mov	r3, r1
 800e064:	813b      	strh	r3, [r7, #8]
 800e066:	4613      	mov	r3, r2
 800e068:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b20      	cmp	r3, #32
 800e074:	f040 80f9 	bne.w	800e26a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d002      	beq.n	800e084 <HAL_I2C_Mem_Write+0x34>
 800e07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e08a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e0ed      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e096:	2b01      	cmp	r3, #1
 800e098:	d101      	bne.n	800e09e <HAL_I2C_Mem_Write+0x4e>
 800e09a:	2302      	movs	r3, #2
 800e09c:	e0e6      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e0a6:	f7ff f8b3 	bl	800d210 <HAL_GetTick>
 800e0aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	2319      	movs	r3, #25
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f000 fadd 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e0d1      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2221      	movs	r2, #33	; 0x21
 800e0cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2240      	movs	r2, #64	; 0x40
 800e0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6a3a      	ldr	r2, [r7, #32]
 800e0e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e0f0:	88f8      	ldrh	r0, [r7, #6]
 800e0f2:	893a      	ldrh	r2, [r7, #8]
 800e0f4:	8979      	ldrh	r1, [r7, #10]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	9301      	str	r3, [sp, #4]
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	4603      	mov	r3, r0
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f9ed 	bl	800e4e0 <I2C_RequestMemoryWrite>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d005      	beq.n	800e118 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e114:	2301      	movs	r3, #1
 800e116:	e0a9      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	2bff      	cmp	r3, #255	; 0xff
 800e120:	d90e      	bls.n	800e140 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	22ff      	movs	r2, #255	; 0xff
 800e126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	8979      	ldrh	r1, [r7, #10]
 800e130:	2300      	movs	r3, #0
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f000 fc45 	bl	800e9c8 <I2C_TransferConfig>
 800e13e:	e00f      	b.n	800e160 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e144:	b29a      	uxth	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	8979      	ldrh	r1, [r7, #10]
 800e152:	2300      	movs	r3, #0
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f000 fc34 	bl	800e9c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f000 fac7 	bl	800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e07b      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e18e:	b29b      	uxth	r3, r3
 800e190:	3b01      	subs	r3, #1
 800e192:	b29a      	uxth	r2, r3
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e19c:	3b01      	subs	r3, #1
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d034      	beq.n	800e218 <HAL_I2C_Mem_Write+0x1c8>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d130      	bne.n	800e218 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2180      	movs	r1, #128	; 0x80
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 fa59 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e04d      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	2bff      	cmp	r3, #255	; 0xff
 800e1d8:	d90e      	bls.n	800e1f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	22ff      	movs	r2, #255	; 0xff
 800e1de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	8979      	ldrh	r1, [r7, #10]
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 fbe9 	bl	800e9c8 <I2C_TransferConfig>
 800e1f6:	e00f      	b.n	800e218 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e206:	b2da      	uxtb	r2, r3
 800e208:	8979      	ldrh	r1, [r7, #10]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 fbd8 	bl	800e9c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d19e      	bne.n	800e160 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f000 faa6 	bl	800e778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e01a      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2220      	movs	r2, #32
 800e23c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6859      	ldr	r1, [r3, #4]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <HAL_I2C_Mem_Write+0x224>)
 800e24a:	400b      	ands	r3, r1
 800e24c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2220      	movs	r2, #32
 800e252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	e000      	b.n	800e26c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e26a:	2302      	movs	r3, #2
  }
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	fe00e800 	.word	0xfe00e800

0800e278 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	4608      	mov	r0, r1
 800e282:	4611      	mov	r1, r2
 800e284:	461a      	mov	r2, r3
 800e286:	4603      	mov	r3, r0
 800e288:	817b      	strh	r3, [r7, #10]
 800e28a:	460b      	mov	r3, r1
 800e28c:	813b      	strh	r3, [r7, #8]
 800e28e:	4613      	mov	r3, r2
 800e290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	f040 80fd 	bne.w	800e49a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2a0:	6a3b      	ldr	r3, [r7, #32]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <HAL_I2C_Mem_Read+0x34>
 800e2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d105      	bne.n	800e2b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e0f1      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d101      	bne.n	800e2c6 <HAL_I2C_Mem_Read+0x4e>
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	e0ea      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e2ce:	f7fe ff9f 	bl	800d210 <HAL_GetTick>
 800e2d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	2319      	movs	r3, #25
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f000 f9c9 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e0d5      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2222      	movs	r2, #34	; 0x22
 800e2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2240      	movs	r2, #64	; 0x40
 800e2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6a3a      	ldr	r2, [r7, #32]
 800e30a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e318:	88f8      	ldrh	r0, [r7, #6]
 800e31a:	893a      	ldrh	r2, [r7, #8]
 800e31c:	8979      	ldrh	r1, [r7, #10]
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	4603      	mov	r3, r0
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 f92d 	bl	800e588 <I2C_RequestMemoryRead>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e0ad      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e344:	b29b      	uxth	r3, r3
 800e346:	2bff      	cmp	r3, #255	; 0xff
 800e348:	d90e      	bls.n	800e368 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	22ff      	movs	r2, #255	; 0xff
 800e34e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e354:	b2da      	uxtb	r2, r3
 800e356:	8979      	ldrh	r1, [r7, #10]
 800e358:	4b52      	ldr	r3, [pc, #328]	; (800e4a4 <HAL_I2C_Mem_Read+0x22c>)
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 fb31 	bl	800e9c8 <I2C_TransferConfig>
 800e366:	e00f      	b.n	800e388 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e376:	b2da      	uxtb	r2, r3
 800e378:	8979      	ldrh	r1, [r7, #10]
 800e37a:	4b4a      	ldr	r3, [pc, #296]	; (800e4a4 <HAL_I2C_Mem_Read+0x22c>)
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fb20 	bl	800e9c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	2200      	movs	r2, #0
 800e390:	2104      	movs	r1, #4
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 f970 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e07c      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	b2d2      	uxtb	r2, r2
 800e3ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	1c5a      	adds	r2, r3, #1
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d034      	beq.n	800e448 <HAL_I2C_Mem_Read+0x1d0>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d130      	bne.n	800e448 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2180      	movs	r1, #128	; 0x80
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 f941 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e04d      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e404:	b29b      	uxth	r3, r3
 800e406:	2bff      	cmp	r3, #255	; 0xff
 800e408:	d90e      	bls.n	800e428 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	22ff      	movs	r2, #255	; 0xff
 800e40e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e414:	b2da      	uxtb	r2, r3
 800e416:	8979      	ldrh	r1, [r7, #10]
 800e418:	2300      	movs	r3, #0
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f000 fad1 	bl	800e9c8 <I2C_TransferConfig>
 800e426:	e00f      	b.n	800e448 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e436:	b2da      	uxtb	r2, r3
 800e438:	8979      	ldrh	r1, [r7, #10]
 800e43a:	2300      	movs	r3, #0
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 fac0 	bl	800e9c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d19a      	bne.n	800e388 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 f98e 	bl	800e778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e01a      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2220      	movs	r2, #32
 800e46c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6859      	ldr	r1, [r3, #4]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	4b0b      	ldr	r3, [pc, #44]	; (800e4a8 <HAL_I2C_Mem_Read+0x230>)
 800e47a:	400b      	ands	r3, r1
 800e47c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2220      	movs	r2, #32
 800e482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	e000      	b.n	800e49c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e49a:	2302      	movs	r3, #2
  }
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	80002400 	.word	0x80002400
 800e4a8:	fe00e800 	.word	0xfe00e800

0800e4ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4ba:	b2db      	uxtb	r3, r3
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	817b      	strh	r3, [r7, #10]
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	813b      	strh	r3, [r7, #8]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	8979      	ldrh	r1, [r7, #10]
 800e500:	4b20      	ldr	r3, [pc, #128]	; (800e584 <I2C_RequestMemoryWrite+0xa4>)
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 fa5d 	bl	800e9c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	69b9      	ldr	r1, [r7, #24]
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f000 f8f0 	bl	800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	e02c      	b.n	800e57c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d105      	bne.n	800e534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e528:	893b      	ldrh	r3, [r7, #8]
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	629a      	str	r2, [r3, #40]	; 0x28
 800e532:	e015      	b.n	800e560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e534:	893b      	ldrh	r3, [r7, #8]
 800e536:	0a1b      	lsrs	r3, r3, #8
 800e538:	b29b      	uxth	r3, r3
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e542:	69fa      	ldr	r2, [r7, #28]
 800e544:	69b9      	ldr	r1, [r7, #24]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f000 f8d6 	bl	800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d001      	beq.n	800e556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	e012      	b.n	800e57c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e556:	893b      	ldrh	r3, [r7, #8]
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	2200      	movs	r2, #0
 800e568:	2180      	movs	r1, #128	; 0x80
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 f884 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e000      	b.n	800e57c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	80002000 	.word	0x80002000

0800e588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	4608      	mov	r0, r1
 800e592:	4611      	mov	r1, r2
 800e594:	461a      	mov	r2, r3
 800e596:	4603      	mov	r3, r0
 800e598:	817b      	strh	r3, [r7, #10]
 800e59a:	460b      	mov	r3, r1
 800e59c:	813b      	strh	r3, [r7, #8]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e5a2:	88fb      	ldrh	r3, [r7, #6]
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	8979      	ldrh	r1, [r7, #10]
 800e5a8:	4b20      	ldr	r3, [pc, #128]	; (800e62c <I2C_RequestMemoryRead+0xa4>)
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 fa0a 	bl	800e9c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5b4:	69fa      	ldr	r2, [r7, #28]
 800e5b6:	69b9      	ldr	r1, [r7, #24]
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f000 f89d 	bl	800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e02c      	b.n	800e622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e5c8:	88fb      	ldrh	r3, [r7, #6]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d105      	bne.n	800e5da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e5ce:	893b      	ldrh	r3, [r7, #8]
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	629a      	str	r2, [r3, #40]	; 0x28
 800e5d8:	e015      	b.n	800e606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e5da:	893b      	ldrh	r3, [r7, #8]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	69b9      	ldr	r1, [r7, #24]
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f000 f883 	bl	800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e012      	b.n	800e622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e5fc:	893b      	ldrh	r3, [r7, #8]
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	2200      	movs	r2, #0
 800e60e:	2140      	movs	r1, #64	; 0x40
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f831 	bl	800e678 <I2C_WaitOnFlagUntilTimeout>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	e000      	b.n	800e622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	80002000 	.word	0x80002000

0800e630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b02      	cmp	r3, #2
 800e644:	d103      	bne.n	800e64e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2200      	movs	r2, #0
 800e64c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	699b      	ldr	r3, [r3, #24]
 800e654:	f003 0301 	and.w	r3, r3, #1
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d007      	beq.n	800e66c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	699a      	ldr	r2, [r3, #24]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f042 0201 	orr.w	r2, r2, #1
 800e66a:	619a      	str	r2, [r3, #24]
  }
}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	603b      	str	r3, [r7, #0]
 800e684:	4613      	mov	r3, r2
 800e686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e688:	e022      	b.n	800e6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e690:	d01e      	beq.n	800e6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e692:	f7fe fdbd 	bl	800d210 <HAL_GetTick>
 800e696:	4602      	mov	r2, r0
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d302      	bcc.n	800e6a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d113      	bne.n	800e6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ac:	f043 0220 	orr.w	r2, r3, #32
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e00f      	b.n	800e6f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	699a      	ldr	r2, [r3, #24]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	4013      	ands	r3, r2
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	bf0c      	ite	eq
 800e6e0:	2301      	moveq	r3, #1
 800e6e2:	2300      	movne	r3, #0
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d0cd      	beq.n	800e68a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e704:	e02c      	b.n	800e760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	68b9      	ldr	r1, [r7, #8]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f000 f870 	bl	800e7f0 <I2C_IsErrorOccurred>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	e02a      	b.n	800e770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e720:	d01e      	beq.n	800e760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e722:	f7fe fd75 	bl	800d210 <HAL_GetTick>
 800e726:	4602      	mov	r2, r0
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d302      	bcc.n	800e738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d113      	bne.n	800e760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e73c:	f043 0220 	orr.w	r2, r3, #32
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2220      	movs	r2, #32
 800e748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e75c:	2301      	movs	r3, #1
 800e75e:	e007      	b.n	800e770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	f003 0302 	and.w	r3, r3, #2
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d1cb      	bne.n	800e706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e76e:	2300      	movs	r3, #0
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e784:	e028      	b.n	800e7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	68b9      	ldr	r1, [r7, #8]
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f000 f830 	bl	800e7f0 <I2C_IsErrorOccurred>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e026      	b.n	800e7e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e79a:	f7fe fd39 	bl	800d210 <HAL_GetTick>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d302      	bcc.n	800e7b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d113      	bne.n	800e7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b4:	f043 0220 	orr.w	r2, r3, #32
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	e007      	b.n	800e7e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	f003 0320 	and.w	r3, r3, #32
 800e7e2:	2b20      	cmp	r3, #32
 800e7e4:	d1cf      	bne.n	800e786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b08a      	sub	sp, #40	; 0x28
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	f003 0310 	and.w	r3, r3, #16
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d075      	beq.n	800e908 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2210      	movs	r2, #16
 800e822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e824:	e056      	b.n	800e8d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d052      	beq.n	800e8d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e82e:	f7fe fcef 	bl	800d210 <HAL_GetTick>
 800e832:	4602      	mov	r2, r0
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d302      	bcc.n	800e844 <I2C_IsErrorOccurred+0x54>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d147      	bne.n	800e8d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e84e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e866:	d12e      	bne.n	800e8c6 <I2C_IsErrorOccurred+0xd6>
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e86e:	d02a      	beq.n	800e8c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e870:	7cfb      	ldrb	r3, [r7, #19]
 800e872:	2b20      	cmp	r3, #32
 800e874:	d027      	beq.n	800e8c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e884:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e886:	f7fe fcc3 	bl	800d210 <HAL_GetTick>
 800e88a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e88c:	e01b      	b.n	800e8c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e88e:	f7fe fcbf 	bl	800d210 <HAL_GetTick>
 800e892:	4602      	mov	r2, r0
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	2b19      	cmp	r3, #25
 800e89a:	d914      	bls.n	800e8c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a0:	f043 0220 	orr.w	r2, r3, #32
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	f003 0320 	and.w	r3, r3, #32
 800e8d0:	2b20      	cmp	r3, #32
 800e8d2:	d1dc      	bne.n	800e88e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	f003 0320 	and.w	r3, r3, #32
 800e8de:	2b20      	cmp	r3, #32
 800e8e0:	d003      	beq.n	800e8ea <I2C_IsErrorOccurred+0xfa>
 800e8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d09d      	beq.n	800e826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d103      	bne.n	800e8fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2220      	movs	r2, #32
 800e8f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	f043 0304 	orr.w	r3, r3, #4
 800e900:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00b      	beq.n	800e932 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	f043 0301 	orr.w	r3, r3, #1
 800e920:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e92a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00b      	beq.n	800e954 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	f043 0308 	orr.w	r3, r3, #8
 800e942:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e94c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00b      	beq.n	800e976 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	f043 0302 	orr.w	r3, r3, #2
 800e964:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e96e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e970:	2301      	movs	r3, #1
 800e972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01c      	beq.n	800e9b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f7ff fe56 	bl	800e630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	6859      	ldr	r1, [r3, #4]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <I2C_IsErrorOccurred+0x1d4>)
 800e990:	400b      	ands	r3, r1
 800e992:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e998:	6a3b      	ldr	r3, [r7, #32]
 800e99a:	431a      	orrs	r2, r3
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2220      	movs	r2, #32
 800e9a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3728      	adds	r7, #40	; 0x28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	fe00e800 	.word	0xfe00e800

0800e9c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	607b      	str	r3, [r7, #4]
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	817b      	strh	r3, [r7, #10]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9da:	897b      	ldrh	r3, [r7, #10]
 800e9dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9e0:	7a7b      	ldrb	r3, [r7, #9]
 800e9e2:	041b      	lsls	r3, r3, #16
 800e9e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685a      	ldr	r2, [r3, #4]
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	0d5b      	lsrs	r3, r3, #21
 800ea02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ea06:	4b08      	ldr	r3, [pc, #32]	; (800ea28 <I2C_TransferConfig+0x60>)
 800ea08:	430b      	orrs	r3, r1
 800ea0a:	43db      	mvns	r3, r3
 800ea0c:	ea02 0103 	and.w	r1, r2, r3
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	697a      	ldr	r2, [r7, #20]
 800ea16:	430a      	orrs	r2, r1
 800ea18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ea1a:	bf00      	nop
 800ea1c:	371c      	adds	r7, #28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	03ff63ff 	.word	0x03ff63ff

0800ea2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b20      	cmp	r3, #32
 800ea40:	d138      	bne.n	800eab4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d101      	bne.n	800ea50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	e032      	b.n	800eab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2224      	movs	r2, #36	; 0x24
 800ea5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f022 0201 	bic.w	r2, r2, #1
 800ea6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ea7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	6819      	ldr	r1, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	430a      	orrs	r2, r1
 800ea8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f042 0201 	orr.w	r2, r2, #1
 800ea9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2220      	movs	r2, #32
 800eaa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eab0:	2300      	movs	r3, #0
 800eab2:	e000      	b.n	800eab6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eab4:	2302      	movs	r3, #2
  }
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eac2:	b480      	push	{r7}
 800eac4:	b085      	sub	sp, #20
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b20      	cmp	r3, #32
 800ead6:	d139      	bne.n	800eb4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e033      	b.n	800eb4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2224      	movs	r2, #36	; 0x24
 800eaf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f022 0201 	bic.w	r2, r2, #1
 800eb04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800eb14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	021b      	lsls	r3, r3, #8
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f042 0201 	orr.w	r2, r2, #1
 800eb36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2220      	movs	r2, #32
 800eb3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e000      	b.n	800eb4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800eb4c:	2302      	movs	r3, #2
  }
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3714      	adds	r7, #20
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr
	...

0800eb5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eb60:	4b03      	ldr	r3, [pc, #12]	; (800eb70 <HAL_RCC_GetHCLKFreq+0x14>)
 800eb62:	681b      	ldr	r3, [r3, #0]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop
 800eb70:	20000140 	.word	0x20000140

0800eb74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800eb78:	f7ff fff0 	bl	800eb5c <HAL_RCC_GetHCLKFreq>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	4b06      	ldr	r3, [pc, #24]	; (800eb98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	0a1b      	lsrs	r3, r3, #8
 800eb84:	f003 0307 	and.w	r3, r3, #7
 800eb88:	4904      	ldr	r1, [pc, #16]	; (800eb9c <HAL_RCC_GetPCLK1Freq+0x28>)
 800eb8a:	5ccb      	ldrb	r3, [r1, r3]
 800eb8c:	f003 031f 	and.w	r3, r3, #31
 800eb90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	40021000 	.word	0x40021000
 800eb9c:	0801bc08 	.word	0x0801bc08

0800eba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eba8:	2300      	movs	r3, #0
 800ebaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ebac:	2300      	movs	r3, #0
 800ebae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 8098 	beq.w	800ecee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ebc2:	4b43      	ldr	r3, [pc, #268]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ebc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10d      	bne.n	800ebea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ebce:	4b40      	ldr	r3, [pc, #256]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ebd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebd2:	4a3f      	ldr	r2, [pc, #252]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ebd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebd8:	6593      	str	r3, [r2, #88]	; 0x58
 800ebda:	4b3d      	ldr	r3, [pc, #244]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ebdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebe2:	60bb      	str	r3, [r7, #8]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ebea:	4b3a      	ldr	r3, [pc, #232]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a39      	ldr	r2, [pc, #228]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ebf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ebf6:	f7fe fb0b 	bl	800d210 <HAL_GetTick>
 800ebfa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ebfc:	e009      	b.n	800ec12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebfe:	f7fe fb07 	bl	800d210 <HAL_GetTick>
 800ec02:	4602      	mov	r2, r0
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d902      	bls.n	800ec12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	74fb      	strb	r3, [r7, #19]
        break;
 800ec10:	e005      	b.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec12:	4b30      	ldr	r3, [pc, #192]	; (800ecd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0ef      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ec1e:	7cfb      	ldrb	r3, [r7, #19]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d159      	bne.n	800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ec24:	4b2a      	ldr	r3, [pc, #168]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d01e      	beq.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d019      	beq.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ec40:	4b23      	ldr	r3, [pc, #140]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec4c:	4b20      	ldr	r3, [pc, #128]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec52:	4a1f      	ldr	r2, [pc, #124]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ec5c:	4b1c      	ldr	r3, [pc, #112]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec62:	4a1b      	ldr	r2, [pc, #108]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ec6c:	4a18      	ldr	r2, [pc, #96]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d016      	beq.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec7e:	f7fe fac7 	bl	800d210 <HAL_GetTick>
 800ec82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ec84:	e00b      	b.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec86:	f7fe fac3 	bl	800d210 <HAL_GetTick>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d902      	bls.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	74fb      	strb	r3, [r7, #19]
            break;
 800ec9c:	e006      	b.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800eca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eca4:	f003 0302 	and.w	r3, r3, #2
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d0ec      	beq.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ecac:	7cfb      	ldrb	r3, [r7, #19]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10b      	bne.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecb2:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ecb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecc0:	4903      	ldr	r1, [pc, #12]	; (800ecd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ecc8:	e008      	b.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ecca:	7cfb      	ldrb	r3, [r7, #19]
 800eccc:	74bb      	strb	r3, [r7, #18]
 800ecce:	e005      	b.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ecd0:	40021000 	.word	0x40021000
 800ecd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecd8:	7cfb      	ldrb	r3, [r7, #19]
 800ecda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ecdc:	7c7b      	ldrb	r3, [r7, #17]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d105      	bne.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ece2:	4ba7      	ldr	r3, [pc, #668]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ece4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ece6:	4aa6      	ldr	r2, [pc, #664]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ece8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ecec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f003 0301 	and.w	r3, r3, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ecfa:	4ba1      	ldr	r3, [pc, #644]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed00:	f023 0203 	bic.w	r2, r3, #3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	499d      	ldr	r1, [pc, #628]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f003 0302 	and.w	r3, r3, #2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00a      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ed1c:	4b98      	ldr	r3, [pc, #608]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed22:	f023 020c 	bic.w	r2, r3, #12
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	4995      	ldr	r1, [pc, #596]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f003 0304 	and.w	r3, r3, #4
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ed3e:	4b90      	ldr	r3, [pc, #576]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	498c      	ldr	r1, [pc, #560]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 0308 	and.w	r3, r3, #8
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00a      	beq.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ed60:	4b87      	ldr	r3, [pc, #540]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	4984      	ldr	r1, [pc, #528]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed70:	4313      	orrs	r3, r2
 800ed72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f003 0310 	and.w	r3, r3, #16
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00a      	beq.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ed82:	4b7f      	ldr	r3, [pc, #508]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	695b      	ldr	r3, [r3, #20]
 800ed90:	497b      	ldr	r1, [pc, #492]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed92:	4313      	orrs	r3, r2
 800ed94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f003 0320 	and.w	r3, r3, #32
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800eda4:	4b76      	ldr	r3, [pc, #472]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	699b      	ldr	r3, [r3, #24]
 800edb2:	4973      	ldr	r1, [pc, #460]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800edb4:	4313      	orrs	r3, r2
 800edb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800edc6:	4b6e      	ldr	r3, [pc, #440]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800edc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	69db      	ldr	r3, [r3, #28]
 800edd4:	496a      	ldr	r1, [pc, #424]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800edd6:	4313      	orrs	r3, r2
 800edd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00a      	beq.n	800edfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ede8:	4b65      	ldr	r3, [pc, #404]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800edea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	4962      	ldr	r1, [pc, #392]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800edf8:	4313      	orrs	r3, r2
 800edfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00a      	beq.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ee0a:	4b5d      	ldr	r3, [pc, #372]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee18:	4959      	ldr	r1, [pc, #356]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00a      	beq.n	800ee42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ee2c:	4b54      	ldr	r3, [pc, #336]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ee32:	f023 0203 	bic.w	r2, r3, #3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee3a:	4951      	ldr	r1, [pc, #324]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ee4e:	4b4c      	ldr	r3, [pc, #304]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5c:	4948      	ldr	r1, [pc, #288]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d015      	beq.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ee70:	4b43      	ldr	r3, [pc, #268]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee7e:	4940      	ldr	r1, [pc, #256]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee80:	4313      	orrs	r3, r2
 800ee82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee8e:	d105      	bne.n	800ee9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ee90:	4b3b      	ldr	r3, [pc, #236]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	4a3a      	ldr	r2, [pc, #232]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ee96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d015      	beq.n	800eed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800eea8:	4b35      	ldr	r3, [pc, #212]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb6:	4932      	ldr	r1, [pc, #200]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eec6:	d105      	bne.n	800eed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eec8:	4b2d      	ldr	r3, [pc, #180]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	4a2c      	ldr	r2, [pc, #176]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eed2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d015      	beq.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eee0:	4b27      	ldr	r3, [pc, #156]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eee6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	4924      	ldr	r1, [pc, #144]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eef0:	4313      	orrs	r3, r2
 800eef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eefa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eefe:	d105      	bne.n	800ef0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ef00:	4b1f      	ldr	r3, [pc, #124]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	4a1e      	ldr	r2, [pc, #120]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d015      	beq.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ef18:	4b19      	ldr	r3, [pc, #100]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef26:	4916      	ldr	r1, [pc, #88]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef36:	d105      	bne.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ef38:	4b11      	ldr	r3, [pc, #68]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	4a10      	ldr	r2, [pc, #64]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d019      	beq.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ef50:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef5e:	4908      	ldr	r1, [pc, #32]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef60:	4313      	orrs	r3, r2
 800ef62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef6e:	d109      	bne.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ef70:	4b03      	ldr	r3, [pc, #12]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	4a02      	ldr	r2, [pc, #8]	; (800ef80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ef76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef7a:	60d3      	str	r3, [r2, #12]
 800ef7c:	e002      	b.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ef7e:	bf00      	nop
 800ef80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d015      	beq.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ef90:	4b29      	ldr	r3, [pc, #164]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ef92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef9e:	4926      	ldr	r1, [pc, #152]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efa0:	4313      	orrs	r3, r2
 800efa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efae:	d105      	bne.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800efb0:	4b21      	ldr	r3, [pc, #132]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	4a20      	ldr	r2, [pc, #128]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d015      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800efc8:	4b1b      	ldr	r3, [pc, #108]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efd6:	4918      	ldr	r1, [pc, #96]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efd8:	4313      	orrs	r3, r2
 800efda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe6:	d105      	bne.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	4a12      	ldr	r2, [pc, #72]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800efee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eff2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d015      	beq.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f000:	4b0d      	ldr	r3, [pc, #52]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f00e:	490a      	ldr	r1, [pc, #40]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f010:	4313      	orrs	r3, r2
 800f012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f01a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f01e:	d105      	bne.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f020:	4b05      	ldr	r3, [pc, #20]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	4a04      	ldr	r2, [pc, #16]	; (800f038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f02a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800f02c:	7cbb      	ldrb	r3, [r7, #18]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	40021000 	.word	0x40021000

0800f03c <LL_ADC_REG_SetSequencerLength>:
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f04a:	f023 020f 	bic.w	r2, r3, #15
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	431a      	orrs	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <LL_ADC_IsEnabled>:
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b01      	cmp	r3, #1
 800f074:	d101      	bne.n	800f07a <LL_ADC_IsEnabled+0x18>
 800f076:	2301      	movs	r3, #1
 800f078:	e000      	b.n	800f07c <LL_ADC_IsEnabled+0x1a>
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800f088:	b590      	push	{r4, r7, lr}
 800f08a:	b085      	sub	sp, #20
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800f092:	2300      	movs	r3, #0
 800f094:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a27      	ldr	r2, [pc, #156]	; (800f138 <LL_ADC_CommonInit+0xb0>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d10f      	bne.n	800f0be <LL_ADC_CommonInit+0x36>
 800f09e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800f0a2:	f7ff ffde 	bl	800f062 <LL_ADC_IsEnabled>
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	4824      	ldr	r0, [pc, #144]	; (800f13c <LL_ADC_CommonInit+0xb4>)
 800f0aa:	f7ff ffda 	bl	800f062 <LL_ADC_IsEnabled>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4323      	orrs	r3, r4
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	bf0c      	ite	eq
 800f0b6:	2301      	moveq	r3, #1
 800f0b8:	2300      	movne	r3, #0
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	e012      	b.n	800f0e4 <LL_ADC_CommonInit+0x5c>
 800f0be:	4820      	ldr	r0, [pc, #128]	; (800f140 <LL_ADC_CommonInit+0xb8>)
 800f0c0:	f7ff ffcf 	bl	800f062 <LL_ADC_IsEnabled>
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	481f      	ldr	r0, [pc, #124]	; (800f144 <LL_ADC_CommonInit+0xbc>)
 800f0c8:	f7ff ffcb 	bl	800f062 <LL_ADC_IsEnabled>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	431c      	orrs	r4, r3
 800f0d0:	481d      	ldr	r0, [pc, #116]	; (800f148 <LL_ADC_CommonInit+0xc0>)
 800f0d2:	f7ff ffc6 	bl	800f062 <LL_ADC_IsEnabled>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	4323      	orrs	r3, r4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	bf0c      	ite	eq
 800f0de:	2301      	moveq	r3, #1
 800f0e0:	2300      	movne	r3, #0
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d020      	beq.n	800f12a <LL_ADC_CommonInit+0xa2>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d012      	beq.n	800f116 <LL_ADC_CommonInit+0x8e>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	689a      	ldr	r2, [r3, #8]
 800f0f4:	4b15      	ldr	r3, [pc, #84]	; (800f14c <LL_ADC_CommonInit+0xc4>)
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	683a      	ldr	r2, [r7, #0]
 800f0fa:	6811      	ldr	r1, [r2, #0]
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	6852      	ldr	r2, [r2, #4]
 800f100:	4311      	orrs	r1, r2
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	6892      	ldr	r2, [r2, #8]
 800f106:	4311      	orrs	r1, r2
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	68d2      	ldr	r2, [r2, #12]
 800f10c:	430a      	orrs	r2, r1
 800f10e:	431a      	orrs	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	609a      	str	r2, [r3, #8]
 800f114:	e00b      	b.n	800f12e <LL_ADC_CommonInit+0xa6>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689a      	ldr	r2, [r3, #8]
 800f11a:	4b0c      	ldr	r3, [pc, #48]	; (800f14c <LL_ADC_CommonInit+0xc4>)
 800f11c:	4013      	ands	r3, r2
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	6812      	ldr	r2, [r2, #0]
 800f122:	431a      	orrs	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	609a      	str	r2, [r3, #8]
 800f128:	e001      	b.n	800f12e <LL_ADC_CommonInit+0xa6>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	bd90      	pop	{r4, r7, pc}
 800f138:	50000300 	.word	0x50000300
 800f13c:	50000100 	.word	0x50000100
 800f140:	50000400 	.word	0x50000400
 800f144:	50000500 	.word	0x50000500
 800f148:	50000600 	.word	0x50000600
 800f14c:	ffc030e0 	.word	0xffc030e0

0800f150 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7ff ff7f 	bl	800f062 <LL_ADC_IsEnabled>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d111      	bne.n	800f18e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f172:	f023 0318 	bic.w	r3, r3, #24
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	6811      	ldr	r1, [r2, #0]
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	6852      	ldr	r2, [r2, #4]
 800f17e:	4311      	orrs	r1, r2
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	6892      	ldr	r2, [r2, #8]
 800f184:	430a      	orrs	r2, r1
 800f186:	431a      	orrs	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	60da      	str	r2, [r3, #12]
 800f18c:	e001      	b.n	800f192 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f192:	7bfb      	ldrb	r3, [r7, #15]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff ff59 	bl	800f062 <LL_ADC_IsEnabled>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d132      	bne.n	800f21c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d015      	beq.n	800f1ea <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	4b1a      	ldr	r3, [pc, #104]	; (800f22c <LL_ADC_REG_Init+0x90>)
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	6811      	ldr	r1, [r2, #0]
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	6892      	ldr	r2, [r2, #8]
 800f1ce:	4311      	orrs	r1, r2
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	68d2      	ldr	r2, [r2, #12]
 800f1d4:	4311      	orrs	r1, r2
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	6912      	ldr	r2, [r2, #16]
 800f1da:	4311      	orrs	r1, r2
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	6952      	ldr	r2, [r2, #20]
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	60da      	str	r2, [r3, #12]
 800f1e8:	e011      	b.n	800f20e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68da      	ldr	r2, [r3, #12]
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <LL_ADC_REG_Init+0x90>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	6811      	ldr	r1, [r2, #0]
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	68d2      	ldr	r2, [r2, #12]
 800f1fa:	4311      	orrs	r1, r2
 800f1fc:	683a      	ldr	r2, [r7, #0]
 800f1fe:	6912      	ldr	r2, [r2, #16]
 800f200:	4311      	orrs	r1, r2
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	6952      	ldr	r2, [r2, #20]
 800f206:	430a      	orrs	r2, r1
 800f208:	431a      	orrs	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff ff11 	bl	800f03c <LL_ADC_REG_SetSequencerLength>
 800f21a:	e001      	b.n	800f220 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800f21c:	2301      	movs	r3, #1
 800f21e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800f220:	7bfb      	ldrb	r3, [r7, #15]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	fff0c01c 	.word	0xfff0c01c

0800f230 <LL_DMA_ConfigTransfer>:
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800f240:	4a0e      	ldr	r2, [pc, #56]	; (800f27c <LL_DMA_ConfigTransfer+0x4c>)
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	4413      	add	r3, r2
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	461a      	mov	r2, r3
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	4413      	add	r3, r2
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800f254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f258:	4908      	ldr	r1, [pc, #32]	; (800f27c <LL_DMA_ConfigTransfer+0x4c>)
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	440a      	add	r2, r1
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	4611      	mov	r1, r2
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	440a      	add	r2, r1
 800f266:	4611      	mov	r1, r2
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	600b      	str	r3, [r1, #0]
}
 800f26e:	bf00      	nop
 800f270:	371c      	adds	r7, #28
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	0801bc10 	.word	0x0801bc10

0800f280 <LL_DMA_SetDataLength>:
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800f290:	4a0d      	ldr	r2, [pc, #52]	; (800f2c8 <LL_DMA_SetDataLength+0x48>)
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	4413      	add	r3, r2
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	461a      	mov	r2, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	4413      	add	r3, r2
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	0c1b      	lsrs	r3, r3, #16
 800f2a2:	041b      	lsls	r3, r3, #16
 800f2a4:	4908      	ldr	r1, [pc, #32]	; (800f2c8 <LL_DMA_SetDataLength+0x48>)
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	440a      	add	r2, r1
 800f2aa:	7812      	ldrb	r2, [r2, #0]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	697a      	ldr	r2, [r7, #20]
 800f2b0:	440a      	add	r2, r1
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	604b      	str	r3, [r1, #4]
}
 800f2ba:	bf00      	nop
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	0801bc10 	.word	0x0801bc10

0800f2cc <LL_DMA_SetMemoryAddress>:
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b087      	sub	sp, #28
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800f2dc:	4a07      	ldr	r2, [pc, #28]	; (800f2fc <LL_DMA_SetMemoryAddress+0x30>)
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	60d3      	str	r3, [r2, #12]
}
 800f2f0:	bf00      	nop
 800f2f2:	371c      	adds	r7, #28
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	0801bc10 	.word	0x0801bc10

0800f300 <LL_DMA_SetPeriphAddress>:
{
 800f300:	b480      	push	{r7}
 800f302:	b087      	sub	sp, #28
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800f310:	4a07      	ldr	r2, [pc, #28]	; (800f330 <LL_DMA_SetPeriphAddress+0x30>)
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	4413      	add	r3, r2
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	461a      	mov	r2, r3
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	4413      	add	r3, r2
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6093      	str	r3, [r2, #8]
}
 800f324:	bf00      	nop
 800f326:	371c      	adds	r7, #28
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	0801bc10 	.word	0x0801bc10

0800f334 <LL_DMA_SetPeriphRequest>:
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	0a9b      	lsrs	r3, r3, #10
 800f344:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800f348:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800f350:	68ba      	ldr	r2, [r7, #8]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	4413      	add	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f35c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f366:	68ba      	ldr	r2, [r7, #8]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	4413      	add	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f372:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	430a      	orrs	r2, r1
 800f37a:	601a      	str	r2, [r3, #0]
}
 800f37c:	bf00      	nop
 800f37e:	371c      	adds	r7, #28
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f39c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f3a2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f3a8:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f3ae:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f3b4:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	461a      	mov	r2, r3
 800f3be:	68b9      	ldr	r1, [r7, #8]
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7ff ff35 	bl	800f230 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	f7ff ff7c 	bl	800f2cc <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7ff ff8f 	bl	800f300 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	68b9      	ldr	r1, [r7, #8]
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7ff ff48 	bl	800f280 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	68b9      	ldr	r1, [r7, #8]
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f7ff ff9b 	bl	800f334 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f452:	bf00      	nop
 800f454:	370c      	adds	r7, #12
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <LL_LPUART_IsEnabled>:
  * @rmtoll CR1          UE            LL_LPUART_IsEnabled
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabled(USART_TypeDef *LPUARTx)
{
 800f45e:	b480      	push	{r7}
 800f460:	b083      	sub	sp, #12
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 0301 	and.w	r3, r3, #1
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d101      	bne.n	800f476 <LL_LPUART_IsEnabled+0x18>
 800f472:	2301      	movs	r3, #1
 800f474:	e000      	b.n	800f478 <LL_LPUART_IsEnabled+0x1a>
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <LL_LPUART_SetPrescaler>:
  *         @arg @ref LL_LPUART_PRESCALER_DIV128
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f492:	f023 030f 	bic.w	r3, r3, #15
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	b292      	uxth	r2, r2
 800f49a:	431a      	orrs	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <LL_LPUART_SetStopBitsLength>:
  *         @arg @ref LL_LPUART_STOPBITS_1
  *         @arg @ref LL_LPUART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetStopBitsLength(USART_TypeDef *LPUARTx, uint32_t StopBits)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	431a      	orrs	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	605a      	str	r2, [r3, #4]
}
 800f4c6:	bf00      	nop
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <LL_LPUART_SetHWFlowCtrl>:
  *         @arg @ref LL_LPUART_HWCONTROL_CTS
  *         @arg @ref LL_LPUART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetHWFlowCtrl(USART_TypeDef *LPUARTx, uint32_t HardwareFlowControl)
{
 800f4d2:	b480      	push	{r7}
 800f4d4:	b083      	sub	sp, #12
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	609a      	str	r2, [r3, #8]
}
 800f4ec:	bf00      	nop
 800f4ee:	370c      	adds	r7, #12
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <LL_LPUART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
 800f4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4fc:	b088      	sub	sp, #32
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	61f8      	str	r0, [r7, #28]
 800f502:	61b9      	str	r1, [r7, #24]
 800f504:	617a      	str	r2, [r7, #20]
 800f506:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d039      	beq.n	800f582 <LL_LPUART_SetBaudRate+0x8a>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	2200      	movs	r2, #0
 800f512:	60bb      	str	r3, [r7, #8]
 800f514:	60fa      	str	r2, [r7, #12]
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	461a      	mov	r2, r3
 800f51c:	4b1b      	ldr	r3, [pc, #108]	; (800f58c <LL_LPUART_SetBaudRate+0x94>)
 800f51e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f522:	b29b      	uxth	r3, r3
 800f524:	2200      	movs	r2, #0
 800f526:	603b      	str	r3, [r7, #0]
 800f528:	607a      	str	r2, [r7, #4]
 800f52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f52e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f532:	f7f7 fa55 	bl	80069e0 <__aeabi_uldivmod>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	4610      	mov	r0, r2
 800f53c:	4619      	mov	r1, r3
 800f53e:	f04f 0200 	mov.w	r2, #0
 800f542:	f04f 0300 	mov.w	r3, #0
 800f546:	020b      	lsls	r3, r1, #8
 800f548:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f54c:	0202      	lsls	r2, r0, #8
 800f54e:	6939      	ldr	r1, [r7, #16]
 800f550:	0849      	lsrs	r1, r1, #1
 800f552:	2000      	movs	r0, #0
 800f554:	460c      	mov	r4, r1
 800f556:	4605      	mov	r5, r0
 800f558:	eb12 0804 	adds.w	r8, r2, r4
 800f55c:	eb43 0905 	adc.w	r9, r3, r5
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	2200      	movs	r2, #0
 800f564:	469a      	mov	sl, r3
 800f566:	4693      	mov	fp, r2
 800f568:	4652      	mov	r2, sl
 800f56a:	465b      	mov	r3, fp
 800f56c:	4640      	mov	r0, r8
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f7 fa36 	bl	80069e0 <__aeabi_uldivmod>
 800f574:	4602      	mov	r2, r0
 800f576:	460b      	mov	r3, r1
 800f578:	4613      	mov	r3, r2
 800f57a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	60da      	str	r2, [r3, #12]
  }
}
 800f582:	bf00      	nop
 800f584:	3720      	adds	r7, #32
 800f586:	46bd      	mov	sp, r7
 800f588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f58c:	0801bc18 	.word	0x0801bc18

0800f590 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff ff5d 	bl	800f45e <LL_LPUART_IsEnabled>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d136      	bne.n	800f618 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4b1d      	ldr	r3, [pc, #116]	; (800f624 <LL_LPUART_Init+0x94>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	6891      	ldr	r1, [r2, #8]
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	6912      	ldr	r2, [r2, #16]
 800f5ba:	4311      	orrs	r1, r2
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	6952      	ldr	r2, [r2, #20]
 800f5c0:	430a      	orrs	r2, r1
 800f5c2:	431a      	orrs	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff ff6c 	bl	800f4ac <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff ff79 	bl	800f4d2 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800f5e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f5e4:	f000 f8bc 	bl	800f760 <LL_RCC_GetLPUARTClockFreq>
 800f5e8:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00d      	beq.n	800f60c <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d009      	beq.n	800f60c <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	68b9      	ldr	r1, [r7, #8]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff ff76 	bl	800f4f8 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4619      	mov	r1, r3
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff ff36 	bl	800f484 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800f618:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	efffe9f3 	.word	0xefffe9f3

0800f628 <LL_RCC_HSI_IsReady>:
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f62c:	4b07      	ldr	r3, [pc, #28]	; (800f64c <LL_RCC_HSI_IsReady+0x24>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f638:	d101      	bne.n	800f63e <LL_RCC_HSI_IsReady+0x16>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <LL_RCC_HSI_IsReady+0x18>
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	40021000 	.word	0x40021000

0800f650 <LL_RCC_LSE_IsReady>:
{
 800f650:	b480      	push	{r7}
 800f652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f654:	4b07      	ldr	r3, [pc, #28]	; (800f674 <LL_RCC_LSE_IsReady+0x24>)
 800f656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f65a:	f003 0302 	and.w	r3, r3, #2
 800f65e:	2b02      	cmp	r3, #2
 800f660:	d101      	bne.n	800f666 <LL_RCC_LSE_IsReady+0x16>
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <LL_RCC_LSE_IsReady+0x18>
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	40021000 	.word	0x40021000

0800f678 <LL_RCC_GetSysClkSource>:
{
 800f678:	b480      	push	{r7}
 800f67a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f67c:	4b04      	ldr	r3, [pc, #16]	; (800f690 <LL_RCC_GetSysClkSource+0x18>)
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f003 030c 	and.w	r3, r3, #12
}
 800f684:	4618      	mov	r0, r3
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	40021000 	.word	0x40021000

0800f694 <LL_RCC_GetAHBPrescaler>:
{
 800f694:	b480      	push	{r7}
 800f696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f698:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <LL_RCC_GetAHBPrescaler+0x18>)
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	40021000 	.word	0x40021000

0800f6b0 <LL_RCC_GetAPB1Prescaler>:
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f6b4:	4b04      	ldr	r3, [pc, #16]	; (800f6c8 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	40021000 	.word	0x40021000

0800f6cc <LL_RCC_GetLPUARTClockSource>:
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f6d4:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <LL_RCC_GetLPUARTClockSource+0x20>)
 800f6d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4013      	ands	r3, r2
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	370c      	adds	r7, #12
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	40021000 	.word	0x40021000

0800f6f0 <LL_RCC_PLL_GetMainSource>:
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f6f4:	4b04      	ldr	r3, [pc, #16]	; (800f708 <LL_RCC_PLL_GetMainSource+0x18>)
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	f003 0303 	and.w	r3, r3, #3
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	40021000 	.word	0x40021000

0800f70c <LL_RCC_PLL_GetN>:
{
 800f70c:	b480      	push	{r7}
 800f70e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f710:	4b04      	ldr	r3, [pc, #16]	; (800f724 <LL_RCC_PLL_GetN+0x18>)
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	0a1b      	lsrs	r3, r3, #8
 800f716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	40021000 	.word	0x40021000

0800f728 <LL_RCC_PLL_GetR>:
{
 800f728:	b480      	push	{r7}
 800f72a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f72c:	4b04      	ldr	r3, [pc, #16]	; (800f740 <LL_RCC_PLL_GetR+0x18>)
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800f734:	4618      	mov	r0, r3
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	40021000 	.word	0x40021000

0800f744 <LL_RCC_PLL_GetDivider>:
{
 800f744:	b480      	push	{r7}
 800f746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f748:	4b04      	ldr	r3, [pc, #16]	; (800f75c <LL_RCC_PLL_GetDivider+0x18>)
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f750:	4618      	mov	r0, r3
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	40021000 	.word	0x40021000

0800f760 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f768:	2300      	movs	r3, #0
 800f76a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff ffad 	bl	800f6cc <LL_RCC_GetLPUARTClockSource>
 800f772:	4603      	mov	r3, r0
 800f774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f778:	d015      	beq.n	800f7a6 <LL_RCC_GetLPUARTClockFreq+0x46>
 800f77a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f77e:	d81b      	bhi.n	800f7b8 <LL_RCC_GetLPUARTClockFreq+0x58>
 800f780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f784:	d003      	beq.n	800f78e <LL_RCC_GetLPUARTClockFreq+0x2e>
 800f786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f78a:	d004      	beq.n	800f796 <LL_RCC_GetLPUARTClockFreq+0x36>
 800f78c:	e014      	b.n	800f7b8 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 800f78e:	f000 f829 	bl	800f7e4 <RCC_GetSystemClockFreq>
 800f792:	60f8      	str	r0, [r7, #12]
      break;
 800f794:	e01f      	b.n	800f7d6 <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 800f796:	f7ff ff47 	bl	800f628 <LL_RCC_HSI_IsReady>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d017      	beq.n	800f7d0 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 800f7a0:	4b0f      	ldr	r3, [pc, #60]	; (800f7e0 <LL_RCC_GetLPUARTClockFreq+0x80>)
 800f7a2:	60fb      	str	r3, [r7, #12]
      }
      break;
 800f7a4:	e014      	b.n	800f7d0 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 800f7a6:	f7ff ff53 	bl	800f650 <LL_RCC_LSE_IsReady>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d011      	beq.n	800f7d4 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 800f7b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7b4:	60fb      	str	r3, [r7, #12]
      }
      break;
 800f7b6:	e00d      	b.n	800f7d4 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f7b8:	f000 f814 	bl	800f7e4 <RCC_GetSystemClockFreq>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f000 f836 	bl	800f830 <RCC_GetHCLKClockFreq>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f84a 	bl	800f860 <RCC_GetPCLK1ClockFreq>
 800f7cc:	60f8      	str	r0, [r7, #12]
      break;
 800f7ce:	e002      	b.n	800f7d6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800f7d0:	bf00      	nop
 800f7d2:	e000      	b.n	800f7d6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800f7d4:	bf00      	nop
  }

  return lpuart_frequency;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	00f42400 	.word	0x00f42400

0800f7e4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800f7ea:	f7ff ff45 	bl	800f678 <LL_RCC_GetSysClkSource>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b0c      	cmp	r3, #12
 800f7f2:	d00c      	beq.n	800f80e <RCC_GetSystemClockFreq+0x2a>
 800f7f4:	2b0c      	cmp	r3, #12
 800f7f6:	d80e      	bhi.n	800f816 <RCC_GetSystemClockFreq+0x32>
 800f7f8:	2b04      	cmp	r3, #4
 800f7fa:	d002      	beq.n	800f802 <RCC_GetSystemClockFreq+0x1e>
 800f7fc:	2b08      	cmp	r3, #8
 800f7fe:	d003      	beq.n	800f808 <RCC_GetSystemClockFreq+0x24>
 800f800:	e009      	b.n	800f816 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800f802:	4b09      	ldr	r3, [pc, #36]	; (800f828 <RCC_GetSystemClockFreq+0x44>)
 800f804:	607b      	str	r3, [r7, #4]
      break;
 800f806:	e009      	b.n	800f81c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800f808:	4b08      	ldr	r3, [pc, #32]	; (800f82c <RCC_GetSystemClockFreq+0x48>)
 800f80a:	607b      	str	r3, [r7, #4]
      break;
 800f80c:	e006      	b.n	800f81c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800f80e:	f000 f83d 	bl	800f88c <RCC_PLL_GetFreqDomain_SYS>
 800f812:	6078      	str	r0, [r7, #4]
      break;
 800f814:	e002      	b.n	800f81c <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800f816:	4b04      	ldr	r3, [pc, #16]	; (800f828 <RCC_GetSystemClockFreq+0x44>)
 800f818:	607b      	str	r3, [r7, #4]
      break;
 800f81a:	bf00      	nop
  }

  return frequency;
 800f81c:	687b      	ldr	r3, [r7, #4]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	00f42400 	.word	0x00f42400
 800f82c:	007a1200 	.word	0x007a1200

0800f830 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800f838:	f7ff ff2c 	bl	800f694 <LL_RCC_GetAHBPrescaler>
 800f83c:	4603      	mov	r3, r0
 800f83e:	091b      	lsrs	r3, r3, #4
 800f840:	f003 030f 	and.w	r3, r3, #15
 800f844:	4a05      	ldr	r2, [pc, #20]	; (800f85c <RCC_GetHCLKClockFreq+0x2c>)
 800f846:	5cd3      	ldrb	r3, [r2, r3]
 800f848:	f003 031f 	and.w	r3, r3, #31
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f852:	4618      	mov	r0, r3
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	0801bbf8 	.word	0x0801bbf8

0800f860 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800f868:	f7ff ff22 	bl	800f6b0 <LL_RCC_GetAPB1Prescaler>
 800f86c:	4603      	mov	r3, r0
 800f86e:	0a1b      	lsrs	r3, r3, #8
 800f870:	4a05      	ldr	r2, [pc, #20]	; (800f888 <RCC_GetPCLK1ClockFreq+0x28>)
 800f872:	5cd3      	ldrb	r3, [r2, r3]
 800f874:	f003 031f 	and.w	r3, r3, #31
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	0801bc08 	.word	0x0801bc08

0800f88c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800f88c:	b590      	push	{r4, r7, lr}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800f892:	f7ff ff2d 	bl	800f6f0 <LL_RCC_PLL_GetMainSource>
 800f896:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d003      	beq.n	800f8a6 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b03      	cmp	r3, #3
 800f8a2:	d003      	beq.n	800f8ac <RCC_PLL_GetFreqDomain_SYS+0x20>
 800f8a4:	e005      	b.n	800f8b2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800f8a6:	4b11      	ldr	r3, [pc, #68]	; (800f8ec <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800f8a8:	607b      	str	r3, [r7, #4]
      break;
 800f8aa:	e005      	b.n	800f8b8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800f8ac:	4b10      	ldr	r3, [pc, #64]	; (800f8f0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800f8ae:	607b      	str	r3, [r7, #4]
      break;
 800f8b0:	e002      	b.n	800f8b8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800f8b2:	4b0e      	ldr	r3, [pc, #56]	; (800f8ec <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800f8b4:	607b      	str	r3, [r7, #4]
      break;
 800f8b6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800f8b8:	f7ff ff28 	bl	800f70c <LL_RCC_PLL_GetN>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	fb03 f402 	mul.w	r4, r3, r2
 800f8c4:	f7ff ff3e 	bl	800f744 <LL_RCC_PLL_GetDivider>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	091b      	lsrs	r3, r3, #4
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	fbb4 f4f3 	udiv	r4, r4, r3
 800f8d2:	f7ff ff29 	bl	800f728 <LL_RCC_PLL_GetR>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	0e5b      	lsrs	r3, r3, #25
 800f8da:	3301      	adds	r3, #1
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd90      	pop	{r4, r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	00f42400 	.word	0x00f42400
 800f8f0:	007a1200 	.word	0x007a1200

0800f8f4 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	601a      	str	r2, [r3, #0]
}
 800f908:	bf00      	nop
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800f91c:	4b08      	ldr	r3, [pc, #32]	; (800f940 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f91e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f920:	4907      	ldr	r1, [pc, #28]	; (800f940 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4313      	orrs	r3, r2
 800f926:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800f928:	4b05      	ldr	r3, [pc, #20]	; (800f940 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f92a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4013      	ands	r3, r2
 800f930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f932:	68fb      	ldr	r3, [r7, #12]
}
 800f934:	bf00      	nop
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	40021000 	.word	0x40021000

0800f944 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a11      	ldr	r2, [pc, #68]	; (800f998 <LL_UCPD_Init+0x54>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d103      	bne.n	800f95e <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f956:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f95a:	f7ff ffdb 	bl	800f914 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff ffc8 	bl	800f8f4 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	4b0c      	ldr	r3, [pc, #48]	; (800f99c <LL_UCPD_Init+0x58>)
 800f96a:	4013      	ands	r3, r2
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	6811      	ldr	r1, [r2, #0]
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	6852      	ldr	r2, [r2, #4]
 800f974:	02d2      	lsls	r2, r2, #11
 800f976:	4311      	orrs	r1, r2
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	6892      	ldr	r2, [r2, #8]
 800f97c:	0192      	lsls	r2, r2, #6
 800f97e:	4311      	orrs	r1, r2
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	68d2      	ldr	r2, [r2, #12]
 800f984:	430a      	orrs	r2, r1
 800f986:	431a      	orrs	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	4000a000 	.word	0x4000a000
 800f99c:	fff10000 	.word	0xfff10000

0800f9a0 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f9ae:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2207      	movs	r2, #7
 800f9b4:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2210      	movs	r2, #16
 800f9ba:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	220d      	movs	r2, #13
 800f9c0:	60da      	str	r2, [r3, #12]
}
 800f9c2:	bf00      	nop
 800f9c4:	370c      	adds	r7, #12
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr
	...

0800f9d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <LL_SetSystemCoreClock+0x1c>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6013      	str	r3, [r2, #0]
}
 800f9de:	bf00      	nop
 800f9e0:	370c      	adds	r7, #12
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	20000140 	.word	0x20000140

0800f9f0 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 800f9f4:	f009 fc40 	bl	8019278 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800f9f8:	2103      	movs	r1, #3
 800f9fa:	4804      	ldr	r0, [pc, #16]	; (800fa0c <USBPD_TRACE_Init+0x1c>)
 800f9fc:	f7f1 fe2c 	bl	8001658 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 800fa00:	2123      	movs	r1, #35	; 0x23
 800fa02:	4803      	ldr	r0, [pc, #12]	; (800fa10 <USBPD_TRACE_Init+0x20>)
 800fa04:	f009 fcba 	bl	801937c <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 800fa08:	bf00      	nop
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	0800fa15 	.word	0x0800fa15
 800fa10:	0801bc30 	.word	0x0801bc30

0800fa14 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	603b      	str	r3, [r7, #0]
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	71fb      	strb	r3, [r7, #7]
 800fa20:	460b      	mov	r3, r1
 800fa22:	71bb      	strb	r3, [r7, #6]
 800fa24:	4613      	mov	r3, r2
 800fa26:	717b      	strb	r3, [r7, #5]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800fa28:	f7fd fbf2 	bl	800d210 <HAL_GetTick>
 800fa2c:	6138      	str	r0, [r7, #16]

  TRACER_EMB_Lock();
 800fa2e:	f009 fd09 	bl	8019444 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	3314      	adds	r3, #20
 800fa36:	4618      	mov	r0, r3
 800fa38:	f009 fda0 	bl	801957c <TRACER_EMB_AllocateBufer>
 800fa3c:	60f8      	str	r0, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa44:	f000 80bd 	beq.w	800fbc2 <USBPD_TRACE_Add+0x1ae>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	82bb      	strh	r3, [r7, #20]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	82fb      	strh	r3, [r7, #22]
 800fa50:	e00a      	b.n	800fa68 <USBPD_TRACE_Add+0x54>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800fa52:	8abb      	ldrh	r3, [r7, #20]
 800fa54:	21fd      	movs	r1, #253	; 0xfd
 800fa56:	4618      	mov	r0, r3
 800fa58:	f009 fc6a 	bl	8019330 <TRACER_EMB_WriteData>
 800fa5c:	8abb      	ldrh	r3, [r7, #20]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800fa62:	8afb      	ldrh	r3, [r7, #22]
 800fa64:	3301      	adds	r3, #1
 800fa66:	82fb      	strh	r3, [r7, #22]
 800fa68:	8afb      	ldrh	r3, [r7, #22]
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d9f1      	bls.n	800fa52 <USBPD_TRACE_Add+0x3e>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800fa6e:	79bb      	ldrb	r3, [r7, #6]
 800fa70:	3301      	adds	r3, #1
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	015b      	lsls	r3, r3, #5
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	f043 0312 	orr.w	r3, r3, #18
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	8abb      	ldrh	r3, [r7, #20]
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f009 fc54 	bl	8019330 <TRACER_EMB_WriteData>
 800fa88:	8abb      	ldrh	r3, [r7, #20]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	82bb      	strh	r3, [r7, #20]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	3309      	adds	r3, #9
 800fa92:	0a1b      	lsrs	r3, r3, #8
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	8abb      	ldrh	r3, [r7, #20]
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f009 fc48 	bl	8019330 <TRACER_EMB_WriteData>
 800faa0:	8abb      	ldrh	r3, [r7, #20]
 800faa2:	3301      	adds	r3, #1
 800faa4:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	3309      	adds	r3, #9
 800faac:	b2da      	uxtb	r2, r3
 800faae:	8abb      	ldrh	r3, [r7, #20]
 800fab0:	4611      	mov	r1, r2
 800fab2:	4618      	mov	r0, r3
 800fab4:	f009 fc3c 	bl	8019330 <TRACER_EMB_WriteData>
 800fab8:	8abb      	ldrh	r3, [r7, #20]
 800faba:	3301      	adds	r3, #1
 800fabc:	82bb      	strh	r3, [r7, #20]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800fabe:	79fa      	ldrb	r2, [r7, #7]
 800fac0:	8abb      	ldrh	r3, [r7, #20]
 800fac2:	4611      	mov	r1, r2
 800fac4:	4618      	mov	r0, r3
 800fac6:	f009 fc33 	bl	8019330 <TRACER_EMB_WriteData>
 800faca:	8abb      	ldrh	r3, [r7, #20]
 800facc:	3301      	adds	r3, #1
 800face:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	8abb      	ldrh	r3, [r7, #20]
 800fad6:	4611      	mov	r1, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	f009 fc29 	bl	8019330 <TRACER_EMB_WriteData>
 800fade:	8abb      	ldrh	r3, [r7, #20]
 800fae0:	3301      	adds	r3, #1
 800fae2:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	0a1b      	lsrs	r3, r3, #8
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	8abb      	ldrh	r3, [r7, #20]
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f009 fc1e 	bl	8019330 <TRACER_EMB_WriteData>
 800faf4:	8abb      	ldrh	r3, [r7, #20]
 800faf6:	3301      	adds	r3, #1
 800faf8:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	0c1b      	lsrs	r3, r3, #16
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	8abb      	ldrh	r3, [r7, #20]
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f009 fc13 	bl	8019330 <TRACER_EMB_WriteData>
 800fb0a:	8abb      	ldrh	r3, [r7, #20]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	0e1b      	lsrs	r3, r3, #24
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	8abb      	ldrh	r3, [r7, #20]
 800fb18:	4611      	mov	r1, r2
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f009 fc08 	bl	8019330 <TRACER_EMB_WriteData>
 800fb20:	8abb      	ldrh	r3, [r7, #20]
 800fb22:	3301      	adds	r3, #1
 800fb24:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800fb26:	79ba      	ldrb	r2, [r7, #6]
 800fb28:	8abb      	ldrh	r3, [r7, #20]
 800fb2a:	4611      	mov	r1, r2
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f009 fbff 	bl	8019330 <TRACER_EMB_WriteData>
 800fb32:	8abb      	ldrh	r3, [r7, #20]
 800fb34:	3301      	adds	r3, #1
 800fb36:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800fb38:	797a      	ldrb	r2, [r7, #5]
 800fb3a:	8abb      	ldrh	r3, [r7, #20]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f009 fbf6 	bl	8019330 <TRACER_EMB_WriteData>
 800fb44:	8abb      	ldrh	r3, [r7, #20]
 800fb46:	3301      	adds	r3, #1
 800fb48:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	0a1b      	lsrs	r3, r3, #8
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	8abb      	ldrh	r3, [r7, #20]
 800fb52:	4611      	mov	r1, r2
 800fb54:	4618      	mov	r0, r3
 800fb56:	f009 fbeb 	bl	8019330 <TRACER_EMB_WriteData>
 800fb5a:	8abb      	ldrh	r3, [r7, #20]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	8abb      	ldrh	r3, [r7, #20]
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f009 fbe1 	bl	8019330 <TRACER_EMB_WriteData>
 800fb6e:	8abb      	ldrh	r3, [r7, #20]
 800fb70:	3301      	adds	r3, #1
 800fb72:	82bb      	strh	r3, [r7, #20]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800fb74:	2300      	movs	r3, #0
 800fb76:	82fb      	strh	r3, [r7, #22]
 800fb78:	e00e      	b.n	800fb98 <USBPD_TRACE_Add+0x184>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800fb7a:	8afb      	ldrh	r3, [r7, #22]
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	4413      	add	r3, r2
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	8abb      	ldrh	r3, [r7, #20]
 800fb84:	4611      	mov	r1, r2
 800fb86:	4618      	mov	r0, r3
 800fb88:	f009 fbd2 	bl	8019330 <TRACER_EMB_WriteData>
 800fb8c:	8abb      	ldrh	r3, [r7, #20]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < Size; index++)
 800fb92:	8afb      	ldrh	r3, [r7, #22]
 800fb94:	3301      	adds	r3, #1
 800fb96:	82fb      	strh	r3, [r7, #22]
 800fb98:	8afb      	ldrh	r3, [r7, #22]
 800fb9a:	6a3a      	ldr	r2, [r7, #32]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d8ec      	bhi.n	800fb7a <USBPD_TRACE_Add+0x166>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800fba0:	2300      	movs	r3, #0
 800fba2:	82fb      	strh	r3, [r7, #22]
 800fba4:	e00a      	b.n	800fbbc <USBPD_TRACE_Add+0x1a8>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800fba6:	8abb      	ldrh	r3, [r7, #20]
 800fba8:	21a5      	movs	r1, #165	; 0xa5
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f009 fbc0 	bl	8019330 <TRACER_EMB_WriteData>
 800fbb0:	8abb      	ldrh	r3, [r7, #20]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800fbb6:	8afb      	ldrh	r3, [r7, #22]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	82fb      	strh	r3, [r7, #22]
 800fbbc:	8afb      	ldrh	r3, [r7, #22]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d9f1      	bls.n	800fba6 <USBPD_TRACE_Add+0x192>
    }
  }

  TRACER_EMB_UnLock();
 800fbc2:	f009 fc5f 	bl	8019484 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800fbc6:	f009 fc7d 	bl	80194c4 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 800fbca:	bf00      	nop
 800fbcc:	3718      	adds	r7, #24
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
	...

0800fbd4 <__NVIC_EnableIRQ>:
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	db0b      	blt.n	800fbfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fbe6:	79fb      	ldrb	r3, [r7, #7]
 800fbe8:	f003 021f 	and.w	r2, r3, #31
 800fbec:	4907      	ldr	r1, [pc, #28]	; (800fc0c <__NVIC_EnableIRQ+0x38>)
 800fbee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbf2:	095b      	lsrs	r3, r3, #5
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	fa00 f202 	lsl.w	r2, r0, r2
 800fbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fbfe:	bf00      	nop
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	e000e100 	.word	0xe000e100

0800fc10 <__NVIC_SetPriority>:
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	4603      	mov	r3, r0
 800fc18:	6039      	str	r1, [r7, #0]
 800fc1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	db0a      	blt.n	800fc3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	490c      	ldr	r1, [pc, #48]	; (800fc5c <__NVIC_SetPriority+0x4c>)
 800fc2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc2e:	0112      	lsls	r2, r2, #4
 800fc30:	b2d2      	uxtb	r2, r2
 800fc32:	440b      	add	r3, r1
 800fc34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fc38:	e00a      	b.n	800fc50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	4908      	ldr	r1, [pc, #32]	; (800fc60 <__NVIC_SetPriority+0x50>)
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	f003 030f 	and.w	r3, r3, #15
 800fc46:	3b04      	subs	r3, #4
 800fc48:	0112      	lsls	r2, r2, #4
 800fc4a:	b2d2      	uxtb	r2, r2
 800fc4c:	440b      	add	r3, r1
 800fc4e:	761a      	strb	r2, [r3, #24]
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	e000e100 	.word	0xe000e100
 800fc60:	e000ed00 	.word	0xe000ed00

0800fc64 <LL_AHB2_GRP1_EnableClock>:
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800fc6c:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800fc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc70:	4907      	ldr	r1, [pc, #28]	; (800fc90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800fc7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4013      	ands	r3, r2
 800fc80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fc82:	68fb      	ldr	r3, [r7, #12]
}
 800fc84:	bf00      	nop
 800fc86:	3714      	adds	r7, #20
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr
 800fc90:	40021000 	.word	0x40021000

0800fc94 <LL_GPIO_SetPinMode>:
{
 800fc94:	b480      	push	{r7}
 800fc96:	b08b      	sub	sp, #44	; 0x2c
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	fa93 f3a3 	rbit	r3, r3
 800fcae:	613b      	str	r3, [r7, #16]
  return result;
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800fcba:	2320      	movs	r3, #32
 800fcbc:	e003      	b.n	800fcc6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	fab3 f383 	clz	r3, r3
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	2103      	movs	r1, #3
 800fcca:	fa01 f303 	lsl.w	r3, r1, r3
 800fcce:	43db      	mvns	r3, r3
 800fcd0:	401a      	ands	r2, r3
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	fa93 f3a3 	rbit	r3, r3
 800fcdc:	61fb      	str	r3, [r7, #28]
  return result;
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d101      	bne.n	800fcec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800fce8:	2320      	movs	r3, #32
 800fcea:	e003      	b.n	800fcf4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800fcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcee:	fab3 f383 	clz	r3, r3
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	6879      	ldr	r1, [r7, #4]
 800fcf8:	fa01 f303 	lsl.w	r3, r1, r3
 800fcfc:	431a      	orrs	r2, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	601a      	str	r2, [r3, #0]
}
 800fd02:	bf00      	nop
 800fd04:	372c      	adds	r7, #44	; 0x2c
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <LL_GPIO_SetPinPull>:
{
 800fd0e:	b480      	push	{r7}
 800fd10:	b08b      	sub	sp, #44	; 0x2c
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	60f8      	str	r0, [r7, #12]
 800fd16:	60b9      	str	r1, [r7, #8]
 800fd18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	68da      	ldr	r2, [r3, #12]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	fa93 f3a3 	rbit	r3, r3
 800fd28:	613b      	str	r3, [r7, #16]
  return result;
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d101      	bne.n	800fd38 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800fd34:	2320      	movs	r3, #32
 800fd36:	e003      	b.n	800fd40 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	fab3 f383 	clz	r3, r3
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	2103      	movs	r1, #3
 800fd44:	fa01 f303 	lsl.w	r3, r1, r3
 800fd48:	43db      	mvns	r3, r3
 800fd4a:	401a      	ands	r2, r3
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd50:	6a3b      	ldr	r3, [r7, #32]
 800fd52:	fa93 f3a3 	rbit	r3, r3
 800fd56:	61fb      	str	r3, [r7, #28]
  return result;
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d101      	bne.n	800fd66 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800fd62:	2320      	movs	r3, #32
 800fd64:	e003      	b.n	800fd6e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	fab3 f383 	clz	r3, r3
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	6879      	ldr	r1, [r7, #4]
 800fd72:	fa01 f303 	lsl.w	r3, r1, r3
 800fd76:	431a      	orrs	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	60da      	str	r2, [r3, #12]
}
 800fd7c:	bf00      	nop
 800fd7e:	372c      	adds	r7, #44	; 0x2c
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <LL_UCPD_Enable>:
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	601a      	str	r2, [r3, #0]
}
 800fd9c:	bf00      	nop
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fdba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	431a      	orrs	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
}
 800fdc6:	bf00      	nop
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800fdd2:	b480      	push	{r7}
 800fdd4:	b083      	sub	sp, #12
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	68db      	ldr	r3, [r3, #12]
 800fde0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	431a      	orrs	r2, r3
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	60da      	str	r2, [r3, #12]
}
 800fdec:	bf00      	nop
 800fdee:	370c      	adds	r7, #12
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	f023 0220 	bic.w	r2, r3, #32
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	60da      	str	r2, [r3, #12]
}
 800fe0c:	bf00      	nop
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	611a      	str	r2, [r3, #16]
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	611a      	str	r2, [r3, #16]
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800fe5c:	4b05      	ldr	r3, [pc, #20]	; (800fe74 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	4a04      	ldr	r2, [pc, #16]	; (800fe74 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800fe62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe66:	6093      	str	r3, [r2, #8]
}
 800fe68:	bf00      	nop
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	40007000 	.word	0x40007000

0800fe78 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b08b      	sub	sp, #44	; 0x2c
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
 800fe82:	603b      	str	r3, [r7, #0]
 800fe84:	4603      	mov	r3, r0
 800fe86:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800fe88:	7bfb      	ldrb	r3, [r7, #15]
 800fe8a:	011b      	lsls	r3, r3, #4
 800fe8c:	4a89      	ldr	r2, [pc, #548]	; (80100b4 <CAD_Init+0x23c>)
 800fe8e:	4413      	add	r3, r2
 800fe90:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800fe92:	7bfa      	ldrb	r2, [r7, #15]
 800fe94:	4988      	ldr	r1, [pc, #544]	; (80100b8 <CAD_Init+0x240>)
 800fe96:	4613      	mov	r3, r2
 800fe98:	011b      	lsls	r3, r3, #4
 800fe9a:	1a9b      	subs	r3, r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	440b      	add	r3, r1
 800fea0:	3310      	adds	r3, #16
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800fea6:	7bfa      	ldrb	r2, [r7, #15]
 800fea8:	4983      	ldr	r1, [pc, #524]	; (80100b8 <CAD_Init+0x240>)
 800feaa:	4613      	mov	r3, r2
 800feac:	011b      	lsls	r3, r3, #4
 800feae:	1a9b      	subs	r3, r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	440b      	add	r3, r1
 800feb4:	330c      	adds	r3, #12
 800feb6:	68ba      	ldr	r2, [r7, #8]
 800feb8:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800feba:	7bfa      	ldrb	r2, [r7, #15]
 800febc:	497e      	ldr	r1, [pc, #504]	; (80100b8 <CAD_Init+0x240>)
 800febe:	4613      	mov	r3, r2
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	440b      	add	r3, r1
 800fec8:	330c      	adds	r3, #12
 800feca:	6819      	ldr	r1, [r3, #0]
 800fecc:	7bfa      	ldrb	r2, [r7, #15]
 800fece:	487a      	ldr	r0, [pc, #488]	; (80100b8 <CAD_Init+0x240>)
 800fed0:	4613      	mov	r3, r2
 800fed2:	011b      	lsls	r3, r3, #4
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	009b      	lsls	r3, r3, #2
 800fed8:	4403      	add	r3, r0
 800feda:	3310      	adds	r3, #16
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	794b      	ldrb	r3, [r1, #5]
 800fee0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800fee4:	b2d9      	uxtb	r1, r3
 800fee6:	7893      	ldrb	r3, [r2, #2]
 800fee8:	f361 0301 	bfi	r3, r1, #0, #2
 800feec:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800feee:	7bfa      	ldrb	r2, [r7, #15]
 800fef0:	4971      	ldr	r1, [pc, #452]	; (80100b8 <CAD_Init+0x240>)
 800fef2:	4613      	mov	r3, r2
 800fef4:	011b      	lsls	r3, r3, #4
 800fef6:	1a9b      	subs	r3, r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	440b      	add	r3, r1
 800fefc:	3310      	adds	r3, #16
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	7893      	ldrb	r3, [r2, #2]
 800ff02:	f36f 0383 	bfc	r3, #2, #2
 800ff06:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800ff08:	2210      	movs	r2, #16
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff0e:	f00a fa63 	bl	801a3d8 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800ff12:	7bfa      	ldrb	r2, [r7, #15]
 800ff14:	4968      	ldr	r1, [pc, #416]	; (80100b8 <CAD_Init+0x240>)
 800ff16:	4613      	mov	r3, r2
 800ff18:	011b      	lsls	r3, r3, #4
 800ff1a:	1a9b      	subs	r3, r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	440b      	add	r3, r1
 800ff20:	332c      	adds	r3, #44	; 0x2c
 800ff22:	683a      	ldr	r2, [r7, #0]
 800ff24:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800ff26:	7bfc      	ldrb	r4, [r7, #15]
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f001 f91e 	bl	801116c <USBPD_HW_GetUSPDInstance>
 800ff30:	4602      	mov	r2, r0
 800ff32:	4961      	ldr	r1, [pc, #388]	; (80100b8 <CAD_Init+0x240>)
 800ff34:	4623      	mov	r3, r4
 800ff36:	011b      	lsls	r3, r3, #4
 800ff38:	1b1b      	subs	r3, r3, r4
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	440b      	add	r3, r1
 800ff3e:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800ff40:	f107 0314 	add.w	r3, r7, #20
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff fd2b 	bl	800f9a0 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800ff4a:	7bfa      	ldrb	r2, [r7, #15]
 800ff4c:	495a      	ldr	r1, [pc, #360]	; (80100b8 <CAD_Init+0x240>)
 800ff4e:	4613      	mov	r3, r2
 800ff50:	011b      	lsls	r3, r3, #4
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	440b      	add	r3, r1
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f107 0214 	add.w	r2, r7, #20
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fcef 	bl	800f944 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800ff66:	7bfa      	ldrb	r2, [r7, #15]
 800ff68:	4953      	ldr	r1, [pc, #332]	; (80100b8 <CAD_Init+0x240>)
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	011b      	lsls	r3, r3, #4
 800ff6e:	1a9b      	subs	r3, r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	440b      	add	r3, r1
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff ff14 	bl	800fda8 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800ff80:	7bfa      	ldrb	r2, [r7, #15]
 800ff82:	494d      	ldr	r1, [pc, #308]	; (80100b8 <CAD_Init+0x240>)
 800ff84:	4613      	mov	r3, r2
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	1a9b      	subs	r3, r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	440b      	add	r3, r1
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff ff1c 	bl	800fdd2 <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 800ff9a:	f7ff ff5d 	bl	800fe58 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 800ff9e:	2002      	movs	r0, #2
 800ffa0:	f7ff fe60 	bl	800fc64 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 800ffa4:	2203      	movs	r2, #3
 800ffa6:	2140      	movs	r1, #64	; 0x40
 800ffa8:	4844      	ldr	r0, [pc, #272]	; (80100bc <CAD_Init+0x244>)
 800ffaa:	f7ff fe73 	bl	800fc94 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 800ffae:	2203      	movs	r2, #3
 800ffb0:	2110      	movs	r1, #16
 800ffb2:	4842      	ldr	r0, [pc, #264]	; (80100bc <CAD_Init+0x244>)
 800ffb4:	f7ff fe6e 	bl	800fc94 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2140      	movs	r1, #64	; 0x40
 800ffbc:	483f      	ldr	r0, [pc, #252]	; (80100bc <CAD_Init+0x244>)
 800ffbe:	f7ff fea6 	bl	800fd0e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	2110      	movs	r1, #16
 800ffc6:	483d      	ldr	r0, [pc, #244]	; (80100bc <CAD_Init+0x244>)
 800ffc8:	f7ff fea1 	bl	800fd0e <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fb ff8a 	bl	800bee8 <BSP_USBPD_PWR_Init>

#if defined(TCPP0203_SUPPORT)
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	493a      	ldr	r1, [pc, #232]	; (80100c0 <CAD_Init+0x248>)
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fc fb5b 	bl	800c694 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800ffde:	7bfa      	ldrb	r2, [r7, #15]
 800ffe0:	4935      	ldr	r1, [pc, #212]	; (80100b8 <CAD_Init+0x240>)
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	011b      	lsls	r3, r3, #4
 800ffe6:	1a9b      	subs	r3, r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	440b      	add	r3, r1
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff feca 	bl	800fd88 <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800fff4:	7bfa      	ldrb	r2, [r7, #15]
 800fff6:	4930      	ldr	r1, [pc, #192]	; (80100b8 <CAD_Init+0x240>)
 800fff8:	4613      	mov	r3, r2
 800fffa:	011b      	lsls	r3, r3, #4
 800fffc:	1a9b      	subs	r3, r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	440b      	add	r3, r1
 8010002:	3310      	adds	r3, #16
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f003 0304 	and.w	r3, r3, #4
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	d009      	beq.n	8010026 <CAD_Init+0x1ae>
  {
    USBPDM1_AssertRp(PortNum);
 8010012:	7bfb      	ldrb	r3, [r7, #15]
 8010014:	4618      	mov	r0, r3
 8010016:	f002 f91b 	bl	8012250 <USBPDM1_AssertRp>
#if defined(TCPP0203_SUPPORT)
    /* Switch to Low Power mode */
    BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 801001a:	7bfb      	ldrb	r3, [r7, #15]
 801001c:	2102      	movs	r1, #2
 801001e:	4618      	mov	r0, r3
 8010020:	f7fc f862 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>
 8010024:	e008      	b.n	8010038 <CAD_Init+0x1c0>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8010026:	7bfb      	ldrb	r3, [r7, #15]
 8010028:	4618      	mov	r0, r3
 801002a:	f002 f9b9 	bl	80123a0 <USBPDM1_AssertRd>
#if defined(TCPP0203_SUPPORT)
    /* Switch to Low Power mode */
    BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2102      	movs	r1, #2
 8010032:	4618      	mov	r0, r3
 8010034:	f7fc f858 	bl	800c0e8 <BSP_USBPD_PWR_SetPowerMode>
#endif /* _SNK || _DRP */

  /* Set the state machine according the SW configuration */
#if !defined(USBPDCORE_LIB_NO_PD)
#if defined(_DRP)
  if (Ports[PortNum].settings->CAD_RoleToggle == USBPD_TRUE)
 8010038:	7bfa      	ldrb	r2, [r7, #15]
 801003a:	491f      	ldr	r1, [pc, #124]	; (80100b8 <CAD_Init+0x240>)
 801003c:	4613      	mov	r3, r2
 801003e:	011b      	lsls	r3, r3, #4
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	440b      	add	r3, r1
 8010046:	330c      	adds	r3, #12
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	795b      	ldrb	r3, [r3, #5]
 801004c:	f003 0320 	and.w	r3, r3, #32
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	d015      	beq.n	8010082 <CAD_Init+0x20a>
  {
    _handle->CAD_PtrStateMachine = CAD_StateMachine_DRP;
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	4a1a      	ldr	r2, [pc, #104]	; (80100c4 <CAD_Init+0x24c>)
 801005a:	60da      	str	r2, [r3, #12]
    _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 801005c:	7bfa      	ldrb	r2, [r7, #15]
 801005e:	4916      	ldr	r1, [pc, #88]	; (80100b8 <CAD_Init+0x240>)
 8010060:	4613      	mov	r3, r2
 8010062:	011b      	lsls	r3, r3, #4
 8010064:	1a9b      	subs	r3, r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	440b      	add	r3, r1
 801006a:	330c      	adds	r3, #12
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	795b      	ldrb	r3, [r3, #5]
 8010070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010074:	b2d9      	uxtb	r1, r3
 8010076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010078:	7853      	ldrb	r3, [r2, #1]
 801007a:	f361 1386 	bfi	r3, r1, #6, #1
 801007e:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8010080:	e014      	b.n	80100ac <CAD_Init+0x234>
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8010082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010084:	4a10      	ldr	r2, [pc, #64]	; (80100c8 <CAD_Init+0x250>)
 8010086:	60da      	str	r2, [r3, #12]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8010088:	7bfa      	ldrb	r2, [r7, #15]
 801008a:	490b      	ldr	r1, [pc, #44]	; (80100b8 <CAD_Init+0x240>)
 801008c:	4613      	mov	r3, r2
 801008e:	011b      	lsls	r3, r3, #4
 8010090:	1a9b      	subs	r3, r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	440b      	add	r3, r1
 8010096:	330c      	adds	r3, #12
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	795b      	ldrb	r3, [r3, #5]
 801009c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80100a0:	b2d9      	uxtb	r1, r3
 80100a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100a4:	7853      	ldrb	r3, [r2, #1]
 80100a6:	f361 13c7 	bfi	r3, r1, #7, #1
 80100aa:	7053      	strb	r3, [r2, #1]
}
 80100ac:	bf00      	nop
 80100ae:	372c      	adds	r7, #44	; 0x2c
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd90      	pop	{r4, r7, pc}
 80100b4:	20000b38 	.word	0x20000b38
 80100b8:	20000b54 	.word	0x20000b54
 80100bc:	48000400 	.word	0x48000400
 80100c0:	080110e9 	.word	0x080110e9
 80100c4:	0801020d 	.word	0x0801020d
 80100c8:	08010199 	.word	0x08010199

080100cc <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	4618      	mov	r0, r3
 80100da:	f002 f9f7 	bl	80124cc <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	4a0a      	ldr	r2, [pc, #40]	; (801010c <CAD_Enter_ErrorRecovery+0x40>)
 80100e2:	011b      	lsls	r3, r3, #4
 80100e4:	441a      	add	r2, r3
 80100e6:	7813      	ldrb	r3, [r2, #0]
 80100e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ec:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80100ee:	79fa      	ldrb	r2, [r7, #7]
 80100f0:	4907      	ldr	r1, [pc, #28]	; (8010110 <CAD_Enter_ErrorRecovery+0x44>)
 80100f2:	4613      	mov	r3, r2
 80100f4:	011b      	lsls	r3, r3, #4
 80100f6:	1a9b      	subs	r3, r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	440b      	add	r3, r1
 80100fc:	332c      	adds	r3, #44	; 0x2c
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4798      	blx	r3
}
 8010102:	bf00      	nop
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20000b38 	.word	0x20000b38
 8010110:	20000b54 	.word	0x20000b54

08010114 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	6039      	str	r1, [r7, #0]
 801011e:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8010120:	79fa      	ldrb	r2, [r7, #7]
 8010122:	4913      	ldr	r1, [pc, #76]	; (8010170 <CAD_SRC_Set_ResistorRp+0x5c>)
 8010124:	4613      	mov	r3, r2
 8010126:	011b      	lsls	r3, r3, #4
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	440b      	add	r3, r1
 801012e:	3310      	adds	r3, #16
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	f003 0303 	and.w	r3, r3, #3
 8010138:	b2d9      	uxtb	r1, r3
 801013a:	7893      	ldrb	r3, [r2, #2]
 801013c:	f361 0301 	bfi	r3, r1, #0, #2
 8010140:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8010142:	79fb      	ldrb	r3, [r7, #7]
 8010144:	4a0b      	ldr	r2, [pc, #44]	; (8010174 <CAD_SRC_Set_ResistorRp+0x60>)
 8010146:	011b      	lsls	r3, r3, #4
 8010148:	441a      	add	r2, r3
 801014a:	7853      	ldrb	r3, [r2, #1]
 801014c:	f043 0301 	orr.w	r3, r3, #1
 8010150:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8010152:	79fa      	ldrb	r2, [r7, #7]
 8010154:	4906      	ldr	r1, [pc, #24]	; (8010170 <CAD_SRC_Set_ResistorRp+0x5c>)
 8010156:	4613      	mov	r3, r2
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	1a9b      	subs	r3, r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	440b      	add	r3, r1
 8010160:	332c      	adds	r3, #44	; 0x2c
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4798      	blx	r3
  return 0;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	20000b54 	.word	0x20000b54
 8010174:	20000b38 	.word	0x20000b38

08010178 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8010184:	79fb      	ldrb	r3, [r7, #7]
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff ffc3 	bl	8010114 <CAD_SRC_Set_ResistorRp>
 801018e:	4603      	mov	r3, r0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	4603      	mov	r3, r0
 80101a0:	60b9      	str	r1, [r7, #8]
 80101a2:	607a      	str	r2, [r7, #4]
 80101a4:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	011b      	lsls	r3, r3, #4
 80101aa:	4a17      	ldr	r2, [pc, #92]	; (8010208 <CAD_StateMachine_SNK+0x70>)
 80101ac:	4413      	add	r3, r2
 80101ae:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80101b0:	2302      	movs	r3, #2
 80101b2:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	785b      	ldrb	r3, [r3, #1]
 80101b8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b03      	cmp	r3, #3
 80101c0:	d014      	beq.n	80101ec <CAD_StateMachine_SNK+0x54>
 80101c2:	2b03      	cmp	r3, #3
 80101c4:	dc1a      	bgt.n	80101fc <CAD_StateMachine_SNK+0x64>
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d002      	beq.n	80101d0 <CAD_StateMachine_SNK+0x38>
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	d006      	beq.n	80101dc <CAD_StateMachine_SNK+0x44>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 80101ce:	e015      	b.n	80101fc <CAD_StateMachine_SNK+0x64>
      _timing = ManageStateDetached_SNK(PortNum);
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fae6 	bl	80107a4 <ManageStateDetached_SNK>
 80101d8:	6178      	str	r0, [r7, #20]
      break;
 80101da:	e010      	b.n	80101fe <CAD_StateMachine_SNK+0x66>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	68b9      	ldr	r1, [r7, #8]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f000 fe9e 	bl	8010f24 <ManageStateAttachedWait_SNK>
 80101e8:	6178      	str	r0, [r7, #20]
      break;
 80101ea:	e008      	b.n	80101fe <CAD_StateMachine_SNK+0x66>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80101ec:	7bfb      	ldrb	r3, [r7, #15]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 ff16 	bl	8011024 <ManageStateAttached_SNK>
 80101f8:	6178      	str	r0, [r7, #20]
      break;
 80101fa:	e000      	b.n	80101fe <CAD_StateMachine_SNK+0x66>
      break;
 80101fc:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80101fe:	697b      	ldr	r3, [r7, #20]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	20000b38 	.word	0x20000b38

0801020c <CAD_StateMachine_DRP>:
#endif /* _SRC */

#if defined(_DRP)
/* function to handle DRP */
uint32_t CAD_StateMachine_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b086      	sub	sp, #24
 8010210:	af00      	add	r7, sp, #0
 8010212:	4603      	mov	r3, r0
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801021a:	7bfb      	ldrb	r3, [r7, #15]
 801021c:	011b      	lsls	r3, r3, #4
 801021e:	4a67      	ldr	r2, [pc, #412]	; (80103bc <CAD_StateMachine_DRP+0x1b0>)
 8010220:	4413      	add	r3, r2
 8010222:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010224:	2302      	movs	r3, #2
 8010226:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	785b      	ldrb	r3, [r3, #1]
 801022c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8010230:	b2db      	uxtb	r3, r3
 8010232:	3b01      	subs	r3, #1
 8010234:	2b0a      	cmp	r3, #10
 8010236:	f200 80bb 	bhi.w	80103b0 <CAD_StateMachine_DRP+0x1a4>
 801023a:	a201      	add	r2, pc, #4	; (adr r2, 8010240 <CAD_StateMachine_DRP+0x34>)
 801023c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010240:	08010375 	.word	0x08010375
 8010244:	08010381 	.word	0x08010381
 8010248:	080103a1 	.word	0x080103a1
 801024c:	08010391 	.word	0x08010391
 8010250:	080103a1 	.word	0x080103a1
 8010254:	080103b1 	.word	0x080103b1
 8010258:	080103b1 	.word	0x080103b1
 801025c:	08010287 	.word	0x08010287
 8010260:	08010287 	.word	0x08010287
 8010264:	080103b1 	.word	0x080103b1
 8010268:	0801026d 	.word	0x0801026d
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801026c:	7bfb      	ldrb	r3, [r7, #15]
 801026e:	4618      	mov	r0, r3
 8010270:	f7fc f882 	bl	800c378 <BSP_USBPD_PWR_VBUSDeInit>
      _timing = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8010278:	693a      	ldr	r2, [r7, #16]
 801027a:	7853      	ldrb	r3, [r2, #1]
 801027c:	2109      	movs	r1, #9
 801027e:	f361 0345 	bfi	r3, r1, #1, #5
 8010282:	7053      	strb	r3, [r2, #1]
      break;
 8010284:	e095      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SRC:
    case USBPD_CAD_STATE_SWITCH_TO_SNK:
    {
      LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8010286:	7bfa      	ldrb	r2, [r7, #15]
 8010288:	494d      	ldr	r1, [pc, #308]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 801028a:	4613      	mov	r3, r2
 801028c:	011b      	lsls	r3, r3, #4
 801028e:	1a9b      	subs	r3, r3, r2
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	440b      	add	r3, r1
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fdae 	bl	800fdf8 <LL_UCPD_RxDisable>
      if (USBPD_CAD_STATE_SWITCH_TO_SRC == _handle->cstate)
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	785b      	ldrb	r3, [r3, #1]
 80102a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b10      	cmp	r3, #16
 80102a8:	d128      	bne.n	80102fc <CAD_StateMachine_DRP+0xf0>
      {
        USBPDM1_AssertRp(PortNum);
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f001 ffcf 	bl	8012250 <USBPDM1_AssertRp>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 80102b2:	7bfa      	ldrb	r2, [r7, #15]
 80102b4:	4942      	ldr	r1, [pc, #264]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 80102b6:	4613      	mov	r3, r2
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	440b      	add	r3, r1
 80102c0:	3310      	adds	r3, #16
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	7813      	ldrb	r3, [r2, #0]
 80102c6:	f043 0304 	orr.w	r3, r3, #4
 80102ca:	7013      	strb	r3, [r2, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 80102cc:	7bfa      	ldrb	r2, [r7, #15]
 80102ce:	493c      	ldr	r1, [pc, #240]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 80102d0:	4613      	mov	r3, r2
 80102d2:	011b      	lsls	r3, r3, #4
 80102d4:	1a9b      	subs	r3, r3, r2
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	440b      	add	r3, r1
 80102da:	3310      	adds	r3, #16
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	7813      	ldrb	r3, [r2, #0]
 80102e0:	f043 0308 	orr.w	r3, r3, #8
 80102e4:	7013      	strb	r3, [r2, #0]
        _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 80102e6:	7bfa      	ldrb	r2, [r7, #15]
 80102e8:	4935      	ldr	r1, [pc, #212]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 80102ea:	4613      	mov	r3, r2
 80102ec:	011b      	lsls	r3, r3, #4
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	440b      	add	r3, r1
 80102f4:	330c      	adds	r3, #12
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	79db      	ldrb	r3, [r3, #7]
 80102fa:	617b      	str	r3, [r7, #20]
      }
      if (USBPD_CAD_STATE_SWITCH_TO_SNK == _handle->cstate)
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	785b      	ldrb	r3, [r3, #1]
 8010300:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010304:	b2db      	uxtb	r3, r3
 8010306:	2b12      	cmp	r3, #18
 8010308:	d128      	bne.n	801035c <CAD_StateMachine_DRP+0x150>
      {
        USBPDM1_AssertRd(PortNum);
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	4618      	mov	r0, r3
 801030e:	f002 f847 	bl	80123a0 <USBPDM1_AssertRd>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 8010312:	7bfa      	ldrb	r2, [r7, #15]
 8010314:	492a      	ldr	r1, [pc, #168]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 8010316:	4613      	mov	r3, r2
 8010318:	011b      	lsls	r3, r3, #4
 801031a:	1a9b      	subs	r3, r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	440b      	add	r3, r1
 8010320:	3310      	adds	r3, #16
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	7813      	ldrb	r3, [r2, #0]
 8010326:	f36f 0382 	bfc	r3, #2, #1
 801032a:	7013      	strb	r3, [r2, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 801032c:	7bfa      	ldrb	r2, [r7, #15]
 801032e:	4924      	ldr	r1, [pc, #144]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 8010330:	4613      	mov	r3, r2
 8010332:	011b      	lsls	r3, r3, #4
 8010334:	1a9b      	subs	r3, r3, r2
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	440b      	add	r3, r1
 801033a:	3310      	adds	r3, #16
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	7813      	ldrb	r3, [r2, #0]
 8010340:	f36f 03c3 	bfc	r3, #3, #1
 8010344:	7013      	strb	r3, [r2, #0]
        _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 8010346:	7bfa      	ldrb	r2, [r7, #15]
 8010348:	491d      	ldr	r1, [pc, #116]	; (80103c0 <CAD_StateMachine_DRP+0x1b4>)
 801034a:	4613      	mov	r3, r2
 801034c:	011b      	lsls	r3, r3, #4
 801034e:	1a9b      	subs	r3, r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	440b      	add	r3, r1
 8010354:	330c      	adds	r3, #12
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	799b      	ldrb	r3, [r3, #6]
 801035a:	617b      	str	r3, [r7, #20]
      }
      _handle->CAD_tToggle_start = HAL_GetTick();
 801035c:	f7fc ff58 	bl	800d210 <HAL_GetTick>
 8010360:	4602      	mov	r2, r0
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010366:	693a      	ldr	r2, [r7, #16]
 8010368:	7853      	ldrb	r3, [r2, #1]
 801036a:	2101      	movs	r1, #1
 801036c:	f361 0345 	bfi	r3, r1, #1, #5
 8010370:	7053      	strb	r3, [r2, #1]
    }
    break;
 8010372:	e01e      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>

    case USBPD_CAD_STATE_DETACHED:
      _timing = ManageStateDetached_DRP(PortNum);
 8010374:	7bfb      	ldrb	r3, [r7, #15]
 8010376:	4618      	mov	r0, r3
 8010378:	f000 faac 	bl	80108d4 <ManageStateDetached_DRP>
 801037c:	6178      	str	r0, [r7, #20]
      break;
 801037e:	e018      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>

    /*CAD STATE ATTACHED WAIT*/
    case USBPD_CAD_STATE_ATTACHED_WAIT:
      _timing = ManageStateAttachedWait_DRP(PortNum, pEvent, pCCXX);
 8010380:	7bfb      	ldrb	r3, [r7, #15]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	68b9      	ldr	r1, [r7, #8]
 8010386:	4618      	mov	r0, r3
 8010388:	f000 fd00 	bl	8010d8c <ManageStateAttachedWait_DRP>
 801038c:	6178      	str	r0, [r7, #20]
      break;
 801038e:	e010      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>
    }
#endif /* _ACCESSORY_SRC */

    /* CAD ELECTRONIC CABLE ATTACHED */
    case USBPD_CAD_STATE_EMC :
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 8010390:	7bfb      	ldrb	r3, [r7, #15]
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	68b9      	ldr	r1, [r7, #8]
 8010396:	4618      	mov	r0, r3
 8010398:	f000 fc46 	bl	8010c28 <ManageStateEMC>
 801039c:	6178      	str	r0, [r7, #20]
      break;
 801039e:	e008      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
      _timing = ManageStateAttached_DRP(PortNum, pEvent, pCCXX);
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	68b9      	ldr	r1, [r7, #8]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fcae 	bl	8010d08 <ManageStateAttached_DRP>
 80103ac:	6178      	str	r0, [r7, #20]
      break;
 80103ae:	e000      	b.n	80103b2 <CAD_StateMachine_DRP+0x1a6>

    default :
      break;
 80103b0:	bf00      	nop
  }

  return _timing;
 80103b2:	697b      	ldr	r3, [r7, #20]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3718      	adds	r7, #24
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20000b38 	.word	0x20000b38
 80103c0:	20000b54 	.word	0x20000b54

080103c4 <CAD_StateMachine>:
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	4603      	mov	r3, r0
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	4a7a      	ldr	r2, [pc, #488]	; (80105c0 <CAD_StateMachine+0x1fc>)
 80103d8:	4413      	add	r3, r2
 80103da:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80103dc:	2302      	movs	r3, #2
 80103de:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	2200      	movs	r2, #0
 80103e4:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 80103e6:	7bfa      	ldrb	r2, [r7, #15]
 80103e8:	4976      	ldr	r1, [pc, #472]	; (80105c4 <CAD_StateMachine+0x200>)
 80103ea:	4613      	mov	r3, r2
 80103ec:	011b      	lsls	r3, r3, #4
 80103ee:	1a9b      	subs	r3, r3, r2
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	440b      	add	r3, r1
 80103f4:	3310      	adds	r3, #16
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	f003 0310 	and.w	r3, r3, #16
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b00      	cmp	r3, #0
 8010402:	d001      	beq.n	8010408 <CAD_StateMachine+0x44>
  {
    return _timing;
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	e0d6      	b.n	80105b6 <CAD_StateMachine+0x1f2>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	d017      	beq.n	8010446 <CAD_StateMachine+0x82>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	7813      	ldrb	r3, [r2, #0]
 801041a:	f36f 13c7 	bfc	r3, #7, #1
 801041e:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8010420:	693a      	ldr	r2, [r7, #16]
 8010422:	7853      	ldrb	r3, [r2, #1]
 8010424:	210c      	movs	r1, #12
 8010426:	f361 0345 	bfi	r3, r1, #1, #5
 801042a:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	785b      	ldrb	r3, [r3, #1]
 8010430:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8010434:	b2db      	uxtb	r3, r3
 8010436:	461a      	mov	r2, r3
 8010438:	7bf9      	ldrb	r1, [r7, #15]
 801043a:	2300      	movs	r3, #0
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	2300      	movs	r3, #0
 8010440:	2005      	movs	r0, #5
 8010442:	f7ff fae7 	bl	800fa14 <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	785b      	ldrb	r3, [r3, #1]
 801044a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801044e:	b2db      	uxtb	r3, r3
 8010450:	2b0d      	cmp	r3, #13
 8010452:	d057      	beq.n	8010504 <CAD_StateMachine+0x140>
 8010454:	2b0d      	cmp	r3, #13
 8010456:	f300 8081 	bgt.w	801055c <CAD_StateMachine+0x198>
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <CAD_StateMachine+0xa0>
 801045e:	2b0c      	cmp	r3, #12
 8010460:	d029      	beq.n	80104b6 <CAD_StateMachine+0xf2>
 8010462:	e07b      	b.n	801055c <CAD_StateMachine+0x198>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8010464:	7bfa      	ldrb	r2, [r7, #15]
 8010466:	4957      	ldr	r1, [pc, #348]	; (80105c4 <CAD_StateMachine+0x200>)
 8010468:	4613      	mov	r3, r2
 801046a:	011b      	lsls	r3, r3, #4
 801046c:	1a9b      	subs	r3, r3, r2
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	440b      	add	r3, r1
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4618      	mov	r0, r3
 8010476:	f7ff fccf 	bl	800fe18 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 801047a:	7bfa      	ldrb	r2, [r7, #15]
 801047c:	4951      	ldr	r1, [pc, #324]	; (80105c4 <CAD_StateMachine+0x200>)
 801047e:	4613      	mov	r3, r2
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	1a9b      	subs	r3, r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	440b      	add	r3, r1
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4618      	mov	r0, r3
 801048c:	f7ff fcd4 	bl	800fe38 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      UCPD_INSTANCE0_ENABLEIRQ;
 8010490:	2104      	movs	r1, #4
 8010492:	203f      	movs	r0, #63	; 0x3f
 8010494:	f7ff fbbc 	bl	800fc10 <__NVIC_SetPriority>
 8010498:	203f      	movs	r0, #63	; 0x3f
 801049a:	f7ff fb9b 	bl	800fbd4 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
 801049e:	f7fc feb7 	bl	800d210 <HAL_GetTick>
 80104a2:	4602      	mov	r2, r0
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80104a8:	693a      	ldr	r2, [r7, #16]
 80104aa:	7853      	ldrb	r3, [r2, #1]
 80104ac:	2101      	movs	r1, #1
 80104ae:	f361 0345 	bfi	r3, r1, #1, #5
 80104b2:	7053      	strb	r3, [r2, #1]
      break;
 80104b4:	e05b      	b.n	801056e <CAD_StateMachine+0x1aa>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	4618      	mov	r0, r3
 80104ba:	f002 f807 	bl	80124cc <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 80104be:	7bfa      	ldrb	r2, [r7, #15]
 80104c0:	4940      	ldr	r1, [pc, #256]	; (80105c4 <CAD_StateMachine+0x200>)
 80104c2:	4613      	mov	r3, r2
 80104c4:	011b      	lsls	r3, r3, #4
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	440b      	add	r3, r1
 80104cc:	3334      	adds	r3, #52	; 0x34
 80104ce:	2200      	movs	r2, #0
 80104d0:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 80104d8:	693a      	ldr	r2, [r7, #16]
 80104da:	7813      	ldrb	r3, [r2, #0]
 80104dc:	f36f 0301 	bfc	r3, #0, #2
 80104e0:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	2201      	movs	r2, #1
 80104e6:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80104e8:	f7fc fe92 	bl	800d210 <HAL_GetTick>
 80104ec:	4602      	mov	r2, r0
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	609a      	str	r2, [r3, #8]
      _timing = CAD_TERROR_RECOVERY_TIME;
 80104f2:	231a      	movs	r3, #26
 80104f4:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	7853      	ldrb	r3, [r2, #1]
 80104fa:	210d      	movs	r1, #13
 80104fc:	f361 0345 	bfi	r3, r1, #1, #5
 8010500:	7053      	strb	r3, [r2, #1]
      break;
 8010502:	e034      	b.n	801056e <CAD_StateMachine+0x1aa>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8010504:	f7fc fe84 	bl	800d210 <HAL_GetTick>
 8010508:	4602      	mov	r2, r0
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	2b1a      	cmp	r3, #26
 8010512:	d92b      	bls.n	801056c <CAD_StateMachine+0x1a8>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8010514:	7bfa      	ldrb	r2, [r7, #15]
 8010516:	492b      	ldr	r1, [pc, #172]	; (80105c4 <CAD_StateMachine+0x200>)
 8010518:	4613      	mov	r3, r2
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	1a9b      	subs	r3, r3, r2
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	440b      	add	r3, r1
 8010522:	3310      	adds	r3, #16
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	f003 0304 	and.w	r3, r3, #4
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d004      	beq.n	801053c <CAD_StateMachine+0x178>
        {
          USBPDM1_AssertRp(PortNum);
 8010532:	7bfb      	ldrb	r3, [r7, #15]
 8010534:	4618      	mov	r0, r3
 8010536:	f001 fe8b 	bl	8012250 <USBPDM1_AssertRp>
 801053a:	e003      	b.n	8010544 <CAD_StateMachine+0x180>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	4618      	mov	r0, r3
 8010540:	f001 ff2e 	bl	80123a0 <USBPDM1_AssertRd>
        }
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
 8010544:	f7fc fe64 	bl	800d210 <HAL_GetTick>
 8010548:	4602      	mov	r2, r0
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801054e:	693a      	ldr	r2, [r7, #16]
 8010550:	7853      	ldrb	r3, [r2, #1]
 8010552:	2101      	movs	r1, #1
 8010554:	f361 0345 	bfi	r3, r1, #1, #5
 8010558:	7053      	strb	r3, [r2, #1]
      }
      break;
 801055a:	e007      	b.n	801056c <CAD_StateMachine+0x1a8>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	7bf8      	ldrb	r0, [r7, #15]
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	68b9      	ldr	r1, [r7, #8]
 8010566:	4798      	blx	r3
 8010568:	6178      	str	r0, [r7, #20]
      break;
 801056a:	e000      	b.n	801056e <CAD_StateMachine+0x1aa>
      break;
 801056c:	bf00      	nop
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	785b      	ldrb	r3, [r3, #1]
 8010572:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8010576:	b2da      	uxtb	r2, r3
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	789b      	ldrb	r3, [r3, #2]
 801057c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8010580:	b2db      	uxtb	r3, r3
 8010582:	429a      	cmp	r2, r3
 8010584:	d016      	beq.n	80105b4 <CAD_StateMachine+0x1f0>
  {
    _handle->pstate = _handle->cstate;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	785b      	ldrb	r3, [r3, #1]
 801058a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801058e:	b2d9      	uxtb	r1, r3
 8010590:	693a      	ldr	r2, [r7, #16]
 8010592:	7893      	ldrb	r3, [r2, #2]
 8010594:	f361 0345 	bfi	r3, r1, #1, #5
 8010598:	7093      	strb	r3, [r2, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	785b      	ldrb	r3, [r3, #1]
 801059e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	461a      	mov	r2, r3
 80105a6:	7bf9      	ldrb	r1, [r7, #15]
 80105a8:	2300      	movs	r3, #0
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	2300      	movs	r3, #0
 80105ae:	2005      	movs	r0, #5
 80105b0:	f7ff fa30 	bl	800fa14 <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80105b4:	697b      	ldr	r3, [r7, #20]
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3718      	adds	r7, #24
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	20000b38 	.word	0x20000b38
 80105c4:	20000b54 	.word	0x20000b54

080105c8 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b087      	sub	sp, #28
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	4603      	mov	r3, r0
 80105d0:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	011b      	lsls	r3, r3, #4
 80105d6:	4a3a      	ldr	r2, [pc, #232]	; (80106c0 <CAD_Check_HW_SNK+0xf8>)
 80105d8:	4413      	add	r3, r2
 80105da:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 80105dc:	79fa      	ldrb	r2, [r7, #7]
 80105de:	4939      	ldr	r1, [pc, #228]	; (80106c4 <CAD_Check_HW_SNK+0xfc>)
 80105e0:	4613      	mov	r3, r2
 80105e2:	011b      	lsls	r3, r3, #4
 80105e4:	1a9b      	subs	r3, r3, r2
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	440b      	add	r3, r1
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	695b      	ldr	r3, [r3, #20]
 80105ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80105f2:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 80105f4:	79fa      	ldrb	r2, [r7, #7]
 80105f6:	4933      	ldr	r1, [pc, #204]	; (80106c4 <CAD_Check_HW_SNK+0xfc>)
 80105f8:	4613      	mov	r3, r2
 80105fa:	011b      	lsls	r3, r3, #4
 80105fc:	1a9b      	subs	r3, r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	440b      	add	r3, r1
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801060a:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801060c:	697a      	ldr	r2, [r7, #20]
 801060e:	7813      	ldrb	r3, [r2, #0]
 8010610:	f36f 0301 	bfc	r3, #0, #2
 8010614:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	7813      	ldrb	r3, [r2, #0]
 801061a:	f36f 0384 	bfc	r3, #2, #3
 801061e:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d021      	beq.n	801066a <CAD_Check_HW_SNK+0xa2>
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d11e      	bne.n	801066a <CAD_Check_HW_SNK+0xa2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	7813      	ldrb	r3, [r2, #0]
 8010630:	2101      	movs	r1, #1
 8010632:	f361 0384 	bfi	r3, r1, #2, #3
 8010636:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 8010638:	697a      	ldr	r2, [r7, #20]
 801063a:	7813      	ldrb	r3, [r2, #0]
 801063c:	2101      	movs	r1, #1
 801063e:	f361 0301 	bfi	r3, r1, #0, #2
 8010642:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	0c18      	lsrs	r0, r3, #16
 8010648:	79fa      	ldrb	r2, [r7, #7]
 801064a:	491e      	ldr	r1, [pc, #120]	; (80106c4 <CAD_Check_HW_SNK+0xfc>)
 801064c:	4613      	mov	r3, r2
 801064e:	011b      	lsls	r3, r3, #4
 8010650:	1a9b      	subs	r3, r3, r2
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	440b      	add	r3, r1
 8010656:	3310      	adds	r3, #16
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	4603      	mov	r3, r0
 801065c:	f003 0303 	and.w	r3, r3, #3
 8010660:	b2d9      	uxtb	r1, r3
 8010662:	7893      	ldrb	r3, [r2, #2]
 8010664:	f361 0383 	bfi	r3, r1, #2, #2
 8010668:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d121      	bne.n	80106b4 <CAD_Check_HW_SNK+0xec>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01e      	beq.n	80106b4 <CAD_Check_HW_SNK+0xec>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	7813      	ldrb	r3, [r2, #0]
 801067a:	2101      	movs	r1, #1
 801067c:	f361 0384 	bfi	r3, r1, #2, #3
 8010680:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	7813      	ldrb	r3, [r2, #0]
 8010686:	2102      	movs	r1, #2
 8010688:	f361 0301 	bfi	r3, r1, #0, #2
 801068c:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	0c98      	lsrs	r0, r3, #18
 8010692:	79fa      	ldrb	r2, [r7, #7]
 8010694:	490b      	ldr	r1, [pc, #44]	; (80106c4 <CAD_Check_HW_SNK+0xfc>)
 8010696:	4613      	mov	r3, r2
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	1a9b      	subs	r3, r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	440b      	add	r3, r1
 80106a0:	3310      	adds	r3, #16
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	4603      	mov	r3, r0
 80106a6:	f003 0303 	and.w	r3, r3, #3
 80106aa:	b2d9      	uxtb	r1, r3
 80106ac:	7893      	ldrb	r3, [r2, #2]
 80106ae:	f361 0383 	bfi	r3, r1, #2, #2
 80106b2:	7093      	strb	r3, [r2, #2]
  }
}
 80106b4:	bf00      	nop
 80106b6:	371c      	adds	r7, #28
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr
 80106c0:	20000b38 	.word	0x20000b38
 80106c4:	20000b54 	.word	0x20000b54

080106c8 <CAD_Check_HW_SRC>:
#endif /* _DRP || _SNK */

#if defined(_DRP) || defined(_SRC)
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 80106c8:	b4b0      	push	{r4, r5, r7}
 80106ca:	b093      	sub	sp, #76	; 0x4c
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	71fb      	strb	r3, [r7, #7]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80106d2:	79fb      	ldrb	r3, [r7, #7]
 80106d4:	011b      	lsls	r3, r3, #4
 80106d6:	4a2f      	ldr	r2, [pc, #188]	; (8010794 <CAD_Check_HW_SRC+0xcc>)
 80106d8:	4413      	add	r3, r2
 80106da:	647b      	str	r3, [r7, #68]	; 0x44
  -----------------------------------------------------------------------------
  | 1: Sink   |                   |             |xx vRa|vRdUSB| vRd1.5 |vRd3.0|
  -----------------------------------------------------------------------------
  */

  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 80106dc:	79fa      	ldrb	r2, [r7, #7]
 80106de:	492e      	ldr	r1, [pc, #184]	; (8010798 <CAD_Check_HW_SRC+0xd0>)
 80106e0:	4613      	mov	r3, r2
 80106e2:	011b      	lsls	r3, r3, #4
 80106e4:	1a9b      	subs	r3, r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	440b      	add	r3, r1
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	695b      	ldr	r3, [r3, #20]
 80106ee:	0c1b      	lsrs	r3, r3, #16
 80106f0:	f003 0303 	and.w	r3, r3, #3
 80106f4:	643b      	str	r3, [r7, #64]	; 0x40
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 80106f6:	79fa      	ldrb	r2, [r7, #7]
 80106f8:	4927      	ldr	r1, [pc, #156]	; (8010798 <CAD_Check_HW_SRC+0xd0>)
 80106fa:	4613      	mov	r3, r2
 80106fc:	011b      	lsls	r3, r3, #4
 80106fe:	1a9b      	subs	r3, r3, r2
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	440b      	add	r3, r1
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	695b      	ldr	r3, [r3, #20]
 8010708:	0c9b      	lsrs	r3, r3, #18
 801070a:	f003 0303 	and.w	r3, r3, #3
 801070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 8010710:	4b22      	ldr	r3, [pc, #136]	; (801079c <CAD_Check_HW_SRC+0xd4>)
 8010712:	f107 0418 	add.w	r4, r7, #24
 8010716:	461d      	mov	r5, r3
 8010718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	6023      	str	r3, [r4, #0]
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 8010724:	4a1e      	ldr	r2, [pc, #120]	; (80107a0 <CAD_Check_HW_SRC+0xd8>)
 8010726:	f107 030c 	add.w	r3, r7, #12
 801072a:	ca07      	ldmia	r2, {r0, r1, r2}
 801072c:	c303      	stmia	r3!, {r0, r1}
 801072e:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 8010730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010732:	4613      	mov	r3, r2
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	441a      	add	r2, r3
 8010738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801073a:	4413      	add	r3, r2
 801073c:	2b08      	cmp	r3, #8
 801073e:	d824      	bhi.n	801078a <CAD_Check_HW_SRC+0xc2>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 8010740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010742:	4613      	mov	r3, r2
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	441a      	add	r2, r3
 8010748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074a:	4413      	add	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	3348      	adds	r3, #72	; 0x48
 8010750:	443b      	add	r3, r7
 8010752:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8010756:	f003 0303 	and.w	r3, r3, #3
 801075a:	b2d9      	uxtb	r1, r3
 801075c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801075e:	7813      	ldrb	r3, [r2, #0]
 8010760:	f361 0301 	bfi	r3, r1, #0, #2
 8010764:	7013      	strb	r3, [r2, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 8010766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010768:	4613      	mov	r3, r2
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	441a      	add	r2, r3
 801076e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010770:	4413      	add	r3, r2
 8010772:	3348      	adds	r3, #72	; 0x48
 8010774:	443b      	add	r3, r7
 8010776:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801077a:	f003 0307 	and.w	r3, r3, #7
 801077e:	b2d9      	uxtb	r1, r3
 8010780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010782:	7813      	ldrb	r3, [r2, #0]
 8010784:	f361 0384 	bfi	r3, r1, #2, #3
 8010788:	7013      	strb	r3, [r2, #0]
  }
}
 801078a:	bf00      	nop
 801078c:	374c      	adds	r7, #76	; 0x4c
 801078e:	46bd      	mov	sp, r7
 8010790:	bcb0      	pop	{r4, r5, r7}
 8010792:	4770      	bx	lr
 8010794:	20000b38 	.word	0x20000b38
 8010798:	20000b54 	.word	0x20000b54
 801079c:	0801b72c 	.word	0x0801b72c
 80107a0:	0801b750 	.word	0x0801b750

080107a4 <ManageStateDetached_SNK>:
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80107ae:	79fb      	ldrb	r3, [r7, #7]
 80107b0:	011b      	lsls	r3, r3, #4
 80107b2:	4a1e      	ldr	r2, [pc, #120]	; (801082c <ManageStateDetached_SNK+0x88>)
 80107b4:	4413      	add	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80107b8:	2302      	movs	r3, #2
 80107ba:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 80107bc:	79fb      	ldrb	r3, [r7, #7]
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff ff02 	bl	80105c8 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	f003 031c 	and.w	r3, r3, #28
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d103      	bne.n	80107da <ManageStateDetached_SNK+0x36>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 80107d2:	f04f 33ff 	mov.w	r3, #4294967295
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	e023      	b.n	8010822 <ManageStateDetached_SNK+0x7e>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 80107da:	f7fc fd19 	bl	800d210 <HAL_GetTick>
 80107de:	4602      	mov	r2, r0
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	609a      	str	r2, [r3, #8]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	7853      	ldrb	r3, [r2, #1]
 80107e8:	2102      	movs	r1, #2
 80107ea:	f361 0345 	bfi	r3, r1, #1, #5
 80107ee:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 80107f0:	2001      	movs	r0, #1
 80107f2:	f7fc fd19 	bl	800d228 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 80107f6:	79fb      	ldrb	r3, [r7, #7]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ff fee5 	bl	80105c8 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	f003 031c 	and.w	r3, r3, #28
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d106      	bne.n	801081a <ManageStateDetached_SNK+0x76>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801080c:	68ba      	ldr	r2, [r7, #8]
 801080e:	7853      	ldrb	r3, [r2, #1]
 8010810:	2101      	movs	r1, #1
 8010812:	f361 0345 	bfi	r3, r1, #1, #5
 8010816:	7053      	strb	r3, [r2, #1]
 8010818:	e003      	b.n	8010822 <ManageStateDetached_SNK+0x7e>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 801081a:	79fb      	ldrb	r3, [r7, #7]
 801081c:	4618      	mov	r0, r3
 801081e:	f7fb fd75 	bl	800c30c <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8010822:	68fb      	ldr	r3, [r7, #12]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	20000b38 	.word	0x20000b38

08010830 <ManageStateDetached_SRC>:
#endif /* _DRP || _SNK */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	011b      	lsls	r3, r3, #4
 801083e:	4a24      	ldr	r2, [pc, #144]	; (80108d0 <ManageStateDetached_SRC+0xa0>)
 8010840:	4413      	add	r3, r2
 8010842:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010844:	2302      	movs	r3, #2
 8010846:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	785b      	ldrb	r3, [r3, #1]
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00b      	beq.n	801086e <ManageStateDetached_SRC+0x3e>
  {
    /* update the resistor value */
    USBPDM1_AssertRp(PortNum);
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	4618      	mov	r0, r3
 801085a:	f001 fcf9 	bl	8012250 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	7853      	ldrb	r3, [r2, #1]
 8010862:	f36f 0300 	bfc	r3, #0, #1
 8010866:	7053      	strb	r3, [r2, #1]

    /* let time to internal state machine update */
    HAL_Delay(1);
 8010868:	2001      	movs	r0, #1
 801086a:	f7fc fcdd 	bl	800d228 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 801086e:	79fb      	ldrb	r3, [r7, #7]
 8010870:	4618      	mov	r0, r3
 8010872:	f7ff ff29 	bl	80106c8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 031c 	and.w	r3, r3, #28
 801087e:	b2db      	uxtb	r3, r3
 8010880:	2b00      	cmp	r3, #0
 8010882:	d103      	bne.n	801088c <ManageStateDetached_SRC+0x5c>
  {
#ifdef _LOW_POWER
    /* value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	60fb      	str	r3, [r7, #12]
 801088a:	e01c      	b.n	80108c6 <ManageStateDetached_SRC+0x96>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	f003 031c 	and.w	r3, r3, #28
 8010894:	b2db      	uxtb	r3, r3
 8010896:	2b08      	cmp	r3, #8
 8010898:	d106      	bne.n	80108a8 <ManageStateDetached_SRC+0x78>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	7853      	ldrb	r3, [r2, #1]
 801089e:	2104      	movs	r1, #4
 80108a0:	f361 0345 	bfi	r3, r1, #1, #5
 80108a4:	7053      	strb	r3, [r2, #1]
 80108a6:	e00e      	b.n	80108c6 <ManageStateDetached_SRC+0x96>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80108a8:	f7fc fcb2 	bl	800d210 <HAL_GetTick>
 80108ac:	4602      	mov	r2, r0
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	609a      	str	r2, [r3, #8]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	7853      	ldrb	r3, [r2, #1]
 80108b6:	2102      	movs	r1, #2
 80108b8:	f361 0345 	bfi	r3, r1, #1, #5
 80108bc:	7053      	strb	r3, [r2, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 80108be:	79fb      	ldrb	r3, [r7, #7]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fb fd23 	bl	800c30c <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80108c6:	68fb      	ldr	r3, [r7, #12]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	20000b38 	.word	0x20000b38

080108d4 <ManageStateDetached_DRP>:
#endif /* _SRC || _DRP */

#if defined(_DRP)
static uint32_t ManageStateDetached_DRP(uint8_t PortNum)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	011b      	lsls	r3, r3, #4
 80108e2:	4a62      	ldr	r2, [pc, #392]	; (8010a6c <ManageStateDetached_DRP+0x198>)
 80108e4:	4413      	add	r3, r2
 80108e6:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80108e8:	2302      	movs	r3, #2
 80108ea:	60fb      	str	r3, [r7, #12]

  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 80108ec:	79fa      	ldrb	r2, [r7, #7]
 80108ee:	4960      	ldr	r1, [pc, #384]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 80108f0:	4613      	mov	r3, r2
 80108f2:	011b      	lsls	r3, r3, #4
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	440b      	add	r3, r1
 80108fa:	3310      	adds	r3, #16
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	f003 0304 	and.w	r3, r3, #4
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d004      	beq.n	8010914 <ManageStateDetached_DRP+0x40>
  {
    ManageStateDetached_SRC(PortNum);
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	4618      	mov	r0, r3
 801090e:	f7ff ff8f 	bl	8010830 <ManageStateDetached_SRC>
 8010912:	e003      	b.n	801091c <ManageStateDetached_DRP+0x48>
  }
  else
  {
    ManageStateDetached_SNK(PortNum);
 8010914:	79fb      	ldrb	r3, [r7, #7]
 8010916:	4618      	mov	r0, r3
 8010918:	f7ff ff44 	bl	80107a4 <ManageStateDetached_SNK>
  }

  /* Manage the toggle */
  if (_handle->CurrentHWcondition == HW_Detachment)
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	f003 031c 	and.w	r3, r3, #28
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	f040 8094 	bne.w	8010a54 <ManageStateDetached_DRP+0x180>
  {
    switch (Ports[PortNum].params->PE_PowerRole)
 801092c:	79fa      	ldrb	r2, [r7, #7]
 801092e:	4950      	ldr	r1, [pc, #320]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010930:	4613      	mov	r3, r2
 8010932:	011b      	lsls	r3, r3, #4
 8010934:	1a9b      	subs	r3, r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	440b      	add	r3, r1
 801093a:	3310      	adds	r3, #16
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d043      	beq.n	80109d2 <ManageStateDetached_DRP+0xfe>
 801094a:	2b01      	cmp	r3, #1
 801094c:	f040 8084 	bne.w	8010a58 <ManageStateDetached_DRP+0x184>
    {
      case USBPD_PORTPOWERROLE_SRC :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 8010950:	f7fc fc5e 	bl	800d210 <HAL_GetTick>
 8010954:	4602      	mov	r2, r0
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	1ad1      	subs	r1, r2, r3
 801095c:	79fa      	ldrb	r2, [r7, #7]
 801095e:	4844      	ldr	r0, [pc, #272]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010960:	4613      	mov	r3, r2
 8010962:	011b      	lsls	r3, r3, #4
 8010964:	1a9b      	subs	r3, r3, r2
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4403      	add	r3, r0
 801096a:	330c      	adds	r3, #12
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	79db      	ldrb	r3, [r3, #7]
 8010970:	4299      	cmp	r1, r3
 8010972:	d973      	bls.n	8010a5c <ManageStateDetached_DRP+0x188>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 8010974:	f7fc fc4c 	bl	800d210 <HAL_GetTick>
 8010978:	4602      	mov	r2, r0
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	493b      	ldr	r1, [pc, #236]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010982:	4613      	mov	r3, r2
 8010984:	011b      	lsls	r3, r3, #4
 8010986:	1a9b      	subs	r3, r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	440b      	add	r3, r1
 801098c:	3310      	adds	r3, #16
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	7813      	ldrb	r3, [r2, #0]
 8010992:	f36f 0382 	bfc	r3, #2, #1
 8010996:	7013      	strb	r3, [r2, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 8010998:	79fa      	ldrb	r2, [r7, #7]
 801099a:	4935      	ldr	r1, [pc, #212]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 801099c:	4613      	mov	r3, r2
 801099e:	011b      	lsls	r3, r3, #4
 80109a0:	1a9b      	subs	r3, r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	440b      	add	r3, r1
 80109a6:	3310      	adds	r3, #16
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	7813      	ldrb	r3, [r2, #0]
 80109ac:	f36f 03c3 	bfc	r3, #3, #1
 80109b0:	7013      	strb	r3, [r2, #0]
          _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 80109b2:	79fa      	ldrb	r2, [r7, #7]
 80109b4:	492e      	ldr	r1, [pc, #184]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 80109b6:	4613      	mov	r3, r2
 80109b8:	011b      	lsls	r3, r3, #4
 80109ba:	1a9b      	subs	r3, r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	440b      	add	r3, r1
 80109c0:	330c      	adds	r3, #12
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	799b      	ldrb	r3, [r3, #6]
 80109c6:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRd(PortNum);
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	4618      	mov	r0, r3
 80109cc:	f001 fce8 	bl	80123a0 <USBPDM1_AssertRd>
        }
        break;
 80109d0:	e044      	b.n	8010a5c <ManageStateDetached_DRP+0x188>
      case USBPD_PORTPOWERROLE_SNK :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SNKToggleTime)
 80109d2:	f7fc fc1d 	bl	800d210 <HAL_GetTick>
 80109d6:	4602      	mov	r2, r0
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	1ad1      	subs	r1, r2, r3
 80109de:	79fa      	ldrb	r2, [r7, #7]
 80109e0:	4823      	ldr	r0, [pc, #140]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 80109e2:	4613      	mov	r3, r2
 80109e4:	011b      	lsls	r3, r3, #4
 80109e6:	1a9b      	subs	r3, r3, r2
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4403      	add	r3, r0
 80109ec:	330c      	adds	r3, #12
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	799b      	ldrb	r3, [r3, #6]
 80109f2:	4299      	cmp	r1, r3
 80109f4:	d934      	bls.n	8010a60 <ManageStateDetached_DRP+0x18c>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 80109f6:	f7fc fc0b 	bl	800d210 <HAL_GetTick>
 80109fa:	4602      	mov	r2, r0
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 8010a00:	79fa      	ldrb	r2, [r7, #7]
 8010a02:	491b      	ldr	r1, [pc, #108]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010a04:	4613      	mov	r3, r2
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	1a9b      	subs	r3, r3, r2
 8010a0a:	009b      	lsls	r3, r3, #2
 8010a0c:	440b      	add	r3, r1
 8010a0e:	3310      	adds	r3, #16
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	7813      	ldrb	r3, [r2, #0]
 8010a14:	f043 0304 	orr.w	r3, r3, #4
 8010a18:	7013      	strb	r3, [r2, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 8010a1a:	79fa      	ldrb	r2, [r7, #7]
 8010a1c:	4914      	ldr	r1, [pc, #80]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010a1e:	4613      	mov	r3, r2
 8010a20:	011b      	lsls	r3, r3, #4
 8010a22:	1a9b      	subs	r3, r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	440b      	add	r3, r1
 8010a28:	3310      	adds	r3, #16
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	7813      	ldrb	r3, [r2, #0]
 8010a2e:	f043 0308 	orr.w	r3, r3, #8
 8010a32:	7013      	strb	r3, [r2, #0]
          _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 8010a34:	79fa      	ldrb	r2, [r7, #7]
 8010a36:	490e      	ldr	r1, [pc, #56]	; (8010a70 <ManageStateDetached_DRP+0x19c>)
 8010a38:	4613      	mov	r3, r2
 8010a3a:	011b      	lsls	r3, r3, #4
 8010a3c:	1a9b      	subs	r3, r3, r2
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	440b      	add	r3, r1
 8010a42:	330c      	adds	r3, #12
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	79db      	ldrb	r3, [r3, #7]
 8010a48:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRp(PortNum);
 8010a4a:	79fb      	ldrb	r3, [r7, #7]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f001 fbff 	bl	8012250 <USBPDM1_AssertRp>
        }
        break;
 8010a52:	e005      	b.n	8010a60 <ManageStateDetached_DRP+0x18c>
      default:
        break;
    }
  }
 8010a54:	bf00      	nop
 8010a56:	e004      	b.n	8010a62 <ManageStateDetached_DRP+0x18e>
        break;
 8010a58:	bf00      	nop
 8010a5a:	e002      	b.n	8010a62 <ManageStateDetached_DRP+0x18e>
        break;
 8010a5c:	bf00      	nop
 8010a5e:	e000      	b.n	8010a62 <ManageStateDetached_DRP+0x18e>
        break;
 8010a60:	bf00      	nop

  return _timing;
 8010a62:	68fb      	ldr	r3, [r7, #12]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	20000b38 	.word	0x20000b38
 8010a70:	20000b54 	.word	0x20000b54

08010a74 <ManageStateAttachedWait_SRC>:
#endif /* _DRP */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b088      	sub	sp, #32
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	011b      	lsls	r3, r3, #4
 8010a86:	4a67      	ldr	r2, [pc, #412]	; (8010c24 <ManageStateAttachedWait_SRC+0x1b0>)
 8010a88:	4413      	add	r3, r2
 8010a8a:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 8010a8c:	2302      	movs	r3, #2
 8010a8e:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010a90:	f7fc fbbe 	bl	800d210 <HAL_GetTick>
 8010a94:	4602      	mov	r2, r0
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 8010a9e:	7bfb      	ldrb	r3, [r7, #15]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff fe11 	bl	80106c8 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	f003 031c 	and.w	r3, r3, #28
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f000 8086 	beq.w	8010bc2 <ManageStateAttachedWait_SRC+0x14e>
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	f003 031c 	and.w	r3, r3, #28
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	2b08      	cmp	r3, #8
 8010ac2:	d07e      	beq.n	8010bc2 <ManageStateAttachedWait_SRC+0x14e>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f9 fb0f 	bl	800a0ec <USBPD_PWR_IF_GetVBUSStatus>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d106      	bne.n	8010ae2 <ManageStateAttachedWait_SRC+0x6e>
    {
      /* reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010ad4:	f7fc fb9c 	bl	800d210 <HAL_GetTick>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	609a      	str	r2, [r3, #8]
      return CAD_TCCDEBOUCE_THRESHOLD;
 8010ade:	2378      	movs	r3, #120	; 0x78
 8010ae0:	e09b      	b.n	8010c1a <ManageStateAttachedWait_SRC+0x1a6>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	2b78      	cmp	r3, #120	; 0x78
 8010ae6:	d966      	bls.n	8010bb6 <ManageStateAttachedWait_SRC+0x142>
    {
      switch (_handle->CurrentHWcondition)
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	d023      	beq.n	8010b3e <ManageStateAttachedWait_SRC+0xca>
 8010af6:	2b03      	cmp	r3, #3
 8010af8:	dc4c      	bgt.n	8010b94 <ManageStateAttachedWait_SRC+0x120>
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d002      	beq.n	8010b04 <ManageStateAttachedWait_SRC+0x90>
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d032      	beq.n	8010b68 <ManageStateAttachedWait_SRC+0xf4>
 8010b02:	e047      	b.n	8010b94 <ManageStateAttachedWait_SRC+0x120>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	461a      	mov	r2, r3
 8010b10:	7bfb      	ldrb	r3, [r7, #15]
 8010b12:	4611      	mov	r1, r2
 8010b14:	4618      	mov	r0, r3
 8010b16:	f001 fd4d 	bl	80125b4 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8010b1a:	69ba      	ldr	r2, [r7, #24]
 8010b1c:	7853      	ldrb	r3, [r2, #1]
 8010b1e:	2103      	movs	r1, #3
 8010b20:	f361 0345 	bfi	r3, r1, #1, #5
 8010b24:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2202      	movs	r2, #2
 8010b2a:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	461a      	mov	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	601a      	str	r2, [r3, #0]
          break;
 8010b3c:	e031      	b.n	8010ba2 <ManageStateAttachedWait_SRC+0x12e>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	461a      	mov	r2, r3
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f001 fd30 	bl	80125b4 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 8010b54:	69ba      	ldr	r2, [r7, #24]
 8010b56:	7853      	ldrb	r3, [r2, #1]
 8010b58:	2105      	movs	r1, #5
 8010b5a:	f361 0345 	bfi	r3, r1, #1, #5
 8010b5e:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	2204      	movs	r2, #4
 8010b64:	701a      	strb	r2, [r3, #0]
          break;
 8010b66:	e01c      	b.n	8010ba2 <ManageStateAttachedWait_SRC+0x12e>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb fc04 	bl	800c378 <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 8010b70:	69ba      	ldr	r2, [r7, #24]
 8010b72:	7853      	ldrb	r3, [r2, #1]
 8010b74:	2104      	movs	r1, #4
 8010b76:	f361 0345 	bfi	r3, r1, #1, #5
 8010b7a:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	2203      	movs	r2, #3
 8010b80:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	601a      	str	r2, [r3, #0]
          break;
 8010b92:	e006      	b.n	8010ba2 <ManageStateAttachedWait_SRC+0x12e>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8010b94:	69ba      	ldr	r2, [r7, #24]
 8010b96:	7853      	ldrb	r3, [r2, #1]
 8010b98:	210b      	movs	r1, #11
 8010b9a:	f361 0345 	bfi	r3, r1, #1, #5
 8010b9e:	7053      	strb	r3, [r2, #1]
#endif /* _ACCESSORY_SRC */
          break;
 8010ba0:	bf00      	nop
      } /* end of switch */
      *pCCXX = _handle->cc;
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	461a      	mov	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	601a      	str	r2, [r3, #0]
      _timing = 2;
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	61fb      	str	r3, [r7, #28]
    }
    /* reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010bb6:	69ba      	ldr	r2, [r7, #24]
 8010bb8:	7813      	ldrb	r3, [r2, #0]
 8010bba:	f36f 1345 	bfc	r3, #5, #1
 8010bbe:	7013      	strb	r3, [r2, #0]
 8010bc0:	e02a      	b.n	8010c18 <ManageStateAttachedWait_SRC+0x1a4>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	f003 0320 	and.w	r3, r3, #32
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10c      	bne.n	8010bea <ManageStateAttachedWait_SRC+0x176>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8010bd0:	f7fc fb1e 	bl	800d210 <HAL_GetTick>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8010bda:	69ba      	ldr	r2, [r7, #24]
 8010bdc:	7813      	ldrb	r3, [r2, #0]
 8010bde:	f043 0320 	orr.w	r3, r3, #32
 8010be2:	7013      	strb	r3, [r2, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8010be4:	2302      	movs	r3, #2
 8010be6:	61fb      	str	r3, [r7, #28]
 8010be8:	e016      	b.n	8010c18 <ManageStateAttachedWait_SRC+0x1a4>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010bea:	f7fc fb11 	bl	800d210 <HAL_GetTick>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	1ad3      	subs	r3, r2, r3
 8010bf6:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d90c      	bls.n	8010c18 <ManageStateAttachedWait_SRC+0x1a4>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010bfe:	69ba      	ldr	r2, [r7, #24]
 8010c00:	7813      	ldrb	r3, [r2, #0]
 8010c02:	f36f 1345 	bfc	r3, #5, #1
 8010c06:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8010c08:	69ba      	ldr	r2, [r7, #24]
 8010c0a:	7853      	ldrb	r3, [r2, #1]
 8010c0c:	210b      	movs	r1, #11
 8010c0e:	f361 0345 	bfi	r3, r1, #1, #5
 8010c12:	7053      	strb	r3, [r2, #1]
        _timing = 0;
 8010c14:	2300      	movs	r3, #0
 8010c16:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 8010c18:	69fb      	ldr	r3, [r7, #28]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3720      	adds	r7, #32
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20000b38 	.word	0x20000b38

08010c28 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	73fb      	strb	r3, [r7, #15]
  uint32_t _timing = CAD_INFINITE_TIME;
 8010c36:	f04f 33ff 	mov.w	r3, #4294967295
 8010c3a:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	011b      	lsls	r3, r3, #4
 8010c40:	4a2f      	ldr	r2, [pc, #188]	; (8010d00 <ManageStateEMC+0xd8>)
 8010c42:	4413      	add	r3, r2
 8010c44:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7ff fd3d 	bl	80106c8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	2b03      	cmp	r3, #3
 8010c5a:	d00f      	beq.n	8010c7c <ManageStateEMC+0x54>
 8010c5c:	2b03      	cmp	r3, #3
 8010c5e:	dc20      	bgt.n	8010ca2 <ManageStateEMC+0x7a>
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <ManageStateEMC+0x42>
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d009      	beq.n	8010c7c <ManageStateEMC+0x54>
 8010c68:	e01b      	b.n	8010ca2 <ManageStateEMC+0x7a>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8010c6a:	693a      	ldr	r2, [r7, #16]
 8010c6c:	7853      	ldrb	r3, [r2, #1]
 8010c6e:	2109      	movs	r1, #9
 8010c70:	f361 0345 	bfi	r3, r1, #1, #5
 8010c74:	7053      	strb	r3, [r2, #1]
      _timing = 1;
 8010c76:	2301      	movs	r3, #1
 8010c78:	617b      	str	r3, [r7, #20]
      break;
 8010c7a:	e03c      	b.n	8010cf6 <ManageStateEMC+0xce>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8010c7c:	693a      	ldr	r2, [r7, #16]
 8010c7e:	7853      	ldrb	r3, [r2, #1]
 8010c80:	2102      	movs	r1, #2
 8010c82:	f361 0345 	bfi	r3, r1, #1, #5
 8010c86:	7053      	strb	r3, [r2, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* this is only to check cable presence */
 8010c88:	f7fc fac2 	bl	800d210 <HAL_GetTick>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	1f5a      	subs	r2, r3, #5
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	609a      	str	r2, [r3, #8]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8010c94:	7bfb      	ldrb	r3, [r7, #15]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fb fb38 	bl	800c30c <BSP_USBPD_PWR_VBUSInit>
      _timing = 2;
 8010c9c:	2302      	movs	r3, #2
 8010c9e:	617b      	str	r3, [r7, #20]
      break;
 8010ca0:	e029      	b.n	8010cf6 <ManageStateEMC+0xce>
    case HW_PwrCable_NoSink_Attachment:
    default :
      /* nothing to do still the same status */
#if defined(_DRP)
      if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 8010ca2:	7bfa      	ldrb	r2, [r7, #15]
 8010ca4:	4917      	ldr	r1, [pc, #92]	; (8010d04 <ManageStateEMC+0xdc>)
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	011b      	lsls	r3, r3, #4
 8010caa:	1a9b      	subs	r3, r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	440b      	add	r3, r1
 8010cb0:	330c      	adds	r3, #12
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	795b      	ldrb	r3, [r3, #5]
 8010cb6:	f003 0320 	and.w	r3, r3, #32
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d019      	beq.n	8010cf4 <ManageStateEMC+0xcc>
      {
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 8010cc0:	f7fc faa6 	bl	800d210 <HAL_GetTick>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	1ad1      	subs	r1, r2, r3
 8010ccc:	7bfa      	ldrb	r2, [r7, #15]
 8010cce:	480d      	ldr	r0, [pc, #52]	; (8010d04 <ManageStateEMC+0xdc>)
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	011b      	lsls	r3, r3, #4
 8010cd4:	1a9b      	subs	r3, r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4403      	add	r3, r0
 8010cda:	330c      	adds	r3, #12
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	79db      	ldrb	r3, [r3, #7]
 8010ce0:	4299      	cmp	r1, r3
 8010ce2:	d905      	bls.n	8010cf0 <ManageStateEMC+0xc8>
        {
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8010ce4:	693a      	ldr	r2, [r7, #16]
 8010ce6:	7853      	ldrb	r3, [r2, #1]
 8010ce8:	2109      	movs	r1, #9
 8010cea:	f361 0345 	bfi	r3, r1, #1, #5
 8010cee:	7053      	strb	r3, [r2, #1]
        }
        _timing = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	617b      	str	r3, [r7, #20]
      }
#else
      _timing = 2;
#endif /* _DRP */
      break;
 8010cf4:	bf00      	nop
  }
  return _timing;
 8010cf6:	697b      	ldr	r3, [r7, #20]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3718      	adds	r7, #24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	20000b38 	.word	0x20000b38
 8010d04:	20000b54 	.word	0x20000b54

08010d08 <ManageStateAttached_DRP>:
#endif /* _DRP || _SRC */

#if defined(_DRP)
static uint32_t ManageStateAttached_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	73fb      	strb	r3, [r7, #15]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8010d16:	7bfa      	ldrb	r2, [r7, #15]
 8010d18:	491a      	ldr	r1, [pc, #104]	; (8010d84 <ManageStateAttached_DRP+0x7c>)
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	011b      	lsls	r3, r3, #4
 8010d1e:	1a9b      	subs	r3, r3, r2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	440b      	add	r3, r1
 8010d24:	3310      	adds	r3, #16
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	f003 0304 	and.w	r3, r3, #4
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d007      	beq.n	8010d44 <ManageStateAttached_DRP+0x3c>
  {
    return ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	68b9      	ldr	r1, [r7, #8]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 f852 	bl	8010de4 <ManageStateAttached_SRC>
 8010d40:	4603      	mov	r3, r0
 8010d42:	e01b      	b.n	8010d7c <ManageStateAttached_DRP+0x74>
  }
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	011b      	lsls	r3, r3, #4
 8010d48:	4a0f      	ldr	r2, [pc, #60]	; (8010d88 <ManageStateAttached_DRP+0x80>)
 8010d4a:	4413      	add	r3, r2
 8010d4c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8010d4e:	7bfb      	ldrb	r3, [r7, #15]
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	68b9      	ldr	r1, [r7, #8]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 f965 	bl	8011024 <ManageStateAttached_SNK>
 8010d5a:	6178      	str	r0, [r7, #20]

  /* Toggle management */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	f003 031c 	and.w	r3, r3, #28
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d107      	bne.n	8010d7a <ManageStateAttached_DRP+0x72>
  {
    _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SRC;
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	7853      	ldrb	r3, [r2, #1]
 8010d6e:	2108      	movs	r1, #8
 8010d70:	f361 0345 	bfi	r3, r1, #1, #5
 8010d74:	7053      	strb	r3, [r2, #1]
    _timing = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	617b      	str	r3, [r7, #20]
  }
  return _timing;
 8010d7a:	697b      	ldr	r3, [r7, #20]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	20000b54 	.word	0x20000b54
 8010d88:	20000b38 	.word	0x20000b38

08010d8c <ManageStateAttachedWait_DRP>:
#endif /* _DRP */

#if defined(_DRP) || (defined(_ACCESSORY) && defined(_SNK))
static uint32_t ManageStateAttachedWait_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	73fb      	strb	r3, [r7, #15]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8010d9a:	7bfa      	ldrb	r2, [r7, #15]
 8010d9c:	4910      	ldr	r1, [pc, #64]	; (8010de0 <ManageStateAttachedWait_DRP+0x54>)
 8010d9e:	4613      	mov	r3, r2
 8010da0:	011b      	lsls	r3, r3, #4
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	440b      	add	r3, r1
 8010da8:	3310      	adds	r3, #16
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	f003 0304 	and.w	r3, r3, #4
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d007      	beq.n	8010dc8 <ManageStateAttachedWait_DRP+0x3c>
  {
    return ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	68b9      	ldr	r1, [r7, #8]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7ff fe58 	bl	8010a74 <ManageStateAttachedWait_SRC>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	e006      	b.n	8010dd6 <ManageStateAttachedWait_DRP+0x4a>
  }
  return ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	68b9      	ldr	r1, [r7, #8]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f8a8 	bl	8010f24 <ManageStateAttachedWait_SNK>
 8010dd4:	4603      	mov	r3, r0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	20000b54 	.word	0x20000b54

08010de4 <ManageStateAttached_SRC>:
#endif /* _DRP || (_ACCESSORY && _SNK) */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b08a      	sub	sp, #40	; 0x28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010df2:	7bfb      	ldrb	r3, [r7, #15]
 8010df4:	011b      	lsls	r3, r3, #4
 8010df6:	4a49      	ldr	r2, [pc, #292]	; (8010f1c <ManageStateAttached_SRC+0x138>)
 8010df8:	4413      	add	r3, r2
 8010dfa:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8010e00:	7bfa      	ldrb	r2, [r7, #15]
 8010e02:	4947      	ldr	r1, [pc, #284]	; (8010f20 <ManageStateAttached_SRC+0x13c>)
 8010e04:	4613      	mov	r3, r2
 8010e06:	011b      	lsls	r3, r3, #4
 8010e08:	1a9b      	subs	r3, r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	440b      	add	r3, r1
 8010e0e:	3334      	adds	r3, #52	; 0x34
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d10b      	bne.n	8010e2e <ManageStateAttached_SRC+0x4a>
 8010e16:	7bfa      	ldrb	r2, [r7, #15]
 8010e18:	4941      	ldr	r1, [pc, #260]	; (8010f20 <ManageStateAttached_SRC+0x13c>)
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	011b      	lsls	r3, r3, #4
 8010e1e:	1a9b      	subs	r3, r3, r2
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	440b      	add	r3, r1
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	695b      	ldr	r3, [r3, #20]
 8010e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010e2c:	e00a      	b.n	8010e44 <ManageStateAttached_SRC+0x60>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8010e2e:	7bfa      	ldrb	r2, [r7, #15]
 8010e30:	493b      	ldr	r1, [pc, #236]	; (8010f20 <ManageStateAttached_SRC+0x13c>)
 8010e32:	4613      	mov	r3, r2
 8010e34:	011b      	lsls	r3, r3, #4
 8010e36:	1a9b      	subs	r3, r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	695b      	ldr	r3, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8010e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8010e44:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 8010e46:	7bfa      	ldrb	r2, [r7, #15]
 8010e48:	4935      	ldr	r1, [pc, #212]	; (8010f20 <ManageStateAttached_SRC+0x13c>)
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	011b      	lsls	r3, r3, #4
 8010e4e:	1a9b      	subs	r3, r3, r2
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	440b      	add	r3, r1
 8010e54:	3334      	adds	r3, #52	; 0x34
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d102      	bne.n	8010e62 <ManageStateAttached_SRC+0x7e>
 8010e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010e60:	e001      	b.n	8010e66 <ManageStateAttached_SRC+0x82>
 8010e62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e66:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 8010e68:	69ba      	ldr	r2, [r7, #24]
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d048      	beq.n	8010f02 <ManageStateAttached_SRC+0x11e>
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	f003 0320 	and.w	r3, r3, #32
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10c      	bne.n	8010e98 <ManageStateAttached_SRC+0xb4>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8010e7e:	6a3a      	ldr	r2, [r7, #32]
 8010e80:	7813      	ldrb	r3, [r2, #0]
 8010e82:	f043 0320 	orr.w	r3, r3, #32
 8010e86:	7013      	strb	r3, [r2, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8010e88:	f7fc f9c2 	bl	800d210 <HAL_GetTick>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	609a      	str	r2, [r3, #8]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8010e92:	2302      	movs	r3, #2
 8010e94:	627b      	str	r3, [r7, #36]	; 0x24
 8010e96:	e03c      	b.n	8010f12 <ManageStateAttached_SRC+0x12e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010e98:	f7fc f9ba 	bl	800d210 <HAL_GetTick>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	1ad3      	subs	r3, r2, r3
 8010ea4:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d932      	bls.n	8010f12 <ManageStateAttached_SRC+0x12e>
      {
        HW_SignalDetachment(PortNum);
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f001 fccc 	bl	801284c <HW_SignalDetachment>
#ifdef _DRP
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 8010eb4:	7bfa      	ldrb	r2, [r7, #15]
 8010eb6:	491a      	ldr	r1, [pc, #104]	; (8010f20 <ManageStateAttached_SRC+0x13c>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	011b      	lsls	r3, r3, #4
 8010ebc:	1a9b      	subs	r3, r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	440b      	add	r3, r1
 8010ec2:	330c      	adds	r3, #12
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	795b      	ldrb	r3, [r3, #5]
 8010ec8:	f003 0320 	and.w	r3, r3, #32
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d003      	beq.n	8010eda <ManageStateAttached_SRC+0xf6>
        {
          USBPDM1_AssertRd(PortNum);
 8010ed2:	7bfb      	ldrb	r3, [r7, #15]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f001 fa63 	bl	80123a0 <USBPDM1_AssertRd>
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010eda:	6a3a      	ldr	r2, [r7, #32]
 8010edc:	7813      	ldrb	r3, [r2, #0]
 8010ede:	f36f 1345 	bfc	r3, #5, #1
 8010ee2:	7013      	strb	r3, [r2, #0]
        /* move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8010ee4:	6a3a      	ldr	r2, [r7, #32]
 8010ee6:	7853      	ldrb	r3, [r2, #1]
 8010ee8:	210b      	movs	r1, #11
 8010eea:	f361 0345 	bfi	r3, r1, #1, #5
 8010eee:	7053      	strb	r3, [r2, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 8010efc:	2300      	movs	r3, #0
 8010efe:	627b      	str	r3, [r7, #36]	; 0x24
 8010f00:	e007      	b.n	8010f12 <ManageStateAttached_SRC+0x12e>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 8010f02:	6a3a      	ldr	r2, [r7, #32]
 8010f04:	7813      	ldrb	r3, [r2, #0]
 8010f06:	f36f 1345 	bfc	r3, #5, #1
 8010f0a:	7013      	strb	r3, [r2, #0]
    _timing = CAD_INFINITE_TIME;
 8010f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return _timing;
 8010f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3728      	adds	r7, #40	; 0x28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	20000b38 	.word	0x20000b38
 8010f20:	20000b54 	.word	0x20000b54

08010f24 <ManageStateAttachedWait_SNK>:
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b088      	sub	sp, #32
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
 8010f30:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010f32:	7bfb      	ldrb	r3, [r7, #15]
 8010f34:	011b      	lsls	r3, r3, #4
 8010f36:	4a3a      	ldr	r2, [pc, #232]	; (8011020 <ManageStateAttachedWait_SNK+0xfc>)
 8010f38:	4413      	add	r3, r2
 8010f3a:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010f40:	f7fc f966 	bl	800d210 <HAL_GetTick>
 8010f44:	4602      	mov	r2, r0
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fb39 	bl	80105c8 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	f003 031c 	and.w	r3, r3, #28
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b04      	cmp	r3, #4
 8010f62:	d12c      	bne.n	8010fbe <ManageStateAttachedWait_SNK+0x9a>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	2b78      	cmp	r3, #120	; 0x78
 8010f68:	d923      	bls.n	8010fb2 <ManageStateAttachedWait_SNK+0x8e>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
 8010f6c:	2101      	movs	r1, #1
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7f9 f8bc 	bl	800a0ec <USBPD_PWR_IF_GetVBUSStatus>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d11b      	bne.n	8010fb2 <ManageStateAttachedWait_SNK+0x8e>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8010f7a:	69bb      	ldr	r3, [r7, #24]
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	461a      	mov	r2, r3
 8010f86:	7bfb      	ldrb	r3, [r7, #15]
 8010f88:	4611      	mov	r1, r2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f001 fb12 	bl	80125b4 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8010f90:	69ba      	ldr	r2, [r7, #24]
 8010f92:	7853      	ldrb	r3, [r2, #1]
 8010f94:	2103      	movs	r1, #3
 8010f96:	f361 0345 	bfi	r3, r1, #1, #5
 8010f9a:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	2202      	movs	r2, #2
 8010fa0:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	461a      	mov	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010fb2:	69ba      	ldr	r2, [r7, #24]
 8010fb4:	7813      	ldrb	r3, [r2, #0]
 8010fb6:	f36f 1345 	bfc	r3, #5, #1
 8010fba:	7013      	strb	r3, [r2, #0]
 8010fbc:	e02a      	b.n	8011014 <ManageStateAttachedWait_SNK+0xf0>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f003 0320 	and.w	r3, r3, #32
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10c      	bne.n	8010fe6 <ManageStateAttachedWait_SNK+0xc2>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010fcc:	f7fc f920 	bl	800d210 <HAL_GetTick>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	7813      	ldrb	r3, [r2, #0]
 8010fda:	f043 0320 	orr.w	r3, r3, #32
 8010fde:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8010fe0:	230c      	movs	r3, #12
 8010fe2:	61fb      	str	r3, [r7, #28]
 8010fe4:	e016      	b.n	8011014 <ManageStateAttachedWait_SNK+0xf0>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8010fe6:	f7fc f913 	bl	800d210 <HAL_GetTick>
 8010fea:	4602      	mov	r2, r0
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	2b0c      	cmp	r3, #12
 8010ff4:	d90e      	bls.n	8011014 <ManageStateAttachedWait_SNK+0xf0>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010ff6:	69ba      	ldr	r2, [r7, #24]
 8010ff8:	7813      	ldrb	r3, [r2, #0]
 8010ffa:	f36f 1345 	bfc	r3, #5, #1
 8010ffe:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8011000:	69ba      	ldr	r2, [r7, #24]
 8011002:	7853      	ldrb	r3, [r2, #1]
 8011004:	2101      	movs	r1, #1
 8011006:	f361 0345 	bfi	r3, r1, #1, #5
 801100a:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	4618      	mov	r0, r3
 8011010:	f7fb f9b2 	bl	800c378 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8011014:	69fb      	ldr	r3, [r7, #28]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3720      	adds	r7, #32
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	20000b38 	.word	0x20000b38

08011024 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af00      	add	r7, sp, #0
 801102a:	4603      	mov	r3, r0
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
 8011030:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8011032:	7bfb      	ldrb	r3, [r7, #15]
 8011034:	011b      	lsls	r3, r3, #4
 8011036:	4a2a      	ldr	r2, [pc, #168]	; (80110e0 <ManageStateAttached_SNK+0xbc>)
 8011038:	4413      	add	r3, r2
 801103a:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801103c:	2302      	movs	r3, #2
 801103e:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8011040:	2300      	movs	r3, #0
 8011042:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8011044:	7bfa      	ldrb	r2, [r7, #15]
 8011046:	4927      	ldr	r1, [pc, #156]	; (80110e4 <ManageStateAttached_SNK+0xc0>)
 8011048:	4613      	mov	r3, r2
 801104a:	011b      	lsls	r3, r3, #4
 801104c:	1a9b      	subs	r3, r3, r2
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	440b      	add	r3, r1
 8011052:	3334      	adds	r3, #52	; 0x34
 8011054:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8011056:	2b01      	cmp	r3, #1
 8011058:	d10b      	bne.n	8011072 <ManageStateAttached_SNK+0x4e>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801105a:	7bfa      	ldrb	r2, [r7, #15]
 801105c:	4921      	ldr	r1, [pc, #132]	; (80110e4 <ManageStateAttached_SNK+0xc0>)
 801105e:	4613      	mov	r3, r2
 8011060:	011b      	lsls	r3, r3, #4
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	440b      	add	r3, r1
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 801106c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011070:	e00a      	b.n	8011088 <ManageStateAttached_SNK+0x64>
 8011072:	7bfa      	ldrb	r2, [r7, #15]
 8011074:	491b      	ldr	r1, [pc, #108]	; (80110e4 <ManageStateAttached_SNK+0xc0>)
 8011076:	4613      	mov	r3, r2
 8011078:	011b      	lsls	r3, r3, #4
 801107a:	1a9b      	subs	r3, r3, r2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	440b      	add	r3, r1
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8011088:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 801108a:	7bfb      	ldrb	r3, [r7, #15]
 801108c:	2102      	movs	r1, #2
 801108e:	4618      	mov	r0, r3
 8011090:	f7f9 f82c 	bl	800a0ec <USBPD_PWR_IF_GetVBUSStatus>
 8011094:	4603      	mov	r3, r0
 8011096:	2b01      	cmp	r3, #1
 8011098:	d11b      	bne.n	80110d2 <ManageStateAttached_SNK+0xae>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d117      	bne.n	80110d2 <ManageStateAttached_SNK+0xae>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 80110a2:	7bfb      	ldrb	r3, [r7, #15]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f001 fbd1 	bl	801284c <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 80110aa:	69ba      	ldr	r2, [r7, #24]
 80110ac:	7813      	ldrb	r3, [r2, #0]
 80110ae:	f36f 0384 	bfc	r3, #2, #3
 80110b2:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80110b4:	69ba      	ldr	r2, [r7, #24]
 80110b6:	7853      	ldrb	r3, [r2, #1]
 80110b8:	2101      	movs	r1, #1
 80110ba:	f361 0345 	bfi	r3, r1, #1, #5
 80110be:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2201      	movs	r2, #1
 80110c4:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2200      	movs	r2, #0
 80110ca:	601a      	str	r2, [r3, #0]
    _timing = 0;
 80110cc:	2300      	movs	r3, #0
 80110ce:	61fb      	str	r3, [r7, #28]
 80110d0:	e001      	b.n	80110d6 <ManageStateAttached_SNK+0xb2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 80110d2:	230a      	movs	r3, #10
 80110d4:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80110d6:	69fb      	ldr	r3, [r7, #28]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3720      	adds	r7, #32
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	20000b38 	.word	0x20000b38
 80110e4:	20000b54 	.word	0x20000b54

080110e8 <CAD_HW_IF_VBUSDetectCallback>:
#endif /* _SNK || _DRP */

#if defined(TCPP0203_SUPPORT)
void CAD_HW_IF_VBUSDetectCallback(uint32_t PortNum,
                                  USBPD_PWR_VBUSConnectionStatusTypeDef VBUSConnectionStatus)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af02      	add	r7, sp, #8
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	460b      	mov	r3, r1
 80110f2:	70fb      	strb	r3, [r7, #3]
  if (VBUSConnectionStatus == VBUS_CONNECTED)
 80110f4:	78fb      	ldrb	r3, [r7, #3]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d109      	bne.n	801110e <CAD_HW_IF_VBUSDetectCallback+0x26>
  {
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	b2d9      	uxtb	r1, r3
 80110fe:	2333      	movs	r3, #51	; 0x33
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	4b0c      	ldr	r3, [pc, #48]	; (8011134 <CAD_HW_IF_VBUSDetectCallback+0x4c>)
 8011104:	2200      	movs	r2, #0
 8011106:	2006      	movs	r0, #6
 8011108:	f7fe fc84 	bl	800fa14 <USBPD_TRACE_Add>
    /* VBUS_NOT_CONNECTED indication management : Error has to be handled through a Detach/Attach procedure.
       Handled using ErrorRecovery mechanism */
    CAD_Enter_ErrorRecovery(PortNum);
#endif /* USBPDCORE_LIB_NO_PD */
  }
}
 801110c:	e00d      	b.n	801112a <CAD_HW_IF_VBUSDetectCallback+0x42>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	b2d9      	uxtb	r1, r3
 8011112:	2337      	movs	r3, #55	; 0x37
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	4b08      	ldr	r3, [pc, #32]	; (8011138 <CAD_HW_IF_VBUSDetectCallback+0x50>)
 8011118:	2200      	movs	r2, #0
 801111a:	2006      	movs	r0, #6
 801111c:	f7fe fc7a 	bl	800fa14 <USBPD_TRACE_Add>
    CAD_Enter_ErrorRecovery(PortNum);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f7fe ffd1 	bl	80100cc <CAD_Enter_ErrorRecovery>
}
 801112a:	bf00      	nop
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	0801b75c 	.word	0x0801b75c
 8011138:	0801b790 	.word	0x0801b790

0801113c <LL_AHB1_GRP1_EnableClock>:
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011144:	4b08      	ldr	r3, [pc, #32]	; (8011168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011148:	4907      	ldr	r1, [pc, #28]	; (8011168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4313      	orrs	r3, r2
 801114e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011150:	4b05      	ldr	r3, [pc, #20]	; (8011168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4013      	ands	r3, r2
 8011158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801115a:	68fb      	ldr	r3, [r7, #12]
}
 801115c:	bf00      	nop
 801115e:	3714      	adds	r7, #20
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr
 8011168:	40021000 	.word	0x40021000

0801116c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	4603      	mov	r3, r0
 8011174:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 8011176:	4b03      	ldr	r3, [pc, #12]	; (8011184 <USBPD_HW_GetUSPDInstance+0x18>)
}
 8011178:	4618      	mov	r0, r3
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	4000a000 	.word	0x4000a000

08011188 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08e      	sub	sp, #56	; 0x38
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8011192:	f107 030c 	add.w	r3, r7, #12
 8011196:	4618      	mov	r0, r3
 8011198:	f7fe f936 	bl	800f408 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 801119c:	2300      	movs	r3, #0
 801119e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80111a0:	2300      	movs	r3, #0
 80111a2:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80111a4:	2300      	movs	r3, #0
 80111a6:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80111a8:	2380      	movs	r3, #128	; 0x80
 80111aa:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80111ac:	2300      	movs	r3, #0
 80111ae:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80111b0:	2300      	movs	r3, #0
 80111b2:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80111bc:	2300      	movs	r3, #0
 80111be:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80111c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80111c4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 80111c6:	2001      	movs	r0, #1
 80111c8:	f7ff ffb8 	bl	801113c <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 80111cc:	2372      	movs	r3, #114	; 0x72
 80111ce:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 80111d0:	f107 030c 	add.w	r3, r7, #12
 80111d4:	461a      	mov	r2, r3
 80111d6:	2100      	movs	r1, #0
 80111d8:	4803      	ldr	r0, [pc, #12]	; (80111e8 <USBPD_HW_Init_DMARxInstance+0x60>)
 80111da:	f7fe f8d5 	bl	800f388 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80111de:	4b03      	ldr	r3, [pc, #12]	; (80111ec <USBPD_HW_Init_DMARxInstance+0x64>)
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3738      	adds	r7, #56	; 0x38
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	40020000 	.word	0x40020000
 80111ec:	40020008 	.word	0x40020008

080111f0 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	4603      	mov	r3, r0
 80111f8:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80111fa:	bf00      	nop
 80111fc:	370c      	adds	r7, #12
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
	...

08011208 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b08e      	sub	sp, #56	; 0x38
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8011212:	f107 030c 	add.w	r3, r7, #12
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe f8f6 	bl	800f408 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 801121c:	2310      	movs	r3, #16
 801121e:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8011220:	2300      	movs	r3, #0
 8011222:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8011224:	2300      	movs	r3, #0
 8011226:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8011228:	2380      	movs	r3, #128	; 0x80
 801122a:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801122c:	2300      	movs	r3, #0
 801122e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8011230:	2300      	movs	r3, #0
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8011238:	2300      	movs	r3, #0
 801123a:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 801123c:	2300      	movs	r3, #0
 801123e:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8011240:	2001      	movs	r0, #1
 8011242:	f7ff ff7b 	bl	801113c <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8011246:	2373      	movs	r3, #115	; 0x73
 8011248:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801124e:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	461a      	mov	r2, r3
 8011256:	2101      	movs	r1, #1
 8011258:	4803      	ldr	r0, [pc, #12]	; (8011268 <USBPD_HW_Init_DMATxInstance+0x60>)
 801125a:	f7fe f895 	bl	800f388 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 801125e:	4b03      	ldr	r3, [pc, #12]	; (801126c <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8011260:	4618      	mov	r0, r3
 8011262:	3738      	adds	r7, #56	; 0x38
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	40020000 	.word	0x40020000
 801126c:	4002001c 	.word	0x4002001c

08011270 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	4603      	mov	r3, r0
 8011278:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 801127a:	bf00      	nop
 801127c:	370c      	adds	r7, #12
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr

08011286 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8011286:	b480      	push	{r7}
 8011288:	b083      	sub	sp, #12
 801128a:	af00      	add	r7, sp, #0
 801128c:	4603      	mov	r3, r0
 801128e:	460a      	mov	r2, r1
 8011290:	71fb      	strb	r3, [r7, #7]
 8011292:	4613      	mov	r3, r2
 8011294:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 8011296:	bf00      	nop
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80112a2:	b480      	push	{r7}
 80112a4:	b083      	sub	sp, #12
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	699b      	ldr	r3, [r3, #24]
 80112ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	619a      	str	r2, [r3, #24]
}
 80112b6:	bf00      	nop
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	619a      	str	r2, [r3, #24]
}
 80112d6:	bf00      	nop
 80112d8:	370c      	adds	r7, #12
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 80112e2:	b480      	push	{r7}
 80112e4:	b083      	sub	sp, #12
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	699b      	ldr	r3, [r3, #24]
 80112ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	619a      	str	r2, [r3, #24]
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8011302:	b480      	push	{r7}
 8011304:	b083      	sub	sp, #12
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	619a      	str	r2, [r3, #24]
}
 8011316:	bf00      	nop
 8011318:	370c      	adds	r7, #12
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8011322:	b480      	push	{r7}
 8011324:	b083      	sub	sp, #12
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	619a      	str	r2, [r3, #24]
}
 8011336:	bf00      	nop
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8011342:	b480      	push	{r7}
 8011344:	b083      	sub	sp, #12
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	619a      	str	r2, [r3, #24]
}
 8011356:	bf00      	nop
 8011358:	370c      	adds	r7, #12
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8011362:	b480      	push	{r7}
 8011364:	b083      	sub	sp, #12
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	619a      	str	r2, [r3, #24]
}
 8011376:	bf00      	nop
 8011378:	370c      	adds	r7, #12
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr

08011382 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8011382:	b480      	push	{r7}
 8011384:	b083      	sub	sp, #12
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	699b      	ldr	r3, [r3, #24]
 801138e:	f043 0220 	orr.w	r2, r3, #32
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	619a      	str	r2, [r3, #24]
}
 8011396:	bf00      	nop
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr

080113a2 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 80113a2:	b480      	push	{r7}
 80113a4:	b083      	sub	sp, #12
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	f043 0210 	orr.w	r2, r3, #16
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	619a      	str	r2, [r3, #24]
}
 80113b6:	bf00      	nop
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr

080113c2 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 80113c2:	b480      	push	{r7}
 80113c4:	b083      	sub	sp, #12
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	699b      	ldr	r3, [r3, #24]
 80113ce:	f043 0208 	orr.w	r2, r3, #8
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	619a      	str	r2, [r3, #24]
}
 80113d6:	bf00      	nop
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 80113e2:	b480      	push	{r7}
 80113e4:	b083      	sub	sp, #12
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	699b      	ldr	r3, [r3, #24]
 80113ee:	f043 0204 	orr.w	r2, r3, #4
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	619a      	str	r2, [r3, #24]
}
 80113f6:	bf00      	nop
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8011402:	b480      	push	{r7}
 8011404:	b083      	sub	sp, #12
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	699b      	ldr	r3, [r3, #24]
 801140e:	f043 0202 	orr.w	r2, r3, #2
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	619a      	str	r2, [r3, #24]
}
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8011426:	2000      	movs	r0, #0
 8011428:	f000 f802 	bl	8011430 <PORTx_IRQHandler>
}
 801142c:	bf00      	nop
 801142e:	bd80      	pop	{r7, pc}

08011430 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	4603      	mov	r3, r0
 8011438:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 801143a:	79fa      	ldrb	r2, [r7, #7]
 801143c:	4998      	ldr	r1, [pc, #608]	; (80116a0 <PORTx_IRQHandler+0x270>)
 801143e:	4613      	mov	r3, r2
 8011440:	011b      	lsls	r3, r3, #4
 8011442:	1a9b      	subs	r3, r3, r2
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	440b      	add	r3, r1
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	695b      	ldr	r3, [r3, #20]
 8011450:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	691a      	ldr	r2, [r3, #16]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	4013      	ands	r3, r2
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 81ca 	beq.w	80117f4 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	f003 0302 	and.w	r3, r3, #2
 8011466:	2b00      	cmp	r3, #0
 8011468:	d035      	beq.n	80114d6 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7ff ffc9 	bl	8011402 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011470:	79fa      	ldrb	r2, [r7, #7]
 8011472:	498b      	ldr	r1, [pc, #556]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011474:	4613      	mov	r3, r2
 8011476:	011b      	lsls	r3, r3, #4
 8011478:	1a9b      	subs	r3, r3, r2
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	440b      	add	r3, r1
 801147e:	3304      	adds	r3, #4
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	6819      	ldr	r1, [r3, #0]
 8011484:	79fa      	ldrb	r2, [r7, #7]
 8011486:	4886      	ldr	r0, [pc, #536]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011488:	4613      	mov	r3, r2
 801148a:	011b      	lsls	r3, r3, #4
 801148c:	1a9b      	subs	r3, r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4403      	add	r3, r0
 8011492:	3304      	adds	r3, #4
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f021 0201 	bic.w	r2, r1, #1
 801149a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 801149c:	bf00      	nop
 801149e:	79fa      	ldrb	r2, [r7, #7]
 80114a0:	497f      	ldr	r1, [pc, #508]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80114a2:	4613      	mov	r3, r2
 80114a4:	011b      	lsls	r3, r3, #4
 80114a6:	1a9b      	subs	r3, r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	440b      	add	r3, r1
 80114ac:	3304      	adds	r3, #4
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f003 0301 	and.w	r3, r3, #1
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d0f1      	beq.n	801149e <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 80114ba:	79fa      	ldrb	r2, [r7, #7]
 80114bc:	4978      	ldr	r1, [pc, #480]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80114be:	4613      	mov	r3, r2
 80114c0:	011b      	lsls	r3, r3, #4
 80114c2:	1a9b      	subs	r3, r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	440b      	add	r3, r1
 80114c8:	3314      	adds	r3, #20
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	79fa      	ldrb	r2, [r7, #7]
 80114ce:	2101      	movs	r1, #1
 80114d0:	4610      	mov	r0, r2
 80114d2:	4798      	blx	r3
      return;
 80114d4:	e18e      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d035      	beq.n	801154c <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff ff7e 	bl	80113e2 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80114e6:	79fa      	ldrb	r2, [r7, #7]
 80114e8:	496d      	ldr	r1, [pc, #436]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80114ea:	4613      	mov	r3, r2
 80114ec:	011b      	lsls	r3, r3, #4
 80114ee:	1a9b      	subs	r3, r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	440b      	add	r3, r1
 80114f4:	3304      	adds	r3, #4
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6819      	ldr	r1, [r3, #0]
 80114fa:	79fa      	ldrb	r2, [r7, #7]
 80114fc:	4868      	ldr	r0, [pc, #416]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80114fe:	4613      	mov	r3, r2
 8011500:	011b      	lsls	r3, r3, #4
 8011502:	1a9b      	subs	r3, r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4403      	add	r3, r0
 8011508:	3304      	adds	r3, #4
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f021 0201 	bic.w	r2, r1, #1
 8011510:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8011512:	bf00      	nop
 8011514:	79fa      	ldrb	r2, [r7, #7]
 8011516:	4962      	ldr	r1, [pc, #392]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011518:	4613      	mov	r3, r2
 801151a:	011b      	lsls	r3, r3, #4
 801151c:	1a9b      	subs	r3, r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	440b      	add	r3, r1
 8011522:	3304      	adds	r3, #4
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f003 0301 	and.w	r3, r3, #1
 801152c:	2b01      	cmp	r3, #1
 801152e:	d0f1      	beq.n	8011514 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8011530:	79fa      	ldrb	r2, [r7, #7]
 8011532:	495b      	ldr	r1, [pc, #364]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011534:	4613      	mov	r3, r2
 8011536:	011b      	lsls	r3, r3, #4
 8011538:	1a9b      	subs	r3, r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	3314      	adds	r3, #20
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	79fa      	ldrb	r2, [r7, #7]
 8011544:	2100      	movs	r1, #0
 8011546:	4610      	mov	r0, r2
 8011548:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 801154a:	e153      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	f003 0308 	and.w	r3, r3, #8
 8011552:	2b00      	cmp	r3, #0
 8011554:	d035      	beq.n	80115c2 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7ff ff33 	bl	80113c2 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801155c:	79fa      	ldrb	r2, [r7, #7]
 801155e:	4950      	ldr	r1, [pc, #320]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011560:	4613      	mov	r3, r2
 8011562:	011b      	lsls	r3, r3, #4
 8011564:	1a9b      	subs	r3, r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	440b      	add	r3, r1
 801156a:	3304      	adds	r3, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	6819      	ldr	r1, [r3, #0]
 8011570:	79fa      	ldrb	r2, [r7, #7]
 8011572:	484b      	ldr	r0, [pc, #300]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011574:	4613      	mov	r3, r2
 8011576:	011b      	lsls	r3, r3, #4
 8011578:	1a9b      	subs	r3, r3, r2
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	4403      	add	r3, r0
 801157e:	3304      	adds	r3, #4
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f021 0201 	bic.w	r2, r1, #1
 8011586:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8011588:	bf00      	nop
 801158a:	79fa      	ldrb	r2, [r7, #7]
 801158c:	4944      	ldr	r1, [pc, #272]	; (80116a0 <PORTx_IRQHandler+0x270>)
 801158e:	4613      	mov	r3, r2
 8011590:	011b      	lsls	r3, r3, #4
 8011592:	1a9b      	subs	r3, r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	440b      	add	r3, r1
 8011598:	3304      	adds	r3, #4
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f003 0301 	and.w	r3, r3, #1
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d0f1      	beq.n	801158a <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 80115a6:	79fa      	ldrb	r2, [r7, #7]
 80115a8:	493d      	ldr	r1, [pc, #244]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80115aa:	4613      	mov	r3, r2
 80115ac:	011b      	lsls	r3, r3, #4
 80115ae:	1a9b      	subs	r3, r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	440b      	add	r3, r1
 80115b4:	3314      	adds	r3, #20
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	79fa      	ldrb	r2, [r7, #7]
 80115ba:	2102      	movs	r1, #2
 80115bc:	4610      	mov	r0, r2
 80115be:	4798      	blx	r3
      return;
 80115c0:	e118      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	f003 0310 	and.w	r3, r3, #16
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d003      	beq.n	80115d4 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	f7ff fee8 	bl	80113a2 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 80115d2:	e10f      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	f003 0320 	and.w	r3, r3, #32
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d010      	beq.n	8011600 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 80115de:	68f8      	ldr	r0, [r7, #12]
 80115e0:	f7ff fecf 	bl	8011382 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 80115e4:	79fa      	ldrb	r2, [r7, #7]
 80115e6:	492e      	ldr	r1, [pc, #184]	; (80116a0 <PORTx_IRQHandler+0x270>)
 80115e8:	4613      	mov	r3, r2
 80115ea:	011b      	lsls	r3, r3, #4
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	440b      	add	r3, r1
 80115f2:	3324      	adds	r3, #36	; 0x24
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	79fa      	ldrb	r2, [r7, #7]
 80115f8:	2105      	movs	r1, #5
 80115fa:	4610      	mov	r0, r2
 80115fc:	4798      	blx	r3
      return;
 80115fe:	e0f9      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011606:	2b00      	cmp	r3, #0
 8011608:	d003      	beq.n	8011612 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f7ff fea9 	bl	8011362 <LL_UCPD_ClearFlag_TxUND>
      return;
 8011610:	e0f0      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011618:	2b00      	cmp	r3, #0
 801161a:	d01e      	beq.n	801165a <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011620:	2b05      	cmp	r3, #5
 8011622:	d10c      	bne.n	801163e <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8011624:	79fa      	ldrb	r2, [r7, #7]
 8011626:	491e      	ldr	r1, [pc, #120]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011628:	4613      	mov	r3, r2
 801162a:	011b      	lsls	r3, r3, #4
 801162c:	1a9b      	subs	r3, r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	440b      	add	r3, r1
 8011632:	331c      	adds	r3, #28
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	79fa      	ldrb	r2, [r7, #7]
 8011638:	2106      	movs	r1, #6
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff fe7f 	bl	8011342 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8011644:	79fa      	ldrb	r2, [r7, #7]
 8011646:	4916      	ldr	r1, [pc, #88]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011648:	4613      	mov	r3, r2
 801164a:	011b      	lsls	r3, r3, #4
 801164c:	1a9b      	subs	r3, r3, r2
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	440b      	add	r3, r1
 8011652:	3338      	adds	r3, #56	; 0x38
 8011654:	2201      	movs	r2, #1
 8011656:	701a      	strb	r2, [r3, #0]
      return;
 8011658:	e0cc      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011660:	2b00      	cmp	r3, #0
 8011662:	d010      	beq.n	8011686 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8011664:	79fa      	ldrb	r2, [r7, #7]
 8011666:	490e      	ldr	r1, [pc, #56]	; (80116a0 <PORTx_IRQHandler+0x270>)
 8011668:	4613      	mov	r3, r2
 801166a:	011b      	lsls	r3, r3, #4
 801166c:	1a9b      	subs	r3, r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	440b      	add	r3, r1
 8011672:	331c      	adds	r3, #28
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	79fa      	ldrb	r2, [r7, #7]
 8011678:	2105      	movs	r1, #5
 801167a:	4610      	mov	r0, r2
 801167c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f7ff fe4f 	bl	8011322 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8011684:	e0b6      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00b      	beq.n	80116a8 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8011690:	4b04      	ldr	r3, [pc, #16]	; (80116a4 <PORTx_IRQHandler+0x274>)
 8011692:	2201      	movs	r2, #1
 8011694:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7ff fe33 	bl	8011302 <LL_UCPD_ClearFlag_RxOvr>
      return;
 801169c:	e0aa      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
 801169e:	bf00      	nop
 80116a0:	20000b54 	.word	0x20000b54
 80116a4:	20000b48 	.word	0x20000b48
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	f000 8085 	beq.w	80117be <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 80116b4:	79fa      	ldrb	r2, [r7, #7]
 80116b6:	4951      	ldr	r1, [pc, #324]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 80116b8:	4613      	mov	r3, r2
 80116ba:	011b      	lsls	r3, r3, #4
 80116bc:	1a9b      	subs	r3, r3, r2
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	440b      	add	r3, r1
 80116c2:	3338      	adds	r3, #56	; 0x38
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f7ff fe0a 	bl	80112e2 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80116ce:	79fa      	ldrb	r2, [r7, #7]
 80116d0:	494a      	ldr	r1, [pc, #296]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 80116d2:	4613      	mov	r3, r2
 80116d4:	011b      	lsls	r3, r3, #4
 80116d6:	1a9b      	subs	r3, r3, r2
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	440b      	add	r3, r1
 80116dc:	3308      	adds	r3, #8
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	6819      	ldr	r1, [r3, #0]
 80116e2:	79fa      	ldrb	r2, [r7, #7]
 80116e4:	4845      	ldr	r0, [pc, #276]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 80116e6:	4613      	mov	r3, r2
 80116e8:	011b      	lsls	r3, r3, #4
 80116ea:	1a9b      	subs	r3, r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4403      	add	r3, r0
 80116f0:	3308      	adds	r3, #8
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f021 0201 	bic.w	r2, r1, #1
 80116f8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80116fa:	bf00      	nop
 80116fc:	79fa      	ldrb	r2, [r7, #7]
 80116fe:	493f      	ldr	r1, [pc, #252]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 8011700:	4613      	mov	r3, r2
 8011702:	011b      	lsls	r3, r3, #4
 8011704:	1a9b      	subs	r3, r3, r2
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	440b      	add	r3, r1
 801170a:	3308      	adds	r3, #8
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b01      	cmp	r3, #1
 8011716:	d0f1      	beq.n	80116fc <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011718:	79fa      	ldrb	r2, [r7, #7]
 801171a:	4938      	ldr	r1, [pc, #224]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 801171c:	4613      	mov	r3, r2
 801171e:	011b      	lsls	r3, r3, #4
 8011720:	1a9b      	subs	r3, r3, r2
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	440b      	add	r3, r1
 8011726:	3330      	adds	r3, #48	; 0x30
 8011728:	6818      	ldr	r0, [r3, #0]
 801172a:	79fa      	ldrb	r2, [r7, #7]
 801172c:	4933      	ldr	r1, [pc, #204]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 801172e:	4613      	mov	r3, r2
 8011730:	011b      	lsls	r3, r3, #4
 8011732:	1a9b      	subs	r3, r3, r2
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	440b      	add	r3, r1
 8011738:	3308      	adds	r3, #8
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4602      	mov	r2, r0
 801173e:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8011740:	79fa      	ldrb	r2, [r7, #7]
 8011742:	492e      	ldr	r1, [pc, #184]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 8011744:	4613      	mov	r3, r2
 8011746:	011b      	lsls	r3, r3, #4
 8011748:	1a9b      	subs	r3, r3, r2
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	440b      	add	r3, r1
 801174e:	3308      	adds	r3, #8
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f44f 7284 	mov.w	r2, #264	; 0x108
 8011756:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8011758:	79fa      	ldrb	r2, [r7, #7]
 801175a:	4928      	ldr	r1, [pc, #160]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 801175c:	4613      	mov	r3, r2
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	1a9b      	subs	r3, r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	440b      	add	r3, r1
 8011766:	3308      	adds	r3, #8
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	6819      	ldr	r1, [r3, #0]
 801176c:	79fa      	ldrb	r2, [r7, #7]
 801176e:	4823      	ldr	r0, [pc, #140]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 8011770:	4613      	mov	r3, r2
 8011772:	011b      	lsls	r3, r3, #4
 8011774:	1a9b      	subs	r3, r3, r2
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	4403      	add	r3, r0
 801177a:	3308      	adds	r3, #8
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f041 0201 	orr.w	r2, r1, #1
 8011782:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801178a:	2b00      	cmp	r3, #0
 801178c:	d113      	bne.n	80117b6 <PORTx_IRQHandler+0x386>
 801178e:	4b1c      	ldr	r3, [pc, #112]	; (8011800 <PORTx_IRQHandler+0x3d0>)
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10f      	bne.n	80117b6 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8011796:	79fa      	ldrb	r2, [r7, #7]
 8011798:	4918      	ldr	r1, [pc, #96]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 801179a:	4613      	mov	r3, r2
 801179c:	011b      	lsls	r3, r3, #4
 801179e:	1a9b      	subs	r3, r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	440b      	add	r3, r1
 80117a4:	3320      	adds	r3, #32
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80117ac:	f002 0107 	and.w	r1, r2, #7
 80117b0:	79fa      	ldrb	r2, [r7, #7]
 80117b2:	4610      	mov	r0, r2
 80117b4:	4798      	blx	r3
      }
      ovrflag = 0;
 80117b6:	4b12      	ldr	r3, [pc, #72]	; (8011800 <PORTx_IRQHandler+0x3d0>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	701a      	strb	r2, [r3, #0]
      return;
 80117bc:	e01a      	b.n	80117f4 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d104      	bne.n	80117d2 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d010      	beq.n	80117f4 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 80117d2:	68f8      	ldr	r0, [r7, #12]
 80117d4:	f7ff fd75 	bl	80112c2 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80117d8:	68f8      	ldr	r0, [r7, #12]
 80117da:	f7ff fd62 	bl	80112a2 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 80117de:	79fa      	ldrb	r2, [r7, #7]
 80117e0:	4906      	ldr	r1, [pc, #24]	; (80117fc <PORTx_IRQHandler+0x3cc>)
 80117e2:	4613      	mov	r3, r2
 80117e4:	011b      	lsls	r3, r3, #4
 80117e6:	1a9b      	subs	r3, r3, r2
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	440b      	add	r3, r1
 80117ec:	332c      	adds	r3, #44	; 0x2c
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80117f2:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	20000b54 	.word	0x20000b54
 8011800:	20000b48 	.word	0x20000b48

08011804 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	60b9      	str	r1, [r7, #8]
 801180c:	607a      	str	r2, [r7, #4]
 801180e:	603b      	str	r3, [r7, #0]
 8011810:	4603      	mov	r3, r0
 8011812:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8011814:	7bfa      	ldrb	r2, [r7, #15]
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	6919      	ldr	r1, [r3, #16]
 801181a:	482d      	ldr	r0, [pc, #180]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 801181c:	4613      	mov	r3, r2
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	1a9b      	subs	r3, r3, r2
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	4403      	add	r3, r0
 8011826:	3314      	adds	r3, #20
 8011828:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 801182a:	7bfa      	ldrb	r2, [r7, #15]
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	68d9      	ldr	r1, [r3, #12]
 8011830:	4827      	ldr	r0, [pc, #156]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 8011832:	4613      	mov	r3, r2
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	1a9b      	subs	r3, r3, r2
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	4403      	add	r3, r0
 801183c:	3318      	adds	r3, #24
 801183e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8011840:	7bfa      	ldrb	r2, [r7, #15]
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	6859      	ldr	r1, [r3, #4]
 8011846:	4822      	ldr	r0, [pc, #136]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 8011848:	4613      	mov	r3, r2
 801184a:	011b      	lsls	r3, r3, #4
 801184c:	1a9b      	subs	r3, r3, r2
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	4403      	add	r3, r0
 8011852:	331c      	adds	r3, #28
 8011854:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8011856:	7bfa      	ldrb	r2, [r7, #15]
 8011858:	491d      	ldr	r1, [pc, #116]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 801185a:	4613      	mov	r3, r2
 801185c:	011b      	lsls	r3, r3, #4
 801185e:	1a9b      	subs	r3, r3, r2
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	440b      	add	r3, r1
 8011864:	3320      	adds	r3, #32
 8011866:	4a1b      	ldr	r2, [pc, #108]	; (80118d4 <USBPD_PHY_Init+0xd0>)
 8011868:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801186a:	7bfa      	ldrb	r2, [r7, #15]
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	6899      	ldr	r1, [r3, #8]
 8011870:	4817      	ldr	r0, [pc, #92]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 8011872:	4613      	mov	r3, r2
 8011874:	011b      	lsls	r3, r3, #4
 8011876:	1a9b      	subs	r3, r3, r2
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4403      	add	r3, r0
 801187c:	3324      	adds	r3, #36	; 0x24
 801187e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8011880:	7bfa      	ldrb	r2, [r7, #15]
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	6959      	ldr	r1, [r3, #20]
 8011886:	4812      	ldr	r0, [pc, #72]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 8011888:	4613      	mov	r3, r2
 801188a:	011b      	lsls	r3, r3, #4
 801188c:	1a9b      	subs	r3, r3, r2
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	4403      	add	r3, r0
 8011892:	3328      	adds	r3, #40	; 0x28
 8011894:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8011896:	7bfa      	ldrb	r2, [r7, #15]
 8011898:	490d      	ldr	r1, [pc, #52]	; (80118d0 <USBPD_PHY_Init+0xcc>)
 801189a:	4613      	mov	r3, r2
 801189c:	011b      	lsls	r3, r3, #4
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	440b      	add	r3, r1
 80118a4:	3330      	adds	r3, #48	; 0x30
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
 80118ac:	4a0a      	ldr	r2, [pc, #40]	; (80118d8 <USBPD_PHY_Init+0xd4>)
 80118ae:	00db      	lsls	r3, r3, #3
 80118b0:	4413      	add	r3, r2
 80118b2:	69ba      	ldr	r2, [r7, #24]
 80118b4:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80118b6:	7bfb      	ldrb	r3, [r7, #15]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	6812      	ldr	r2, [r2, #0]
 80118bc:	4906      	ldr	r1, [pc, #24]	; (80118d8 <USBPD_PHY_Init+0xd4>)
 80118be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 80118c2:	2300      	movs	r3, #0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3714      	adds	r7, #20
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr
 80118d0:	20000b54 	.word	0x20000b54
 80118d4:	08011a85 	.word	0x08011a85
 80118d8:	20000b4c 	.word	0x20000b4c

080118dc <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	4603      	mov	r3, r0
 80118e4:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 80118e6:	f240 3389 	movw	r3, #905	; 0x389
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	370c      	adds	r7, #12
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr

080118f6 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80118f6:	b480      	push	{r7}
 80118f8:	b083      	sub	sp, #12
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	4603      	mov	r3, r0
 80118fe:	71fb      	strb	r3, [r7, #7]
  return 30u;
 8011900:	231e      	movs	r3, #30
}
 8011902:	4618      	mov	r0, r3
 8011904:	370c      	adds	r7, #12
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr

0801190e <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 801190e:	b480      	push	{r7}
 8011910:	b083      	sub	sp, #12
 8011912:	af00      	add	r7, sp, #0
 8011914:	4603      	mov	r3, r0
 8011916:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8011918:	bf00      	nop
 801191a:	370c      	adds	r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	460a      	mov	r2, r1
 801192e:	71fb      	strb	r3, [r7, #7]
 8011930:	4613      	mov	r3, r2
 8011932:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8011934:	79b9      	ldrb	r1, [r7, #6]
 8011936:	79f8      	ldrb	r0, [r7, #7]
 8011938:	2300      	movs	r3, #0
 801193a:	2200      	movs	r2, #0
 801193c:	f000 f805 	bl	801194a <USBPD_PHY_SendMessage>
 8011940:	4603      	mov	r3, r0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	603a      	str	r2, [r7, #0]
 8011952:	461a      	mov	r2, r3
 8011954:	4603      	mov	r3, r0
 8011956:	71fb      	strb	r3, [r7, #7]
 8011958:	460b      	mov	r3, r1
 801195a:	71bb      	strb	r3, [r7, #6]
 801195c:	4613      	mov	r3, r2
 801195e:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8011960:	88bb      	ldrh	r3, [r7, #4]
 8011962:	79b9      	ldrb	r1, [r7, #6]
 8011964:	79f8      	ldrb	r0, [r7, #7]
 8011966:	683a      	ldr	r2, [r7, #0]
 8011968:	f000 fb0a 	bl	8011f80 <USBPD_HW_IF_SendBuffer>
 801196c:	4603      	mov	r3, r0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b082      	sub	sp, #8
 801197a:	af00      	add	r7, sp, #0
 801197c:	4603      	mov	r3, r0
 801197e:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8011980:	79fb      	ldrb	r3, [r7, #7]
 8011982:	4618      	mov	r0, r3
 8011984:	f000 fc42 	bl	801220c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8011988:	2300      	movs	r3, #0
}
 801198a:	4618      	mov	r0, r3
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b082      	sub	sp, #8
 8011996:	af00      	add	r7, sp, #0
 8011998:	4603      	mov	r3, r0
 801199a:	460a      	mov	r2, r1
 801199c:	71fb      	strb	r3, [r7, #7]
 801199e:	4613      	mov	r3, r2
 80119a0:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80119a2:	79bb      	ldrb	r3, [r7, #6]
 80119a4:	2b07      	cmp	r3, #7
 80119a6:	d103      	bne.n	80119b0 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80119a8:	79fb      	ldrb	r3, [r7, #7]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f000 fab0 	bl	8011f10 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b082      	sub	sp, #8
 80119be:	af00      	add	r7, sp, #0
 80119c0:	4603      	mov	r3, r0
 80119c2:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 80119c4:	79fb      	ldrb	r3, [r7, #7]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f000 ffc6 	bl	8012958 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80119de:	79fb      	ldrb	r3, [r7, #7]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 ffd1 	bl	8012988 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80119e6:	bf00      	nop
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
	...

080119f0 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	4603      	mov	r3, r0
 80119f8:	6039      	str	r1, [r7, #0]
 80119fa:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80119fc:	79fb      	ldrb	r3, [r7, #7]
 80119fe:	4a05      	ldr	r2, [pc, #20]	; (8011a14 <USBPD_PHY_SOPSupported+0x24>)
 8011a00:	00db      	lsls	r3, r3, #3
 8011a02:	4413      	add	r3, r2
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	605a      	str	r2, [r3, #4]
}
 8011a08:	bf00      	nop
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	20000b4c 	.word	0x20000b4c

08011a18 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	4603      	mov	r3, r0
 8011a20:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8011a22:	79fb      	ldrb	r3, [r7, #7]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f000 ffc7 	bl	80129b8 <USBPD_HW_IF_IsResistor_SinkTxOk>
 8011a2a:	4603      	mov	r3, r0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8011a3e:	79fb      	ldrb	r3, [r7, #7]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f000 fff9 	bl	8012a38 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 8011a46:	bf00      	nop
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b082      	sub	sp, #8
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	4603      	mov	r3, r0
 8011a56:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8011a58:	79fb      	ldrb	r3, [r7, #7]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 fd7e 	bl	801255c <USBPD_HW_IF_EnableRX>
}
 8011a60:	bf00      	nop
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f000 fd87 	bl	8012588 <USBPD_HW_IF_DisableRX>
}
 8011a7a:	bf00      	nop
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
	...

08011a84 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	6039      	str	r1, [r7, #0]
 8011a8e:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8011a90:	4a28      	ldr	r2, [pc, #160]	; (8011b34 <PHY_Rx_Completed+0xb0>)
 8011a92:	f107 0308 	add.w	r3, r7, #8
 8011a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a9a:	6018      	str	r0, [r3, #0]
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8011aa0:	f107 0208 	add.w	r2, r7, #8
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
 8011aae:	2b04      	cmp	r3, #4
 8011ab0:	dc02      	bgt.n	8011ab8 <PHY_Rx_Completed+0x34>
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	da19      	bge.n	8011aea <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8011ab6:	e034      	b.n	8011b22 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 8011ab8:	2b06      	cmp	r3, #6
 8011aba:	d132      	bne.n	8011b22 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8011abc:	79fb      	ldrb	r3, [r7, #7]
 8011abe:	4a1e      	ldr	r2, [pc, #120]	; (8011b38 <PHY_Rx_Completed+0xb4>)
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	4413      	add	r3, r2
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	f003 031e 	and.w	r3, r3, #30
 8011aca:	2b1e      	cmp	r3, #30
 8011acc:	d12b      	bne.n	8011b26 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8011ace:	79fa      	ldrb	r2, [r7, #7]
 8011ad0:	491a      	ldr	r1, [pc, #104]	; (8011b3c <PHY_Rx_Completed+0xb8>)
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	011b      	lsls	r3, r3, #4
 8011ad6:	1a9b      	subs	r3, r3, r2
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	440b      	add	r3, r1
 8011adc:	331c      	adds	r3, #28
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	79fa      	ldrb	r2, [r7, #7]
 8011ae2:	2106      	movs	r1, #6
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	4798      	blx	r3
      break;
 8011ae8:	e01d      	b.n	8011b26 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2201      	movs	r2, #1
 8011aee:	fa02 f303 	lsl.w	r3, r2, r3
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	4618      	mov	r0, r3
 8011af6:	79fb      	ldrb	r3, [r7, #7]
 8011af8:	4a0f      	ldr	r2, [pc, #60]	; (8011b38 <PHY_Rx_Completed+0xb4>)
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	4413      	add	r3, r2
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	7bfa      	ldrb	r2, [r7, #15]
 8011b02:	2101      	movs	r1, #1
 8011b04:	fa01 f202 	lsl.w	r2, r1, r2
 8011b08:	b2d2      	uxtb	r2, r2
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	4298      	cmp	r0, r3
 8011b0e:	d10c      	bne.n	8011b2a <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8011b10:	79fb      	ldrb	r3, [r7, #7]
 8011b12:	4a09      	ldr	r2, [pc, #36]	; (8011b38 <PHY_Rx_Completed+0xb4>)
 8011b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b18:	7bf9      	ldrb	r1, [r7, #15]
 8011b1a:	79fa      	ldrb	r2, [r7, #7]
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	4798      	blx	r3
      break;
 8011b20:	e003      	b.n	8011b2a <PHY_Rx_Completed+0xa6>
      break;
 8011b22:	bf00      	nop
 8011b24:	e002      	b.n	8011b2c <PHY_Rx_Completed+0xa8>
      break;
 8011b26:	bf00      	nop
 8011b28:	e000      	b.n	8011b2c <PHY_Rx_Completed+0xa8>
      break;
 8011b2a:	bf00      	nop
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0801b7c8 	.word	0x0801b7c8
 8011b38:	20000b4c 	.word	0x20000b4c
 8011b3c:	20000b54 	.word	0x20000b54

08011b40 <LL_AHB1_GRP1_EnableClock>:
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8011b48:	4b08      	ldr	r3, [pc, #32]	; (8011b6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b4c:	4907      	ldr	r1, [pc, #28]	; (8011b6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4313      	orrs	r3, r2
 8011b52:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8011b54:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8011b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
}
 8011b60:	bf00      	nop
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	40021000 	.word	0x40021000

08011b70 <LL_APB1_GRP1_EnableClock>:
{
 8011b70:	b480      	push	{r7}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011b78:	4b08      	ldr	r3, [pc, #32]	; (8011b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8011b7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b7c:	4907      	ldr	r1, [pc, #28]	; (8011b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4313      	orrs	r3, r2
 8011b82:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011b84:	4b05      	ldr	r3, [pc, #20]	; (8011b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8011b86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4013      	ands	r3, r2
 8011b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
}
 8011b90:	bf00      	nop
 8011b92:	3714      	adds	r7, #20
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	40021000 	.word	0x40021000

08011ba0 <LL_UCPD_Enable>:
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	601a      	str	r2, [r3, #0]
}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <LL_UCPD_Disable>:
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	601a      	str	r2, [r3, #0]
}
 8011bd4:	bf00      	nop
 8011bd6:	370c      	adds	r7, #12
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr

08011be0 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	60da      	str	r2, [r3, #12]
}
 8011bf4:	bf00      	nop
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr

08011c00 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	60da      	str	r2, [r3, #12]
}
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	60da      	str	r2, [r3, #12]
}
 8011c34:	bf00      	nop
 8011c36:	370c      	adds	r7, #12
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	60da      	str	r2, [r3, #12]
}
 8011c54:	bf00      	nop
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <LL_UCPD_SignalFRSTX>:
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	60da      	str	r2, [r3, #12]
}
 8011c74:	bf00      	nop
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <LL_UCPD_FRSDetectionEnable>:
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	60da      	str	r2, [r3, #12]
}
 8011c94:	bf00      	nop
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <LL_UCPD_FRSDetectionDisable>:
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	60da      	str	r2, [r3, #12]
}
 8011cb4:	bf00      	nop
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <LL_UCPD_SetccEnable>:
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	431a      	orrs	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	60da      	str	r2, [r3, #12]
}
 8011cda:	bf00      	nop
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <LL_UCPD_SetSNKRole>:
{
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	60da      	str	r2, [r3, #12]
}
 8011cfa:	bf00      	nop
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr

08011d06 <LL_UCPD_SetSRCRole>:
{
 8011d06:	b480      	push	{r7}
 8011d08:	b083      	sub	sp, #12
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	60da      	str	r2, [r3, #12]
}
 8011d1a:	bf00      	nop
 8011d1c:	370c      	adds	r7, #12
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr

08011d26 <LL_UCPD_SetRpResistor>:
{
 8011d26:	b480      	push	{r7}
 8011d28:	b083      	sub	sp, #12
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
 8011d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	60da      	str	r2, [r3, #12]
}
 8011d40:	bf00      	nop
 8011d42:	370c      	adds	r7, #12
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr

08011d4c <LL_UCPD_SetCCPin>:
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	431a      	orrs	r2, r3
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	60da      	str	r2, [r3, #12]
}
 8011d66:	bf00      	nop
 8011d68:	370c      	adds	r7, #12
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr

08011d72 <LL_UCPD_RxEnable>:
{
 8011d72:	b480      	push	{r7}
 8011d74:	b083      	sub	sp, #12
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	f043 0220 	orr.w	r2, r3, #32
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	60da      	str	r2, [r3, #12]
}
 8011d86:	bf00      	nop
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <LL_UCPD_RxDisable>:
{
 8011d92:	b480      	push	{r7}
 8011d94:	b083      	sub	sp, #12
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	f023 0220 	bic.w	r2, r3, #32
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	60da      	str	r2, [r3, #12]
}
 8011da6:	bf00      	nop
 8011da8:	370c      	adds	r7, #12
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr

08011db2 <LL_UCPD_SetRxMode>:
{
 8011db2:	b480      	push	{r7}
 8011db4:	b083      	sub	sp, #12
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	f023 0210 	bic.w	r2, r3, #16
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	431a      	orrs	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	60da      	str	r2, [r3, #12]
}
 8011dcc:	bf00      	nop
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <LL_UCPD_SendHardReset>:
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	f043 0208 	orr.w	r2, r3, #8
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	60da      	str	r2, [r3, #12]
}
 8011dec:	bf00      	nop
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr

08011df8 <LL_UCPD_SendMessage>:
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	f043 0204 	orr.w	r2, r3, #4
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	60da      	str	r2, [r3, #12]
}
 8011e0c:	bf00      	nop
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr

08011e18 <LL_UCPD_SetTxMode>:
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b083      	sub	sp, #12
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	f023 0203 	bic.w	r2, r3, #3
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	431a      	orrs	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	60da      	str	r2, [r3, #12]
}
 8011e32:	bf00      	nop
 8011e34:	370c      	adds	r7, #12
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr

08011e3e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011e3e:	b480      	push	{r7}
 8011e40:	b083      	sub	sp, #12
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	601a      	str	r2, [r3, #0]
}
 8011e52:	bf00      	nop
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	601a      	str	r2, [r3, #0]
}
 8011e72:	bf00      	nop
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011e7e:	b480      	push	{r7}
 8011e80:	b083      	sub	sp, #12
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	601a      	str	r2, [r3, #0]
}
 8011e92:	bf00      	nop
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	601a      	str	r2, [r3, #0]
}
 8011eb2:	bf00      	nop
 8011eb4:	370c      	adds	r7, #12
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr

08011ebe <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8011ebe:	b480      	push	{r7}
 8011ec0:	b083      	sub	sp, #12
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	683a      	ldr	r2, [r7, #0]
 8011ecc:	61da      	str	r2, [r3, #28]
}
 8011ece:	bf00      	nop
 8011ed0:	370c      	adds	r7, #12
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr

08011eda <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8011eda:	b480      	push	{r7}
 8011edc:	b083      	sub	sp, #12
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
 8011ee2:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	683a      	ldr	r2, [r7, #0]
 8011ee8:	621a      	str	r2, [r3, #32]
}
 8011eea:	bf00      	nop
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8011efa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011efe:	f7ff fe37 	bl	8011b70 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8011f02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011f06:	f7ff fe1b 	bl	8011b40 <LL_AHB1_GRP1_EnableClock>
}
 8011f0a:	bf00      	nop
 8011f0c:	bd80      	pop	{r7, pc}
	...

08011f10 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	4603      	mov	r3, r0
 8011f18:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8011f1a:	79fa      	ldrb	r2, [r7, #7]
 8011f1c:	4917      	ldr	r1, [pc, #92]	; (8011f7c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011f1e:	4613      	mov	r3, r2
 8011f20:	011b      	lsls	r3, r3, #4
 8011f22:	1a9b      	subs	r3, r3, r2
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	440b      	add	r3, r1
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	f023 0307 	bic.w	r3, r3, #7
 8011f30:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8011f32:	79fa      	ldrb	r2, [r7, #7]
 8011f34:	4911      	ldr	r1, [pc, #68]	; (8011f7c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011f36:	4613      	mov	r3, r2
 8011f38:	011b      	lsls	r3, r3, #4
 8011f3a:	1a9b      	subs	r3, r3, r2
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	440b      	add	r3, r1
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7ff fe3c 	bl	8011bc0 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8011f48:	79fa      	ldrb	r2, [r7, #7]
 8011f4a:	490c      	ldr	r1, [pc, #48]	; (8011f7c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	011b      	lsls	r3, r3, #4
 8011f50:	1a9b      	subs	r3, r3, r2
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	440b      	add	r3, r1
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7ff fe21 	bl	8011ba0 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8011f5e:	79fa      	ldrb	r2, [r7, #7]
 8011f60:	4906      	ldr	r1, [pc, #24]	; (8011f7c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011f62:	4613      	mov	r3, r2
 8011f64:	011b      	lsls	r3, r3, #4
 8011f66:	1a9b      	subs	r3, r3, r2
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	440b      	add	r3, r1
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	60da      	str	r2, [r3, #12]
}
 8011f72:	bf00      	nop
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20000b54 	.word	0x20000b54

08011f80 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b08a      	sub	sp, #40	; 0x28
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60ba      	str	r2, [r7, #8]
 8011f88:	607b      	str	r3, [r7, #4]
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	73fb      	strb	r3, [r7, #15]
 8011f8e:	460b      	mov	r3, r1
 8011f90:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8011f98:	7bbb      	ldrb	r3, [r7, #14]
 8011f9a:	2b05      	cmp	r3, #5
 8011f9c:	d10b      	bne.n	8011fb6 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8011f9e:	7bfa      	ldrb	r2, [r7, #15]
 8011fa0:	4996      	ldr	r1, [pc, #600]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	011b      	lsls	r3, r3, #4
 8011fa6:	1a9b      	subs	r3, r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	440b      	add	r3, r1
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7ff ff12 	bl	8011dd8 <LL_UCPD_SendHardReset>
 8011fb4:	e11b      	b.n	80121ee <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8011fba:	61fb      	str	r3, [r7, #28]
  return(result);
 8011fbc:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8011fbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fc0:	b672      	cpsid	i
}
 8011fc2:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8011fc4:	7bfa      	ldrb	r2, [r7, #15]
 8011fc6:	498d      	ldr	r1, [pc, #564]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8011fc8:	4613      	mov	r3, r2
 8011fca:	011b      	lsls	r3, r3, #4
 8011fcc:	1a9b      	subs	r3, r3, r2
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	440b      	add	r3, r1
 8011fd2:	3338      	adds	r3, #56	; 0x38
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d00d      	beq.n	8011ff8 <USBPD_HW_IF_SendBuffer+0x78>
 8011fdc:	7bfa      	ldrb	r2, [r7, #15]
 8011fde:	4987      	ldr	r1, [pc, #540]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	011b      	lsls	r3, r3, #4
 8011fe4:	1a9b      	subs	r3, r3, r2
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	440b      	add	r3, r1
 8011fea:	3304      	adds	r3, #4
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d109      	bne.n	801200c <USBPD_HW_IF_SendBuffer+0x8c>
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	f383 8810 	msr	PRIMASK, r3
}
 8012002:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8012004:	2302      	movs	r3, #2
 8012006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801200a:	e0f0      	b.n	80121ee <USBPD_HW_IF_SendBuffer+0x26e>
 801200c:	6a3b      	ldr	r3, [r7, #32]
 801200e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	f383 8810 	msr	PRIMASK, r3
}
 8012016:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8012018:	7bbb      	ldrb	r3, [r7, #14]
 801201a:	2b07      	cmp	r3, #7
 801201c:	d877      	bhi.n	801210e <USBPD_HW_IF_SendBuffer+0x18e>
 801201e:	a201      	add	r2, pc, #4	; (adr r2, 8012024 <USBPD_HW_IF_SendBuffer+0xa4>)
 8012020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012024:	08012045 	.word	0x08012045
 8012028:	08012077 	.word	0x08012077
 801202c:	080120a9 	.word	0x080120a9
 8012030:	0801210f 	.word	0x0801210f
 8012034:	0801210f 	.word	0x0801210f
 8012038:	0801210f 	.word	0x0801210f
 801203c:	080120db 	.word	0x080120db
 8012040:	080120f5 	.word	0x080120f5
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8012044:	7bfa      	ldrb	r2, [r7, #15]
 8012046:	496d      	ldr	r1, [pc, #436]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012048:	4613      	mov	r3, r2
 801204a:	011b      	lsls	r3, r3, #4
 801204c:	1a9b      	subs	r3, r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	440b      	add	r3, r1
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	496a      	ldr	r1, [pc, #424]	; (8012200 <USBPD_HW_IF_SendBuffer+0x280>)
 8012056:	4618      	mov	r0, r3
 8012058:	f7ff ff31 	bl	8011ebe <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801205c:	7bfa      	ldrb	r2, [r7, #15]
 801205e:	4967      	ldr	r1, [pc, #412]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012060:	4613      	mov	r3, r2
 8012062:	011b      	lsls	r3, r3, #4
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	440b      	add	r3, r1
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2100      	movs	r1, #0
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff fed2 	bl	8011e18 <LL_UCPD_SetTxMode>
          break;
 8012074:	e04f      	b.n	8012116 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8012076:	7bfa      	ldrb	r2, [r7, #15]
 8012078:	4960      	ldr	r1, [pc, #384]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 801207a:	4613      	mov	r3, r2
 801207c:	011b      	lsls	r3, r3, #4
 801207e:	1a9b      	subs	r3, r3, r2
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	440b      	add	r3, r1
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	495f      	ldr	r1, [pc, #380]	; (8012204 <USBPD_HW_IF_SendBuffer+0x284>)
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff ff18 	bl	8011ebe <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801208e:	7bfa      	ldrb	r2, [r7, #15]
 8012090:	495a      	ldr	r1, [pc, #360]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012092:	4613      	mov	r3, r2
 8012094:	011b      	lsls	r3, r3, #4
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	440b      	add	r3, r1
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2100      	movs	r1, #0
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7ff feb9 	bl	8011e18 <LL_UCPD_SetTxMode>
          break;
 80120a6:	e036      	b.n	8012116 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80120a8:	7bfa      	ldrb	r2, [r7, #15]
 80120aa:	4954      	ldr	r1, [pc, #336]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80120ac:	4613      	mov	r3, r2
 80120ae:	011b      	lsls	r3, r3, #4
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	440b      	add	r3, r1
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4953      	ldr	r1, [pc, #332]	; (8012208 <USBPD_HW_IF_SendBuffer+0x288>)
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7ff feff 	bl	8011ebe <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80120c0:	7bfa      	ldrb	r2, [r7, #15]
 80120c2:	494e      	ldr	r1, [pc, #312]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80120c4:	4613      	mov	r3, r2
 80120c6:	011b      	lsls	r3, r3, #4
 80120c8:	1a9b      	subs	r3, r3, r2
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	440b      	add	r3, r1
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2100      	movs	r1, #0
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff fea0 	bl	8011e18 <LL_UCPD_SetTxMode>
          break;
 80120d8:	e01d      	b.n	8012116 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 80120da:	7bfa      	ldrb	r2, [r7, #15]
 80120dc:	4947      	ldr	r1, [pc, #284]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80120de:	4613      	mov	r3, r2
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	440b      	add	r3, r1
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2101      	movs	r1, #1
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7ff fe93 	bl	8011e18 <LL_UCPD_SetTxMode>
          break;
 80120f2:	e010      	b.n	8012116 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80120f4:	7bfa      	ldrb	r2, [r7, #15]
 80120f6:	4941      	ldr	r1, [pc, #260]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80120f8:	4613      	mov	r3, r2
 80120fa:	011b      	lsls	r3, r3, #4
 80120fc:	1a9b      	subs	r3, r3, r2
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	440b      	add	r3, r1
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2102      	movs	r1, #2
 8012106:	4618      	mov	r0, r3
 8012108:	f7ff fe86 	bl	8011e18 <LL_UCPD_SetTxMode>
          break;
 801210c:	e003      	b.n	8012116 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 801210e:	2302      	movs	r3, #2
 8012110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8012114:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8012116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801211a:	2b00      	cmp	r3, #0
 801211c:	d167      	bne.n	80121ee <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801211e:	7bfa      	ldrb	r2, [r7, #15]
 8012120:	4936      	ldr	r1, [pc, #216]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012122:	4613      	mov	r3, r2
 8012124:	011b      	lsls	r3, r3, #4
 8012126:	1a9b      	subs	r3, r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	440b      	add	r3, r1
 801212c:	3304      	adds	r3, #4
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	6819      	ldr	r1, [r3, #0]
 8012132:	7bfa      	ldrb	r2, [r7, #15]
 8012134:	4831      	ldr	r0, [pc, #196]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012136:	4613      	mov	r3, r2
 8012138:	011b      	lsls	r3, r3, #4
 801213a:	1a9b      	subs	r3, r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	4403      	add	r3, r0
 8012140:	3304      	adds	r3, #4
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f021 0201 	bic.w	r2, r1, #1
 8012148:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801214a:	bf00      	nop
 801214c:	7bfa      	ldrb	r2, [r7, #15]
 801214e:	492b      	ldr	r1, [pc, #172]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012150:	4613      	mov	r3, r2
 8012152:	011b      	lsls	r3, r3, #4
 8012154:	1a9b      	subs	r3, r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	440b      	add	r3, r1
 801215a:	3304      	adds	r3, #4
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f003 0301 	and.w	r3, r3, #1
 8012164:	2b01      	cmp	r3, #1
 8012166:	d0f1      	beq.n	801214c <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8012168:	7bfa      	ldrb	r2, [r7, #15]
 801216a:	4924      	ldr	r1, [pc, #144]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 801216c:	4613      	mov	r3, r2
 801216e:	011b      	lsls	r3, r3, #4
 8012170:	1a9b      	subs	r3, r3, r2
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	440b      	add	r3, r1
 8012176:	3304      	adds	r3, #4
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	68ba      	ldr	r2, [r7, #8]
 801217c:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 801217e:	7bfa      	ldrb	r2, [r7, #15]
 8012180:	491e      	ldr	r1, [pc, #120]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012182:	4613      	mov	r3, r2
 8012184:	011b      	lsls	r3, r3, #4
 8012186:	1a9b      	subs	r3, r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	440b      	add	r3, r1
 801218c:	3304      	adds	r3, #4
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012194:	7bfa      	ldrb	r2, [r7, #15]
 8012196:	4919      	ldr	r1, [pc, #100]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 8012198:	4613      	mov	r3, r2
 801219a:	011b      	lsls	r3, r3, #4
 801219c:	1a9b      	subs	r3, r3, r2
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	440b      	add	r3, r1
 80121a2:	3304      	adds	r3, #4
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	6819      	ldr	r1, [r3, #0]
 80121a8:	7bfa      	ldrb	r2, [r7, #15]
 80121aa:	4814      	ldr	r0, [pc, #80]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80121ac:	4613      	mov	r3, r2
 80121ae:	011b      	lsls	r3, r3, #4
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	4403      	add	r3, r0
 80121b6:	3304      	adds	r3, #4
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f041 0201 	orr.w	r2, r1, #1
 80121be:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 80121c0:	7bfa      	ldrb	r2, [r7, #15]
 80121c2:	490e      	ldr	r1, [pc, #56]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80121c4:	4613      	mov	r3, r2
 80121c6:	011b      	lsls	r3, r3, #4
 80121c8:	1a9b      	subs	r3, r3, r2
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	440b      	add	r3, r1
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6879      	ldr	r1, [r7, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7ff fe81 	bl	8011eda <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80121d8:	7bfa      	ldrb	r2, [r7, #15]
 80121da:	4908      	ldr	r1, [pc, #32]	; (80121fc <USBPD_HW_IF_SendBuffer+0x27c>)
 80121dc:	4613      	mov	r3, r2
 80121de:	011b      	lsls	r3, r3, #4
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	440b      	add	r3, r1
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff fe05 	bl	8011df8 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 80121ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3728      	adds	r7, #40	; 0x28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	20000b54 	.word	0x20000b54
 8012200:	0008e318 	.word	0x0008e318
 8012204:	00031b18 	.word	0x00031b18
 8012208:	000360d8 	.word	0x000360d8

0801220c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	4603      	mov	r3, r0
 8012214:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8012216:	79fa      	ldrb	r2, [r7, #7]
 8012218:	490c      	ldr	r1, [pc, #48]	; (801224c <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 801221a:	4613      	mov	r3, r2
 801221c:	011b      	lsls	r3, r3, #4
 801221e:	1a9b      	subs	r3, r3, r2
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	440b      	add	r3, r1
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2102      	movs	r1, #2
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff fdf5 	bl	8011e18 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801222e:	79fa      	ldrb	r2, [r7, #7]
 8012230:	4906      	ldr	r1, [pc, #24]	; (801224c <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8012232:	4613      	mov	r3, r2
 8012234:	011b      	lsls	r3, r3, #4
 8012236:	1a9b      	subs	r3, r3, r2
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	440b      	add	r3, r1
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	4618      	mov	r0, r3
 8012240:	f7ff fdda 	bl	8011df8 <LL_UCPD_SendMessage>
}
 8012244:	bf00      	nop
 8012246:	3708      	adds	r7, #8
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	20000b54 	.word	0x20000b54

08012250 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 801225a:	79fa      	ldrb	r2, [r7, #7]
 801225c:	4949      	ldr	r1, [pc, #292]	; (8012384 <USBPDM1_AssertRp+0x134>)
 801225e:	4613      	mov	r3, r2
 8012260:	011b      	lsls	r3, r3, #4
 8012262:	1a9b      	subs	r3, r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	440b      	add	r3, r1
 8012268:	3310      	adds	r3, #16
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	789b      	ldrb	r3, [r3, #2]
 801226e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012272:	b2db      	uxtb	r3, r3
 8012274:	2b02      	cmp	r3, #2
 8012276:	d021      	beq.n	80122bc <USBPDM1_AssertRp+0x6c>
 8012278:	2b02      	cmp	r3, #2
 801227a:	dc2d      	bgt.n	80122d8 <USBPDM1_AssertRp+0x88>
 801227c:	2b00      	cmp	r3, #0
 801227e:	d002      	beq.n	8012286 <USBPDM1_AssertRp+0x36>
 8012280:	2b01      	cmp	r3, #1
 8012282:	d00d      	beq.n	80122a0 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8012284:	e028      	b.n	80122d8 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8012286:	79fa      	ldrb	r2, [r7, #7]
 8012288:	493e      	ldr	r1, [pc, #248]	; (8012384 <USBPDM1_AssertRp+0x134>)
 801228a:	4613      	mov	r3, r2
 801228c:	011b      	lsls	r3, r3, #4
 801228e:	1a9b      	subs	r3, r3, r2
 8012290:	009b      	lsls	r3, r3, #2
 8012292:	440b      	add	r3, r1
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2180      	movs	r1, #128	; 0x80
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff fd44 	bl	8011d26 <LL_UCPD_SetRpResistor>
      break;
 801229e:	e01c      	b.n	80122da <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80122a0:	79fa      	ldrb	r2, [r7, #7]
 80122a2:	4938      	ldr	r1, [pc, #224]	; (8012384 <USBPDM1_AssertRp+0x134>)
 80122a4:	4613      	mov	r3, r2
 80122a6:	011b      	lsls	r3, r3, #4
 80122a8:	1a9b      	subs	r3, r3, r2
 80122aa:	009b      	lsls	r3, r3, #2
 80122ac:	440b      	add	r3, r1
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff fd36 	bl	8011d26 <LL_UCPD_SetRpResistor>
      break;
 80122ba:	e00e      	b.n	80122da <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80122bc:	79fa      	ldrb	r2, [r7, #7]
 80122be:	4931      	ldr	r1, [pc, #196]	; (8012384 <USBPDM1_AssertRp+0x134>)
 80122c0:	4613      	mov	r3, r2
 80122c2:	011b      	lsls	r3, r3, #4
 80122c4:	1a9b      	subs	r3, r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	440b      	add	r3, r1
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7ff fd28 	bl	8011d26 <LL_UCPD_SetRpResistor>
      break;
 80122d6:	e000      	b.n	80122da <USBPDM1_AssertRp+0x8a>
      break;
 80122d8:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80122da:	79fa      	ldrb	r2, [r7, #7]
 80122dc:	4929      	ldr	r1, [pc, #164]	; (8012384 <USBPDM1_AssertRp+0x134>)
 80122de:	4613      	mov	r3, r2
 80122e0:	011b      	lsls	r3, r3, #4
 80122e2:	1a9b      	subs	r3, r3, r2
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	440b      	add	r3, r1
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2100      	movs	r1, #0
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff fce7 	bl	8011cc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80122f2:	79fa      	ldrb	r2, [r7, #7]
 80122f4:	4923      	ldr	r1, [pc, #140]	; (8012384 <USBPDM1_AssertRp+0x134>)
 80122f6:	4613      	mov	r3, r2
 80122f8:	011b      	lsls	r3, r3, #4
 80122fa:	1a9b      	subs	r3, r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	440b      	add	r3, r1
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fcff 	bl	8011d06 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8012308:	79fa      	ldrb	r2, [r7, #7]
 801230a:	491e      	ldr	r1, [pc, #120]	; (8012384 <USBPDM1_AssertRp+0x134>)
 801230c:	4613      	mov	r3, r2
 801230e:	011b      	lsls	r3, r3, #4
 8012310:	1a9b      	subs	r3, r3, r2
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	440b      	add	r3, r1
 8012316:	3334      	adds	r3, #52	; 0x34
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10d      	bne.n	801233a <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801231e:	79fa      	ldrb	r2, [r7, #7]
 8012320:	4918      	ldr	r1, [pc, #96]	; (8012384 <USBPDM1_AssertRp+0x134>)
 8012322:	4613      	mov	r3, r2
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	1a9b      	subs	r3, r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	440b      	add	r3, r1
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8012332:	4618      	mov	r0, r3
 8012334:	f7ff fcc4 	bl	8011cc0 <LL_UCPD_SetccEnable>
 8012338:	e01a      	b.n	8012370 <USBPDM1_AssertRp+0x120>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801233a:	79fa      	ldrb	r2, [r7, #7]
 801233c:	4911      	ldr	r1, [pc, #68]	; (8012384 <USBPDM1_AssertRp+0x134>)
 801233e:	4613      	mov	r3, r2
 8012340:	011b      	lsls	r3, r3, #4
 8012342:	1a9b      	subs	r3, r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	440b      	add	r3, r1
 8012348:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 801234a:	79fa      	ldrb	r2, [r7, #7]
 801234c:	490d      	ldr	r1, [pc, #52]	; (8012384 <USBPDM1_AssertRp+0x134>)
 801234e:	4613      	mov	r3, r2
 8012350:	011b      	lsls	r3, r3, #4
 8012352:	1a9b      	subs	r3, r3, r2
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	440b      	add	r3, r1
 8012358:	3334      	adds	r3, #52	; 0x34
 801235a:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801235c:	2b01      	cmp	r3, #1
 801235e:	d102      	bne.n	8012366 <USBPDM1_AssertRp+0x116>
 8012360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012364:	e001      	b.n	801236a <USBPDM1_AssertRp+0x11a>
 8012366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801236a:	4619      	mov	r1, r3
 801236c:	f7ff fca8 	bl	8011cc0 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
 8012370:	79fb      	ldrb	r3, [r7, #7]
 8012372:	2100      	movs	r1, #0
 8012374:	4618      	mov	r0, r3
 8012376:	f7f9 fe3b 	bl	800bff0 <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 801237a:	bf00      	nop
 801237c:	3708      	adds	r7, #8
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	20000b54 	.word	0x20000b54

08012388 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8012388:	b480      	push	{r7}
 801238a:	b083      	sub	sp, #12
 801238c:	af00      	add	r7, sp, #0
 801238e:	4603      	mov	r3, r0
 8012390:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8012392:	bf00      	nop
 8012394:	370c      	adds	r7, #12
 8012396:	46bd      	mov	sp, r7
 8012398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239c:	4770      	bx	lr
	...

080123a0 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	4603      	mov	r3, r0
 80123a8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 80123aa:	79fa      	ldrb	r2, [r7, #7]
 80123ac:	4940      	ldr	r1, [pc, #256]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 80123ae:	4613      	mov	r3, r2
 80123b0:	011b      	lsls	r3, r3, #4
 80123b2:	1a9b      	subs	r3, r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	440b      	add	r3, r1
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7ff fc20 	bl	8011c00 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 80123c0:	79fa      	ldrb	r2, [r7, #7]
 80123c2:	493b      	ldr	r1, [pc, #236]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 80123c4:	4613      	mov	r3, r2
 80123c6:	011b      	lsls	r3, r3, #4
 80123c8:	1a9b      	subs	r3, r3, r2
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	440b      	add	r3, r1
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ff fc35 	bl	8011c40 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80123d6:	79fa      	ldrb	r2, [r7, #7]
 80123d8:	4935      	ldr	r1, [pc, #212]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 80123da:	4613      	mov	r3, r2
 80123dc:	011b      	lsls	r3, r3, #4
 80123de:	1a9b      	subs	r3, r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	440b      	add	r3, r1
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2100      	movs	r1, #0
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff fc69 	bl	8011cc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80123ee:	79fa      	ldrb	r2, [r7, #7]
 80123f0:	492f      	ldr	r1, [pc, #188]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 80123f2:	4613      	mov	r3, r2
 80123f4:	011b      	lsls	r3, r3, #4
 80123f6:	1a9b      	subs	r3, r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	440b      	add	r3, r1
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	4618      	mov	r0, r3
 8012400:	f7ff fc71 	bl	8011ce6 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8012404:	79fa      	ldrb	r2, [r7, #7]
 8012406:	492a      	ldr	r1, [pc, #168]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 8012408:	4613      	mov	r3, r2
 801240a:	011b      	lsls	r3, r3, #4
 801240c:	1a9b      	subs	r3, r3, r2
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	440b      	add	r3, r1
 8012412:	3334      	adds	r3, #52	; 0x34
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10d      	bne.n	8012436 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801241a:	79fa      	ldrb	r2, [r7, #7]
 801241c:	4924      	ldr	r1, [pc, #144]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 801241e:	4613      	mov	r3, r2
 8012420:	011b      	lsls	r3, r3, #4
 8012422:	1a9b      	subs	r3, r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	440b      	add	r3, r1
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff fc46 	bl	8011cc0 <LL_UCPD_SetccEnable>
 8012434:	e01a      	b.n	801246c <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012436:	79fa      	ldrb	r2, [r7, #7]
 8012438:	491d      	ldr	r1, [pc, #116]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 801243a:	4613      	mov	r3, r2
 801243c:	011b      	lsls	r3, r3, #4
 801243e:	1a9b      	subs	r3, r3, r2
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	440b      	add	r3, r1
 8012444:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8012446:	79fa      	ldrb	r2, [r7, #7]
 8012448:	4919      	ldr	r1, [pc, #100]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 801244a:	4613      	mov	r3, r2
 801244c:	011b      	lsls	r3, r3, #4
 801244e:	1a9b      	subs	r3, r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	440b      	add	r3, r1
 8012454:	3334      	adds	r3, #52	; 0x34
 8012456:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8012458:	2b01      	cmp	r3, #1
 801245a:	d102      	bne.n	8012462 <USBPDM1_AssertRd+0xc2>
 801245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012460:	e001      	b.n	8012466 <USBPDM1_AssertRd+0xc6>
 8012462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012466:	4619      	mov	r1, r3
 8012468:	f7ff fc2a 	bl	8011cc0 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 801246c:	2001      	movs	r0, #1
 801246e:	f7fa fedb 	bl	800d228 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8012472:	79fa      	ldrb	r2, [r7, #7]
 8012474:	490e      	ldr	r1, [pc, #56]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 8012476:	4613      	mov	r3, r2
 8012478:	011b      	lsls	r3, r3, #4
 801247a:	1a9b      	subs	r3, r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	440b      	add	r3, r1
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4618      	mov	r0, r3
 8012484:	f7ff fbac 	bl	8011be0 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8012488:	79fa      	ldrb	r2, [r7, #7]
 801248a:	4909      	ldr	r1, [pc, #36]	; (80124b0 <USBPDM1_AssertRd+0x110>)
 801248c:	4613      	mov	r3, r2
 801248e:	011b      	lsls	r3, r3, #4
 8012490:	1a9b      	subs	r3, r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	440b      	add	r3, r1
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4618      	mov	r0, r3
 801249a:	f7ff fbc1 	bl	8011c20 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	2101      	movs	r1, #1
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7f9 fda4 	bl	800bff0 <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 80124a8:	bf00      	nop
 80124aa:	3708      	adds	r7, #8
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	20000b54 	.word	0x20000b54

080124b4 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	4603      	mov	r3, r0
 80124bc:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80124be:	bf00      	nop
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr
	...

080124cc <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	4603      	mov	r3, r0
 80124d4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80124d6:	79fa      	ldrb	r2, [r7, #7]
 80124d8:	491f      	ldr	r1, [pc, #124]	; (8012558 <USBPDM1_EnterErrorRecovery+0x8c>)
 80124da:	4613      	mov	r3, r2
 80124dc:	011b      	lsls	r3, r3, #4
 80124de:	1a9b      	subs	r3, r3, r2
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	440b      	add	r3, r1
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7ff fc0d 	bl	8011d06 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80124ec:	79fa      	ldrb	r2, [r7, #7]
 80124ee:	491a      	ldr	r1, [pc, #104]	; (8012558 <USBPDM1_EnterErrorRecovery+0x8c>)
 80124f0:	4613      	mov	r3, r2
 80124f2:	011b      	lsls	r3, r3, #4
 80124f4:	1a9b      	subs	r3, r3, r2
 80124f6:	009b      	lsls	r3, r3, #2
 80124f8:	440b      	add	r3, r1
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2100      	movs	r1, #0
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ff fc11 	bl	8011d26 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012504:	79fa      	ldrb	r2, [r7, #7]
 8012506:	4914      	ldr	r1, [pc, #80]	; (8012558 <USBPDM1_EnterErrorRecovery+0x8c>)
 8012508:	4613      	mov	r3, r2
 801250a:	011b      	lsls	r3, r3, #4
 801250c:	1a9b      	subs	r3, r3, r2
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	440b      	add	r3, r1
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4618      	mov	r0, r3
 8012516:	f7ff fc3c 	bl	8011d92 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801251a:	79fa      	ldrb	r2, [r7, #7]
 801251c:	490e      	ldr	r1, [pc, #56]	; (8012558 <USBPDM1_EnterErrorRecovery+0x8c>)
 801251e:	4613      	mov	r3, r2
 8012520:	011b      	lsls	r3, r3, #4
 8012522:	1a9b      	subs	r3, r3, r2
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	440b      	add	r3, r1
 8012528:	330c      	adds	r3, #12
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	7a1b      	ldrb	r3, [r3, #8]
 801252e:	f003 0302 	and.w	r3, r3, #2
 8012532:	b2db      	uxtb	r3, r3
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00a      	beq.n	801254e <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012538:	79fa      	ldrb	r2, [r7, #7]
 801253a:	4907      	ldr	r1, [pc, #28]	; (8012558 <USBPDM1_EnterErrorRecovery+0x8c>)
 801253c:	4613      	mov	r3, r2
 801253e:	011b      	lsls	r3, r3, #4
 8012540:	1a9b      	subs	r3, r3, r2
 8012542:	009b      	lsls	r3, r3, #2
 8012544:	440b      	add	r3, r1
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4618      	mov	r0, r3
 801254a:	f7ff fba9 	bl	8011ca0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 801254e:	bf00      	nop
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	20000b54 	.word	0x20000b54

0801255c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8012566:	79fa      	ldrb	r2, [r7, #7]
 8012568:	4906      	ldr	r1, [pc, #24]	; (8012584 <USBPD_HW_IF_EnableRX+0x28>)
 801256a:	4613      	mov	r3, r2
 801256c:	011b      	lsls	r3, r3, #4
 801256e:	1a9b      	subs	r3, r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	440b      	add	r3, r1
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff fbfb 	bl	8011d72 <LL_UCPD_RxEnable>
}
 801257c:	bf00      	nop
 801257e:	3708      	adds	r7, #8
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}
 8012584:	20000b54 	.word	0x20000b54

08012588 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	4603      	mov	r3, r0
 8012590:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012592:	79fa      	ldrb	r2, [r7, #7]
 8012594:	4906      	ldr	r1, [pc, #24]	; (80125b0 <USBPD_HW_IF_DisableRX+0x28>)
 8012596:	4613      	mov	r3, r2
 8012598:	011b      	lsls	r3, r3, #4
 801259a:	1a9b      	subs	r3, r3, r2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	440b      	add	r3, r1
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fbf5 	bl	8011d92 <LL_UCPD_RxDisable>
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	20000b54 	.word	0x20000b54

080125b4 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80125b4:	b590      	push	{r4, r7, lr}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	4603      	mov	r3, r0
 80125bc:	6039      	str	r1, [r7, #0]
 80125be:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 80125c0:	f000 fc96 	bl	8012ef0 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 80125c4:	79fc      	ldrb	r4, [r7, #7]
 80125c6:	79fb      	ldrb	r3, [r7, #7]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7fe fe1d 	bl	8011208 <USBPD_HW_Init_DMATxInstance>
 80125ce:	4602      	mov	r2, r0
 80125d0:	499d      	ldr	r1, [pc, #628]	; (8012848 <HW_SignalAttachement+0x294>)
 80125d2:	4623      	mov	r3, r4
 80125d4:	011b      	lsls	r3, r3, #4
 80125d6:	1b1b      	subs	r3, r3, r4
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	440b      	add	r3, r1
 80125dc:	3304      	adds	r3, #4
 80125de:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 80125e0:	79fc      	ldrb	r4, [r7, #7]
 80125e2:	79fb      	ldrb	r3, [r7, #7]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fe fdcf 	bl	8011188 <USBPD_HW_Init_DMARxInstance>
 80125ea:	4602      	mov	r2, r0
 80125ec:	4996      	ldr	r1, [pc, #600]	; (8012848 <HW_SignalAttachement+0x294>)
 80125ee:	4623      	mov	r3, r4
 80125f0:	011b      	lsls	r3, r3, #4
 80125f2:	1b1b      	subs	r3, r3, r4
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	440b      	add	r3, r1
 80125f8:	3308      	adds	r3, #8
 80125fa:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 80125fc:	79fa      	ldrb	r2, [r7, #7]
 80125fe:	4992      	ldr	r1, [pc, #584]	; (8012848 <HW_SignalAttachement+0x294>)
 8012600:	4613      	mov	r3, r2
 8012602:	011b      	lsls	r3, r3, #4
 8012604:	1a9b      	subs	r3, r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	440b      	add	r3, r1
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	3330      	adds	r3, #48	; 0x30
 801260e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8012610:	79fa      	ldrb	r2, [r7, #7]
 8012612:	498d      	ldr	r1, [pc, #564]	; (8012848 <HW_SignalAttachement+0x294>)
 8012614:	4613      	mov	r3, r2
 8012616:	011b      	lsls	r3, r3, #4
 8012618:	1a9b      	subs	r3, r3, r2
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	440b      	add	r3, r1
 801261e:	3308      	adds	r3, #8
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8012626:	79fa      	ldrb	r2, [r7, #7]
 8012628:	4987      	ldr	r1, [pc, #540]	; (8012848 <HW_SignalAttachement+0x294>)
 801262a:	4613      	mov	r3, r2
 801262c:	011b      	lsls	r3, r3, #4
 801262e:	1a9b      	subs	r3, r3, r2
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	440b      	add	r3, r1
 8012634:	3330      	adds	r3, #48	; 0x30
 8012636:	6818      	ldr	r0, [r3, #0]
 8012638:	79fa      	ldrb	r2, [r7, #7]
 801263a:	4983      	ldr	r1, [pc, #524]	; (8012848 <HW_SignalAttachement+0x294>)
 801263c:	4613      	mov	r3, r2
 801263e:	011b      	lsls	r3, r3, #4
 8012640:	1a9b      	subs	r3, r3, r2
 8012642:	009b      	lsls	r3, r3, #2
 8012644:	440b      	add	r3, r1
 8012646:	3308      	adds	r3, #8
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4602      	mov	r2, r0
 801264c:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 801264e:	79fa      	ldrb	r2, [r7, #7]
 8012650:	497d      	ldr	r1, [pc, #500]	; (8012848 <HW_SignalAttachement+0x294>)
 8012652:	4613      	mov	r3, r2
 8012654:	011b      	lsls	r3, r3, #4
 8012656:	1a9b      	subs	r3, r3, r2
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	440b      	add	r3, r1
 801265c:	3308      	adds	r3, #8
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f44f 7284 	mov.w	r2, #264	; 0x108
 8012664:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8012666:	79fa      	ldrb	r2, [r7, #7]
 8012668:	4977      	ldr	r1, [pc, #476]	; (8012848 <HW_SignalAttachement+0x294>)
 801266a:	4613      	mov	r3, r2
 801266c:	011b      	lsls	r3, r3, #4
 801266e:	1a9b      	subs	r3, r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	440b      	add	r3, r1
 8012674:	3308      	adds	r3, #8
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	6819      	ldr	r1, [r3, #0]
 801267a:	79fa      	ldrb	r2, [r7, #7]
 801267c:	4872      	ldr	r0, [pc, #456]	; (8012848 <HW_SignalAttachement+0x294>)
 801267e:	4613      	mov	r3, r2
 8012680:	011b      	lsls	r3, r3, #4
 8012682:	1a9b      	subs	r3, r3, r2
 8012684:	009b      	lsls	r3, r3, #2
 8012686:	4403      	add	r3, r0
 8012688:	3308      	adds	r3, #8
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f041 0201 	orr.w	r2, r1, #1
 8012690:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8012692:	79fa      	ldrb	r2, [r7, #7]
 8012694:	496c      	ldr	r1, [pc, #432]	; (8012848 <HW_SignalAttachement+0x294>)
 8012696:	4613      	mov	r3, r2
 8012698:	011b      	lsls	r3, r3, #4
 801269a:	1a9b      	subs	r3, r3, r2
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	440b      	add	r3, r1
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	3324      	adds	r3, #36	; 0x24
 80126a4:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 80126a6:	79fa      	ldrb	r2, [r7, #7]
 80126a8:	4967      	ldr	r1, [pc, #412]	; (8012848 <HW_SignalAttachement+0x294>)
 80126aa:	4613      	mov	r3, r2
 80126ac:	011b      	lsls	r3, r3, #4
 80126ae:	1a9b      	subs	r3, r3, r2
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	440b      	add	r3, r1
 80126b4:	3304      	adds	r3, #4
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 80126bc:	79fa      	ldrb	r2, [r7, #7]
 80126be:	4962      	ldr	r1, [pc, #392]	; (8012848 <HW_SignalAttachement+0x294>)
 80126c0:	4613      	mov	r3, r2
 80126c2:	011b      	lsls	r3, r3, #4
 80126c4:	1a9b      	subs	r3, r3, r2
 80126c6:	009b      	lsls	r3, r3, #2
 80126c8:	440b      	add	r3, r1
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	6919      	ldr	r1, [r3, #16]
 80126ce:	79fa      	ldrb	r2, [r7, #7]
 80126d0:	485d      	ldr	r0, [pc, #372]	; (8012848 <HW_SignalAttachement+0x294>)
 80126d2:	4613      	mov	r3, r2
 80126d4:	011b      	lsls	r3, r3, #4
 80126d6:	1a9b      	subs	r3, r3, r2
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	4403      	add	r3, r0
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	f441 53f3 	orr.w	r3, r1, #7776	; 0x1e60
 80126e2:	f043 031e 	orr.w	r3, r3, #30
 80126e6:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 80126e8:	79fa      	ldrb	r2, [r7, #7]
 80126ea:	4957      	ldr	r1, [pc, #348]	; (8012848 <HW_SignalAttachement+0x294>)
 80126ec:	4613      	mov	r3, r2
 80126ee:	011b      	lsls	r3, r3, #4
 80126f0:	1a9b      	subs	r3, r3, r2
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	440b      	add	r3, r1
 80126f6:	3334      	adds	r3, #52	; 0x34
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80126fc:	79fa      	ldrb	r2, [r7, #7]
 80126fe:	4952      	ldr	r1, [pc, #328]	; (8012848 <HW_SignalAttachement+0x294>)
 8012700:	4613      	mov	r3, r2
 8012702:	011b      	lsls	r3, r3, #4
 8012704:	1a9b      	subs	r3, r3, r2
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	440b      	add	r3, r1
 801270a:	6818      	ldr	r0, [r3, #0]
 801270c:	79fa      	ldrb	r2, [r7, #7]
 801270e:	494e      	ldr	r1, [pc, #312]	; (8012848 <HW_SignalAttachement+0x294>)
 8012710:	4613      	mov	r3, r2
 8012712:	011b      	lsls	r3, r3, #4
 8012714:	1a9b      	subs	r3, r3, r2
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	440b      	add	r3, r1
 801271a:	3334      	adds	r3, #52	; 0x34
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b01      	cmp	r3, #1
 8012720:	d101      	bne.n	8012726 <HW_SignalAttachement+0x172>
 8012722:	2300      	movs	r3, #0
 8012724:	e000      	b.n	8012728 <HW_SignalAttachement+0x174>
 8012726:	2340      	movs	r3, #64	; 0x40
 8012728:	4619      	mov	r1, r3
 801272a:	f7ff fb0f 	bl	8011d4c <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801272e:	79fa      	ldrb	r2, [r7, #7]
 8012730:	4945      	ldr	r1, [pc, #276]	; (8012848 <HW_SignalAttachement+0x294>)
 8012732:	4613      	mov	r3, r2
 8012734:	011b      	lsls	r3, r3, #4
 8012736:	1a9b      	subs	r3, r3, r2
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	440b      	add	r3, r1
 801273c:	330c      	adds	r3, #12
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	7a1b      	ldrb	r3, [r3, #8]
 8012742:	f003 0302 	and.w	r3, r3, #2
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d031      	beq.n	80127b0 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 801274c:	79fa      	ldrb	r2, [r7, #7]
 801274e:	493e      	ldr	r1, [pc, #248]	; (8012848 <HW_SignalAttachement+0x294>)
 8012750:	4613      	mov	r3, r2
 8012752:	011b      	lsls	r3, r3, #4
 8012754:	1a9b      	subs	r3, r3, r2
 8012756:	009b      	lsls	r3, r3, #2
 8012758:	440b      	add	r3, r1
 801275a:	3334      	adds	r3, #52	; 0x34
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b01      	cmp	r3, #1
 8012760:	d101      	bne.n	8012766 <HW_SignalAttachement+0x1b2>
 8012762:	2201      	movs	r2, #1
 8012764:	e000      	b.n	8012768 <HW_SignalAttachement+0x1b4>
 8012766:	2202      	movs	r2, #2
 8012768:	79fb      	ldrb	r3, [r7, #7]
 801276a:	4611      	mov	r1, r2
 801276c:	4618      	mov	r0, r3
 801276e:	f7fe fd8a 	bl	8011286 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8012772:	79fa      	ldrb	r2, [r7, #7]
 8012774:	4934      	ldr	r1, [pc, #208]	; (8012848 <HW_SignalAttachement+0x294>)
 8012776:	4613      	mov	r3, r2
 8012778:	011b      	lsls	r3, r3, #4
 801277a:	1a9b      	subs	r3, r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	440b      	add	r3, r1
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4618      	mov	r0, r3
 8012784:	f7ff fa7c 	bl	8011c80 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8012788:	79fa      	ldrb	r2, [r7, #7]
 801278a:	492f      	ldr	r1, [pc, #188]	; (8012848 <HW_SignalAttachement+0x294>)
 801278c:	4613      	mov	r3, r2
 801278e:	011b      	lsls	r3, r3, #4
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	440b      	add	r3, r1
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6919      	ldr	r1, [r3, #16]
 801279a:	79fa      	ldrb	r2, [r7, #7]
 801279c:	482a      	ldr	r0, [pc, #168]	; (8012848 <HW_SignalAttachement+0x294>)
 801279e:	4613      	mov	r3, r2
 80127a0:	011b      	lsls	r3, r3, #4
 80127a2:	1a9b      	subs	r3, r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	4403      	add	r3, r0
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
 80127ae:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 80127b0:	79fa      	ldrb	r2, [r7, #7]
 80127b2:	4925      	ldr	r1, [pc, #148]	; (8012848 <HW_SignalAttachement+0x294>)
 80127b4:	4613      	mov	r3, r2
 80127b6:	011b      	lsls	r3, r3, #4
 80127b8:	1a9b      	subs	r3, r3, r2
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	440b      	add	r3, r1
 80127be:	3334      	adds	r3, #52	; 0x34
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d10d      	bne.n	80127e2 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 80127c6:	79fa      	ldrb	r2, [r7, #7]
 80127c8:	491f      	ldr	r1, [pc, #124]	; (8012848 <HW_SignalAttachement+0x294>)
 80127ca:	4613      	mov	r3, r2
 80127cc:	011b      	lsls	r3, r3, #4
 80127ce:	1a9b      	subs	r3, r3, r2
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	440b      	add	r3, r1
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fa70 	bl	8011cc0 <LL_UCPD_SetccEnable>
 80127e0:	e00c      	b.n	80127fc <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 80127e2:	79fa      	ldrb	r2, [r7, #7]
 80127e4:	4918      	ldr	r1, [pc, #96]	; (8012848 <HW_SignalAttachement+0x294>)
 80127e6:	4613      	mov	r3, r2
 80127e8:	011b      	lsls	r3, r3, #4
 80127ea:	1a9b      	subs	r3, r3, r2
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	440b      	add	r3, r1
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7ff fa62 	bl	8011cc0 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 80127fc:	79fa      	ldrb	r2, [r7, #7]
 80127fe:	4912      	ldr	r1, [pc, #72]	; (8012848 <HW_SignalAttachement+0x294>)
 8012800:	4613      	mov	r3, r2
 8012802:	011b      	lsls	r3, r3, #4
 8012804:	1a9b      	subs	r3, r3, r2
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	440b      	add	r3, r1
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	2100      	movs	r1, #0
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff facf 	bl	8011db2 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8012814:	79fa      	ldrb	r2, [r7, #7]
 8012816:	490c      	ldr	r1, [pc, #48]	; (8012848 <HW_SignalAttachement+0x294>)
 8012818:	4613      	mov	r3, r2
 801281a:	011b      	lsls	r3, r3, #4
 801281c:	1a9b      	subs	r3, r3, r2
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	440b      	add	r3, r1
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4618      	mov	r0, r3
 8012826:	f7ff fb0a 	bl	8011e3e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 801282a:	79fa      	ldrb	r2, [r7, #7]
 801282c:	4906      	ldr	r1, [pc, #24]	; (8012848 <HW_SignalAttachement+0x294>)
 801282e:	4613      	mov	r3, r2
 8012830:	011b      	lsls	r3, r3, #4
 8012832:	1a9b      	subs	r3, r3, r2
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	440b      	add	r3, r1
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff fb1f 	bl	8011e7e <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8012840:	bf00      	nop
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	bd90      	pop	{r4, r7, pc}
 8012848:	20000b54 	.word	0x20000b54

0801284c <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8012856:	79fa      	ldrb	r2, [r7, #7]
 8012858:	493e      	ldr	r1, [pc, #248]	; (8012954 <HW_SignalDetachment+0x108>)
 801285a:	4613      	mov	r3, r2
 801285c:	011b      	lsls	r3, r3, #4
 801285e:	1a9b      	subs	r3, r3, r2
 8012860:	009b      	lsls	r3, r3, #2
 8012862:	440b      	add	r3, r1
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff faf9 	bl	8011e5e <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 801286c:	79fa      	ldrb	r2, [r7, #7]
 801286e:	4939      	ldr	r1, [pc, #228]	; (8012954 <HW_SignalDetachment+0x108>)
 8012870:	4613      	mov	r3, r2
 8012872:	011b      	lsls	r3, r3, #4
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	440b      	add	r3, r1
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4618      	mov	r0, r3
 801287e:	f7ff fb0e 	bl	8011e9e <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012882:	79fa      	ldrb	r2, [r7, #7]
 8012884:	4933      	ldr	r1, [pc, #204]	; (8012954 <HW_SignalDetachment+0x108>)
 8012886:	4613      	mov	r3, r2
 8012888:	011b      	lsls	r3, r3, #4
 801288a:	1a9b      	subs	r3, r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	440b      	add	r3, r1
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff fa7d 	bl	8011d92 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8012898:	79fa      	ldrb	r2, [r7, #7]
 801289a:	492e      	ldr	r1, [pc, #184]	; (8012954 <HW_SignalDetachment+0x108>)
 801289c:	4613      	mov	r3, r2
 801289e:	011b      	lsls	r3, r3, #4
 80128a0:	1a9b      	subs	r3, r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	440b      	add	r3, r1
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80128ac:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80128ae:	79fb      	ldrb	r3, [r7, #7]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fe fcdd 	bl	8011270 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 80128b6:	79fb      	ldrb	r3, [r7, #7]
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7fe fc99 	bl	80111f0 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80128be:	79fa      	ldrb	r2, [r7, #7]
 80128c0:	4924      	ldr	r1, [pc, #144]	; (8012954 <HW_SignalDetachment+0x108>)
 80128c2:	4613      	mov	r3, r2
 80128c4:	011b      	lsls	r3, r3, #4
 80128c6:	1a9b      	subs	r3, r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	440b      	add	r3, r1
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7ff f9f4 	bl	8011cc0 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 80128d8:	79fa      	ldrb	r2, [r7, #7]
 80128da:	491e      	ldr	r1, [pc, #120]	; (8012954 <HW_SignalDetachment+0x108>)
 80128dc:	4613      	mov	r3, r2
 80128de:	011b      	lsls	r3, r3, #4
 80128e0:	1a9b      	subs	r3, r3, r2
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	440b      	add	r3, r1
 80128e6:	3310      	adds	r3, #16
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	f003 0304 	and.w	r3, r3, #4
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d103      	bne.n	80128fe <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80128f6:	79fb      	ldrb	r3, [r7, #7]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7f9 fd3d 	bl	800c378 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80128fe:	79fa      	ldrb	r2, [r7, #7]
 8012900:	4914      	ldr	r1, [pc, #80]	; (8012954 <HW_SignalDetachment+0x108>)
 8012902:	4613      	mov	r3, r2
 8012904:	011b      	lsls	r3, r3, #4
 8012906:	1a9b      	subs	r3, r3, r2
 8012908:	009b      	lsls	r3, r3, #2
 801290a:	440b      	add	r3, r1
 801290c:	330c      	adds	r3, #12
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	7a1b      	ldrb	r3, [r3, #8]
 8012912:	f003 0302 	and.w	r3, r3, #2
 8012916:	b2db      	uxtb	r3, r3
 8012918:	2b00      	cmp	r3, #0
 801291a:	d00a      	beq.n	8012932 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801291c:	79fa      	ldrb	r2, [r7, #7]
 801291e:	490d      	ldr	r1, [pc, #52]	; (8012954 <HW_SignalDetachment+0x108>)
 8012920:	4613      	mov	r3, r2
 8012922:	011b      	lsls	r3, r3, #4
 8012924:	1a9b      	subs	r3, r3, r2
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	440b      	add	r3, r1
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4618      	mov	r0, r3
 801292e:	f7ff f9b7 	bl	8011ca0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8012932:	79fa      	ldrb	r2, [r7, #7]
 8012934:	4907      	ldr	r1, [pc, #28]	; (8012954 <HW_SignalDetachment+0x108>)
 8012936:	4613      	mov	r3, r2
 8012938:	011b      	lsls	r3, r3, #4
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	440b      	add	r3, r1
 8012940:	3334      	adds	r3, #52	; 0x34
 8012942:	2200      	movs	r2, #0
 8012944:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8012946:	f000 fb57 	bl	8012ff8 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801294a:	bf00      	nop
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	20000b54 	.word	0x20000b54

08012958 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8012962:	79fa      	ldrb	r2, [r7, #7]
 8012964:	4907      	ldr	r1, [pc, #28]	; (8012984 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8012966:	4613      	mov	r3, r2
 8012968:	011b      	lsls	r3, r3, #4
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	440b      	add	r3, r1
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012976:	4618      	mov	r0, r3
 8012978:	f7ff f9d5 	bl	8011d26 <LL_UCPD_SetRpResistor>
}
 801297c:	bf00      	nop
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	20000b54 	.word	0x20000b54

08012988 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	4603      	mov	r3, r0
 8012990:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8012992:	79fa      	ldrb	r2, [r7, #7]
 8012994:	4907      	ldr	r1, [pc, #28]	; (80129b4 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8012996:	4613      	mov	r3, r2
 8012998:	011b      	lsls	r3, r3, #4
 801299a:	1a9b      	subs	r3, r3, r2
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	440b      	add	r3, r1
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ff f9bd 	bl	8011d26 <LL_UCPD_SetRpResistor>
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	20000b54 	.word	0x20000b54

080129b8 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80129c2:	79fa      	ldrb	r2, [r7, #7]
 80129c4:	491b      	ldr	r1, [pc, #108]	; (8012a34 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80129c6:	4613      	mov	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	440b      	add	r3, r1
 80129d0:	3334      	adds	r3, #52	; 0x34
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d002      	beq.n	80129de <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 80129d8:	2b02      	cmp	r3, #2
 80129da:	d010      	beq.n	80129fe <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80129dc:	e022      	b.n	8012a24 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80129de:	79fa      	ldrb	r2, [r7, #7]
 80129e0:	4914      	ldr	r1, [pc, #80]	; (8012a34 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80129e2:	4613      	mov	r3, r2
 80129e4:	011b      	lsls	r3, r3, #4
 80129e6:	1a9b      	subs	r3, r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	440b      	add	r3, r1
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	695b      	ldr	r3, [r3, #20]
 80129f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80129f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80129f8:	d111      	bne.n	8012a1e <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e013      	b.n	8012a26 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 80129fe:	79fa      	ldrb	r2, [r7, #7]
 8012a00:	490c      	ldr	r1, [pc, #48]	; (8012a34 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8012a02:	4613      	mov	r3, r2
 8012a04:	011b      	lsls	r3, r3, #4
 8012a06:	1a9b      	subs	r3, r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	440b      	add	r3, r1
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	695b      	ldr	r3, [r3, #20]
 8012a10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8012a14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8012a18:	d103      	bne.n	8012a22 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e003      	b.n	8012a26 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 8012a1e:	bf00      	nop
 8012a20:	e000      	b.n	8012a24 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 8012a22:	bf00      	nop
  }

  return USBPD_FALSE;
 8012a24:	2300      	movs	r3, #0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	20000b54 	.word	0x20000b54

08012a38 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8012a42:	79fa      	ldrb	r2, [r7, #7]
 8012a44:	4906      	ldr	r1, [pc, #24]	; (8012a60 <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 8012a46:	4613      	mov	r3, r2
 8012a48:	011b      	lsls	r3, r3, #4
 8012a4a:	1a9b      	subs	r3, r3, r2
 8012a4c:	009b      	lsls	r3, r3, #2
 8012a4e:	440b      	add	r3, r1
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7ff f904 	bl	8011c60 <LL_UCPD_SignalFRSTX>
}
 8012a58:	bf00      	nop
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20000b54 	.word	0x20000b54

08012a64 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8012a6e:	79fb      	ldrb	r3, [r7, #7]
 8012a70:	f107 020c 	add.w	r2, r7, #12
 8012a74:	4611      	mov	r1, r2
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f9 fe30 	bl	800c6dc <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	b29b      	uxth	r3, r3
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	71fb      	strb	r3, [r7, #7]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	f107 020c 	add.w	r2, r7, #12
 8012a98:	4611      	mov	r1, r2
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7f9 fe48 	bl	800c730 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	b21b      	sxth	r3, r3
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3710      	adds	r7, #16
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <HW_IF_PWR_Enable>:

#if defined(_SRC) || defined(_DRP)
USBPD_StatusTypeDef HW_IF_PWR_Enable(uint8_t PortNum, USBPD_FunctionalState state, CCxPin_TypeDef Cc,
                                     uint32_t VconnState, USBPD_PortPowerRole_TypeDef role)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b088      	sub	sp, #32
 8012ab0:	af02      	add	r7, sp, #8
 8012ab2:	60ba      	str	r2, [r7, #8]
 8012ab4:	607b      	str	r3, [r7, #4]
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	73fb      	strb	r3, [r7, #15]
 8012aba:	460b      	mov	r3, r1
 8012abc:	73bb      	strb	r3, [r7, #14]
  UNUSED(role);
  int32_t status;
  if (USBPD_ENABLE == state)
 8012abe:	7bbb      	ldrb	r3, [r7, #14]
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d10d      	bne.n	8012ae0 <HW_IF_PWR_Enable+0x34>
    {
      POWER_DEBUG((uint8_t *)"VCONN ON", 8);
      (void)BSP_USBPD_PWR_VCONNOn(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS ON", 7);
 8012ac4:	7bf9      	ldrb	r1, [r7, #15]
 8012ac6:	2307      	movs	r3, #7
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	4b11      	ldr	r3, [pc, #68]	; (8012b10 <HW_IF_PWR_Enable+0x64>)
 8012acc:	2200      	movs	r2, #0
 8012ace:	2006      	movs	r0, #6
 8012ad0:	f7fc ffa0 	bl	800fa14 <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOn(PortNum);
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7f9 fcc0 	bl	800c45c <BSP_USBPD_PWR_VBUSOn>
 8012adc:	6178      	str	r0, [r7, #20]
 8012ade:	e00c      	b.n	8012afa <HW_IF_PWR_Enable+0x4e>
    {
      POWER_DEBUG((uint8_t *)"VCONN OFF", 9);
      (void)BSP_USBPD_PWR_VCONNOff(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS OFF", 8);
 8012ae0:	7bf9      	ldrb	r1, [r7, #15]
 8012ae2:	2308      	movs	r3, #8
 8012ae4:	9300      	str	r3, [sp, #0]
 8012ae6:	4b0b      	ldr	r3, [pc, #44]	; (8012b14 <HW_IF_PWR_Enable+0x68>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	2006      	movs	r0, #6
 8012aec:	f7fc ff92 	bl	800fa14 <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOff(PortNum);
 8012af0:	7bfb      	ldrb	r3, [r7, #15]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f9 fd36 	bl	800c564 <BSP_USBPD_PWR_VBUSOff>
 8012af8:	6178      	str	r0, [r7, #20]
  }
  return (status == BSP_ERROR_NONE) ? USBPD_OK : USBPD_FAIL;
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d101      	bne.n	8012b04 <HW_IF_PWR_Enable+0x58>
 8012b00:	2300      	movs	r3, #0
 8012b02:	e000      	b.n	8012b06 <HW_IF_PWR_Enable+0x5a>
 8012b04:	2310      	movs	r3, #16
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3718      	adds	r7, #24
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	0801b7d0 	.word	0x0801b7d0
 8012b14:	0801b7d8 	.word	0x0801b7d8

08012b18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8012b20:	4b08      	ldr	r3, [pc, #32]	; (8012b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012b24:	4907      	ldr	r1, [pc, #28]	; (8012b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8012b2c:	4b05      	ldr	r3, [pc, #20]	; (8012b44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8012b2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4013      	ands	r3, r2
 8012b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012b36:	68fb      	ldr	r3, [r7, #12]
}
 8012b38:	bf00      	nop
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	40021000 	.word	0x40021000

08012b48 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8012b50:	4b06      	ldr	r3, [pc, #24]	; (8012b6c <LL_APB2_GRP1_DisableClock+0x24>)
 8012b52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	43db      	mvns	r3, r3
 8012b58:	4904      	ldr	r1, [pc, #16]	; (8012b6c <LL_APB2_GRP1_DisableClock+0x24>)
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8012b5e:	bf00      	nop
 8012b60:	370c      	adds	r7, #12
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	40021000 	.word	0x40021000

08012b70 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f043 0201 	orr.w	r2, r3, #1
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	601a      	str	r2, [r3, #0]
}
 8012b84:	bf00      	nop
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	431a      	orrs	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	601a      	str	r2, [r3, #0]
}
 8012baa:	bf00      	nop
 8012bac:	370c      	adds	r7, #12
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr

08012bb6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8012bb6:	b480      	push	{r7}
 8012bb8:	b083      	sub	sp, #12
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	b083      	sub	sp, #12
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8012bea:	b480      	push	{r7}
 8012bec:	b083      	sub	sp, #12
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
 8012bf2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012bfa:	bf00      	nop
 8012bfc:	370c      	adds	r7, #12
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr
	...

08012c08 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b087      	sub	sp, #28
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d02e      	beq.n	8012c78 <LL_TIM_OC_SetMode+0x70>
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	2b04      	cmp	r3, #4
 8012c1e:	d029      	beq.n	8012c74 <LL_TIM_OC_SetMode+0x6c>
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	2b10      	cmp	r3, #16
 8012c24:	d024      	beq.n	8012c70 <LL_TIM_OC_SetMode+0x68>
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	2b40      	cmp	r3, #64	; 0x40
 8012c2a:	d01f      	beq.n	8012c6c <LL_TIM_OC_SetMode+0x64>
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c32:	d019      	beq.n	8012c68 <LL_TIM_OC_SetMode+0x60>
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012c3a:	d013      	beq.n	8012c64 <LL_TIM_OC_SetMode+0x5c>
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c42:	d00d      	beq.n	8012c60 <LL_TIM_OC_SetMode+0x58>
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c4a:	d007      	beq.n	8012c5c <LL_TIM_OC_SetMode+0x54>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c52:	d101      	bne.n	8012c58 <LL_TIM_OC_SetMode+0x50>
 8012c54:	2308      	movs	r3, #8
 8012c56:	e010      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c58:	2309      	movs	r3, #9
 8012c5a:	e00e      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c5c:	2307      	movs	r3, #7
 8012c5e:	e00c      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c60:	2306      	movs	r3, #6
 8012c62:	e00a      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c64:	2305      	movs	r3, #5
 8012c66:	e008      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c68:	2304      	movs	r3, #4
 8012c6a:	e006      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c6c:	2303      	movs	r3, #3
 8012c6e:	e004      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c70:	2302      	movs	r3, #2
 8012c72:	e002      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c74:	2301      	movs	r3, #1
 8012c76:	e000      	b.n	8012c7a <LL_TIM_OC_SetMode+0x72>
 8012c78:	2300      	movs	r3, #0
 8012c7a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	3318      	adds	r3, #24
 8012c80:	4619      	mov	r1, r3
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	4a0e      	ldr	r2, [pc, #56]	; (8012cc0 <LL_TIM_OC_SetMode+0xb8>)
 8012c86:	5cd3      	ldrb	r3, [r2, r3]
 8012c88:	440b      	add	r3, r1
 8012c8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	7dfb      	ldrb	r3, [r7, #23]
 8012c92:	490c      	ldr	r1, [pc, #48]	; (8012cc4 <LL_TIM_OC_SetMode+0xbc>)
 8012c94:	5ccb      	ldrb	r3, [r1, r3]
 8012c96:	4619      	mov	r1, r3
 8012c98:	4b0b      	ldr	r3, [pc, #44]	; (8012cc8 <LL_TIM_OC_SetMode+0xc0>)
 8012c9a:	408b      	lsls	r3, r1
 8012c9c:	43db      	mvns	r3, r3
 8012c9e:	401a      	ands	r2, r3
 8012ca0:	7dfb      	ldrb	r3, [r7, #23]
 8012ca2:	4908      	ldr	r1, [pc, #32]	; (8012cc4 <LL_TIM_OC_SetMode+0xbc>)
 8012ca4:	5ccb      	ldrb	r3, [r1, r3]
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	408b      	lsls	r3, r1
 8012cac:	431a      	orrs	r2, r3
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	601a      	str	r2, [r3, #0]
}
 8012cb2:	bf00      	nop
 8012cb4:	371c      	adds	r7, #28
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	0801bc54 	.word	0x0801bc54
 8012cc4:	0801bc60 	.word	0x0801bc60
 8012cc8:	00010073 	.word	0x00010073

08012ccc <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b087      	sub	sp, #28
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	2b01      	cmp	r3, #1
 8012cdc:	d02e      	beq.n	8012d3c <LL_TIM_OC_SetPolarity+0x70>
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	2b04      	cmp	r3, #4
 8012ce2:	d029      	beq.n	8012d38 <LL_TIM_OC_SetPolarity+0x6c>
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	2b10      	cmp	r3, #16
 8012ce8:	d024      	beq.n	8012d34 <LL_TIM_OC_SetPolarity+0x68>
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	2b40      	cmp	r3, #64	; 0x40
 8012cee:	d01f      	beq.n	8012d30 <LL_TIM_OC_SetPolarity+0x64>
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cf6:	d019      	beq.n	8012d2c <LL_TIM_OC_SetPolarity+0x60>
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012cfe:	d013      	beq.n	8012d28 <LL_TIM_OC_SetPolarity+0x5c>
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d06:	d00d      	beq.n	8012d24 <LL_TIM_OC_SetPolarity+0x58>
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012d0e:	d007      	beq.n	8012d20 <LL_TIM_OC_SetPolarity+0x54>
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d16:	d101      	bne.n	8012d1c <LL_TIM_OC_SetPolarity+0x50>
 8012d18:	2308      	movs	r3, #8
 8012d1a:	e010      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d1c:	2309      	movs	r3, #9
 8012d1e:	e00e      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d20:	2307      	movs	r3, #7
 8012d22:	e00c      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d24:	2306      	movs	r3, #6
 8012d26:	e00a      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d28:	2305      	movs	r3, #5
 8012d2a:	e008      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d2c:	2304      	movs	r3, #4
 8012d2e:	e006      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d30:	2303      	movs	r3, #3
 8012d32:	e004      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d34:	2302      	movs	r3, #2
 8012d36:	e002      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e000      	b.n	8012d3e <LL_TIM_OC_SetPolarity+0x72>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	6a1a      	ldr	r2, [r3, #32]
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
 8012d46:	490b      	ldr	r1, [pc, #44]	; (8012d74 <LL_TIM_OC_SetPolarity+0xa8>)
 8012d48:	5ccb      	ldrb	r3, [r1, r3]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	408b      	lsls	r3, r1
 8012d50:	43db      	mvns	r3, r3
 8012d52:	401a      	ands	r2, r3
 8012d54:	7dfb      	ldrb	r3, [r7, #23]
 8012d56:	4907      	ldr	r1, [pc, #28]	; (8012d74 <LL_TIM_OC_SetPolarity+0xa8>)
 8012d58:	5ccb      	ldrb	r3, [r1, r3]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	408b      	lsls	r3, r1
 8012d60:	431a      	orrs	r2, r3
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	621a      	str	r2, [r3, #32]
}
 8012d66:	bf00      	nop
 8012d68:	371c      	adds	r7, #28
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	0801bc6c 	.word	0x0801bc6c

08012d78 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8012d88:	bf00      	nop
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr

08012d94 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	683a      	ldr	r2, [r7, #0]
 8012da2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012da4:	bf00      	nop
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	683a      	ldr	r2, [r7, #0]
 8012dbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8012dc0:	bf00      	nop
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8012ddc:	bf00      	nop
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f06f 0202 	mvn.w	r2, #2
 8012df6:	611a      	str	r2, [r3, #16]
}
 8012df8:	bf00      	nop
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	f003 0302 	and.w	r3, r3, #2
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d101      	bne.n	8012e1c <LL_TIM_IsActiveFlag_CC1+0x18>
 8012e18:	2301      	movs	r3, #1
 8012e1a:	e000      	b.n	8012e1e <LL_TIM_IsActiveFlag_CC1+0x1a>
 8012e1c:	2300      	movs	r3, #0
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	370c      	adds	r7, #12
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr

08012e2a <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	b083      	sub	sp, #12
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f06f 0204 	mvn.w	r2, #4
 8012e38:	611a      	str	r2, [r3, #16]
}
 8012e3a:	bf00      	nop
 8012e3c:	370c      	adds	r7, #12
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr

08012e46 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 8012e46:	b480      	push	{r7}
 8012e48:	b083      	sub	sp, #12
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	f003 0304 	and.w	r3, r3, #4
 8012e56:	2b04      	cmp	r3, #4
 8012e58:	d101      	bne.n	8012e5e <LL_TIM_IsActiveFlag_CC2+0x18>
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	e000      	b.n	8012e60 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8012e5e:	2300      	movs	r3, #0
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f06f 0208 	mvn.w	r2, #8
 8012e7a:	611a      	str	r2, [r3, #16]
}
 8012e7c:	bf00      	nop
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	f003 0308 	and.w	r3, r3, #8
 8012e98:	2b08      	cmp	r3, #8
 8012e9a:	d101      	bne.n	8012ea0 <LL_TIM_IsActiveFlag_CC3+0x18>
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	e000      	b.n	8012ea2 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b083      	sub	sp, #12
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f06f 0210 	mvn.w	r2, #16
 8012ebc:	611a      	str	r2, [r3, #16]
}
 8012ebe:	bf00      	nop
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
 8012eca:	b480      	push	{r7}
 8012ecc:	b083      	sub	sp, #12
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	691b      	ldr	r3, [r3, #16]
 8012ed6:	f003 0310 	and.w	r3, r3, #16
 8012eda:	2b10      	cmp	r3, #16
 8012edc:	d101      	bne.n	8012ee2 <LL_TIM_IsActiveFlag_CC4+0x18>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e000      	b.n	8012ee4 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8012ef0:	b598      	push	{r3, r4, r7, lr}
 8012ef2:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8012ef4:	4b3b      	ldr	r3, [pc, #236]	; (8012fe4 <USBPD_TIM_Init+0xf4>)
 8012ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d166      	bne.n	8012fcc <USBPD_TIM_Init+0xdc>
  {
    TIMX_CLK_ENABLE;
 8012efe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012f02:	f7ff fe09 	bl	8012b18 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8012f06:	2100      	movs	r1, #0
 8012f08:	4837      	ldr	r0, [pc, #220]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f0a:	f7ff fe41 	bl	8012b90 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8012f0e:	4b37      	ldr	r3, [pc, #220]	; (8012fec <USBPD_TIM_Init+0xfc>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a37      	ldr	r2, [pc, #220]	; (8012ff0 <USBPD_TIM_Init+0x100>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d907      	bls.n	8012f28 <USBPD_TIM_Init+0x38>
 8012f18:	4b34      	ldr	r3, [pc, #208]	; (8012fec <USBPD_TIM_Init+0xfc>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a35      	ldr	r2, [pc, #212]	; (8012ff4 <USBPD_TIM_Init+0x104>)
 8012f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f22:	0c9b      	lsrs	r3, r3, #18
 8012f24:	3b01      	subs	r3, #1
 8012f26:	e000      	b.n	8012f2a <USBPD_TIM_Init+0x3a>
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	482e      	ldr	r0, [pc, #184]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f2e:	f7ff fe42 	bl	8012bb6 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8012f32:	4b2e      	ldr	r3, [pc, #184]	; (8012fec <USBPD_TIM_Init+0xfc>)
 8012f34:	681c      	ldr	r4, [r3, #0]
 8012f36:	482c      	ldr	r0, [pc, #176]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f38:	f7ff fe4b 	bl	8012bd2 <LL_TIM_GetPrescaler>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	3301      	adds	r3, #1
 8012f40:	fbb4 f3f3 	udiv	r3, r4, r3
 8012f44:	2b63      	cmp	r3, #99	; 0x63
 8012f46:	d90d      	bls.n	8012f64 <USBPD_TIM_Init+0x74>
 8012f48:	4b28      	ldr	r3, [pc, #160]	; (8012fec <USBPD_TIM_Init+0xfc>)
 8012f4a:	681c      	ldr	r4, [r3, #0]
 8012f4c:	4826      	ldr	r0, [pc, #152]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f4e:	f7ff fe40 	bl	8012bd2 <LL_TIM_GetPrescaler>
 8012f52:	4603      	mov	r3, r0
 8012f54:	3301      	adds	r3, #1
 8012f56:	2264      	movs	r2, #100	; 0x64
 8012f58:	fb02 f303 	mul.w	r3, r2, r3
 8012f5c:	fbb4 f3f3 	udiv	r3, r4, r3
 8012f60:	3b01      	subs	r3, #1
 8012f62:	e000      	b.n	8012f66 <USBPD_TIM_Init+0x76>
 8012f64:	2300      	movs	r3, #0
 8012f66:	4619      	mov	r1, r3
 8012f68:	481f      	ldr	r0, [pc, #124]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f6a:	f7ff fe3e 	bl	8012bea <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8012f6e:	2230      	movs	r2, #48	; 0x30
 8012f70:	2101      	movs	r1, #1
 8012f72:	481d      	ldr	r0, [pc, #116]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f74:	f7ff fe48 	bl	8012c08 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8012f78:	2230      	movs	r2, #48	; 0x30
 8012f7a:	2110      	movs	r1, #16
 8012f7c:	481a      	ldr	r0, [pc, #104]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f7e:	f7ff fe43 	bl	8012c08 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8012f82:	2230      	movs	r2, #48	; 0x30
 8012f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012f88:	4817      	ldr	r0, [pc, #92]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f8a:	f7ff fe3d 	bl	8012c08 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8012f8e:	2230      	movs	r2, #48	; 0x30
 8012f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012f94:	4814      	ldr	r0, [pc, #80]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012f96:	f7ff fe37 	bl	8012c08 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	2101      	movs	r1, #1
 8012f9e:	4812      	ldr	r0, [pc, #72]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012fa0:	f7ff fe94 	bl	8012ccc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	2110      	movs	r1, #16
 8012fa8:	480f      	ldr	r0, [pc, #60]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012faa:	f7ff fe8f 	bl	8012ccc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012fb4:	480c      	ldr	r0, [pc, #48]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012fb6:	f7ff fe89 	bl	8012ccc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012fc0:	4809      	ldr	r0, [pc, #36]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012fc2:	f7ff fe83 	bl	8012ccc <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8012fc6:	4808      	ldr	r0, [pc, #32]	; (8012fe8 <USBPD_TIM_Init+0xf8>)
 8012fc8:	f7ff fdd2 	bl	8012b70 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8012fcc:	4b05      	ldr	r3, [pc, #20]	; (8012fe4 <USBPD_TIM_Init+0xf4>)
 8012fce:	f993 3000 	ldrsb.w	r3, [r3]
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	b25a      	sxtb	r2, r3
 8012fda:	4b02      	ldr	r3, [pc, #8]	; (8012fe4 <USBPD_TIM_Init+0xf4>)
 8012fdc:	701a      	strb	r2, [r3, #0]
}
 8012fde:	bf00      	nop
 8012fe0:	bd98      	pop	{r3, r4, r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	20000b90 	.word	0x20000b90
 8012fe8:	40012c00 	.word	0x40012c00
 8012fec:	20000140 	.word	0x20000140
 8012ff0:	000f423f 	.word	0x000f423f
 8012ff4:	431bde83 	.word	0x431bde83

08012ff8 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8012ffc:	4b09      	ldr	r3, [pc, #36]	; (8013024 <USBPD_TIM_DeInit+0x2c>)
 8012ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8013002:	b2db      	uxtb	r3, r3
 8013004:	3b01      	subs	r3, #1
 8013006:	b2db      	uxtb	r3, r3
 8013008:	b25a      	sxtb	r2, r3
 801300a:	4b06      	ldr	r3, [pc, #24]	; (8013024 <USBPD_TIM_DeInit+0x2c>)
 801300c:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 801300e:	4b05      	ldr	r3, [pc, #20]	; (8013024 <USBPD_TIM_DeInit+0x2c>)
 8013010:	f993 3000 	ldrsb.w	r3, [r3]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d103      	bne.n	8013020 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8013018:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801301c:	f7ff fd94 	bl	8012b48 <LL_APB2_GRP1_DisableClock>
  }
}
 8013020:	bf00      	nop
 8013022:	bd80      	pop	{r7, pc}
 8013024:	20000b90 	.word	0x20000b90

08013028 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	4603      	mov	r3, r0
 8013030:	6039      	str	r1, [r7, #0]
 8013032:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8013034:	79fb      	ldrb	r3, [r7, #7]
 8013036:	2b03      	cmp	r3, #3
 8013038:	d85e      	bhi.n	80130f8 <USBPD_TIM_Start+0xd0>
 801303a:	a201      	add	r2, pc, #4	; (adr r2, 8013040 <USBPD_TIM_Start+0x18>)
 801303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013040:	08013051 	.word	0x08013051
 8013044:	0801307b 	.word	0x0801307b
 8013048:	080130a5 	.word	0x080130a5
 801304c:	080130cf 	.word	0x080130cf
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8013050:	4b2c      	ldr	r3, [pc, #176]	; (8013104 <USBPD_TIM_Start+0xdc>)
 8013052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	441a      	add	r2, r3
 8013058:	4b2b      	ldr	r3, [pc, #172]	; (8013108 <USBPD_TIM_Start+0xe0>)
 801305a:	fba3 1302 	umull	r1, r3, r3, r2
 801305e:	0b5b      	lsrs	r3, r3, #13
 8013060:	f242 7110 	movw	r1, #10000	; 0x2710
 8013064:	fb01 f303 	mul.w	r3, r1, r3
 8013068:	1ad3      	subs	r3, r2, r3
 801306a:	4619      	mov	r1, r3
 801306c:	4825      	ldr	r0, [pc, #148]	; (8013104 <USBPD_TIM_Start+0xdc>)
 801306e:	f7ff fe83 	bl	8012d78 <LL_TIM_OC_SetCompareCH1>
 8013072:	4824      	ldr	r0, [pc, #144]	; (8013104 <USBPD_TIM_Start+0xdc>)
 8013074:	f7ff feb8 	bl	8012de8 <LL_TIM_ClearFlag_CC1>
      break;
 8013078:	e03f      	b.n	80130fa <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 801307a:	4b22      	ldr	r3, [pc, #136]	; (8013104 <USBPD_TIM_Start+0xdc>)
 801307c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	441a      	add	r2, r3
 8013082:	4b21      	ldr	r3, [pc, #132]	; (8013108 <USBPD_TIM_Start+0xe0>)
 8013084:	fba3 1302 	umull	r1, r3, r3, r2
 8013088:	0b5b      	lsrs	r3, r3, #13
 801308a:	f242 7110 	movw	r1, #10000	; 0x2710
 801308e:	fb01 f303 	mul.w	r3, r1, r3
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	4619      	mov	r1, r3
 8013096:	481b      	ldr	r0, [pc, #108]	; (8013104 <USBPD_TIM_Start+0xdc>)
 8013098:	f7ff fe7c 	bl	8012d94 <LL_TIM_OC_SetCompareCH2>
 801309c:	4819      	ldr	r0, [pc, #100]	; (8013104 <USBPD_TIM_Start+0xdc>)
 801309e:	f7ff fec4 	bl	8012e2a <LL_TIM_ClearFlag_CC2>
      break;
 80130a2:	e02a      	b.n	80130fa <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 80130a4:	4b17      	ldr	r3, [pc, #92]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	441a      	add	r2, r3
 80130ac:	4b16      	ldr	r3, [pc, #88]	; (8013108 <USBPD_TIM_Start+0xe0>)
 80130ae:	fba3 1302 	umull	r1, r3, r3, r2
 80130b2:	0b5b      	lsrs	r3, r3, #13
 80130b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80130b8:	fb01 f303 	mul.w	r3, r1, r3
 80130bc:	1ad3      	subs	r3, r2, r3
 80130be:	4619      	mov	r1, r3
 80130c0:	4810      	ldr	r0, [pc, #64]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130c2:	f7ff fe75 	bl	8012db0 <LL_TIM_OC_SetCompareCH3>
 80130c6:	480f      	ldr	r0, [pc, #60]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130c8:	f7ff fed0 	bl	8012e6c <LL_TIM_ClearFlag_CC3>
      break;
 80130cc:	e015      	b.n	80130fa <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 80130ce:	4b0d      	ldr	r3, [pc, #52]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	441a      	add	r2, r3
 80130d6:	4b0c      	ldr	r3, [pc, #48]	; (8013108 <USBPD_TIM_Start+0xe0>)
 80130d8:	fba3 1302 	umull	r1, r3, r3, r2
 80130dc:	0b5b      	lsrs	r3, r3, #13
 80130de:	f242 7110 	movw	r1, #10000	; 0x2710
 80130e2:	fb01 f303 	mul.w	r3, r1, r3
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	4619      	mov	r1, r3
 80130ea:	4806      	ldr	r0, [pc, #24]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130ec:	f7ff fe6e 	bl	8012dcc <LL_TIM_OC_SetCompareCH4>
 80130f0:	4804      	ldr	r0, [pc, #16]	; (8013104 <USBPD_TIM_Start+0xdc>)
 80130f2:	f7ff fedc 	bl	8012eae <LL_TIM_ClearFlag_CC4>
      break;
 80130f6:	e000      	b.n	80130fa <USBPD_TIM_Start+0xd2>
    default:
      break;
 80130f8:	bf00      	nop
  }
}
 80130fa:	bf00      	nop
 80130fc:	3708      	adds	r7, #8
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	40012c00 	.word	0x40012c00
 8013108:	d1b71759 	.word	0xd1b71759

0801310c <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	4603      	mov	r3, r0
 8013114:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8013116:	2301      	movs	r3, #1
 8013118:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	2b03      	cmp	r3, #3
 801311e:	d81f      	bhi.n	8013160 <USBPD_TIM_IsExpired+0x54>
 8013120:	a201      	add	r2, pc, #4	; (adr r2, 8013128 <USBPD_TIM_IsExpired+0x1c>)
 8013122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013126:	bf00      	nop
 8013128:	08013139 	.word	0x08013139
 801312c:	08013143 	.word	0x08013143
 8013130:	0801314d 	.word	0x0801314d
 8013134:	08013157 	.word	0x08013157
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8013138:	480c      	ldr	r0, [pc, #48]	; (801316c <USBPD_TIM_IsExpired+0x60>)
 801313a:	f7ff fe63 	bl	8012e04 <LL_TIM_IsActiveFlag_CC1>
 801313e:	60f8      	str	r0, [r7, #12]
      break;
 8013140:	e00f      	b.n	8013162 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8013142:	480a      	ldr	r0, [pc, #40]	; (801316c <USBPD_TIM_IsExpired+0x60>)
 8013144:	f7ff fe7f 	bl	8012e46 <LL_TIM_IsActiveFlag_CC2>
 8013148:	60f8      	str	r0, [r7, #12]
      break;
 801314a:	e00a      	b.n	8013162 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801314c:	4807      	ldr	r0, [pc, #28]	; (801316c <USBPD_TIM_IsExpired+0x60>)
 801314e:	f7ff fe9b 	bl	8012e88 <LL_TIM_IsActiveFlag_CC3>
 8013152:	60f8      	str	r0, [r7, #12]
      break;
 8013154:	e005      	b.n	8013162 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8013156:	4805      	ldr	r0, [pc, #20]	; (801316c <USBPD_TIM_IsExpired+0x60>)
 8013158:	f7ff feb7 	bl	8012eca <LL_TIM_IsActiveFlag_CC4>
 801315c:	60f8      	str	r0, [r7, #12]
      break;
 801315e:	e000      	b.n	8013162 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8013160:	bf00      	nop
  }
  return _expired;
 8013162:	68fb      	ldr	r3, [r7, #12]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	40012c00 	.word	0x40012c00

08013170 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	4603      	mov	r3, r0
 8013178:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801317a:	2300      	movs	r3, #0
 801317c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801317e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013182:	2b84      	cmp	r3, #132	; 0x84
 8013184:	d005      	beq.n	8013192 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	4413      	add	r3, r2
 801318e:	3303      	adds	r3, #3
 8013190:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013192:	68fb      	ldr	r3, [r7, #12]
}
 8013194:	4618      	mov	r0, r3
 8013196:	3714      	adds	r7, #20
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131a6:	f3ef 8305 	mrs	r3, IPSR
 80131aa:	607b      	str	r3, [r7, #4]
  return(result);
 80131ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bf14      	ite	ne
 80131b2:	2301      	movne	r3, #1
 80131b4:	2300      	moveq	r3, #0
 80131b6:	b2db      	uxtb	r3, r3
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80131c8:	f001 f8e8 	bl	801439c <vTaskStartScheduler>
  
  return osOK;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80131d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d4:	b087      	sub	sp, #28
 80131d6:	af02      	add	r7, sp, #8
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	685c      	ldr	r4, [r3, #4]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80131e8:	b29e      	uxth	r6, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7ff ffbd 	bl	8013170 <makeFreeRtosPriority>
 80131f6:	4602      	mov	r2, r0
 80131f8:	f107 030c 	add.w	r3, r7, #12
 80131fc:	9301      	str	r3, [sp, #4]
 80131fe:	9200      	str	r2, [sp, #0]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	4632      	mov	r2, r6
 8013204:	4629      	mov	r1, r5
 8013206:	4620      	mov	r0, r4
 8013208:	f000 fe6c 	bl	8013ee4 <xTaskCreate>
 801320c:	4603      	mov	r3, r0
 801320e:	2b01      	cmp	r3, #1
 8013210:	d001      	beq.n	8013216 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8013212:	2300      	movs	r3, #0
 8013214:	e000      	b.n	8013218 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8013216:	68fb      	ldr	r3, [r7, #12]
}
 8013218:	4618      	mov	r0, r3
 801321a:	3714      	adds	r7, #20
 801321c:	46bd      	mov	sp, r7
 801321e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013220 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 ff8d 	bl	8014148 <vTaskDelete>
  return osOK;
 801322e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8013230:	4618      	mov	r0, r3
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <osDelay+0x16>
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	e000      	b.n	8013250 <osDelay+0x18>
 801324e:	2301      	movs	r3, #1
 8013250:	4618      	mov	r0, r3
 8013252:	f001 f809 	bl	8014268 <vTaskDelay>
  
  return osOK;
 8013256:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013258:	4618      	mov	r0, r3
 801325a:	3710      	adds	r7, #16
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}

08013260 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6818      	ldr	r0, [r3, #0]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	4619      	mov	r1, r3
 8013276:	f000 f9d5 	bl	8013624 <xQueueGenericCreate>
 801327a:	4603      	mov	r3, r0
#endif
}
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8013290:	2300      	movs	r3, #0
 8013292:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d101      	bne.n	80132a2 <osMessagePut+0x1e>
    ticks = 1;
 801329e:	2301      	movs	r3, #1
 80132a0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80132a2:	f7ff ff7d 	bl	80131a0 <inHandlerMode>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d018      	beq.n	80132de <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80132ac:	f107 0210 	add.w	r2, r7, #16
 80132b0:	f107 0108 	add.w	r1, r7, #8
 80132b4:	2300      	movs	r3, #0
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f000 fb08 	bl	80138cc <xQueueGenericSendFromISR>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d001      	beq.n	80132c6 <osMessagePut+0x42>
      return osErrorOS;
 80132c2:	23ff      	movs	r3, #255	; 0xff
 80132c4:	e018      	b.n	80132f8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d014      	beq.n	80132f6 <osMessagePut+0x72>
 80132cc:	4b0c      	ldr	r3, [pc, #48]	; (8013300 <osMessagePut+0x7c>)
 80132ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d2:	601a      	str	r2, [r3, #0]
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	f3bf 8f6f 	isb	sy
 80132dc:	e00b      	b.n	80132f6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80132de:	f107 0108 	add.w	r1, r7, #8
 80132e2:	2300      	movs	r3, #0
 80132e4:	697a      	ldr	r2, [r7, #20]
 80132e6:	68f8      	ldr	r0, [r7, #12]
 80132e8:	f000 f9f2 	bl	80136d0 <xQueueGenericSend>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d001      	beq.n	80132f6 <osMessagePut+0x72>
      return osErrorOS;
 80132f2:	23ff      	movs	r3, #255	; 0xff
 80132f4:	e000      	b.n	80132f8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3718      	adds	r7, #24
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	e000ed04 	.word	0xe000ed04

08013304 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013304:	b590      	push	{r4, r7, lr}
 8013306:	b08b      	sub	sp, #44	; 0x2c
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013314:	2300      	movs	r3, #0
 8013316:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d10a      	bne.n	8013334 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801331e:	2380      	movs	r3, #128	; 0x80
 8013320:	617b      	str	r3, [r7, #20]
    return event;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	461c      	mov	r4, r3
 8013326:	f107 0314 	add.w	r3, r7, #20
 801332a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801332e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013332:	e054      	b.n	80133de <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013334:	2300      	movs	r3, #0
 8013336:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013338:	2300      	movs	r3, #0
 801333a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013342:	d103      	bne.n	801334c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013344:	f04f 33ff 	mov.w	r3, #4294967295
 8013348:	627b      	str	r3, [r7, #36]	; 0x24
 801334a:	e009      	b.n	8013360 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d006      	beq.n	8013360 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8013356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <osMessageGet+0x5c>
      ticks = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013360:	f7ff ff1e 	bl	80131a0 <inHandlerMode>
 8013364:	4603      	mov	r3, r0
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01c      	beq.n	80133a4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801336a:	f107 0220 	add.w	r2, r7, #32
 801336e:	f107 0314 	add.w	r3, r7, #20
 8013372:	3304      	adds	r3, #4
 8013374:	4619      	mov	r1, r3
 8013376:	68b8      	ldr	r0, [r7, #8]
 8013378:	f000 fc24 	bl	8013bc4 <xQueueReceiveFromISR>
 801337c:	4603      	mov	r3, r0
 801337e:	2b01      	cmp	r3, #1
 8013380:	d102      	bne.n	8013388 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8013382:	2310      	movs	r3, #16
 8013384:	617b      	str	r3, [r7, #20]
 8013386:	e001      	b.n	801338c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8013388:	2300      	movs	r3, #0
 801338a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801338c:	6a3b      	ldr	r3, [r7, #32]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d01d      	beq.n	80133ce <osMessageGet+0xca>
 8013392:	4b15      	ldr	r3, [pc, #84]	; (80133e8 <osMessageGet+0xe4>)
 8013394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013398:	601a      	str	r2, [r3, #0]
 801339a:	f3bf 8f4f 	dsb	sy
 801339e:	f3bf 8f6f 	isb	sy
 80133a2:	e014      	b.n	80133ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80133a4:	f107 0314 	add.w	r3, r7, #20
 80133a8:	3304      	adds	r3, #4
 80133aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133ac:	4619      	mov	r1, r3
 80133ae:	68b8      	ldr	r0, [r7, #8]
 80133b0:	f000 fb28 	bl	8013a04 <xQueueReceive>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d102      	bne.n	80133c0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80133ba:	2310      	movs	r3, #16
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	e006      	b.n	80133ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d101      	bne.n	80133ca <osMessageGet+0xc6>
 80133c6:	2300      	movs	r3, #0
 80133c8:	e000      	b.n	80133cc <osMessageGet+0xc8>
 80133ca:	2340      	movs	r3, #64	; 0x40
 80133cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	461c      	mov	r4, r3
 80133d2:	f107 0314 	add.w	r3, r7, #20
 80133d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80133da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	372c      	adds	r7, #44	; 0x2c
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd90      	pop	{r4, r7, pc}
 80133e6:	bf00      	nop
 80133e8:	e000ed04 	.word	0xe000ed04

080133ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f103 0208 	add.w	r2, r3, #8
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f04f 32ff 	mov.w	r2, #4294967295
 8013404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f103 0208 	add.w	r2, r3, #8
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f103 0208 	add.w	r2, r3, #8
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2200      	movs	r2, #0
 801341e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013420:	bf00      	nop
 8013422:	370c      	adds	r7, #12
 8013424:	46bd      	mov	sp, r7
 8013426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342a:	4770      	bx	lr

0801342c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801343a:	bf00      	nop
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr

08013446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013446:	b480      	push	{r7}
 8013448:	b085      	sub	sp, #20
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
 801344e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	689a      	ldr	r2, [r3, #8]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	683a      	ldr	r2, [r7, #0]
 8013470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	1c5a      	adds	r2, r3, #1
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	601a      	str	r2, [r3, #0]
}
 8013482:	bf00      	nop
 8013484:	3714      	adds	r7, #20
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr

0801348e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801348e:	b480      	push	{r7}
 8013490:	b085      	sub	sp, #20
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
 8013496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a4:	d103      	bne.n	80134ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	691b      	ldr	r3, [r3, #16]
 80134aa:	60fb      	str	r3, [r7, #12]
 80134ac:	e00c      	b.n	80134c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	3308      	adds	r3, #8
 80134b2:	60fb      	str	r3, [r7, #12]
 80134b4:	e002      	b.n	80134bc <vListInsert+0x2e>
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	60fb      	str	r3, [r7, #12]
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	68ba      	ldr	r2, [r7, #8]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d2f6      	bcs.n	80134b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	685a      	ldr	r2, [r3, #4]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	683a      	ldr	r2, [r7, #0]
 80134d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	1c5a      	adds	r2, r3, #1
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	601a      	str	r2, [r3, #0]
}
 80134f4:	bf00      	nop
 80134f6:	3714      	adds	r7, #20
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr

08013500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013500:	b480      	push	{r7}
 8013502:	b085      	sub	sp, #20
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	6892      	ldr	r2, [r2, #8]
 8013516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	6852      	ldr	r2, [r2, #4]
 8013520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	429a      	cmp	r2, r3
 801352a:	d103      	bne.n	8013534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	689a      	ldr	r2, [r3, #8]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	1e5a      	subs	r2, r3, #1
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
}
 8013548:	4618      	mov	r0, r3
 801354a:	3714      	adds	r7, #20
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr

08013554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d10a      	bne.n	801357e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013568:	f04f 0330 	mov.w	r3, #48	; 0x30
 801356c:	f383 8811 	msr	BASEPRI, r3
 8013570:	f3bf 8f6f 	isb	sy
 8013574:	f3bf 8f4f 	dsb	sy
 8013578:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801357a:	bf00      	nop
 801357c:	e7fe      	b.n	801357c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801357e:	f001 fef1 	bl	8015364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801358a:	68f9      	ldr	r1, [r7, #12]
 801358c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801358e:	fb01 f303 	mul.w	r3, r1, r3
 8013592:	441a      	add	r2, r3
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2200      	movs	r2, #0
 801359c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ae:	3b01      	subs	r3, #1
 80135b0:	68f9      	ldr	r1, [r7, #12]
 80135b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80135b4:	fb01 f303 	mul.w	r3, r1, r3
 80135b8:	441a      	add	r2, r3
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	22ff      	movs	r2, #255	; 0xff
 80135c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	22ff      	movs	r2, #255	; 0xff
 80135ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d114      	bne.n	80135fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d01a      	beq.n	8013612 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	3310      	adds	r3, #16
 80135e0:	4618      	mov	r0, r3
 80135e2:	f001 f905 	bl	80147f0 <xTaskRemoveFromEventList>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d012      	beq.n	8013612 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80135ec:	4b0c      	ldr	r3, [pc, #48]	; (8013620 <xQueueGenericReset+0xcc>)
 80135ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	f3bf 8f6f 	isb	sy
 80135fc:	e009      	b.n	8013612 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	3310      	adds	r3, #16
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff fef2 	bl	80133ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	3324      	adds	r3, #36	; 0x24
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff feed 	bl	80133ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013612:	f001 fed7 	bl	80153c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013616:	2301      	movs	r3, #1
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	e000ed04 	.word	0xe000ed04

08013624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013624:	b580      	push	{r7, lr}
 8013626:	b08a      	sub	sp, #40	; 0x28
 8013628:	af02      	add	r7, sp, #8
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	4613      	mov	r3, r2
 8013630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10a      	bne.n	801364e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013638:	f04f 0330 	mov.w	r3, #48	; 0x30
 801363c:	f383 8811 	msr	BASEPRI, r3
 8013640:	f3bf 8f6f 	isb	sy
 8013644:	f3bf 8f4f 	dsb	sy
 8013648:	613b      	str	r3, [r7, #16]
}
 801364a:	bf00      	nop
 801364c:	e7fe      	b.n	801364c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	68ba      	ldr	r2, [r7, #8]
 8013652:	fb02 f303 	mul.w	r3, r2, r3
 8013656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013658:	69fb      	ldr	r3, [r7, #28]
 801365a:	3348      	adds	r3, #72	; 0x48
 801365c:	4618      	mov	r0, r3
 801365e:	f001 fb6d 	bl	8014d3c <pvPortMalloc>
 8013662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d00d      	beq.n	8013686 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	3348      	adds	r3, #72	; 0x48
 8013672:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013674:	79fa      	ldrb	r2, [r7, #7]
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	4613      	mov	r3, r2
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 f805 	bl	8013690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013686:	69bb      	ldr	r3, [r7, #24]
	}
 8013688:	4618      	mov	r0, r3
 801368a:	3720      	adds	r7, #32
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	60b9      	str	r1, [r7, #8]
 801369a:	607a      	str	r2, [r7, #4]
 801369c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d103      	bne.n	80136ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80136a4:	69bb      	ldr	r3, [r7, #24]
 80136a6:	69ba      	ldr	r2, [r7, #24]
 80136a8:	601a      	str	r2, [r3, #0]
 80136aa:	e002      	b.n	80136b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	68fa      	ldr	r2, [r7, #12]
 80136b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	68ba      	ldr	r2, [r7, #8]
 80136bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80136be:	2101      	movs	r1, #1
 80136c0:	69b8      	ldr	r0, [r7, #24]
 80136c2:	f7ff ff47 	bl	8013554 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80136c6:	bf00      	nop
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
	...

080136d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08e      	sub	sp, #56	; 0x38
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80136de:	2300      	movs	r3, #0
 80136e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10a      	bne.n	8013702 <xQueueGenericSend+0x32>
	__asm volatile
 80136ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <xQueueGenericSend+0x40>
 8013708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370c:	2b00      	cmp	r3, #0
 801370e:	d101      	bne.n	8013714 <xQueueGenericSend+0x44>
 8013710:	2301      	movs	r3, #1
 8013712:	e000      	b.n	8013716 <xQueueGenericSend+0x46>
 8013714:	2300      	movs	r3, #0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d10a      	bne.n	8013730 <xQueueGenericSend+0x60>
	__asm volatile
 801371a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801371e:	f383 8811 	msr	BASEPRI, r3
 8013722:	f3bf 8f6f 	isb	sy
 8013726:	f3bf 8f4f 	dsb	sy
 801372a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801372c:	bf00      	nop
 801372e:	e7fe      	b.n	801372e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d103      	bne.n	801373e <xQueueGenericSend+0x6e>
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801373a:	2b01      	cmp	r3, #1
 801373c:	d101      	bne.n	8013742 <xQueueGenericSend+0x72>
 801373e:	2301      	movs	r3, #1
 8013740:	e000      	b.n	8013744 <xQueueGenericSend+0x74>
 8013742:	2300      	movs	r3, #0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10a      	bne.n	801375e <xQueueGenericSend+0x8e>
	__asm volatile
 8013748:	f04f 0330 	mov.w	r3, #48	; 0x30
 801374c:	f383 8811 	msr	BASEPRI, r3
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	f3bf 8f4f 	dsb	sy
 8013758:	623b      	str	r3, [r7, #32]
}
 801375a:	bf00      	nop
 801375c:	e7fe      	b.n	801375c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801375e:	f001 f9e3 	bl	8014b28 <xTaskGetSchedulerState>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <xQueueGenericSend+0x9e>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <xQueueGenericSend+0xa2>
 801376e:	2301      	movs	r3, #1
 8013770:	e000      	b.n	8013774 <xQueueGenericSend+0xa4>
 8013772:	2300      	movs	r3, #0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <xQueueGenericSend+0xbe>
	__asm volatile
 8013778:	f04f 0330 	mov.w	r3, #48	; 0x30
 801377c:	f383 8811 	msr	BASEPRI, r3
 8013780:	f3bf 8f6f 	isb	sy
 8013784:	f3bf 8f4f 	dsb	sy
 8013788:	61fb      	str	r3, [r7, #28]
}
 801378a:	bf00      	nop
 801378c:	e7fe      	b.n	801378c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801378e:	f001 fde9 	bl	8015364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801379a:	429a      	cmp	r2, r3
 801379c:	d302      	bcc.n	80137a4 <xQueueGenericSend+0xd4>
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	2b02      	cmp	r3, #2
 80137a2:	d129      	bne.n	80137f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137aa:	f000 fa8b 	bl	8013cc4 <prvCopyDataToQueue>
 80137ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d010      	beq.n	80137da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	3324      	adds	r3, #36	; 0x24
 80137bc:	4618      	mov	r0, r3
 80137be:	f001 f817 	bl	80147f0 <xTaskRemoveFromEventList>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d013      	beq.n	80137f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80137c8:	4b3f      	ldr	r3, [pc, #252]	; (80138c8 <xQueueGenericSend+0x1f8>)
 80137ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ce:	601a      	str	r2, [r3, #0]
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	f3bf 8f6f 	isb	sy
 80137d8:	e00a      	b.n	80137f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d007      	beq.n	80137f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80137e0:	4b39      	ldr	r3, [pc, #228]	; (80138c8 <xQueueGenericSend+0x1f8>)
 80137e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137f0:	f001 fde8 	bl	80153c4 <vPortExitCritical>
				return pdPASS;
 80137f4:	2301      	movs	r3, #1
 80137f6:	e063      	b.n	80138c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d103      	bne.n	8013806 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137fe:	f001 fde1 	bl	80153c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013802:	2300      	movs	r3, #0
 8013804:	e05c      	b.n	80138c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013808:	2b00      	cmp	r3, #0
 801380a:	d106      	bne.n	801381a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801380c:	f107 0314 	add.w	r3, r7, #20
 8013810:	4618      	mov	r0, r3
 8013812:	f001 f84f 	bl	80148b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013816:	2301      	movs	r3, #1
 8013818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801381a:	f001 fdd3 	bl	80153c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801381e:	f000 fe05 	bl	801442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013822:	f001 fd9f 	bl	8015364 <vPortEnterCritical>
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801382c:	b25b      	sxtb	r3, r3
 801382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013832:	d103      	bne.n	801383c <xQueueGenericSend+0x16c>
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	2200      	movs	r2, #0
 8013838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013842:	b25b      	sxtb	r3, r3
 8013844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013848:	d103      	bne.n	8013852 <xQueueGenericSend+0x182>
 801384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384c:	2200      	movs	r2, #0
 801384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013852:	f001 fdb7 	bl	80153c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013856:	1d3a      	adds	r2, r7, #4
 8013858:	f107 0314 	add.w	r3, r7, #20
 801385c:	4611      	mov	r1, r2
 801385e:	4618      	mov	r0, r3
 8013860:	f001 f83e 	bl	80148e0 <xTaskCheckForTimeOut>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	d124      	bne.n	80138b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801386c:	f000 fb22 	bl	8013eb4 <prvIsQueueFull>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d018      	beq.n	80138a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	3310      	adds	r3, #16
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	4611      	mov	r1, r2
 801387e:	4618      	mov	r0, r3
 8013880:	f000 ff92 	bl	80147a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013886:	f000 faad 	bl	8013de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801388a:	f000 fddd 	bl	8014448 <xTaskResumeAll>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	f47f af7c 	bne.w	801378e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013896:	4b0c      	ldr	r3, [pc, #48]	; (80138c8 <xQueueGenericSend+0x1f8>)
 8013898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389c:	601a      	str	r2, [r3, #0]
 801389e:	f3bf 8f4f 	dsb	sy
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	e772      	b.n	801378e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80138a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138aa:	f000 fa9b 	bl	8013de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80138ae:	f000 fdcb 	bl	8014448 <xTaskResumeAll>
 80138b2:	e76c      	b.n	801378e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80138b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b6:	f000 fa95 	bl	8013de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138ba:	f000 fdc5 	bl	8014448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80138be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3738      	adds	r7, #56	; 0x38
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	e000ed04 	.word	0xe000ed04

080138cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b090      	sub	sp, #64	; 0x40
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80138de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10a      	bne.n	80138fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80138e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138e8:	f383 8811 	msr	BASEPRI, r3
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138f6:	bf00      	nop
 80138f8:	e7fe      	b.n	80138f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d103      	bne.n	8013908 <xQueueGenericSendFromISR+0x3c>
 8013900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013904:	2b00      	cmp	r3, #0
 8013906:	d101      	bne.n	801390c <xQueueGenericSendFromISR+0x40>
 8013908:	2301      	movs	r3, #1
 801390a:	e000      	b.n	801390e <xQueueGenericSendFromISR+0x42>
 801390c:	2300      	movs	r3, #0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10a      	bne.n	8013928 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013912:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013924:	bf00      	nop
 8013926:	e7fe      	b.n	8013926 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	2b02      	cmp	r3, #2
 801392c:	d103      	bne.n	8013936 <xQueueGenericSendFromISR+0x6a>
 801392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013932:	2b01      	cmp	r3, #1
 8013934:	d101      	bne.n	801393a <xQueueGenericSendFromISR+0x6e>
 8013936:	2301      	movs	r3, #1
 8013938:	e000      	b.n	801393c <xQueueGenericSendFromISR+0x70>
 801393a:	2300      	movs	r3, #0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10a      	bne.n	8013956 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013940:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	623b      	str	r3, [r7, #32]
}
 8013952:	bf00      	nop
 8013954:	e7fe      	b.n	8013954 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013956:	f001 fde7 	bl	8015528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801395a:	f3ef 8211 	mrs	r2, BASEPRI
 801395e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	61fa      	str	r2, [r7, #28]
 8013970:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013972:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013974:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397e:	429a      	cmp	r2, r3
 8013980:	d302      	bcc.n	8013988 <xQueueGenericSendFromISR+0xbc>
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	2b02      	cmp	r3, #2
 8013986:	d12f      	bne.n	80139e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801398e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013998:	683a      	ldr	r2, [r7, #0]
 801399a:	68b9      	ldr	r1, [r7, #8]
 801399c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801399e:	f000 f991 	bl	8013cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80139a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80139a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139aa:	d112      	bne.n	80139d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d016      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	3324      	adds	r3, #36	; 0x24
 80139b8:	4618      	mov	r0, r3
 80139ba:	f000 ff19 	bl	80147f0 <xTaskRemoveFromEventList>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00e      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00b      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	e007      	b.n	80139e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	b25a      	sxtb	r2, r3
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80139e2:	2301      	movs	r3, #1
 80139e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80139e6:	e001      	b.n	80139ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139e8:	2300      	movs	r3, #0
 80139ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3740      	adds	r7, #64	; 0x40
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
	...

08013a04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b08c      	sub	sp, #48	; 0x30
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013a10:	2300      	movs	r3, #0
 8013a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10a      	bne.n	8013a34 <xQueueReceive+0x30>
	__asm volatile
 8013a1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	623b      	str	r3, [r7, #32]
}
 8013a30:	bf00      	nop
 8013a32:	e7fe      	b.n	8013a32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d103      	bne.n	8013a42 <xQueueReceive+0x3e>
 8013a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <xQueueReceive+0x42>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <xQueueReceive+0x44>
 8013a46:	2300      	movs	r3, #0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10a      	bne.n	8013a62 <xQueueReceive+0x5e>
	__asm volatile
 8013a4c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	61fb      	str	r3, [r7, #28]
}
 8013a5e:	bf00      	nop
 8013a60:	e7fe      	b.n	8013a60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a62:	f001 f861 	bl	8014b28 <xTaskGetSchedulerState>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d102      	bne.n	8013a72 <xQueueReceive+0x6e>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <xQueueReceive+0x72>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e000      	b.n	8013a78 <xQueueReceive+0x74>
 8013a76:	2300      	movs	r3, #0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10a      	bne.n	8013a92 <xQueueReceive+0x8e>
	__asm volatile
 8013a7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	61bb      	str	r3, [r7, #24]
}
 8013a8e:	bf00      	nop
 8013a90:	e7fe      	b.n	8013a90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a92:	f001 fc67 	bl	8015364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d01f      	beq.n	8013ae2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013aa2:	68b9      	ldr	r1, [r7, #8]
 8013aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aa6:	f000 f977 	bl	8013d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aac:	1e5a      	subs	r2, r3, #1
 8013aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab4:	691b      	ldr	r3, [r3, #16]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00f      	beq.n	8013ada <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	3310      	adds	r3, #16
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f000 fe96 	bl	80147f0 <xTaskRemoveFromEventList>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d007      	beq.n	8013ada <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013aca:	4b3d      	ldr	r3, [pc, #244]	; (8013bc0 <xQueueReceive+0x1bc>)
 8013acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	f3bf 8f4f 	dsb	sy
 8013ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013ada:	f001 fc73 	bl	80153c4 <vPortExitCritical>
				return pdPASS;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e069      	b.n	8013bb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d103      	bne.n	8013af0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ae8:	f001 fc6c 	bl	80153c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013aec:	2300      	movs	r3, #0
 8013aee:	e062      	b.n	8013bb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013af6:	f107 0310 	add.w	r3, r7, #16
 8013afa:	4618      	mov	r0, r3
 8013afc:	f000 feda 	bl	80148b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b00:	2301      	movs	r3, #1
 8013b02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b04:	f001 fc5e 	bl	80153c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b08:	f000 fc90 	bl	801442c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b0c:	f001 fc2a 	bl	8015364 <vPortEnterCritical>
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b16:	b25b      	sxtb	r3, r3
 8013b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b1c:	d103      	bne.n	8013b26 <xQueueReceive+0x122>
 8013b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b20:	2200      	movs	r2, #0
 8013b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b2c:	b25b      	sxtb	r3, r3
 8013b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b32:	d103      	bne.n	8013b3c <xQueueReceive+0x138>
 8013b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b36:	2200      	movs	r2, #0
 8013b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b3c:	f001 fc42 	bl	80153c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b40:	1d3a      	adds	r2, r7, #4
 8013b42:	f107 0310 	add.w	r3, r7, #16
 8013b46:	4611      	mov	r1, r2
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f000 fec9 	bl	80148e0 <xTaskCheckForTimeOut>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d123      	bne.n	8013b9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b56:	f000 f997 	bl	8013e88 <prvIsQueueEmpty>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d017      	beq.n	8013b90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b62:	3324      	adds	r3, #36	; 0x24
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	4611      	mov	r1, r2
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f000 fe1d 	bl	80147a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b70:	f000 f938 	bl	8013de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b74:	f000 fc68 	bl	8014448 <xTaskResumeAll>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d189      	bne.n	8013a92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b7e:	4b10      	ldr	r3, [pc, #64]	; (8013bc0 <xQueueReceive+0x1bc>)
 8013b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b84:	601a      	str	r2, [r3, #0]
 8013b86:	f3bf 8f4f 	dsb	sy
 8013b8a:	f3bf 8f6f 	isb	sy
 8013b8e:	e780      	b.n	8013a92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b92:	f000 f927 	bl	8013de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b96:	f000 fc57 	bl	8014448 <xTaskResumeAll>
 8013b9a:	e77a      	b.n	8013a92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b9e:	f000 f921 	bl	8013de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ba2:	f000 fc51 	bl	8014448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ba8:	f000 f96e 	bl	8013e88 <prvIsQueueEmpty>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f43f af6f 	beq.w	8013a92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3730      	adds	r7, #48	; 0x30
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	e000ed04 	.word	0xe000ed04

08013bc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08e      	sub	sp, #56	; 0x38
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10a      	bne.n	8013bf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013bda:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	623b      	str	r3, [r7, #32]
}
 8013bec:	bf00      	nop
 8013bee:	e7fe      	b.n	8013bee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d103      	bne.n	8013bfe <xQueueReceiveFromISR+0x3a>
 8013bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d101      	bne.n	8013c02 <xQueueReceiveFromISR+0x3e>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e000      	b.n	8013c04 <xQueueReceiveFromISR+0x40>
 8013c02:	2300      	movs	r3, #0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d10a      	bne.n	8013c1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013c08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	61fb      	str	r3, [r7, #28]
}
 8013c1a:	bf00      	nop
 8013c1c:	e7fe      	b.n	8013c1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c1e:	f001 fc83 	bl	8015528 <vPortValidateInterruptPriority>
	__asm volatile
 8013c22:	f3ef 8211 	mrs	r2, BASEPRI
 8013c26:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c2a:	f383 8811 	msr	BASEPRI, r3
 8013c2e:	f3bf 8f6f 	isb	sy
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	61ba      	str	r2, [r7, #24]
 8013c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d02f      	beq.n	8013caa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c54:	68b9      	ldr	r1, [r7, #8]
 8013c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c58:	f000 f89e 	bl	8013d98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5e:	1e5a      	subs	r2, r3, #1
 8013c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c6c:	d112      	bne.n	8013c94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d016      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c78:	3310      	adds	r3, #16
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f000 fdb8 	bl	80147f0 <xTaskRemoveFromEventList>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d00e      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d00b      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2201      	movs	r2, #1
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	e007      	b.n	8013ca4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c98:	3301      	adds	r3, #1
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	b25a      	sxtb	r2, r3
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8013ca8:	e001      	b.n	8013cae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013caa:	2300      	movs	r3, #0
 8013cac:	637b      	str	r3, [r7, #52]	; 0x34
 8013cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	f383 8811 	msr	BASEPRI, r3
}
 8013cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3738      	adds	r7, #56	; 0x38
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10d      	bne.n	8013cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d14d      	bne.n	8013d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f000 ff38 	bl	8014b64 <xTaskPriorityDisinherit>
 8013cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	609a      	str	r2, [r3, #8]
 8013cfc:	e043      	b.n	8013d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d119      	bne.n	8013d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6858      	ldr	r0, [r3, #4]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	68b9      	ldr	r1, [r7, #8]
 8013d10:	f006 fb54 	bl	801a3bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685a      	ldr	r2, [r3, #4]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d1c:	441a      	add	r2, r3
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	689b      	ldr	r3, [r3, #8]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d32b      	bcc.n	8013d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	605a      	str	r2, [r3, #4]
 8013d36:	e026      	b.n	8013d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68d8      	ldr	r0, [r3, #12]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d40:	461a      	mov	r2, r3
 8013d42:	68b9      	ldr	r1, [r7, #8]
 8013d44:	f006 fb3a 	bl	801a3bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68da      	ldr	r2, [r3, #12]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d50:	425b      	negs	r3, r3
 8013d52:	441a      	add	r2, r3
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	68da      	ldr	r2, [r3, #12]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d207      	bcs.n	8013d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	689a      	ldr	r2, [r3, #8]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d6c:	425b      	negs	r3, r3
 8013d6e:	441a      	add	r2, r3
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d105      	bne.n	8013d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	3b01      	subs	r3, #1
 8013d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	1c5a      	adds	r2, r3, #1
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013d8e:	697b      	ldr	r3, [r7, #20]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d018      	beq.n	8013ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	68da      	ldr	r2, [r3, #12]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db2:	441a      	add	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	68da      	ldr	r2, [r3, #12]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d303      	bcc.n	8013dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	68d9      	ldr	r1, [r3, #12]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	6838      	ldr	r0, [r7, #0]
 8013dd8:	f006 faf0 	bl	801a3bc <memcpy>
	}
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013dec:	f001 faba 	bl	8015364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013df8:	e011      	b.n	8013e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d012      	beq.n	8013e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	3324      	adds	r3, #36	; 0x24
 8013e06:	4618      	mov	r0, r3
 8013e08:	f000 fcf2 	bl	80147f0 <xTaskRemoveFromEventList>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e12:	f000 fdc7 	bl	80149a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	dce9      	bgt.n	8013dfa <prvUnlockQueue+0x16>
 8013e26:	e000      	b.n	8013e2a <prvUnlockQueue+0x46>
					break;
 8013e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	22ff      	movs	r2, #255	; 0xff
 8013e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013e32:	f001 fac7 	bl	80153c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013e36:	f001 fa95 	bl	8015364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e42:	e011      	b.n	8013e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	691b      	ldr	r3, [r3, #16]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d012      	beq.n	8013e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	3310      	adds	r3, #16
 8013e50:	4618      	mov	r0, r3
 8013e52:	f000 fccd 	bl	80147f0 <xTaskRemoveFromEventList>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013e5c:	f000 fda2 	bl	80149a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013e60:	7bbb      	ldrb	r3, [r7, #14]
 8013e62:	3b01      	subs	r3, #1
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	dce9      	bgt.n	8013e44 <prvUnlockQueue+0x60>
 8013e70:	e000      	b.n	8013e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	22ff      	movs	r2, #255	; 0xff
 8013e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013e7c:	f001 faa2 	bl	80153c4 <vPortExitCritical>
}
 8013e80:	bf00      	nop
 8013e82:	3710      	adds	r7, #16
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e90:	f001 fa68 	bl	8015364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d102      	bne.n	8013ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	60fb      	str	r3, [r7, #12]
 8013ea0:	e001      	b.n	8013ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ea6:	f001 fa8d 	bl	80153c4 <vPortExitCritical>

	return xReturn;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ebc:	f001 fa52 	bl	8015364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d102      	bne.n	8013ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	60fb      	str	r3, [r7, #12]
 8013ed0:	e001      	b.n	8013ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ed6:	f001 fa75 	bl	80153c4 <vPortExitCritical>

	return xReturn;
 8013eda:	68fb      	ldr	r3, [r7, #12]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08c      	sub	sp, #48	; 0x30
 8013ee8:	af04      	add	r7, sp, #16
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	603b      	str	r3, [r7, #0]
 8013ef0:	4613      	mov	r3, r2
 8013ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013ef4:	88fb      	ldrh	r3, [r7, #6]
 8013ef6:	009b      	lsls	r3, r3, #2
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f000 ff1f 	bl	8014d3c <pvPortMalloc>
 8013efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00e      	beq.n	8013f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013f06:	2054      	movs	r0, #84	; 0x54
 8013f08:	f000 ff18 	bl	8014d3c <pvPortMalloc>
 8013f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d003      	beq.n	8013f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	631a      	str	r2, [r3, #48]	; 0x30
 8013f1a:	e005      	b.n	8013f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013f1c:	6978      	ldr	r0, [r7, #20]
 8013f1e:	f000 ffd9 	bl	8014ed4 <vPortFree>
 8013f22:	e001      	b.n	8013f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013f24:	2300      	movs	r3, #0
 8013f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013f28:	69fb      	ldr	r3, [r7, #28]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d013      	beq.n	8013f56 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013f2e:	88fa      	ldrh	r2, [r7, #6]
 8013f30:	2300      	movs	r3, #0
 8013f32:	9303      	str	r3, [sp, #12]
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	9302      	str	r3, [sp, #8]
 8013f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3e:	9300      	str	r3, [sp, #0]
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	68b9      	ldr	r1, [r7, #8]
 8013f44:	68f8      	ldr	r0, [r7, #12]
 8013f46:	f000 f80e 	bl	8013f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f4a:	69f8      	ldr	r0, [r7, #28]
 8013f4c:	f000 f892 	bl	8014074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013f50:	2301      	movs	r3, #1
 8013f52:	61bb      	str	r3, [r7, #24]
 8013f54:	e002      	b.n	8013f5c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013f56:	f04f 33ff 	mov.w	r3, #4294967295
 8013f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3720      	adds	r7, #32
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}

08013f66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013f66:	b580      	push	{r7, lr}
 8013f68:	b088      	sub	sp, #32
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	60f8      	str	r0, [r7, #12]
 8013f6e:	60b9      	str	r1, [r7, #8]
 8013f70:	607a      	str	r2, [r7, #4]
 8013f72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013f7e:	3b01      	subs	r3, #1
 8013f80:	009b      	lsls	r3, r3, #2
 8013f82:	4413      	add	r3, r2
 8013f84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	f023 0307 	bic.w	r3, r3, #7
 8013f8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f8e:	69bb      	ldr	r3, [r7, #24]
 8013f90:	f003 0307 	and.w	r3, r3, #7
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00a      	beq.n	8013fae <prvInitialiseNewTask+0x48>
	__asm volatile
 8013f98:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f9c:	f383 8811 	msr	BASEPRI, r3
 8013fa0:	f3bf 8f6f 	isb	sy
 8013fa4:	f3bf 8f4f 	dsb	sy
 8013fa8:	617b      	str	r3, [r7, #20]
}
 8013faa:	bf00      	nop
 8013fac:	e7fe      	b.n	8013fac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d01f      	beq.n	8013ff4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	61fb      	str	r3, [r7, #28]
 8013fb8:	e012      	b.n	8013fe0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013fba:	68ba      	ldr	r2, [r7, #8]
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	7819      	ldrb	r1, [r3, #0]
 8013fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	3334      	adds	r3, #52	; 0x34
 8013fca:	460a      	mov	r2, r1
 8013fcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d006      	beq.n	8013fe8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	61fb      	str	r3, [r7, #28]
 8013fe0:	69fb      	ldr	r3, [r7, #28]
 8013fe2:	2b0f      	cmp	r3, #15
 8013fe4:	d9e9      	bls.n	8013fba <prvInitialiseNewTask+0x54>
 8013fe6:	e000      	b.n	8013fea <prvInitialiseNewTask+0x84>
			{
				break;
 8013fe8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fec:	2200      	movs	r2, #0
 8013fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ff2:	e003      	b.n	8013ffc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffe:	2b06      	cmp	r3, #6
 8014000:	d901      	bls.n	8014006 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014002:	2306      	movs	r3, #6
 8014004:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801400a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014010:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014014:	2200      	movs	r2, #0
 8014016:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	3304      	adds	r3, #4
 801401c:	4618      	mov	r0, r3
 801401e:	f7ff fa05 	bl	801342c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014024:	3318      	adds	r3, #24
 8014026:	4618      	mov	r0, r3
 8014028:	f7ff fa00 	bl	801342c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014030:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	f1c3 0207 	rsb	r2, r3, #7
 8014038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014040:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	2200      	movs	r2, #0
 8014046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404a:	2200      	movs	r2, #0
 801404c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014050:	683a      	ldr	r2, [r7, #0]
 8014052:	68f9      	ldr	r1, [r7, #12]
 8014054:	69b8      	ldr	r0, [r7, #24]
 8014056:	f001 f85b 	bl	8015110 <pxPortInitialiseStack>
 801405a:	4602      	mov	r2, r0
 801405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014062:	2b00      	cmp	r3, #0
 8014064:	d002      	beq.n	801406c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801406a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801406c:	bf00      	nop
 801406e:	3720      	adds	r7, #32
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801407c:	f001 f972 	bl	8015364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014080:	4b2a      	ldr	r3, [pc, #168]	; (801412c <prvAddNewTaskToReadyList+0xb8>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	3301      	adds	r3, #1
 8014086:	4a29      	ldr	r2, [pc, #164]	; (801412c <prvAddNewTaskToReadyList+0xb8>)
 8014088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801408a:	4b29      	ldr	r3, [pc, #164]	; (8014130 <prvAddNewTaskToReadyList+0xbc>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d109      	bne.n	80140a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014092:	4a27      	ldr	r2, [pc, #156]	; (8014130 <prvAddNewTaskToReadyList+0xbc>)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014098:	4b24      	ldr	r3, [pc, #144]	; (801412c <prvAddNewTaskToReadyList+0xb8>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2b01      	cmp	r3, #1
 801409e:	d110      	bne.n	80140c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80140a0:	f000 fca4 	bl	80149ec <prvInitialiseTaskLists>
 80140a4:	e00d      	b.n	80140c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80140a6:	4b23      	ldr	r3, [pc, #140]	; (8014134 <prvAddNewTaskToReadyList+0xc0>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d109      	bne.n	80140c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80140ae:	4b20      	ldr	r3, [pc, #128]	; (8014130 <prvAddNewTaskToReadyList+0xbc>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d802      	bhi.n	80140c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80140bc:	4a1c      	ldr	r2, [pc, #112]	; (8014130 <prvAddNewTaskToReadyList+0xbc>)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80140c2:	4b1d      	ldr	r3, [pc, #116]	; (8014138 <prvAddNewTaskToReadyList+0xc4>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	3301      	adds	r3, #1
 80140c8:	4a1b      	ldr	r2, [pc, #108]	; (8014138 <prvAddNewTaskToReadyList+0xc4>)
 80140ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	2201      	movs	r2, #1
 80140d2:	409a      	lsls	r2, r3
 80140d4:	4b19      	ldr	r3, [pc, #100]	; (801413c <prvAddNewTaskToReadyList+0xc8>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	4313      	orrs	r3, r2
 80140da:	4a18      	ldr	r2, [pc, #96]	; (801413c <prvAddNewTaskToReadyList+0xc8>)
 80140dc:	6013      	str	r3, [r2, #0]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140e2:	4613      	mov	r3, r2
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	4413      	add	r3, r2
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	4a15      	ldr	r2, [pc, #84]	; (8014140 <prvAddNewTaskToReadyList+0xcc>)
 80140ec:	441a      	add	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	3304      	adds	r3, #4
 80140f2:	4619      	mov	r1, r3
 80140f4:	4610      	mov	r0, r2
 80140f6:	f7ff f9a6 	bl	8013446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80140fa:	f001 f963 	bl	80153c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80140fe:	4b0d      	ldr	r3, [pc, #52]	; (8014134 <prvAddNewTaskToReadyList+0xc0>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00e      	beq.n	8014124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014106:	4b0a      	ldr	r3, [pc, #40]	; (8014130 <prvAddNewTaskToReadyList+0xbc>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014110:	429a      	cmp	r2, r3
 8014112:	d207      	bcs.n	8014124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014114:	4b0b      	ldr	r3, [pc, #44]	; (8014144 <prvAddNewTaskToReadyList+0xd0>)
 8014116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801411a:	601a      	str	r2, [r3, #0]
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014124:	bf00      	nop
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	20000c94 	.word	0x20000c94
 8014130:	20000b94 	.word	0x20000b94
 8014134:	20000ca0 	.word	0x20000ca0
 8014138:	20000cb0 	.word	0x20000cb0
 801413c:	20000c9c 	.word	0x20000c9c
 8014140:	20000b98 	.word	0x20000b98
 8014144:	e000ed04 	.word	0xe000ed04

08014148 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014150:	f001 f908 	bl	8015364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d102      	bne.n	8014160 <vTaskDelete+0x18>
 801415a:	4b39      	ldr	r3, [pc, #228]	; (8014240 <vTaskDelete+0xf8>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	e000      	b.n	8014162 <vTaskDelete+0x1a>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3304      	adds	r3, #4
 8014168:	4618      	mov	r0, r3
 801416a:	f7ff f9c9 	bl	8013500 <uxListRemove>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d115      	bne.n	80141a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014178:	4932      	ldr	r1, [pc, #200]	; (8014244 <vTaskDelete+0xfc>)
 801417a:	4613      	mov	r3, r2
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	4413      	add	r3, r2
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	440b      	add	r3, r1
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d10a      	bne.n	80141a0 <vTaskDelete+0x58>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801418e:	2201      	movs	r2, #1
 8014190:	fa02 f303 	lsl.w	r3, r2, r3
 8014194:	43da      	mvns	r2, r3
 8014196:	4b2c      	ldr	r3, [pc, #176]	; (8014248 <vTaskDelete+0x100>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4013      	ands	r3, r2
 801419c:	4a2a      	ldr	r2, [pc, #168]	; (8014248 <vTaskDelete+0x100>)
 801419e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d004      	beq.n	80141b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3318      	adds	r3, #24
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7ff f9a7 	bl	8013500 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80141b2:	4b26      	ldr	r3, [pc, #152]	; (801424c <vTaskDelete+0x104>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	3301      	adds	r3, #1
 80141b8:	4a24      	ldr	r2, [pc, #144]	; (801424c <vTaskDelete+0x104>)
 80141ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80141bc:	4b20      	ldr	r3, [pc, #128]	; (8014240 <vTaskDelete+0xf8>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d10b      	bne.n	80141de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	3304      	adds	r3, #4
 80141ca:	4619      	mov	r1, r3
 80141cc:	4820      	ldr	r0, [pc, #128]	; (8014250 <vTaskDelete+0x108>)
 80141ce:	f7ff f93a 	bl	8013446 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80141d2:	4b20      	ldr	r3, [pc, #128]	; (8014254 <vTaskDelete+0x10c>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	3301      	adds	r3, #1
 80141d8:	4a1e      	ldr	r2, [pc, #120]	; (8014254 <vTaskDelete+0x10c>)
 80141da:	6013      	str	r3, [r2, #0]
 80141dc:	e009      	b.n	80141f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80141de:	4b1e      	ldr	r3, [pc, #120]	; (8014258 <vTaskDelete+0x110>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	3b01      	subs	r3, #1
 80141e4:	4a1c      	ldr	r2, [pc, #112]	; (8014258 <vTaskDelete+0x110>)
 80141e6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f000 fc6d 	bl	8014ac8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80141ee:	f000 fc7b 	bl	8014ae8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80141f2:	f001 f8e7 	bl	80153c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80141f6:	4b19      	ldr	r3, [pc, #100]	; (801425c <vTaskDelete+0x114>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d01b      	beq.n	8014236 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80141fe:	4b10      	ldr	r3, [pc, #64]	; (8014240 <vTaskDelete+0xf8>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	429a      	cmp	r2, r3
 8014206:	d116      	bne.n	8014236 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014208:	4b15      	ldr	r3, [pc, #84]	; (8014260 <vTaskDelete+0x118>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00a      	beq.n	8014226 <vTaskDelete+0xde>
	__asm volatile
 8014210:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	60bb      	str	r3, [r7, #8]
}
 8014222:	bf00      	nop
 8014224:	e7fe      	b.n	8014224 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8014226:	4b0f      	ldr	r3, [pc, #60]	; (8014264 <vTaskDelete+0x11c>)
 8014228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801422c:	601a      	str	r2, [r3, #0]
 801422e:	f3bf 8f4f 	dsb	sy
 8014232:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014236:	bf00      	nop
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	20000b94 	.word	0x20000b94
 8014244:	20000b98 	.word	0x20000b98
 8014248:	20000c9c 	.word	0x20000c9c
 801424c:	20000cb0 	.word	0x20000cb0
 8014250:	20000c68 	.word	0x20000c68
 8014254:	20000c7c 	.word	0x20000c7c
 8014258:	20000c94 	.word	0x20000c94
 801425c:	20000ca0 	.word	0x20000ca0
 8014260:	20000cbc 	.word	0x20000cbc
 8014264:	e000ed04 	.word	0xe000ed04

08014268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014270:	2300      	movs	r3, #0
 8014272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d017      	beq.n	80142aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801427a:	4b13      	ldr	r3, [pc, #76]	; (80142c8 <vTaskDelay+0x60>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d00a      	beq.n	8014298 <vTaskDelay+0x30>
	__asm volatile
 8014282:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014286:	f383 8811 	msr	BASEPRI, r3
 801428a:	f3bf 8f6f 	isb	sy
 801428e:	f3bf 8f4f 	dsb	sy
 8014292:	60bb      	str	r3, [r7, #8]
}
 8014294:	bf00      	nop
 8014296:	e7fe      	b.n	8014296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014298:	f000 f8c8 	bl	801442c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801429c:	2100      	movs	r1, #0
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 fce6 	bl	8014c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80142a4:	f000 f8d0 	bl	8014448 <xTaskResumeAll>
 80142a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d107      	bne.n	80142c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80142b0:	4b06      	ldr	r3, [pc, #24]	; (80142cc <vTaskDelay+0x64>)
 80142b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142c0:	bf00      	nop
 80142c2:	3710      	adds	r7, #16
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	20000cbc 	.word	0x20000cbc
 80142cc:	e000ed04 	.word	0xe000ed04

080142d0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b088      	sub	sp, #32
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d10a      	bne.n	80142f8 <eTaskGetState+0x28>
	__asm volatile
 80142e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80142e6:	f383 8811 	msr	BASEPRI, r3
 80142ea:	f3bf 8f6f 	isb	sy
 80142ee:	f3bf 8f4f 	dsb	sy
 80142f2:	60bb      	str	r3, [r7, #8]
}
 80142f4:	bf00      	nop
 80142f6:	e7fe      	b.n	80142f6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80142f8:	4b23      	ldr	r3, [pc, #140]	; (8014388 <eTaskGetState+0xb8>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	69ba      	ldr	r2, [r7, #24]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d102      	bne.n	8014308 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8014302:	2300      	movs	r3, #0
 8014304:	77fb      	strb	r3, [r7, #31]
 8014306:	e03a      	b.n	801437e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8014308:	f001 f82c 	bl	8015364 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	695b      	ldr	r3, [r3, #20]
 8014310:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8014312:	4b1e      	ldr	r3, [pc, #120]	; (801438c <eTaskGetState+0xbc>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014318:	4b1d      	ldr	r3, [pc, #116]	; (8014390 <eTaskGetState+0xc0>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801431e:	f001 f851 	bl	80153c4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8014322:	697a      	ldr	r2, [r7, #20]
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	429a      	cmp	r2, r3
 8014328:	d003      	beq.n	8014332 <eTaskGetState+0x62>
 801432a:	697a      	ldr	r2, [r7, #20]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	429a      	cmp	r2, r3
 8014330:	d102      	bne.n	8014338 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8014332:	2302      	movs	r3, #2
 8014334:	77fb      	strb	r3, [r7, #31]
 8014336:	e022      	b.n	801437e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	4a16      	ldr	r2, [pc, #88]	; (8014394 <eTaskGetState+0xc4>)
 801433c:	4293      	cmp	r3, r2
 801433e:	d112      	bne.n	8014366 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014344:	2b00      	cmp	r3, #0
 8014346:	d10b      	bne.n	8014360 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801434e:	b2db      	uxtb	r3, r3
 8014350:	2b01      	cmp	r3, #1
 8014352:	d102      	bne.n	801435a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8014354:	2302      	movs	r3, #2
 8014356:	77fb      	strb	r3, [r7, #31]
 8014358:	e011      	b.n	801437e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801435a:	2303      	movs	r3, #3
 801435c:	77fb      	strb	r3, [r7, #31]
 801435e:	e00e      	b.n	801437e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8014360:	2302      	movs	r3, #2
 8014362:	77fb      	strb	r3, [r7, #31]
 8014364:	e00b      	b.n	801437e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	4a0b      	ldr	r2, [pc, #44]	; (8014398 <eTaskGetState+0xc8>)
 801436a:	4293      	cmp	r3, r2
 801436c:	d002      	beq.n	8014374 <eTaskGetState+0xa4>
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d102      	bne.n	801437a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8014374:	2304      	movs	r3, #4
 8014376:	77fb      	strb	r3, [r7, #31]
 8014378:	e001      	b.n	801437e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801437a:	2301      	movs	r3, #1
 801437c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801437e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014380:	4618      	mov	r0, r3
 8014382:	3720      	adds	r7, #32
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	20000b94 	.word	0x20000b94
 801438c:	20000c4c 	.word	0x20000c4c
 8014390:	20000c50 	.word	0x20000c50
 8014394:	20000c80 	.word	0x20000c80
 8014398:	20000c68 	.word	0x20000c68

0801439c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80143a2:	4b1c      	ldr	r3, [pc, #112]	; (8014414 <vTaskStartScheduler+0x78>)
 80143a4:	9301      	str	r3, [sp, #4]
 80143a6:	2300      	movs	r3, #0
 80143a8:	9300      	str	r3, [sp, #0]
 80143aa:	2300      	movs	r3, #0
 80143ac:	2280      	movs	r2, #128	; 0x80
 80143ae:	491a      	ldr	r1, [pc, #104]	; (8014418 <vTaskStartScheduler+0x7c>)
 80143b0:	481a      	ldr	r0, [pc, #104]	; (801441c <vTaskStartScheduler+0x80>)
 80143b2:	f7ff fd97 	bl	8013ee4 <xTaskCreate>
 80143b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d116      	bne.n	80143ec <vTaskStartScheduler+0x50>
	__asm volatile
 80143be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	60bb      	str	r3, [r7, #8]
}
 80143d0:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80143d2:	4b13      	ldr	r3, [pc, #76]	; (8014420 <vTaskStartScheduler+0x84>)
 80143d4:	f04f 32ff 	mov.w	r2, #4294967295
 80143d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80143da:	4b12      	ldr	r3, [pc, #72]	; (8014424 <vTaskStartScheduler+0x88>)
 80143dc:	2201      	movs	r2, #1
 80143de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80143e0:	4b11      	ldr	r3, [pc, #68]	; (8014428 <vTaskStartScheduler+0x8c>)
 80143e2:	2200      	movs	r2, #0
 80143e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80143e6:	f000 ff1b 	bl	8015220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80143ea:	e00e      	b.n	801440a <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143f2:	d10a      	bne.n	801440a <vTaskStartScheduler+0x6e>
	__asm volatile
 80143f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	607b      	str	r3, [r7, #4]
}
 8014406:	bf00      	nop
 8014408:	e7fe      	b.n	8014408 <vTaskStartScheduler+0x6c>
}
 801440a:	bf00      	nop
 801440c:	3710      	adds	r7, #16
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
 8014412:	bf00      	nop
 8014414:	20000cb8 	.word	0x20000cb8
 8014418:	0801b7e4 	.word	0x0801b7e4
 801441c:	080149bd 	.word	0x080149bd
 8014420:	20000cb4 	.word	0x20000cb4
 8014424:	20000ca0 	.word	0x20000ca0
 8014428:	20000c98 	.word	0x20000c98

0801442c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801442c:	b480      	push	{r7}
 801442e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014430:	4b04      	ldr	r3, [pc, #16]	; (8014444 <vTaskSuspendAll+0x18>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	3301      	adds	r3, #1
 8014436:	4a03      	ldr	r2, [pc, #12]	; (8014444 <vTaskSuspendAll+0x18>)
 8014438:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801443a:	bf00      	nop
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	20000cbc 	.word	0x20000cbc

08014448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801444e:	2300      	movs	r3, #0
 8014450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014452:	2300      	movs	r3, #0
 8014454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014456:	4b41      	ldr	r3, [pc, #260]	; (801455c <xTaskResumeAll+0x114>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d10a      	bne.n	8014474 <xTaskResumeAll+0x2c>
	__asm volatile
 801445e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014462:	f383 8811 	msr	BASEPRI, r3
 8014466:	f3bf 8f6f 	isb	sy
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	603b      	str	r3, [r7, #0]
}
 8014470:	bf00      	nop
 8014472:	e7fe      	b.n	8014472 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014474:	f000 ff76 	bl	8015364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014478:	4b38      	ldr	r3, [pc, #224]	; (801455c <xTaskResumeAll+0x114>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	3b01      	subs	r3, #1
 801447e:	4a37      	ldr	r2, [pc, #220]	; (801455c <xTaskResumeAll+0x114>)
 8014480:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014482:	4b36      	ldr	r3, [pc, #216]	; (801455c <xTaskResumeAll+0x114>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d161      	bne.n	801454e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801448a:	4b35      	ldr	r3, [pc, #212]	; (8014560 <xTaskResumeAll+0x118>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d05d      	beq.n	801454e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014492:	e02e      	b.n	80144f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014494:	4b33      	ldr	r3, [pc, #204]	; (8014564 <xTaskResumeAll+0x11c>)
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	3318      	adds	r3, #24
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7ff f82d 	bl	8013500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	3304      	adds	r3, #4
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7ff f828 	bl	8013500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b4:	2201      	movs	r2, #1
 80144b6:	409a      	lsls	r2, r3
 80144b8:	4b2b      	ldr	r3, [pc, #172]	; (8014568 <xTaskResumeAll+0x120>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4313      	orrs	r3, r2
 80144be:	4a2a      	ldr	r2, [pc, #168]	; (8014568 <xTaskResumeAll+0x120>)
 80144c0:	6013      	str	r3, [r2, #0]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c6:	4613      	mov	r3, r2
 80144c8:	009b      	lsls	r3, r3, #2
 80144ca:	4413      	add	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4a27      	ldr	r2, [pc, #156]	; (801456c <xTaskResumeAll+0x124>)
 80144d0:	441a      	add	r2, r3
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	3304      	adds	r3, #4
 80144d6:	4619      	mov	r1, r3
 80144d8:	4610      	mov	r0, r2
 80144da:	f7fe ffb4 	bl	8013446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e2:	4b23      	ldr	r3, [pc, #140]	; (8014570 <xTaskResumeAll+0x128>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d302      	bcc.n	80144f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80144ec:	4b21      	ldr	r3, [pc, #132]	; (8014574 <xTaskResumeAll+0x12c>)
 80144ee:	2201      	movs	r2, #1
 80144f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80144f2:	4b1c      	ldr	r3, [pc, #112]	; (8014564 <xTaskResumeAll+0x11c>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d1cc      	bne.n	8014494 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d001      	beq.n	8014504 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014500:	f000 faf2 	bl	8014ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014504:	4b1c      	ldr	r3, [pc, #112]	; (8014578 <xTaskResumeAll+0x130>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d010      	beq.n	8014532 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014510:	f000 f836 	bl	8014580 <xTaskIncrementTick>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801451a:	4b16      	ldr	r3, [pc, #88]	; (8014574 <xTaskResumeAll+0x12c>)
 801451c:	2201      	movs	r2, #1
 801451e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	3b01      	subs	r3, #1
 8014524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d1f1      	bne.n	8014510 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801452c:	4b12      	ldr	r3, [pc, #72]	; (8014578 <xTaskResumeAll+0x130>)
 801452e:	2200      	movs	r2, #0
 8014530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014532:	4b10      	ldr	r3, [pc, #64]	; (8014574 <xTaskResumeAll+0x12c>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d009      	beq.n	801454e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801453a:	2301      	movs	r3, #1
 801453c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801453e:	4b0f      	ldr	r3, [pc, #60]	; (801457c <xTaskResumeAll+0x134>)
 8014540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014544:	601a      	str	r2, [r3, #0]
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801454e:	f000 ff39 	bl	80153c4 <vPortExitCritical>

	return xAlreadyYielded;
 8014552:	68bb      	ldr	r3, [r7, #8]
}
 8014554:	4618      	mov	r0, r3
 8014556:	3710      	adds	r7, #16
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	20000cbc 	.word	0x20000cbc
 8014560:	20000c94 	.word	0x20000c94
 8014564:	20000c54 	.word	0x20000c54
 8014568:	20000c9c 	.word	0x20000c9c
 801456c:	20000b98 	.word	0x20000b98
 8014570:	20000b94 	.word	0x20000b94
 8014574:	20000ca8 	.word	0x20000ca8
 8014578:	20000ca4 	.word	0x20000ca4
 801457c:	e000ed04 	.word	0xe000ed04

08014580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b086      	sub	sp, #24
 8014584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014586:	2300      	movs	r3, #0
 8014588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801458a:	4b4e      	ldr	r3, [pc, #312]	; (80146c4 <xTaskIncrementTick+0x144>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	f040 808e 	bne.w	80146b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014594:	4b4c      	ldr	r3, [pc, #304]	; (80146c8 <xTaskIncrementTick+0x148>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	3301      	adds	r3, #1
 801459a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801459c:	4a4a      	ldr	r2, [pc, #296]	; (80146c8 <xTaskIncrementTick+0x148>)
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d120      	bne.n	80145ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80145a8:	4b48      	ldr	r3, [pc, #288]	; (80146cc <xTaskIncrementTick+0x14c>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d00a      	beq.n	80145c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80145b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	603b      	str	r3, [r7, #0]
}
 80145c4:	bf00      	nop
 80145c6:	e7fe      	b.n	80145c6 <xTaskIncrementTick+0x46>
 80145c8:	4b40      	ldr	r3, [pc, #256]	; (80146cc <xTaskIncrementTick+0x14c>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	60fb      	str	r3, [r7, #12]
 80145ce:	4b40      	ldr	r3, [pc, #256]	; (80146d0 <xTaskIncrementTick+0x150>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	4a3e      	ldr	r2, [pc, #248]	; (80146cc <xTaskIncrementTick+0x14c>)
 80145d4:	6013      	str	r3, [r2, #0]
 80145d6:	4a3e      	ldr	r2, [pc, #248]	; (80146d0 <xTaskIncrementTick+0x150>)
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6013      	str	r3, [r2, #0]
 80145dc:	4b3d      	ldr	r3, [pc, #244]	; (80146d4 <xTaskIncrementTick+0x154>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	3301      	adds	r3, #1
 80145e2:	4a3c      	ldr	r2, [pc, #240]	; (80146d4 <xTaskIncrementTick+0x154>)
 80145e4:	6013      	str	r3, [r2, #0]
 80145e6:	f000 fa7f 	bl	8014ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80145ea:	4b3b      	ldr	r3, [pc, #236]	; (80146d8 <xTaskIncrementTick+0x158>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	693a      	ldr	r2, [r7, #16]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d348      	bcc.n	8014686 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145f4:	4b35      	ldr	r3, [pc, #212]	; (80146cc <xTaskIncrementTick+0x14c>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d104      	bne.n	8014608 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145fe:	4b36      	ldr	r3, [pc, #216]	; (80146d8 <xTaskIncrementTick+0x158>)
 8014600:	f04f 32ff 	mov.w	r2, #4294967295
 8014604:	601a      	str	r2, [r3, #0]
					break;
 8014606:	e03e      	b.n	8014686 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014608:	4b30      	ldr	r3, [pc, #192]	; (80146cc <xTaskIncrementTick+0x14c>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014618:	693a      	ldr	r2, [r7, #16]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	429a      	cmp	r2, r3
 801461e:	d203      	bcs.n	8014628 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014620:	4a2d      	ldr	r2, [pc, #180]	; (80146d8 <xTaskIncrementTick+0x158>)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014626:	e02e      	b.n	8014686 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	3304      	adds	r3, #4
 801462c:	4618      	mov	r0, r3
 801462e:	f7fe ff67 	bl	8013500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014636:	2b00      	cmp	r3, #0
 8014638:	d004      	beq.n	8014644 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	3318      	adds	r3, #24
 801463e:	4618      	mov	r0, r3
 8014640:	f7fe ff5e 	bl	8013500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014648:	2201      	movs	r2, #1
 801464a:	409a      	lsls	r2, r3
 801464c:	4b23      	ldr	r3, [pc, #140]	; (80146dc <xTaskIncrementTick+0x15c>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	4313      	orrs	r3, r2
 8014652:	4a22      	ldr	r2, [pc, #136]	; (80146dc <xTaskIncrementTick+0x15c>)
 8014654:	6013      	str	r3, [r2, #0]
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801465a:	4613      	mov	r3, r2
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4a1f      	ldr	r2, [pc, #124]	; (80146e0 <xTaskIncrementTick+0x160>)
 8014664:	441a      	add	r2, r3
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	3304      	adds	r3, #4
 801466a:	4619      	mov	r1, r3
 801466c:	4610      	mov	r0, r2
 801466e:	f7fe feea 	bl	8013446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014676:	4b1b      	ldr	r3, [pc, #108]	; (80146e4 <xTaskIncrementTick+0x164>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467c:	429a      	cmp	r2, r3
 801467e:	d3b9      	bcc.n	80145f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014680:	2301      	movs	r3, #1
 8014682:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014684:	e7b6      	b.n	80145f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014686:	4b17      	ldr	r3, [pc, #92]	; (80146e4 <xTaskIncrementTick+0x164>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801468c:	4914      	ldr	r1, [pc, #80]	; (80146e0 <xTaskIncrementTick+0x160>)
 801468e:	4613      	mov	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	4413      	add	r3, r2
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	440b      	add	r3, r1
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d901      	bls.n	80146a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801469e:	2301      	movs	r3, #1
 80146a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80146a2:	4b11      	ldr	r3, [pc, #68]	; (80146e8 <xTaskIncrementTick+0x168>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d007      	beq.n	80146ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80146aa:	2301      	movs	r3, #1
 80146ac:	617b      	str	r3, [r7, #20]
 80146ae:	e004      	b.n	80146ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80146b0:	4b0e      	ldr	r3, [pc, #56]	; (80146ec <xTaskIncrementTick+0x16c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	3301      	adds	r3, #1
 80146b6:	4a0d      	ldr	r2, [pc, #52]	; (80146ec <xTaskIncrementTick+0x16c>)
 80146b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80146ba:	697b      	ldr	r3, [r7, #20]
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3718      	adds	r7, #24
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	20000cbc 	.word	0x20000cbc
 80146c8:	20000c98 	.word	0x20000c98
 80146cc:	20000c4c 	.word	0x20000c4c
 80146d0:	20000c50 	.word	0x20000c50
 80146d4:	20000cac 	.word	0x20000cac
 80146d8:	20000cb4 	.word	0x20000cb4
 80146dc:	20000c9c 	.word	0x20000c9c
 80146e0:	20000b98 	.word	0x20000b98
 80146e4:	20000b94 	.word	0x20000b94
 80146e8:	20000ca8 	.word	0x20000ca8
 80146ec:	20000ca4 	.word	0x20000ca4

080146f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80146f0:	b480      	push	{r7}
 80146f2:	b087      	sub	sp, #28
 80146f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146f6:	4b27      	ldr	r3, [pc, #156]	; (8014794 <vTaskSwitchContext+0xa4>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d003      	beq.n	8014706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80146fe:	4b26      	ldr	r3, [pc, #152]	; (8014798 <vTaskSwitchContext+0xa8>)
 8014700:	2201      	movs	r2, #1
 8014702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014704:	e03f      	b.n	8014786 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8014706:	4b24      	ldr	r3, [pc, #144]	; (8014798 <vTaskSwitchContext+0xa8>)
 8014708:	2200      	movs	r2, #0
 801470a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801470c:	4b23      	ldr	r3, [pc, #140]	; (801479c <vTaskSwitchContext+0xac>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	fab3 f383 	clz	r3, r3
 8014718:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801471a:	7afb      	ldrb	r3, [r7, #11]
 801471c:	f1c3 031f 	rsb	r3, r3, #31
 8014720:	617b      	str	r3, [r7, #20]
 8014722:	491f      	ldr	r1, [pc, #124]	; (80147a0 <vTaskSwitchContext+0xb0>)
 8014724:	697a      	ldr	r2, [r7, #20]
 8014726:	4613      	mov	r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	440b      	add	r3, r1
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d10a      	bne.n	801474c <vTaskSwitchContext+0x5c>
	__asm volatile
 8014736:	f04f 0330 	mov.w	r3, #48	; 0x30
 801473a:	f383 8811 	msr	BASEPRI, r3
 801473e:	f3bf 8f6f 	isb	sy
 8014742:	f3bf 8f4f 	dsb	sy
 8014746:	607b      	str	r3, [r7, #4]
}
 8014748:	bf00      	nop
 801474a:	e7fe      	b.n	801474a <vTaskSwitchContext+0x5a>
 801474c:	697a      	ldr	r2, [r7, #20]
 801474e:	4613      	mov	r3, r2
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	4413      	add	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4a12      	ldr	r2, [pc, #72]	; (80147a0 <vTaskSwitchContext+0xb0>)
 8014758:	4413      	add	r3, r2
 801475a:	613b      	str	r3, [r7, #16]
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	685a      	ldr	r2, [r3, #4]
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	605a      	str	r2, [r3, #4]
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	685a      	ldr	r2, [r3, #4]
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	3308      	adds	r3, #8
 801476e:	429a      	cmp	r2, r3
 8014770:	d104      	bne.n	801477c <vTaskSwitchContext+0x8c>
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	685a      	ldr	r2, [r3, #4]
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	605a      	str	r2, [r3, #4]
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	4a08      	ldr	r2, [pc, #32]	; (80147a4 <vTaskSwitchContext+0xb4>)
 8014784:	6013      	str	r3, [r2, #0]
}
 8014786:	bf00      	nop
 8014788:	371c      	adds	r7, #28
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
 8014792:	bf00      	nop
 8014794:	20000cbc 	.word	0x20000cbc
 8014798:	20000ca8 	.word	0x20000ca8
 801479c:	20000c9c 	.word	0x20000c9c
 80147a0:	20000b98 	.word	0x20000b98
 80147a4:	20000b94 	.word	0x20000b94

080147a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10a      	bne.n	80147ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80147b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147bc:	f383 8811 	msr	BASEPRI, r3
 80147c0:	f3bf 8f6f 	isb	sy
 80147c4:	f3bf 8f4f 	dsb	sy
 80147c8:	60fb      	str	r3, [r7, #12]
}
 80147ca:	bf00      	nop
 80147cc:	e7fe      	b.n	80147cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147ce:	4b07      	ldr	r3, [pc, #28]	; (80147ec <vTaskPlaceOnEventList+0x44>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	3318      	adds	r3, #24
 80147d4:	4619      	mov	r1, r3
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7fe fe59 	bl	801348e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147dc:	2101      	movs	r1, #1
 80147de:	6838      	ldr	r0, [r7, #0]
 80147e0:	f000 fa46 	bl	8014c70 <prvAddCurrentTaskToDelayedList>
}
 80147e4:	bf00      	nop
 80147e6:	3710      	adds	r7, #16
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	20000b94 	.word	0x20000b94

080147f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d10a      	bne.n	801481c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014806:	f04f 0330 	mov.w	r3, #48	; 0x30
 801480a:	f383 8811 	msr	BASEPRI, r3
 801480e:	f3bf 8f6f 	isb	sy
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	60fb      	str	r3, [r7, #12]
}
 8014818:	bf00      	nop
 801481a:	e7fe      	b.n	801481a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	3318      	adds	r3, #24
 8014820:	4618      	mov	r0, r3
 8014822:	f7fe fe6d 	bl	8013500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014826:	4b1d      	ldr	r3, [pc, #116]	; (801489c <xTaskRemoveFromEventList+0xac>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d11c      	bne.n	8014868 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	3304      	adds	r3, #4
 8014832:	4618      	mov	r0, r3
 8014834:	f7fe fe64 	bl	8013500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801483c:	2201      	movs	r2, #1
 801483e:	409a      	lsls	r2, r3
 8014840:	4b17      	ldr	r3, [pc, #92]	; (80148a0 <xTaskRemoveFromEventList+0xb0>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4313      	orrs	r3, r2
 8014846:	4a16      	ldr	r2, [pc, #88]	; (80148a0 <xTaskRemoveFromEventList+0xb0>)
 8014848:	6013      	str	r3, [r2, #0]
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801484e:	4613      	mov	r3, r2
 8014850:	009b      	lsls	r3, r3, #2
 8014852:	4413      	add	r3, r2
 8014854:	009b      	lsls	r3, r3, #2
 8014856:	4a13      	ldr	r2, [pc, #76]	; (80148a4 <xTaskRemoveFromEventList+0xb4>)
 8014858:	441a      	add	r2, r3
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	3304      	adds	r3, #4
 801485e:	4619      	mov	r1, r3
 8014860:	4610      	mov	r0, r2
 8014862:	f7fe fdf0 	bl	8013446 <vListInsertEnd>
 8014866:	e005      	b.n	8014874 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	3318      	adds	r3, #24
 801486c:	4619      	mov	r1, r3
 801486e:	480e      	ldr	r0, [pc, #56]	; (80148a8 <xTaskRemoveFromEventList+0xb8>)
 8014870:	f7fe fde9 	bl	8013446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014878:	4b0c      	ldr	r3, [pc, #48]	; (80148ac <xTaskRemoveFromEventList+0xbc>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801487e:	429a      	cmp	r2, r3
 8014880:	d905      	bls.n	801488e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014882:	2301      	movs	r3, #1
 8014884:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014886:	4b0a      	ldr	r3, [pc, #40]	; (80148b0 <xTaskRemoveFromEventList+0xc0>)
 8014888:	2201      	movs	r2, #1
 801488a:	601a      	str	r2, [r3, #0]
 801488c:	e001      	b.n	8014892 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801488e:	2300      	movs	r3, #0
 8014890:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014892:	697b      	ldr	r3, [r7, #20]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3718      	adds	r7, #24
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	20000cbc 	.word	0x20000cbc
 80148a0:	20000c9c 	.word	0x20000c9c
 80148a4:	20000b98 	.word	0x20000b98
 80148a8:	20000c54 	.word	0x20000c54
 80148ac:	20000b94 	.word	0x20000b94
 80148b0:	20000ca8 	.word	0x20000ca8

080148b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80148bc:	4b06      	ldr	r3, [pc, #24]	; (80148d8 <vTaskInternalSetTimeOutState+0x24>)
 80148be:	681a      	ldr	r2, [r3, #0]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80148c4:	4b05      	ldr	r3, [pc, #20]	; (80148dc <vTaskInternalSetTimeOutState+0x28>)
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	605a      	str	r2, [r3, #4]
}
 80148cc:	bf00      	nop
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	4770      	bx	lr
 80148d8:	20000cac 	.word	0x20000cac
 80148dc:	20000c98 	.word	0x20000c98

080148e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b088      	sub	sp, #32
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d10a      	bne.n	8014906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80148f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80148f4:	f383 8811 	msr	BASEPRI, r3
 80148f8:	f3bf 8f6f 	isb	sy
 80148fc:	f3bf 8f4f 	dsb	sy
 8014900:	613b      	str	r3, [r7, #16]
}
 8014902:	bf00      	nop
 8014904:	e7fe      	b.n	8014904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d10a      	bne.n	8014922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801490c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014910:	f383 8811 	msr	BASEPRI, r3
 8014914:	f3bf 8f6f 	isb	sy
 8014918:	f3bf 8f4f 	dsb	sy
 801491c:	60fb      	str	r3, [r7, #12]
}
 801491e:	bf00      	nop
 8014920:	e7fe      	b.n	8014920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014922:	f000 fd1f 	bl	8015364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014926:	4b1d      	ldr	r3, [pc, #116]	; (801499c <xTaskCheckForTimeOut+0xbc>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	69ba      	ldr	r2, [r7, #24]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801493e:	d102      	bne.n	8014946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014940:	2300      	movs	r3, #0
 8014942:	61fb      	str	r3, [r7, #28]
 8014944:	e023      	b.n	801498e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	4b15      	ldr	r3, [pc, #84]	; (80149a0 <xTaskCheckForTimeOut+0xc0>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d007      	beq.n	8014962 <xTaskCheckForTimeOut+0x82>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	69ba      	ldr	r2, [r7, #24]
 8014958:	429a      	cmp	r2, r3
 801495a:	d302      	bcc.n	8014962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801495c:	2301      	movs	r3, #1
 801495e:	61fb      	str	r3, [r7, #28]
 8014960:	e015      	b.n	801498e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	697a      	ldr	r2, [r7, #20]
 8014968:	429a      	cmp	r2, r3
 801496a:	d20b      	bcs.n	8014984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	1ad2      	subs	r2, r2, r3
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7ff ff9b 	bl	80148b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801497e:	2300      	movs	r3, #0
 8014980:	61fb      	str	r3, [r7, #28]
 8014982:	e004      	b.n	801498e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	2200      	movs	r2, #0
 8014988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801498a:	2301      	movs	r3, #1
 801498c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801498e:	f000 fd19 	bl	80153c4 <vPortExitCritical>

	return xReturn;
 8014992:	69fb      	ldr	r3, [r7, #28]
}
 8014994:	4618      	mov	r0, r3
 8014996:	3720      	adds	r7, #32
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	20000c98 	.word	0x20000c98
 80149a0:	20000cac 	.word	0x20000cac

080149a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80149a4:	b480      	push	{r7}
 80149a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80149a8:	4b03      	ldr	r3, [pc, #12]	; (80149b8 <vTaskMissedYield+0x14>)
 80149aa:	2201      	movs	r2, #1
 80149ac:	601a      	str	r2, [r3, #0]
}
 80149ae:	bf00      	nop
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr
 80149b8:	20000ca8 	.word	0x20000ca8

080149bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80149c4:	f000 f852 	bl	8014a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80149c8:	4b06      	ldr	r3, [pc, #24]	; (80149e4 <prvIdleTask+0x28>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d9f9      	bls.n	80149c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80149d0:	4b05      	ldr	r3, [pc, #20]	; (80149e8 <prvIdleTask+0x2c>)
 80149d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149d6:	601a      	str	r2, [r3, #0]
 80149d8:	f3bf 8f4f 	dsb	sy
 80149dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80149e0:	e7f0      	b.n	80149c4 <prvIdleTask+0x8>
 80149e2:	bf00      	nop
 80149e4:	20000b98 	.word	0x20000b98
 80149e8:	e000ed04 	.word	0xe000ed04

080149ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80149f2:	2300      	movs	r3, #0
 80149f4:	607b      	str	r3, [r7, #4]
 80149f6:	e00c      	b.n	8014a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	4613      	mov	r3, r2
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	4413      	add	r3, r2
 8014a00:	009b      	lsls	r3, r3, #2
 8014a02:	4a12      	ldr	r2, [pc, #72]	; (8014a4c <prvInitialiseTaskLists+0x60>)
 8014a04:	4413      	add	r3, r2
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7fe fcf0 	bl	80133ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3301      	adds	r3, #1
 8014a10:	607b      	str	r3, [r7, #4]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2b06      	cmp	r3, #6
 8014a16:	d9ef      	bls.n	80149f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014a18:	480d      	ldr	r0, [pc, #52]	; (8014a50 <prvInitialiseTaskLists+0x64>)
 8014a1a:	f7fe fce7 	bl	80133ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014a1e:	480d      	ldr	r0, [pc, #52]	; (8014a54 <prvInitialiseTaskLists+0x68>)
 8014a20:	f7fe fce4 	bl	80133ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014a24:	480c      	ldr	r0, [pc, #48]	; (8014a58 <prvInitialiseTaskLists+0x6c>)
 8014a26:	f7fe fce1 	bl	80133ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014a2a:	480c      	ldr	r0, [pc, #48]	; (8014a5c <prvInitialiseTaskLists+0x70>)
 8014a2c:	f7fe fcde 	bl	80133ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014a30:	480b      	ldr	r0, [pc, #44]	; (8014a60 <prvInitialiseTaskLists+0x74>)
 8014a32:	f7fe fcdb 	bl	80133ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014a36:	4b0b      	ldr	r3, [pc, #44]	; (8014a64 <prvInitialiseTaskLists+0x78>)
 8014a38:	4a05      	ldr	r2, [pc, #20]	; (8014a50 <prvInitialiseTaskLists+0x64>)
 8014a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014a3c:	4b0a      	ldr	r3, [pc, #40]	; (8014a68 <prvInitialiseTaskLists+0x7c>)
 8014a3e:	4a05      	ldr	r2, [pc, #20]	; (8014a54 <prvInitialiseTaskLists+0x68>)
 8014a40:	601a      	str	r2, [r3, #0]
}
 8014a42:	bf00      	nop
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20000b98 	.word	0x20000b98
 8014a50:	20000c24 	.word	0x20000c24
 8014a54:	20000c38 	.word	0x20000c38
 8014a58:	20000c54 	.word	0x20000c54
 8014a5c:	20000c68 	.word	0x20000c68
 8014a60:	20000c80 	.word	0x20000c80
 8014a64:	20000c4c 	.word	0x20000c4c
 8014a68:	20000c50 	.word	0x20000c50

08014a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014a72:	e019      	b.n	8014aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014a74:	f000 fc76 	bl	8015364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a78:	4b10      	ldr	r3, [pc, #64]	; (8014abc <prvCheckTasksWaitingTermination+0x50>)
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	68db      	ldr	r3, [r3, #12]
 8014a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	3304      	adds	r3, #4
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7fe fd3b 	bl	8013500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014a8a:	4b0d      	ldr	r3, [pc, #52]	; (8014ac0 <prvCheckTasksWaitingTermination+0x54>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	4a0b      	ldr	r2, [pc, #44]	; (8014ac0 <prvCheckTasksWaitingTermination+0x54>)
 8014a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014a94:	4b0b      	ldr	r3, [pc, #44]	; (8014ac4 <prvCheckTasksWaitingTermination+0x58>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	4a0a      	ldr	r2, [pc, #40]	; (8014ac4 <prvCheckTasksWaitingTermination+0x58>)
 8014a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014a9e:	f000 fc91 	bl	80153c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f000 f810 	bl	8014ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014aa8:	4b06      	ldr	r3, [pc, #24]	; (8014ac4 <prvCheckTasksWaitingTermination+0x58>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d1e1      	bne.n	8014a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ab0:	bf00      	nop
 8014ab2:	bf00      	nop
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20000c68 	.word	0x20000c68
 8014ac0:	20000c94 	.word	0x20000c94
 8014ac4:	20000c7c 	.word	0x20000c7c

08014ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f000 f9fd 	bl	8014ed4 <vPortFree>
			vPortFree( pxTCB );
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 f9fa 	bl	8014ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ae0:	bf00      	nop
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014aee:	4b0c      	ldr	r3, [pc, #48]	; (8014b20 <prvResetNextTaskUnblockTime+0x38>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d104      	bne.n	8014b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014af8:	4b0a      	ldr	r3, [pc, #40]	; (8014b24 <prvResetNextTaskUnblockTime+0x3c>)
 8014afa:	f04f 32ff 	mov.w	r2, #4294967295
 8014afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014b00:	e008      	b.n	8014b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b02:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <prvResetNextTaskUnblockTime+0x38>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	4a04      	ldr	r2, [pc, #16]	; (8014b24 <prvResetNextTaskUnblockTime+0x3c>)
 8014b12:	6013      	str	r3, [r2, #0]
}
 8014b14:	bf00      	nop
 8014b16:	370c      	adds	r7, #12
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr
 8014b20:	20000c4c 	.word	0x20000c4c
 8014b24:	20000cb4 	.word	0x20000cb4

08014b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014b2e:	4b0b      	ldr	r3, [pc, #44]	; (8014b5c <xTaskGetSchedulerState+0x34>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d102      	bne.n	8014b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014b36:	2301      	movs	r3, #1
 8014b38:	607b      	str	r3, [r7, #4]
 8014b3a:	e008      	b.n	8014b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b3c:	4b08      	ldr	r3, [pc, #32]	; (8014b60 <xTaskGetSchedulerState+0x38>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d102      	bne.n	8014b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014b44:	2302      	movs	r3, #2
 8014b46:	607b      	str	r3, [r7, #4]
 8014b48:	e001      	b.n	8014b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014b4e:	687b      	ldr	r3, [r7, #4]
	}
 8014b50:	4618      	mov	r0, r3
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr
 8014b5c:	20000ca0 	.word	0x20000ca0
 8014b60:	20000cbc 	.word	0x20000cbc

08014b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014b70:	2300      	movs	r3, #0
 8014b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d06e      	beq.n	8014c58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014b7a:	4b3a      	ldr	r3, [pc, #232]	; (8014c64 <xTaskPriorityDisinherit+0x100>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	693a      	ldr	r2, [r7, #16]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d00a      	beq.n	8014b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014b84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	60fb      	str	r3, [r7, #12]
}
 8014b96:	bf00      	nop
 8014b98:	e7fe      	b.n	8014b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014b9a:	693b      	ldr	r3, [r7, #16]
 8014b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d10a      	bne.n	8014bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014ba2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	60bb      	str	r3, [r7, #8]
}
 8014bb4:	bf00      	nop
 8014bb6:	e7fe      	b.n	8014bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014bbc:	1e5a      	subs	r2, r3, #1
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d044      	beq.n	8014c58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d140      	bne.n	8014c58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	3304      	adds	r3, #4
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fe fc90 	bl	8013500 <uxListRemove>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d115      	bne.n	8014c12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bea:	491f      	ldr	r1, [pc, #124]	; (8014c68 <xTaskPriorityDisinherit+0x104>)
 8014bec:	4613      	mov	r3, r2
 8014bee:	009b      	lsls	r3, r3, #2
 8014bf0:	4413      	add	r3, r2
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	440b      	add	r3, r1
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d10a      	bne.n	8014c12 <xTaskPriorityDisinherit+0xae>
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c00:	2201      	movs	r2, #1
 8014c02:	fa02 f303 	lsl.w	r3, r2, r3
 8014c06:	43da      	mvns	r2, r3
 8014c08:	4b18      	ldr	r3, [pc, #96]	; (8014c6c <xTaskPriorityDisinherit+0x108>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4013      	ands	r3, r2
 8014c0e:	4a17      	ldr	r2, [pc, #92]	; (8014c6c <xTaskPriorityDisinherit+0x108>)
 8014c10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c1e:	f1c3 0207 	rsb	r2, r3, #7
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c2a:	2201      	movs	r2, #1
 8014c2c:	409a      	lsls	r2, r3
 8014c2e:	4b0f      	ldr	r3, [pc, #60]	; (8014c6c <xTaskPriorityDisinherit+0x108>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4313      	orrs	r3, r2
 8014c34:	4a0d      	ldr	r2, [pc, #52]	; (8014c6c <xTaskPriorityDisinherit+0x108>)
 8014c36:	6013      	str	r3, [r2, #0]
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	4413      	add	r3, r2
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	4a08      	ldr	r2, [pc, #32]	; (8014c68 <xTaskPriorityDisinherit+0x104>)
 8014c46:	441a      	add	r2, r3
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	3304      	adds	r3, #4
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f7fe fbf9 	bl	8013446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014c54:	2301      	movs	r3, #1
 8014c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014c58:	697b      	ldr	r3, [r7, #20]
	}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3718      	adds	r7, #24
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	20000b94 	.word	0x20000b94
 8014c68:	20000b98 	.word	0x20000b98
 8014c6c:	20000c9c 	.word	0x20000c9c

08014c70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
 8014c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c7a:	4b29      	ldr	r3, [pc, #164]	; (8014d20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c80:	4b28      	ldr	r3, [pc, #160]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	3304      	adds	r3, #4
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7fe fc3a 	bl	8013500 <uxListRemove>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d10b      	bne.n	8014caa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014c92:	4b24      	ldr	r3, [pc, #144]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c98:	2201      	movs	r2, #1
 8014c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c9e:	43da      	mvns	r2, r3
 8014ca0:	4b21      	ldr	r3, [pc, #132]	; (8014d28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	4013      	ands	r3, r2
 8014ca6:	4a20      	ldr	r2, [pc, #128]	; (8014d28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ca8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cb0:	d10a      	bne.n	8014cc8 <prvAddCurrentTaskToDelayedList+0x58>
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d007      	beq.n	8014cc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cb8:	4b1a      	ldr	r3, [pc, #104]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	3304      	adds	r3, #4
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	481a      	ldr	r0, [pc, #104]	; (8014d2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8014cc2:	f7fe fbc0 	bl	8013446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014cc6:	e026      	b.n	8014d16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014cc8:	68fa      	ldr	r2, [r7, #12]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	4413      	add	r3, r2
 8014cce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014cd0:	4b14      	ldr	r3, [pc, #80]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014cd8:	68ba      	ldr	r2, [r7, #8]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d209      	bcs.n	8014cf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ce0:	4b13      	ldr	r3, [pc, #76]	; (8014d30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	4b0f      	ldr	r3, [pc, #60]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	4619      	mov	r1, r3
 8014cec:	4610      	mov	r0, r2
 8014cee:	f7fe fbce 	bl	801348e <vListInsert>
}
 8014cf2:	e010      	b.n	8014d16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cf4:	4b0f      	ldr	r3, [pc, #60]	; (8014d34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	4b0a      	ldr	r3, [pc, #40]	; (8014d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	3304      	adds	r3, #4
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4610      	mov	r0, r2
 8014d02:	f7fe fbc4 	bl	801348e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014d06:	4b0c      	ldr	r3, [pc, #48]	; (8014d38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	68ba      	ldr	r2, [r7, #8]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d202      	bcs.n	8014d16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014d10:	4a09      	ldr	r2, [pc, #36]	; (8014d38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	6013      	str	r3, [r2, #0]
}
 8014d16:	bf00      	nop
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	20000c98 	.word	0x20000c98
 8014d24:	20000b94 	.word	0x20000b94
 8014d28:	20000c9c 	.word	0x20000c9c
 8014d2c:	20000c80 	.word	0x20000c80
 8014d30:	20000c50 	.word	0x20000c50
 8014d34:	20000c4c 	.word	0x20000c4c
 8014d38:	20000cb4 	.word	0x20000cb4

08014d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08a      	sub	sp, #40	; 0x28
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014d44:	2300      	movs	r3, #0
 8014d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014d48:	f7ff fb70 	bl	801442c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014d4c:	4b5b      	ldr	r3, [pc, #364]	; (8014ebc <pvPortMalloc+0x180>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014d54:	f000 f920 	bl	8014f98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014d58:	4b59      	ldr	r3, [pc, #356]	; (8014ec0 <pvPortMalloc+0x184>)
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	4013      	ands	r3, r2
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f040 8093 	bne.w	8014e8c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d01d      	beq.n	8014da8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014d6c:	2208      	movs	r2, #8
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4413      	add	r3, r2
 8014d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f003 0307 	and.w	r3, r3, #7
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d014      	beq.n	8014da8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f023 0307 	bic.w	r3, r3, #7
 8014d84:	3308      	adds	r3, #8
 8014d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f003 0307 	and.w	r3, r3, #7
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d00a      	beq.n	8014da8 <pvPortMalloc+0x6c>
	__asm volatile
 8014d92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d96:	f383 8811 	msr	BASEPRI, r3
 8014d9a:	f3bf 8f6f 	isb	sy
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	617b      	str	r3, [r7, #20]
}
 8014da4:	bf00      	nop
 8014da6:	e7fe      	b.n	8014da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d06e      	beq.n	8014e8c <pvPortMalloc+0x150>
 8014dae:	4b45      	ldr	r3, [pc, #276]	; (8014ec4 <pvPortMalloc+0x188>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d869      	bhi.n	8014e8c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014db8:	4b43      	ldr	r3, [pc, #268]	; (8014ec8 <pvPortMalloc+0x18c>)
 8014dba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014dbc:	4b42      	ldr	r3, [pc, #264]	; (8014ec8 <pvPortMalloc+0x18c>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014dc2:	e004      	b.n	8014dce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d903      	bls.n	8014de0 <pvPortMalloc+0xa4>
 8014dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d1f1      	bne.n	8014dc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014de0:	4b36      	ldr	r3, [pc, #216]	; (8014ebc <pvPortMalloc+0x180>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d050      	beq.n	8014e8c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	2208      	movs	r2, #8
 8014df0:	4413      	add	r3, r2
 8014df2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df6:	681a      	ldr	r2, [r3, #0]
 8014df8:	6a3b      	ldr	r3, [r7, #32]
 8014dfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfe:	685a      	ldr	r2, [r3, #4]
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	1ad2      	subs	r2, r2, r3
 8014e04:	2308      	movs	r3, #8
 8014e06:	005b      	lsls	r3, r3, #1
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d91f      	bls.n	8014e4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4413      	add	r3, r2
 8014e12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	f003 0307 	and.w	r3, r3, #7
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00a      	beq.n	8014e34 <pvPortMalloc+0xf8>
	__asm volatile
 8014e1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e22:	f383 8811 	msr	BASEPRI, r3
 8014e26:	f3bf 8f6f 	isb	sy
 8014e2a:	f3bf 8f4f 	dsb	sy
 8014e2e:	613b      	str	r3, [r7, #16]
}
 8014e30:	bf00      	nop
 8014e32:	e7fe      	b.n	8014e32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	1ad2      	subs	r2, r2, r3
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014e46:	69b8      	ldr	r0, [r7, #24]
 8014e48:	f000 f908 	bl	801505c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014e4c:	4b1d      	ldr	r3, [pc, #116]	; (8014ec4 <pvPortMalloc+0x188>)
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	1ad3      	subs	r3, r2, r3
 8014e56:	4a1b      	ldr	r2, [pc, #108]	; (8014ec4 <pvPortMalloc+0x188>)
 8014e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014e5a:	4b1a      	ldr	r3, [pc, #104]	; (8014ec4 <pvPortMalloc+0x188>)
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	4b1b      	ldr	r3, [pc, #108]	; (8014ecc <pvPortMalloc+0x190>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d203      	bcs.n	8014e6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014e66:	4b17      	ldr	r3, [pc, #92]	; (8014ec4 <pvPortMalloc+0x188>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4a18      	ldr	r2, [pc, #96]	; (8014ecc <pvPortMalloc+0x190>)
 8014e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	685a      	ldr	r2, [r3, #4]
 8014e72:	4b13      	ldr	r3, [pc, #76]	; (8014ec0 <pvPortMalloc+0x184>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	431a      	orrs	r2, r3
 8014e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7e:	2200      	movs	r2, #0
 8014e80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014e82:	4b13      	ldr	r3, [pc, #76]	; (8014ed0 <pvPortMalloc+0x194>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	3301      	adds	r3, #1
 8014e88:	4a11      	ldr	r2, [pc, #68]	; (8014ed0 <pvPortMalloc+0x194>)
 8014e8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014e8c:	f7ff fadc 	bl	8014448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	f003 0307 	and.w	r3, r3, #7
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00a      	beq.n	8014eb0 <pvPortMalloc+0x174>
	__asm volatile
 8014e9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e9e:	f383 8811 	msr	BASEPRI, r3
 8014ea2:	f3bf 8f6f 	isb	sy
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	60fb      	str	r3, [r7, #12]
}
 8014eac:	bf00      	nop
 8014eae:	e7fe      	b.n	8014eae <pvPortMalloc+0x172>
	return pvReturn;
 8014eb0:	69fb      	ldr	r3, [r7, #28]
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3728      	adds	r7, #40	; 0x28
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	20002c08 	.word	0x20002c08
 8014ec0:	20002c1c 	.word	0x20002c1c
 8014ec4:	20002c0c 	.word	0x20002c0c
 8014ec8:	20002c00 	.word	0x20002c00
 8014ecc:	20002c10 	.word	0x20002c10
 8014ed0:	20002c14 	.word	0x20002c14

08014ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d04d      	beq.n	8014f82 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014ee6:	2308      	movs	r3, #8
 8014ee8:	425b      	negs	r3, r3
 8014eea:	697a      	ldr	r2, [r7, #20]
 8014eec:	4413      	add	r3, r2
 8014eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	685a      	ldr	r2, [r3, #4]
 8014ef8:	4b24      	ldr	r3, [pc, #144]	; (8014f8c <vPortFree+0xb8>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	4013      	ands	r3, r2
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d10a      	bne.n	8014f18 <vPortFree+0x44>
	__asm volatile
 8014f02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f06:	f383 8811 	msr	BASEPRI, r3
 8014f0a:	f3bf 8f6f 	isb	sy
 8014f0e:	f3bf 8f4f 	dsb	sy
 8014f12:	60fb      	str	r3, [r7, #12]
}
 8014f14:	bf00      	nop
 8014f16:	e7fe      	b.n	8014f16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d00a      	beq.n	8014f36 <vPortFree+0x62>
	__asm volatile
 8014f20:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f24:	f383 8811 	msr	BASEPRI, r3
 8014f28:	f3bf 8f6f 	isb	sy
 8014f2c:	f3bf 8f4f 	dsb	sy
 8014f30:	60bb      	str	r3, [r7, #8]
}
 8014f32:	bf00      	nop
 8014f34:	e7fe      	b.n	8014f34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	685a      	ldr	r2, [r3, #4]
 8014f3a:	4b14      	ldr	r3, [pc, #80]	; (8014f8c <vPortFree+0xb8>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	4013      	ands	r3, r2
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d01e      	beq.n	8014f82 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d11a      	bne.n	8014f82 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	685a      	ldr	r2, [r3, #4]
 8014f50:	4b0e      	ldr	r3, [pc, #56]	; (8014f8c <vPortFree+0xb8>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	43db      	mvns	r3, r3
 8014f56:	401a      	ands	r2, r3
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014f5c:	f7ff fa66 	bl	801442c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	685a      	ldr	r2, [r3, #4]
 8014f64:	4b0a      	ldr	r3, [pc, #40]	; (8014f90 <vPortFree+0xbc>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	4413      	add	r3, r2
 8014f6a:	4a09      	ldr	r2, [pc, #36]	; (8014f90 <vPortFree+0xbc>)
 8014f6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014f6e:	6938      	ldr	r0, [r7, #16]
 8014f70:	f000 f874 	bl	801505c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014f74:	4b07      	ldr	r3, [pc, #28]	; (8014f94 <vPortFree+0xc0>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	4a06      	ldr	r2, [pc, #24]	; (8014f94 <vPortFree+0xc0>)
 8014f7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014f7e:	f7ff fa63 	bl	8014448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014f82:	bf00      	nop
 8014f84:	3718      	adds	r7, #24
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20002c1c 	.word	0x20002c1c
 8014f90:	20002c0c 	.word	0x20002c0c
 8014f94:	20002c18 	.word	0x20002c18

08014f98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014f9e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8014fa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014fa4:	4b27      	ldr	r3, [pc, #156]	; (8015044 <prvHeapInit+0xac>)
 8014fa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f003 0307 	and.w	r3, r3, #7
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d00c      	beq.n	8014fcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	3307      	adds	r3, #7
 8014fb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f023 0307 	bic.w	r3, r3, #7
 8014fbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014fc0:	68ba      	ldr	r2, [r7, #8]
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	1ad3      	subs	r3, r2, r3
 8014fc6:	4a1f      	ldr	r2, [pc, #124]	; (8015044 <prvHeapInit+0xac>)
 8014fc8:	4413      	add	r3, r2
 8014fca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014fd0:	4a1d      	ldr	r2, [pc, #116]	; (8015048 <prvHeapInit+0xb0>)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014fd6:	4b1c      	ldr	r3, [pc, #112]	; (8015048 <prvHeapInit+0xb0>)
 8014fd8:	2200      	movs	r2, #0
 8014fda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	68ba      	ldr	r2, [r7, #8]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014fe4:	2208      	movs	r2, #8
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	1a9b      	subs	r3, r3, r2
 8014fea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f023 0307 	bic.w	r3, r3, #7
 8014ff2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	4a15      	ldr	r2, [pc, #84]	; (801504c <prvHeapInit+0xb4>)
 8014ff8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014ffa:	4b14      	ldr	r3, [pc, #80]	; (801504c <prvHeapInit+0xb4>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2200      	movs	r2, #0
 8015000:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015002:	4b12      	ldr	r3, [pc, #72]	; (801504c <prvHeapInit+0xb4>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	2200      	movs	r2, #0
 8015008:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	1ad2      	subs	r2, r2, r3
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015018:	4b0c      	ldr	r3, [pc, #48]	; (801504c <prvHeapInit+0xb4>)
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	4a0a      	ldr	r2, [pc, #40]	; (8015050 <prvHeapInit+0xb8>)
 8015026:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	4a09      	ldr	r2, [pc, #36]	; (8015054 <prvHeapInit+0xbc>)
 801502e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015030:	4b09      	ldr	r3, [pc, #36]	; (8015058 <prvHeapInit+0xc0>)
 8015032:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015036:	601a      	str	r2, [r3, #0]
}
 8015038:	bf00      	nop
 801503a:	3714      	adds	r7, #20
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr
 8015044:	20000cc0 	.word	0x20000cc0
 8015048:	20002c00 	.word	0x20002c00
 801504c:	20002c08 	.word	0x20002c08
 8015050:	20002c10 	.word	0x20002c10
 8015054:	20002c0c 	.word	0x20002c0c
 8015058:	20002c1c 	.word	0x20002c1c

0801505c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801505c:	b480      	push	{r7}
 801505e:	b085      	sub	sp, #20
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015064:	4b28      	ldr	r3, [pc, #160]	; (8015108 <prvInsertBlockIntoFreeList+0xac>)
 8015066:	60fb      	str	r3, [r7, #12]
 8015068:	e002      	b.n	8015070 <prvInsertBlockIntoFreeList+0x14>
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	60fb      	str	r3, [r7, #12]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	429a      	cmp	r2, r3
 8015078:	d8f7      	bhi.n	801506a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	685b      	ldr	r3, [r3, #4]
 8015082:	68ba      	ldr	r2, [r7, #8]
 8015084:	4413      	add	r3, r2
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	429a      	cmp	r2, r3
 801508a:	d108      	bne.n	801509e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	685a      	ldr	r2, [r3, #4]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	441a      	add	r2, r3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	685b      	ldr	r3, [r3, #4]
 80150a6:	68ba      	ldr	r2, [r7, #8]
 80150a8:	441a      	add	r2, r3
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d118      	bne.n	80150e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	4b15      	ldr	r3, [pc, #84]	; (801510c <prvInsertBlockIntoFreeList+0xb0>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d00d      	beq.n	80150da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	685a      	ldr	r2, [r3, #4]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	685b      	ldr	r3, [r3, #4]
 80150c8:	441a      	add	r2, r3
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	e008      	b.n	80150ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80150da:	4b0c      	ldr	r3, [pc, #48]	; (801510c <prvInsertBlockIntoFreeList+0xb0>)
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	601a      	str	r2, [r3, #0]
 80150e2:	e003      	b.n	80150ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80150ec:	68fa      	ldr	r2, [r7, #12]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d002      	beq.n	80150fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150fa:	bf00      	nop
 80150fc:	3714      	adds	r7, #20
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	20002c00 	.word	0x20002c00
 801510c:	20002c08 	.word	0x20002c08

08015110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015110:	b480      	push	{r7}
 8015112:	b085      	sub	sp, #20
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	3b04      	subs	r3, #4
 8015120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	3b04      	subs	r3, #4
 801512e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	f023 0201 	bic.w	r2, r3, #1
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	3b04      	subs	r3, #4
 801513e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015140:	4a0c      	ldr	r2, [pc, #48]	; (8015174 <pxPortInitialiseStack+0x64>)
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	3b14      	subs	r3, #20
 801514a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801514c:	687a      	ldr	r2, [r7, #4]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	3b04      	subs	r3, #4
 8015156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f06f 0202 	mvn.w	r2, #2
 801515e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	3b20      	subs	r3, #32
 8015164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015166:	68fb      	ldr	r3, [r7, #12]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3714      	adds	r7, #20
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr
 8015174:	08015179 	.word	0x08015179

08015178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015178:	b480      	push	{r7}
 801517a:	b085      	sub	sp, #20
 801517c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015182:	4b12      	ldr	r3, [pc, #72]	; (80151cc <prvTaskExitError+0x54>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801518a:	d00a      	beq.n	80151a2 <prvTaskExitError+0x2a>
	__asm volatile
 801518c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015190:	f383 8811 	msr	BASEPRI, r3
 8015194:	f3bf 8f6f 	isb	sy
 8015198:	f3bf 8f4f 	dsb	sy
 801519c:	60fb      	str	r3, [r7, #12]
}
 801519e:	bf00      	nop
 80151a0:	e7fe      	b.n	80151a0 <prvTaskExitError+0x28>
	__asm volatile
 80151a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80151a6:	f383 8811 	msr	BASEPRI, r3
 80151aa:	f3bf 8f6f 	isb	sy
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	60bb      	str	r3, [r7, #8]
}
 80151b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80151b6:	bf00      	nop
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d0fc      	beq.n	80151b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80151be:	bf00      	nop
 80151c0:	bf00      	nop
 80151c2:	3714      	adds	r7, #20
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr
 80151cc:	2000016c 	.word	0x2000016c

080151d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80151d0:	4b07      	ldr	r3, [pc, #28]	; (80151f0 <pxCurrentTCBConst2>)
 80151d2:	6819      	ldr	r1, [r3, #0]
 80151d4:	6808      	ldr	r0, [r1, #0]
 80151d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151da:	f380 8809 	msr	PSP, r0
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f04f 0000 	mov.w	r0, #0
 80151e6:	f380 8811 	msr	BASEPRI, r0
 80151ea:	4770      	bx	lr
 80151ec:	f3af 8000 	nop.w

080151f0 <pxCurrentTCBConst2>:
 80151f0:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80151f4:	bf00      	nop
 80151f6:	bf00      	nop

080151f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80151f8:	4808      	ldr	r0, [pc, #32]	; (801521c <prvPortStartFirstTask+0x24>)
 80151fa:	6800      	ldr	r0, [r0, #0]
 80151fc:	6800      	ldr	r0, [r0, #0]
 80151fe:	f380 8808 	msr	MSP, r0
 8015202:	f04f 0000 	mov.w	r0, #0
 8015206:	f380 8814 	msr	CONTROL, r0
 801520a:	b662      	cpsie	i
 801520c:	b661      	cpsie	f
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	f3bf 8f6f 	isb	sy
 8015216:	df00      	svc	0
 8015218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801521a:	bf00      	nop
 801521c:	e000ed08 	.word	0xe000ed08

08015220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015226:	4b46      	ldr	r3, [pc, #280]	; (8015340 <xPortStartScheduler+0x120>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	4a46      	ldr	r2, [pc, #280]	; (8015344 <xPortStartScheduler+0x124>)
 801522c:	4293      	cmp	r3, r2
 801522e:	d10a      	bne.n	8015246 <xPortStartScheduler+0x26>
	__asm volatile
 8015230:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015234:	f383 8811 	msr	BASEPRI, r3
 8015238:	f3bf 8f6f 	isb	sy
 801523c:	f3bf 8f4f 	dsb	sy
 8015240:	613b      	str	r3, [r7, #16]
}
 8015242:	bf00      	nop
 8015244:	e7fe      	b.n	8015244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015246:	4b3e      	ldr	r3, [pc, #248]	; (8015340 <xPortStartScheduler+0x120>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	4a3f      	ldr	r2, [pc, #252]	; (8015348 <xPortStartScheduler+0x128>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d10a      	bne.n	8015266 <xPortStartScheduler+0x46>
	__asm volatile
 8015250:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015254:	f383 8811 	msr	BASEPRI, r3
 8015258:	f3bf 8f6f 	isb	sy
 801525c:	f3bf 8f4f 	dsb	sy
 8015260:	60fb      	str	r3, [r7, #12]
}
 8015262:	bf00      	nop
 8015264:	e7fe      	b.n	8015264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015266:	4b39      	ldr	r3, [pc, #228]	; (801534c <xPortStartScheduler+0x12c>)
 8015268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	b2db      	uxtb	r3, r3
 8015270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	22ff      	movs	r2, #255	; 0xff
 8015276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	b2db      	uxtb	r3, r3
 801527e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015280:	78fb      	ldrb	r3, [r7, #3]
 8015282:	b2db      	uxtb	r3, r3
 8015284:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015288:	b2da      	uxtb	r2, r3
 801528a:	4b31      	ldr	r3, [pc, #196]	; (8015350 <xPortStartScheduler+0x130>)
 801528c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801528e:	4b31      	ldr	r3, [pc, #196]	; (8015354 <xPortStartScheduler+0x134>)
 8015290:	2207      	movs	r2, #7
 8015292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015294:	e009      	b.n	80152aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015296:	4b2f      	ldr	r3, [pc, #188]	; (8015354 <xPortStartScheduler+0x134>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	3b01      	subs	r3, #1
 801529c:	4a2d      	ldr	r2, [pc, #180]	; (8015354 <xPortStartScheduler+0x134>)
 801529e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80152a0:	78fb      	ldrb	r3, [r7, #3]
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152aa:	78fb      	ldrb	r3, [r7, #3]
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152b2:	2b80      	cmp	r3, #128	; 0x80
 80152b4:	d0ef      	beq.n	8015296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80152b6:	4b27      	ldr	r3, [pc, #156]	; (8015354 <xPortStartScheduler+0x134>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f1c3 0307 	rsb	r3, r3, #7
 80152be:	2b04      	cmp	r3, #4
 80152c0:	d00a      	beq.n	80152d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80152c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80152c6:	f383 8811 	msr	BASEPRI, r3
 80152ca:	f3bf 8f6f 	isb	sy
 80152ce:	f3bf 8f4f 	dsb	sy
 80152d2:	60bb      	str	r3, [r7, #8]
}
 80152d4:	bf00      	nop
 80152d6:	e7fe      	b.n	80152d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80152d8:	4b1e      	ldr	r3, [pc, #120]	; (8015354 <xPortStartScheduler+0x134>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	021b      	lsls	r3, r3, #8
 80152de:	4a1d      	ldr	r2, [pc, #116]	; (8015354 <xPortStartScheduler+0x134>)
 80152e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80152e2:	4b1c      	ldr	r3, [pc, #112]	; (8015354 <xPortStartScheduler+0x134>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80152ea:	4a1a      	ldr	r2, [pc, #104]	; (8015354 <xPortStartScheduler+0x134>)
 80152ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	b2da      	uxtb	r2, r3
 80152f2:	697b      	ldr	r3, [r7, #20]
 80152f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80152f6:	4b18      	ldr	r3, [pc, #96]	; (8015358 <xPortStartScheduler+0x138>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	4a17      	ldr	r2, [pc, #92]	; (8015358 <xPortStartScheduler+0x138>)
 80152fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015302:	4b15      	ldr	r3, [pc, #84]	; (8015358 <xPortStartScheduler+0x138>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	4a14      	ldr	r2, [pc, #80]	; (8015358 <xPortStartScheduler+0x138>)
 8015308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801530c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801530e:	f000 f8dd 	bl	80154cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015312:	4b12      	ldr	r3, [pc, #72]	; (801535c <xPortStartScheduler+0x13c>)
 8015314:	2200      	movs	r2, #0
 8015316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015318:	f000 f8fc 	bl	8015514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801531c:	4b10      	ldr	r3, [pc, #64]	; (8015360 <xPortStartScheduler+0x140>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a0f      	ldr	r2, [pc, #60]	; (8015360 <xPortStartScheduler+0x140>)
 8015322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015328:	f7ff ff66 	bl	80151f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801532c:	f7ff f9e0 	bl	80146f0 <vTaskSwitchContext>
	prvTaskExitError();
 8015330:	f7ff ff22 	bl	8015178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015334:	2300      	movs	r3, #0
}
 8015336:	4618      	mov	r0, r3
 8015338:	3718      	adds	r7, #24
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	e000ed00 	.word	0xe000ed00
 8015344:	410fc271 	.word	0x410fc271
 8015348:	410fc270 	.word	0x410fc270
 801534c:	e000e400 	.word	0xe000e400
 8015350:	20002c20 	.word	0x20002c20
 8015354:	20002c24 	.word	0x20002c24
 8015358:	e000ed20 	.word	0xe000ed20
 801535c:	2000016c 	.word	0x2000016c
 8015360:	e000ef34 	.word	0xe000ef34

08015364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
	__asm volatile
 801536a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801536e:	f383 8811 	msr	BASEPRI, r3
 8015372:	f3bf 8f6f 	isb	sy
 8015376:	f3bf 8f4f 	dsb	sy
 801537a:	607b      	str	r3, [r7, #4]
}
 801537c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801537e:	4b0f      	ldr	r3, [pc, #60]	; (80153bc <vPortEnterCritical+0x58>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	3301      	adds	r3, #1
 8015384:	4a0d      	ldr	r2, [pc, #52]	; (80153bc <vPortEnterCritical+0x58>)
 8015386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015388:	4b0c      	ldr	r3, [pc, #48]	; (80153bc <vPortEnterCritical+0x58>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2b01      	cmp	r3, #1
 801538e:	d10f      	bne.n	80153b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015390:	4b0b      	ldr	r3, [pc, #44]	; (80153c0 <vPortEnterCritical+0x5c>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b00      	cmp	r3, #0
 8015398:	d00a      	beq.n	80153b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801539a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801539e:	f383 8811 	msr	BASEPRI, r3
 80153a2:	f3bf 8f6f 	isb	sy
 80153a6:	f3bf 8f4f 	dsb	sy
 80153aa:	603b      	str	r3, [r7, #0]
}
 80153ac:	bf00      	nop
 80153ae:	e7fe      	b.n	80153ae <vPortEnterCritical+0x4a>
	}
}
 80153b0:	bf00      	nop
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr
 80153bc:	2000016c 	.word	0x2000016c
 80153c0:	e000ed04 	.word	0xe000ed04

080153c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80153ca:	4b12      	ldr	r3, [pc, #72]	; (8015414 <vPortExitCritical+0x50>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d10a      	bne.n	80153e8 <vPortExitCritical+0x24>
	__asm volatile
 80153d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80153d6:	f383 8811 	msr	BASEPRI, r3
 80153da:	f3bf 8f6f 	isb	sy
 80153de:	f3bf 8f4f 	dsb	sy
 80153e2:	607b      	str	r3, [r7, #4]
}
 80153e4:	bf00      	nop
 80153e6:	e7fe      	b.n	80153e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80153e8:	4b0a      	ldr	r3, [pc, #40]	; (8015414 <vPortExitCritical+0x50>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	3b01      	subs	r3, #1
 80153ee:	4a09      	ldr	r2, [pc, #36]	; (8015414 <vPortExitCritical+0x50>)
 80153f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80153f2:	4b08      	ldr	r3, [pc, #32]	; (8015414 <vPortExitCritical+0x50>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d105      	bne.n	8015406 <vPortExitCritical+0x42>
 80153fa:	2300      	movs	r3, #0
 80153fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	f383 8811 	msr	BASEPRI, r3
}
 8015404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015406:	bf00      	nop
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop
 8015414:	2000016c 	.word	0x2000016c
	...

08015420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015420:	f3ef 8009 	mrs	r0, PSP
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	4b15      	ldr	r3, [pc, #84]	; (8015480 <pxCurrentTCBConst>)
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	f01e 0f10 	tst.w	lr, #16
 8015430:	bf08      	it	eq
 8015432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543a:	6010      	str	r0, [r2, #0]
 801543c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015440:	f04f 0030 	mov.w	r0, #48	; 0x30
 8015444:	f380 8811 	msr	BASEPRI, r0
 8015448:	f3bf 8f4f 	dsb	sy
 801544c:	f3bf 8f6f 	isb	sy
 8015450:	f7ff f94e 	bl	80146f0 <vTaskSwitchContext>
 8015454:	f04f 0000 	mov.w	r0, #0
 8015458:	f380 8811 	msr	BASEPRI, r0
 801545c:	bc09      	pop	{r0, r3}
 801545e:	6819      	ldr	r1, [r3, #0]
 8015460:	6808      	ldr	r0, [r1, #0]
 8015462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015466:	f01e 0f10 	tst.w	lr, #16
 801546a:	bf08      	it	eq
 801546c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015470:	f380 8809 	msr	PSP, r0
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	f3af 8000 	nop.w

08015480 <pxCurrentTCBConst>:
 8015480:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015484:	bf00      	nop
 8015486:	bf00      	nop

08015488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
	__asm volatile
 801548e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	607b      	str	r3, [r7, #4]
}
 80154a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80154a2:	f7ff f86d 	bl	8014580 <xTaskIncrementTick>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d003      	beq.n	80154b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80154ac:	4b06      	ldr	r3, [pc, #24]	; (80154c8 <xPortSysTickHandler+0x40>)
 80154ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154b2:	601a      	str	r2, [r3, #0]
 80154b4:	2300      	movs	r3, #0
 80154b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	f383 8811 	msr	BASEPRI, r3
}
 80154be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80154c0:	bf00      	nop
 80154c2:	3708      	adds	r7, #8
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	e000ed04 	.word	0xe000ed04

080154cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80154cc:	b480      	push	{r7}
 80154ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80154d0:	4b0b      	ldr	r3, [pc, #44]	; (8015500 <vPortSetupTimerInterrupt+0x34>)
 80154d2:	2200      	movs	r2, #0
 80154d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80154d6:	4b0b      	ldr	r3, [pc, #44]	; (8015504 <vPortSetupTimerInterrupt+0x38>)
 80154d8:	2200      	movs	r2, #0
 80154da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80154dc:	4b0a      	ldr	r3, [pc, #40]	; (8015508 <vPortSetupTimerInterrupt+0x3c>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	4a0a      	ldr	r2, [pc, #40]	; (801550c <vPortSetupTimerInterrupt+0x40>)
 80154e2:	fba2 2303 	umull	r2, r3, r2, r3
 80154e6:	099b      	lsrs	r3, r3, #6
 80154e8:	4a09      	ldr	r2, [pc, #36]	; (8015510 <vPortSetupTimerInterrupt+0x44>)
 80154ea:	3b01      	subs	r3, #1
 80154ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80154ee:	4b04      	ldr	r3, [pc, #16]	; (8015500 <vPortSetupTimerInterrupt+0x34>)
 80154f0:	2207      	movs	r2, #7
 80154f2:	601a      	str	r2, [r3, #0]
}
 80154f4:	bf00      	nop
 80154f6:	46bd      	mov	sp, r7
 80154f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fc:	4770      	bx	lr
 80154fe:	bf00      	nop
 8015500:	e000e010 	.word	0xe000e010
 8015504:	e000e018 	.word	0xe000e018
 8015508:	20000140 	.word	0x20000140
 801550c:	10624dd3 	.word	0x10624dd3
 8015510:	e000e014 	.word	0xe000e014

08015514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015524 <vPortEnableVFP+0x10>
 8015518:	6801      	ldr	r1, [r0, #0]
 801551a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801551e:	6001      	str	r1, [r0, #0]
 8015520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015522:	bf00      	nop
 8015524:	e000ed88 	.word	0xe000ed88

08015528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801552e:	f3ef 8305 	mrs	r3, IPSR
 8015532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2b0f      	cmp	r3, #15
 8015538:	d914      	bls.n	8015564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801553a:	4a17      	ldr	r2, [pc, #92]	; (8015598 <vPortValidateInterruptPriority+0x70>)
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	4413      	add	r3, r2
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015544:	4b15      	ldr	r3, [pc, #84]	; (801559c <vPortValidateInterruptPriority+0x74>)
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	7afa      	ldrb	r2, [r7, #11]
 801554a:	429a      	cmp	r2, r3
 801554c:	d20a      	bcs.n	8015564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801554e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	607b      	str	r3, [r7, #4]
}
 8015560:	bf00      	nop
 8015562:	e7fe      	b.n	8015562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015564:	4b0e      	ldr	r3, [pc, #56]	; (80155a0 <vPortValidateInterruptPriority+0x78>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801556c:	4b0d      	ldr	r3, [pc, #52]	; (80155a4 <vPortValidateInterruptPriority+0x7c>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	429a      	cmp	r2, r3
 8015572:	d90a      	bls.n	801558a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015574:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015578:	f383 8811 	msr	BASEPRI, r3
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	f3bf 8f4f 	dsb	sy
 8015584:	603b      	str	r3, [r7, #0]
}
 8015586:	bf00      	nop
 8015588:	e7fe      	b.n	8015588 <vPortValidateInterruptPriority+0x60>
	}
 801558a:	bf00      	nop
 801558c:	3714      	adds	r7, #20
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	e000e3f0 	.word	0xe000e3f0
 801559c:	20002c20 	.word	0x20002c20
 80155a0:	e000ed0c 	.word	0xe000ed0c
 80155a4:	20002c24 	.word	0x20002c24

080155a8 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b086      	sub	sp, #24
 80155ac:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 80155ae:	2303      	movs	r3, #3
 80155b0:	73fb      	strb	r3, [r7, #15]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 80155b2:	4b41      	ldr	r3, [pc, #260]	; (80156b8 <BSP_GUI_LoadDataFromFlash+0x110>)
 80155b4:	60bb      	str	r3, [r7, #8]
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155be:	d012      	beq.n	80155e6 <BSP_GUI_LoadDataFromFlash+0x3e>
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c6:	a13a      	add	r1, pc, #232	; (adr r1, 80156b0 <BSP_GUI_LoadDataFromFlash+0x108>)
 80155c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155cc:	428b      	cmp	r3, r1
 80155ce:	bf08      	it	eq
 80155d0:	4282      	cmpeq	r2, r0
 80155d2:	d008      	beq.n	80155e6 <BSP_GUI_LoadDataFromFlash+0x3e>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 80155d4:	2318      	movs	r3, #24
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	4b38      	ldr	r3, [pc, #224]	; (80156bc <BSP_GUI_LoadDataFromFlash+0x114>)
 80155da:	2200      	movs	r2, #0
 80155dc:	2100      	movs	r1, #0
 80155de:	2006      	movs	r0, #6
 80155e0:	f7fa fa18 	bl	800fa14 <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 80155e4:	e05e      	b.n	80156a4 <BSP_GUI_LoadDataFromFlash+0xfc>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ee:	d058      	beq.n	80156a2 <BSP_GUI_LoadDataFromFlash+0xfa>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 80155f0:	4b33      	ldr	r3, [pc, #204]	; (80156c0 <BSP_GUI_LoadDataFromFlash+0x118>)
 80155f2:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 80155f4:	4b33      	ldr	r3, [pc, #204]	; (80156c4 <BSP_GUI_LoadDataFromFlash+0x11c>)
 80155f6:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 80155f8:	2300      	movs	r3, #0
 80155fa:	73bb      	strb	r3, [r7, #14]
 80155fc:	e00d      	b.n	801561a <BSP_GUI_LoadDataFromFlash+0x72>
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	681a      	ldr	r2, [r3, #0]
 8015602:	7bbb      	ldrb	r3, [r7, #14]
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	fa22 f103 	lsr.w	r1, r2, r3
 801560a:	7bbb      	ldrb	r3, [r7, #14]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	4413      	add	r3, r2
 8015610:	b2ca      	uxtb	r2, r1
 8015612:	701a      	strb	r2, [r3, #0]
 8015614:	7bbb      	ldrb	r3, [r7, #14]
 8015616:	3301      	adds	r3, #1
 8015618:	73bb      	strb	r3, [r7, #14]
 801561a:	7bbb      	ldrb	r3, [r7, #14]
 801561c:	2b03      	cmp	r3, #3
 801561e:	d9ee      	bls.n	80155fe <BSP_GUI_LoadDataFromFlash+0x56>
    _status = GUI_OK;
 8015620:	2300      	movs	r3, #0
 8015622:	73fb      	strb	r3, [r7, #15]
  }

#if defined(_SRC) || defined(_DRP)
  /* Load PORT0_PDO_ListSRC */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 8015624:	4928      	ldr	r1, [pc, #160]	; (80156c8 <BSP_GUI_LoadDataFromFlash+0x120>)
 8015626:	4829      	ldr	r0, [pc, #164]	; (80156cc <BSP_GUI_LoadDataFromFlash+0x124>)
 8015628:	f000 fa25 	bl	8015a76 <LoadPDOFromFlash>
 801562c:	4603      	mov	r3, r0
 801562e:	461a      	mov	r2, r3
 8015630:	7bfb      	ldrb	r3, [r7, #15]
 8015632:	4313      	orrs	r3, r2
 8015634:	73fb      	strb	r3, [r7, #15]
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8015636:	4926      	ldr	r1, [pc, #152]	; (80156d0 <BSP_GUI_LoadDataFromFlash+0x128>)
 8015638:	4826      	ldr	r0, [pc, #152]	; (80156d4 <BSP_GUI_LoadDataFromFlash+0x12c>)
 801563a:	f000 fa1c 	bl	8015a76 <LoadPDOFromFlash>
 801563e:	4603      	mov	r3, r0
 8015640:	461a      	mov	r2, r3
 8015642:	7bfb      	ldrb	r3, [r7, #15]
 8015644:	4313      	orrs	r3, r2
 8015646:	73fb      	strb	r3, [r7, #15]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 8015648:	220c      	movs	r2, #12
 801564a:	4923      	ldr	r1, [pc, #140]	; (80156d8 <BSP_GUI_LoadDataFromFlash+0x130>)
 801564c:	4823      	ldr	r0, [pc, #140]	; (80156dc <BSP_GUI_LoadDataFromFlash+0x134>)
 801564e:	f000 fa37 	bl	8015ac0 <LoadSettingsFromFlash>
 8015652:	4603      	mov	r3, r0
 8015654:	461a      	mov	r2, r3
 8015656:	7bfb      	ldrb	r3, [r7, #15]
 8015658:	4313      	orrs	r3, r2
 801565a:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 801565c:	2208      	movs	r2, #8
 801565e:	4920      	ldr	r1, [pc, #128]	; (80156e0 <BSP_GUI_LoadDataFromFlash+0x138>)
 8015660:	4820      	ldr	r0, [pc, #128]	; (80156e4 <BSP_GUI_LoadDataFromFlash+0x13c>)
 8015662:	f000 fa2d 	bl	8015ac0 <LoadSettingsFromFlash>
 8015666:	4603      	mov	r3, r0
 8015668:	461a      	mov	r2, r3
 801566a:	7bfb      	ldrb	r3, [r7, #15]
 801566c:	4313      	orrs	r3, r2
 801566e:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 8015670:	2274      	movs	r2, #116	; 0x74
 8015672:	491d      	ldr	r1, [pc, #116]	; (80156e8 <BSP_GUI_LoadDataFromFlash+0x140>)
 8015674:	481d      	ldr	r0, [pc, #116]	; (80156ec <BSP_GUI_LoadDataFromFlash+0x144>)
 8015676:	f000 fa23 	bl	8015ac0 <LoadSettingsFromFlash>
 801567a:	4603      	mov	r3, r0
 801567c:	461a      	mov	r2, r3
 801567e:	7bfb      	ldrb	r3, [r7, #15]
 8015680:	4313      	orrs	r3, r2
 8015682:	73fb      	strb	r3, [r7, #15]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 8015684:	4b16      	ldr	r3, [pc, #88]	; (80156e0 <BSP_GUI_LoadDataFromFlash+0x138>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	4a17      	ldr	r2, [pc, #92]	; (80156e8 <BSP_GUI_LoadDataFromFlash+0x140>)
 801568a:	6553      	str	r3, [r2, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 801568c:	4b14      	ldr	r3, [pc, #80]	; (80156e0 <BSP_GUI_LoadDataFromFlash+0x138>)
 801568e:	889a      	ldrh	r2, [r3, #4]
 8015690:	4b15      	ldr	r3, [pc, #84]	; (80156e8 <BSP_GUI_LoadDataFromFlash+0x140>)
 8015692:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 8015696:	4b12      	ldr	r3, [pc, #72]	; (80156e0 <BSP_GUI_LoadDataFromFlash+0x138>)
 8015698:	88da      	ldrh	r2, [r3, #6]
 801569a:	4b13      	ldr	r3, [pc, #76]	; (80156e8 <BSP_GUI_LoadDataFromFlash+0x140>)
 801569c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80156a0:	e000      	b.n	80156a4 <BSP_GUI_LoadDataFromFlash+0xfc>
    goto _exit;
 80156a2:	bf00      	nop
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 80156a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3710      	adds	r7, #16
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop
 80156b0:	deadf00d 	.word	0xdeadf00d
 80156b4:	deadbabe 	.word	0xdeadbabe
 80156b8:	0807f800 	.word	0x0807f800
 80156bc:	0801b7ec 	.word	0x0801b7ec
 80156c0:	0807f808 	.word	0x0807f808
 80156c4:	2000008c 	.word	0x2000008c
 80156c8:	20000090 	.word	0x20000090
 80156cc:	0807f810 	.word	0x0807f810
 80156d0:	200000ac 	.word	0x200000ac
 80156d4:	0807f830 	.word	0x0807f830
 80156d8:	20000004 	.word	0x20000004
 80156dc:	0807f890 	.word	0x0807f890
 80156e0:	20000010 	.word	0x20000010
 80156e4:	0807f91c 	.word	0x0807f91c
 80156e8:	20000018 	.word	0x20000018
 80156ec:	0807f89c 	.word	0x0807f89c

080156f0 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 80156f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80156f4:	b094      	sub	sp, #80	; 0x50
 80156f6:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 80156f8:	2300      	movs	r3, #0
 80156fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  __ASM volatile ("cpsid i" : : : "memory");
 80156fe:	b672      	cpsid	i
}
 8015700:	bf00      	nop

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 8015702:	f7f7 ff07 	bl	800d514 <HAL_FLASH_Unlock>
  erase_init.Banks         = FLASH_BANK_SEL;
#endif /* FLASH_VOLTAGE_RANGE_3 */
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8015706:	2300      	movs	r3, #0
 8015708:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801570a:	23ff      	movs	r3, #255	; 0xff
 801570c:	63bb      	str	r3, [r7, #56]	; 0x38
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
 801570e:	2302      	movs	r3, #2
 8015710:	637b      	str	r3, [r7, #52]	; 0x34
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 8015712:	2301      	movs	r3, #1
 8015714:	63fb      	str	r3, [r7, #60]	; 0x3c

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 8015716:	4b6a      	ldr	r3, [pc, #424]	; (80158c0 <BSP_GUI_SaveDataInFlash+0x1d0>)
 8015718:	691b      	ldr	r3, [r3, #16]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d003      	beq.n	8015726 <BSP_GUI_SaveDataInFlash+0x36>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 801571e:	4a68      	ldr	r2, [pc, #416]	; (80158c0 <BSP_GUI_SaveDataInFlash+0x1d0>)
 8015720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015724:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 8015726:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801572a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801572e:	4611      	mov	r1, r2
 8015730:	4618      	mov	r0, r3
 8015732:	f7f7 ffdb 	bl	800d6ec <HAL_FLASHEx_Erase>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d002      	beq.n	8015742 <BSP_GUI_SaveDataInFlash+0x52>
  {
    status = GUI_ERASE_ERROR;
 801573c:	2301      	movs	r3, #1
 801573e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 8015742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015748:	f040 80ab 	bne.w	80158a2 <BSP_GUI_SaveDataInFlash+0x1b2>
 801574c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015750:	2b00      	cmp	r3, #0
 8015752:	f040 80a6 	bne.w	80158a2 <BSP_GUI_SaveDataInFlash+0x1b2>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 8015756:	a358      	add	r3, pc, #352	; (adr r3, 80158b8 <BSP_GUI_SaveDataInFlash+0x1c8>)
 8015758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801575c:	4959      	ldr	r1, [pc, #356]	; (80158c4 <BSP_GUI_SaveDataInFlash+0x1d4>)
 801575e:	2000      	movs	r0, #0
 8015760:	f7f7 fe82 	bl	800d468 <HAL_FLASH_Program>
 8015764:	4603      	mov	r3, r0
 8015766:	2b00      	cmp	r3, #0
 8015768:	d002      	beq.n	8015770 <BSP_GUI_SaveDataInFlash+0x80>
    {
      status = GUI_WRITE_ERROR;
 801576a:	2302      	movs	r3, #2
 801576c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8015770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015774:	2b00      	cmp	r3, #0
 8015776:	d15a      	bne.n	801582e <BSP_GUI_SaveDataInFlash+0x13e>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 8015778:	f04f 0200 	mov.w	r2, #0
 801577c:	f04f 0300 	mov.w	r3, #0
 8015780:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      value |= USBPD_NbPDO[0];
 8015784:	4b50      	ldr	r3, [pc, #320]	; (80158c8 <BSP_GUI_SaveDataInFlash+0x1d8>)
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	b2db      	uxtb	r3, r3
 801578a:	2200      	movs	r2, #0
 801578c:	461c      	mov	r4, r3
 801578e:	4615      	mov	r5, r2
 8015790:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015794:	ea42 0104 	orr.w	r1, r2, r4
 8015798:	61b9      	str	r1, [r7, #24]
 801579a:	432b      	orrs	r3, r5
 801579c:	61fb      	str	r3, [r7, #28]
 801579e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80157a2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      value |= (USBPD_NbPDO[1] << 8);
 80157a6:	4b48      	ldr	r3, [pc, #288]	; (80158c8 <BSP_GUI_SaveDataInFlash+0x1d8>)
 80157a8:	785b      	ldrb	r3, [r3, #1]
 80157aa:	021b      	lsls	r3, r3, #8
 80157ac:	17da      	asrs	r2, r3, #31
 80157ae:	623b      	str	r3, [r7, #32]
 80157b0:	627a      	str	r2, [r7, #36]	; 0x24
 80157b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80157b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80157ba:	4621      	mov	r1, r4
 80157bc:	4311      	orrs	r1, r2
 80157be:	6139      	str	r1, [r7, #16]
 80157c0:	4629      	mov	r1, r5
 80157c2:	4319      	orrs	r1, r3
 80157c4:	6179      	str	r1, [r7, #20]
 80157c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80157ca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      value |= (USBPD_NbPDO[2] << 16);
 80157ce:	4b3e      	ldr	r3, [pc, #248]	; (80158c8 <BSP_GUI_SaveDataInFlash+0x1d8>)
 80157d0:	789b      	ldrb	r3, [r3, #2]
 80157d2:	041b      	lsls	r3, r3, #16
 80157d4:	17da      	asrs	r2, r3, #31
 80157d6:	469a      	mov	sl, r3
 80157d8:	4693      	mov	fp, r2
 80157da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80157de:	ea42 010a 	orr.w	r1, r2, sl
 80157e2:	60b9      	str	r1, [r7, #8]
 80157e4:	ea43 030b 	orr.w	r3, r3, fp
 80157e8:	60fb      	str	r3, [r7, #12]
 80157ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80157ee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      value |= (USBPD_NbPDO[3] << 24);
 80157f2:	4b35      	ldr	r3, [pc, #212]	; (80158c8 <BSP_GUI_SaveDataInFlash+0x1d8>)
 80157f4:	78db      	ldrb	r3, [r3, #3]
 80157f6:	061b      	lsls	r3, r3, #24
 80157f8:	17da      	asrs	r2, r3, #31
 80157fa:	4698      	mov	r8, r3
 80157fc:	4691      	mov	r9, r2
 80157fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015802:	ea42 0108 	orr.w	r1, r2, r8
 8015806:	6039      	str	r1, [r7, #0]
 8015808:	ea43 0309 	orr.w	r3, r3, r9
 801580c:	607b      	str	r3, [r7, #4]
 801580e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015812:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8015816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801581a:	492c      	ldr	r1, [pc, #176]	; (80158cc <BSP_GUI_SaveDataInFlash+0x1dc>)
 801581c:	2000      	movs	r0, #0
 801581e:	f7f7 fe23 	bl	800d468 <HAL_FLASH_Program>
 8015822:	4603      	mov	r3, r0
 8015824:	2b00      	cmp	r3, #0
 8015826:	d002      	beq.n	801582e <BSP_GUI_SaveDataInFlash+0x13e>
      {
        status = GUI_WRITE_ERROR;
 8015828:	2302      	movs	r3, #2
 801582a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    }
#endif  /* GUI_FLASH_ADDR_NB_PDO_SNK_P0 */

#if defined(_SRC) || defined(_DRP)
    /* Save PORT0_PDO_ListSRC */
    if (GUI_OK == status)
 801582e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015832:	2b00      	cmp	r3, #0
 8015834:	d106      	bne.n	8015844 <BSP_GUI_SaveDataInFlash+0x154>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 8015836:	4926      	ldr	r1, [pc, #152]	; (80158d0 <BSP_GUI_SaveDataInFlash+0x1e0>)
 8015838:	4826      	ldr	r0, [pc, #152]	; (80158d4 <BSP_GUI_SaveDataInFlash+0x1e4>)
 801583a:	f000 f85d 	bl	80158f8 <SavePDOInFlash>
 801583e:	4603      	mov	r3, r0
 8015840:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 8015844:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015848:	2b00      	cmp	r3, #0
 801584a:	d106      	bne.n	801585a <BSP_GUI_SaveDataInFlash+0x16a>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801584c:	4922      	ldr	r1, [pc, #136]	; (80158d8 <BSP_GUI_SaveDataInFlash+0x1e8>)
 801584e:	4823      	ldr	r0, [pc, #140]	; (80158dc <BSP_GUI_SaveDataInFlash+0x1ec>)
 8015850:	f000 f852 	bl	80158f8 <SavePDOInFlash>
 8015854:	4603      	mov	r3, r0
 8015856:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801585a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801585e:	2b00      	cmp	r3, #0
 8015860:	d107      	bne.n	8015872 <BSP_GUI_SaveDataInFlash+0x182>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 8015862:	220c      	movs	r2, #12
 8015864:	491e      	ldr	r1, [pc, #120]	; (80158e0 <BSP_GUI_SaveDataInFlash+0x1f0>)
 8015866:	481f      	ldr	r0, [pc, #124]	; (80158e4 <BSP_GUI_SaveDataInFlash+0x1f4>)
 8015868:	f000 f89d 	bl	80159a6 <SaveSettingsInFlash>
 801586c:	4603      	mov	r3, r0
 801586e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 8015872:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015876:	2b00      	cmp	r3, #0
 8015878:	d107      	bne.n	801588a <BSP_GUI_SaveDataInFlash+0x19a>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 801587a:	2208      	movs	r2, #8
 801587c:	491a      	ldr	r1, [pc, #104]	; (80158e8 <BSP_GUI_SaveDataInFlash+0x1f8>)
 801587e:	481b      	ldr	r0, [pc, #108]	; (80158ec <BSP_GUI_SaveDataInFlash+0x1fc>)
 8015880:	f000 f891 	bl	80159a6 <SaveSettingsInFlash>
 8015884:	4603      	mov	r3, r0
 8015886:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801588a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801588e:	2b00      	cmp	r3, #0
 8015890:	d107      	bne.n	80158a2 <BSP_GUI_SaveDataInFlash+0x1b2>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 8015892:	2274      	movs	r2, #116	; 0x74
 8015894:	4916      	ldr	r1, [pc, #88]	; (80158f0 <BSP_GUI_SaveDataInFlash+0x200>)
 8015896:	4817      	ldr	r0, [pc, #92]	; (80158f4 <BSP_GUI_SaveDataInFlash+0x204>)
 8015898:	f000 f885 	bl	80159a6 <SaveSettingsInFlash>
 801589c:	4603      	mov	r3, r0
 801589e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 80158a2:	f7f7 fe59 	bl	800d558 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80158a6:	b662      	cpsie	i
}
 80158a8:	bf00      	nop

  /* Enable interrupts */
  __enable_irq();

  return status;
 80158aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3750      	adds	r7, #80	; 0x50
 80158b2:	46bd      	mov	sp, r7
 80158b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80158b8:	deadf00d 	.word	0xdeadf00d
 80158bc:	deadbabe 	.word	0xdeadbabe
 80158c0:	40022000 	.word	0x40022000
 80158c4:	0807f800 	.word	0x0807f800
 80158c8:	2000008c 	.word	0x2000008c
 80158cc:	0807f808 	.word	0x0807f808
 80158d0:	20000090 	.word	0x20000090
 80158d4:	0807f810 	.word	0x0807f810
 80158d8:	200000ac 	.word	0x200000ac
 80158dc:	0807f830 	.word	0x0807f830
 80158e0:	20000004 	.word	0x20000004
 80158e4:	0807f890 	.word	0x0807f890
 80158e8:	20000010 	.word	0x20000010
 80158ec:	0807f91c 	.word	0x0807f91c
 80158f0:	20000018 	.word	0x20000018
 80158f4:	0807f89c 	.word	0x0807f89c

080158f8 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 80158f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80158fc:	b08a      	sub	sp, #40	; 0x28
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	6039      	str	r1, [r7, #0]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 8015904:	2300      	movs	r3, #0
 8015906:	77fb      	strb	r3, [r7, #31]

  index_flash = 0U;
 8015908:	2300      	movs	r3, #0
 801590a:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801590c:	2300      	movs	r3, #0
 801590e:	627b      	str	r3, [r7, #36]	; 0x24
 8015910:	e03d      	b.n	801598e <SavePDOInFlash+0x96>
  {
    value[0] = pListOfPDO[index];
 8015912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015914:	009b      	lsls	r3, r3, #2
 8015916:	683a      	ldr	r2, [r7, #0]
 8015918:	4413      	add	r3, r2
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	60bb      	str	r3, [r7, #8]
    index++;
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	3301      	adds	r3, #1
 8015922:	627b      	str	r3, [r7, #36]	; 0x24
    if (index < USBPD_MAX_NB_PDO)
 8015924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015926:	2b06      	cmp	r3, #6
 8015928:	d806      	bhi.n	8015938 <SavePDOInFlash+0x40>
    {
      value[1] = pListOfPDO[index];
 801592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	683a      	ldr	r2, [r7, #0]
 8015930:	4413      	add	r3, r2
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	60fb      	str	r3, [r7, #12]
 8015936:	e002      	b.n	801593e <SavePDOInFlash+0x46>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8015938:	f04f 33ff 	mov.w	r3, #4294967295
 801593c:	60fb      	str	r3, [r7, #12]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	2200      	movs	r2, #0
 8015942:	461c      	mov	r4, r3
 8015944:	4615      	mov	r5, r2
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	2200      	movs	r2, #0
 801594a:	469a      	mov	sl, r3
 801594c:	4693      	mov	fp, r2
 801594e:	f04f 0200 	mov.w	r2, #0
 8015952:	f04f 0300 	mov.w	r3, #0
 8015956:	4653      	mov	r3, sl
 8015958:	2200      	movs	r2, #0
 801595a:	ea44 0802 	orr.w	r8, r4, r2
 801595e:	ea45 0903 	orr.w	r9, r5, r3
 8015962:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8015966:	6a3b      	ldr	r3, [r7, #32]
 8015968:	00da      	lsls	r2, r3, #3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	18d1      	adds	r1, r2, r3
 801596e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015972:	2000      	movs	r0, #0
 8015974:	f7f7 fd78 	bl	800d468 <HAL_FLASH_Program>
 8015978:	4603      	mov	r3, r0
 801597a:	2b00      	cmp	r3, #0
 801597c:	d001      	beq.n	8015982 <SavePDOInFlash+0x8a>
    {
      status = GUI_WRITE_ERROR;
 801597e:	2302      	movs	r3, #2
 8015980:	77fb      	strb	r3, [r7, #31]
    }
    index_flash += 1;
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	3301      	adds	r3, #1
 8015986:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8015988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598a:	3301      	adds	r3, #1
 801598c:	627b      	str	r3, [r7, #36]	; 0x24
 801598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015990:	2b06      	cmp	r3, #6
 8015992:	d802      	bhi.n	801599a <SavePDOInFlash+0xa2>
 8015994:	7ffb      	ldrb	r3, [r7, #31]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d0bb      	beq.n	8015912 <SavePDOInFlash+0x1a>
  }
  return status;
 801599a:	7ffb      	ldrb	r3, [r7, #31]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801599c:	4618      	mov	r0, r3
 801599e:	3728      	adds	r7, #40	; 0x28
 80159a0:	46bd      	mov	sp, r7
 80159a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080159a6 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 80159a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80159aa:	b08c      	sub	sp, #48	; 0x30
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	089b      	lsrs	r3, r3, #2
 80159b8:	623b      	str	r3, [r7, #32]
  GUI_StatusTypeDef status = GUI_OK;
 80159ba:	2300      	movs	r3, #0
 80159bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f003 0303 	and.w	r3, r3, #3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d001      	beq.n	80159ce <SaveSettingsInFlash+0x28>
  {
    return (GUI_ERROR);
 80159ca:	2303      	movs	r3, #3
 80159cc:	e04e      	b.n	8015a6c <SaveSettingsInFlash+0xc6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 80159ce:	2300      	movs	r3, #0
 80159d0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 80159d2:	2300      	movs	r3, #0
 80159d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159d6:	e03f      	b.n	8015a58 <SaveSettingsInFlash+0xb2>
  {
    value[0] = pSettings[index];
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	68ba      	ldr	r2, [r7, #8]
 80159de:	4413      	add	r3, r2
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	613b      	str	r3, [r7, #16]
    index++;
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	3301      	adds	r3, #1
 80159e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (index < nb_u32)
 80159ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159ec:	6a3b      	ldr	r3, [r7, #32]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d206      	bcs.n	8015a00 <SaveSettingsInFlash+0x5a>
    {
      value[1] = pSettings[index];
 80159f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	68ba      	ldr	r2, [r7, #8]
 80159f8:	4413      	add	r3, r2
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	617b      	str	r3, [r7, #20]
 80159fe:	e002      	b.n	8015a06 <SaveSettingsInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8015a00:	f04f 33ff 	mov.w	r3, #4294967295
 8015a04:	617b      	str	r3, [r7, #20]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	461c      	mov	r4, r3
 8015a0c:	4615      	mov	r5, r2
 8015a0e:	697b      	ldr	r3, [r7, #20]
 8015a10:	2200      	movs	r2, #0
 8015a12:	469a      	mov	sl, r3
 8015a14:	4693      	mov	fp, r2
 8015a16:	f04f 0200 	mov.w	r2, #0
 8015a1a:	f04f 0300 	mov.w	r3, #0
 8015a1e:	4653      	mov	r3, sl
 8015a20:	2200      	movs	r2, #0
 8015a22:	ea44 0802 	orr.w	r8, r4, r2
 8015a26:	ea45 0903 	orr.w	r9, r5, r3
 8015a2a:	e9c7 8906 	strd	r8, r9, [r7, #24]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8015a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a30:	00da      	lsls	r2, r3, #3
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	18d1      	adds	r1, r2, r3
 8015a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015a3a:	2000      	movs	r0, #0
 8015a3c:	f7f7 fd14 	bl	800d468 <HAL_FLASH_Program>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d002      	beq.n	8015a4c <SaveSettingsInFlash+0xa6>
    {
      status = GUI_WRITE_ERROR;
 8015a46:	2302      	movs	r3, #2
 8015a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    index_flash += 1U;
 8015a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4e:	3301      	adds	r3, #1
 8015a50:	62bb      	str	r3, [r7, #40]	; 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8015a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a54:	3301      	adds	r3, #1
 8015a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d203      	bcs.n	8015a68 <SaveSettingsInFlash+0xc2>
 8015a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d0b7      	beq.n	80159d8 <SaveSettingsInFlash+0x32>
  }
  return status;
 8015a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3730      	adds	r7, #48	; 0x30
 8015a70:	46bd      	mov	sp, r7
 8015a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015a76 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8015a76:	b480      	push	{r7}
 8015a78:	b087      	sub	sp, #28
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
 8015a7e:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8015a84:	2303      	movs	r3, #3
 8015a86:	73fb      	strb	r3, [r7, #15]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8015a88:	2300      	movs	r3, #0
 8015a8a:	613b      	str	r3, [r7, #16]
 8015a8c:	e00c      	b.n	8015aa8 <LoadPDOFromFlash+0x32>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8015a8e:	697a      	ldr	r2, [r7, #20]
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	009b      	lsls	r3, r3, #2
 8015a94:	6839      	ldr	r1, [r7, #0]
 8015a96:	440b      	add	r3, r1
 8015a98:	6812      	ldr	r2, [r2, #0]
 8015a9a:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	3304      	adds	r3, #4
 8015aa0:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	613b      	str	r3, [r7, #16]
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	2b06      	cmp	r3, #6
 8015aac:	d9ef      	bls.n	8015a8e <LoadPDOFromFlash+0x18>
    }
    _status = GUI_OK;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	73fb      	strb	r3, [r7, #15]
  }
  return _status;
 8015ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	371c      	adds	r7, #28
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abe:	4770      	bx	lr

08015ac0 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	60b9      	str	r1, [r7, #8]
 8015aca:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8015ad0:	2303      	movs	r3, #3
 8015ad2:	74fb      	strb	r3, [r7, #19]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	4619      	mov	r1, r3
 8015ada:	68b8      	ldr	r0, [r7, #8]
 8015adc:	f004 fc6e 	bl	801a3bc <memcpy>
    _status = GUI_OK;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	74fb      	strb	r3, [r7, #19]
  }
  return _status;
 8015ae4:	7cfb      	ldrb	r3, [r7, #19]
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8015aee:	b480      	push	{r7}
 8015af0:	b085      	sub	sp, #20
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	60f8      	str	r0, [r7, #12]
 8015af6:	607b      	str	r3, [r7, #4]
 8015af8:	460b      	mov	r3, r1
 8015afa:	72fb      	strb	r3, [r7, #11]
 8015afc:	4613      	mov	r3, r2
 8015afe:	813b      	strh	r3, [r7, #8]
  if (Ptr == NULL)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d101      	bne.n	8015b0a <TLV_init_encode+0x1c>
  {
    return 0xFF;  /* Buffer is NULL*/
 8015b06:	23ff      	movs	r3, #255	; 0xff
 8015b08:	e044      	b.n	8015b94 <TLV_init_encode+0xa6>
  }
  if (SizeMax < 11U)
 8015b0a:	893b      	ldrh	r3, [r7, #8]
 8015b0c:	2b0a      	cmp	r3, #10
 8015b0e:	d801      	bhi.n	8015b14 <TLV_init_encode+0x26>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 8015b10:	23ff      	movs	r3, #255	; 0xff
 8015b12:	e03f      	b.n	8015b94 <TLV_init_encode+0xa6>
  }

  ToSendTLV->data = Ptr;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	893a      	ldrh	r2, [r7, #8]
 8015b1e:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	22fd      	movs	r2, #253	; 0xfd
 8015b26:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	22fd      	movs	r2, #253	; 0xfd
 8015b30:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	3302      	adds	r3, #2
 8015b38:	22fd      	movs	r2, #253	; 0xfd
 8015b3a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	3303      	adds	r3, #3
 8015b42:	22fd      	movs	r2, #253	; 0xfd
 8015b44:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	3304      	adds	r3, #4
 8015b4c:	7afa      	ldrb	r2, [r7, #11]
 8015b4e:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	3305      	adds	r3, #5
 8015b56:	2200      	movs	r2, #0
 8015b58:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	3306      	adds	r3, #6
 8015b60:	2200      	movs	r2, #0
 8015b62:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	3307      	adds	r3, #7
 8015b6a:	22a5      	movs	r2, #165	; 0xa5
 8015b6c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	3308      	adds	r3, #8
 8015b74:	22a5      	movs	r2, #165	; 0xa5
 8015b76:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	3309      	adds	r3, #9
 8015b7e:	22a5      	movs	r2, #165	; 0xa5
 8015b80:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	330a      	adds	r3, #10
 8015b88:	22a5      	movs	r2, #165	; 0xa5
 8015b8a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	2207      	movs	r2, #7
 8015b90:	80da      	strh	r2, [r3, #6]

  return 0;
 8015b92:	2300      	movs	r3, #0
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	3714      	adds	r7, #20
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr

08015ba0 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b087      	sub	sp, #28
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	607b      	str	r3, [r7, #4]
 8015baa:	460b      	mov	r3, r1
 8015bac:	72fb      	strb	r3, [r7, #11]
 8015bae:	4613      	mov	r3, r2
 8015bb0:	813b      	strh	r3, [r7, #8]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	68fa      	ldr	r2, [r7, #12]
 8015bb8:	88d2      	ldrh	r2, [r2, #6]
 8015bba:	4413      	add	r3, r2
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	2ba5      	cmp	r3, #165	; 0xa5
 8015bc0:	d002      	beq.n	8015bc8 <TLV_add+0x28>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8015bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bc6:	e0a3      	b.n	8015d10 <TLV_add+0x170>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	88db      	ldrh	r3, [r3, #6]
 8015bcc:	461a      	mov	r2, r3
 8015bce:	893b      	ldrh	r3, [r7, #8]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	3307      	adds	r3, #7
 8015bd4:	68fa      	ldr	r2, [r7, #12]
 8015bd6:	8892      	ldrh	r2, [r2, #4]
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	d902      	bls.n	8015be2 <TLV_add+0x42>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8015bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015be0:	e096      	b.n	8015d10 <TLV_add+0x170>
  }
  if (ToSendTLV->data == NULL)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d102      	bne.n	8015bf0 <TLV_add+0x50>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8015bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bee:	e08f      	b.n	8015d10 <TLV_add+0x170>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	88db      	ldrh	r3, [r3, #6]
 8015bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d102      	bne.n	8015c02 <TLV_add+0x62>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8015bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c00:	e086      	b.n	8015d10 <TLV_add+0x170>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	68fa      	ldr	r2, [r7, #12]
 8015c08:	88d2      	ldrh	r2, [r2, #6]
 8015c0a:	4413      	add	r3, r2
 8015c0c:	7afa      	ldrb	r2, [r7, #11]
 8015c0e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	88db      	ldrh	r3, [r3, #6]
 8015c14:	3301      	adds	r3, #1
 8015c16:	b29a      	uxth	r2, r3
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	88da      	ldrh	r2, [r3, #6]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 8015c24:	893b      	ldrh	r3, [r7, #8]
 8015c26:	0a1b      	lsrs	r3, r3, #8
 8015c28:	b299      	uxth	r1, r3
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	88d2      	ldrh	r2, [r2, #6]
 8015c32:	4413      	add	r3, r2
 8015c34:	b2ca      	uxtb	r2, r1
 8015c36:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	88db      	ldrh	r3, [r3, #6]
 8015c40:	3301      	adds	r3, #1
 8015c42:	4413      	add	r3, r2
 8015c44:	893a      	ldrh	r2, [r7, #8]
 8015c46:	b2d2      	uxtb	r2, r2
 8015c48:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	88db      	ldrh	r3, [r3, #6]
 8015c4e:	3302      	adds	r3, #2
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8015c56:	2300      	movs	r3, #0
 8015c58:	617b      	str	r3, [r7, #20]
 8015c5a:	e012      	b.n	8015c82 <TLV_add+0xe2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	441a      	add	r2, r3
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	68f9      	ldr	r1, [r7, #12]
 8015c68:	88c9      	ldrh	r1, [r1, #6]
 8015c6a:	440b      	add	r3, r1
 8015c6c:	7812      	ldrb	r2, [r2, #0]
 8015c6e:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	88db      	ldrh	r3, [r3, #6]
 8015c74:	3301      	adds	r3, #1
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	3301      	adds	r3, #1
 8015c80:	617b      	str	r3, [r7, #20]
 8015c82:	893b      	ldrh	r3, [r7, #8]
 8015c84:	697a      	ldr	r2, [r7, #20]
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d3e8      	bcc.n	8015c5c <TLV_add+0xbc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	68fa      	ldr	r2, [r7, #12]
 8015c90:	88d2      	ldrh	r2, [r2, #6]
 8015c92:	4413      	add	r3, r2
 8015c94:	22a5      	movs	r2, #165	; 0xa5
 8015c96:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681a      	ldr	r2, [r3, #0]
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	88db      	ldrh	r3, [r3, #6]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	4413      	add	r3, r2
 8015ca4:	22a5      	movs	r2, #165	; 0xa5
 8015ca6:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681a      	ldr	r2, [r3, #0]
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	88db      	ldrh	r3, [r3, #6]
 8015cb0:	3302      	adds	r3, #2
 8015cb2:	4413      	add	r3, r2
 8015cb4:	22a5      	movs	r2, #165	; 0xa5
 8015cb6:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	88db      	ldrh	r3, [r3, #6]
 8015cc0:	3303      	adds	r3, #3
 8015cc2:	4413      	add	r3, r2
 8015cc4:	22a5      	movs	r2, #165	; 0xa5
 8015cc6:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	3305      	adds	r3, #5
 8015cce:	781b      	ldrb	r3, [r3, #0]
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	021b      	lsls	r3, r3, #8
 8015cd4:	b29a      	uxth	r2, r3
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	3306      	adds	r3, #6
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	4413      	add	r3, r2
 8015ce2:	b29a      	uxth	r2, r3
 8015ce4:	893b      	ldrh	r3, [r7, #8]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	b29b      	uxth	r3, r3
 8015cea:	3303      	adds	r3, #3
 8015cec:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8015cee:	8a7b      	ldrh	r3, [r7, #18]
 8015cf0:	0a1b      	lsrs	r3, r3, #8
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	3305      	adds	r3, #5
 8015cfa:	b2d2      	uxtb	r2, r2
 8015cfc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	3306      	adds	r3, #6
 8015d04:	8a7a      	ldrh	r2, [r7, #18]
 8015d06:	b2d2      	uxtb	r2, r2
 8015d08:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 8015d0a:	893b      	ldrh	r3, [r7, #8]
 8015d0c:	3303      	adds	r3, #3
 8015d0e:	b29b      	uxth	r3, r3
}
 8015d10:	4618      	mov	r0, r3
 8015d12:	371c      	adds	r7, #28
 8015d14:	46bd      	mov	sp, r7
 8015d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1a:	4770      	bx	lr

08015d1c <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 8015d1c:	b480      	push	{r7}
 8015d1e:	b087      	sub	sp, #28
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	4613      	mov	r3, r2
 8015d28:	80fb      	strh	r3, [r7, #6]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	68fa      	ldr	r2, [r7, #12]
 8015d30:	88d2      	ldrh	r2, [r2, #6]
 8015d32:	4413      	add	r3, r2
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	2ba5      	cmp	r3, #165	; 0xa5
 8015d38:	d002      	beq.n	8015d40 <TLV_addValue+0x24>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8015d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d3e:	e077      	b.n	8015e30 <TLV_addValue+0x114>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	88db      	ldrh	r3, [r3, #6]
 8015d44:	461a      	mov	r2, r3
 8015d46:	88fb      	ldrh	r3, [r7, #6]
 8015d48:	4413      	add	r3, r2
 8015d4a:	3307      	adds	r3, #7
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	8892      	ldrh	r2, [r2, #4]
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d902      	bls.n	8015d5a <TLV_addValue+0x3e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8015d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d58:	e06a      	b.n	8015e30 <TLV_addValue+0x114>
  }
  if (ToSendTLV->data == NULL)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d102      	bne.n	8015d68 <TLV_addValue+0x4c>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8015d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d66:	e063      	b.n	8015e30 <TLV_addValue+0x114>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	88db      	ldrh	r3, [r3, #6]
 8015d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d70:	4293      	cmp	r3, r2
 8015d72:	d102      	bne.n	8015d7a <TLV_addValue+0x5e>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8015d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d78:	e05a      	b.n	8015e30 <TLV_addValue+0x114>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	617b      	str	r3, [r7, #20]
 8015d7e:	e012      	b.n	8015da6 <TLV_addValue+0x8a>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8015d80:	68ba      	ldr	r2, [r7, #8]
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	441a      	add	r2, r3
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	68f9      	ldr	r1, [r7, #12]
 8015d8c:	88c9      	ldrh	r1, [r1, #6]
 8015d8e:	440b      	add	r3, r1
 8015d90:	7812      	ldrb	r2, [r2, #0]
 8015d92:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	88db      	ldrh	r3, [r3, #6]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	b29a      	uxth	r2, r3
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8015da0:	697b      	ldr	r3, [r7, #20]
 8015da2:	3301      	adds	r3, #1
 8015da4:	617b      	str	r3, [r7, #20]
 8015da6:	88fb      	ldrh	r3, [r7, #6]
 8015da8:	697a      	ldr	r2, [r7, #20]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d3e8      	bcc.n	8015d80 <TLV_addValue+0x64>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	68fa      	ldr	r2, [r7, #12]
 8015db4:	88d2      	ldrh	r2, [r2, #6]
 8015db6:	4413      	add	r3, r2
 8015db8:	22a5      	movs	r2, #165	; 0xa5
 8015dba:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	88db      	ldrh	r3, [r3, #6]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	4413      	add	r3, r2
 8015dc8:	22a5      	movs	r2, #165	; 0xa5
 8015dca:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	88db      	ldrh	r3, [r3, #6]
 8015dd4:	3302      	adds	r3, #2
 8015dd6:	4413      	add	r3, r2
 8015dd8:	22a5      	movs	r2, #165	; 0xa5
 8015dda:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	88db      	ldrh	r3, [r3, #6]
 8015de4:	3303      	adds	r3, #3
 8015de6:	4413      	add	r3, r2
 8015de8:	22a5      	movs	r2, #165	; 0xa5
 8015dea:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	3305      	adds	r3, #5
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	021b      	lsls	r3, r3, #8
 8015df8:	b29a      	uxth	r2, r3
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	3306      	adds	r3, #6
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	4413      	add	r3, r2
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	88fb      	ldrh	r3, [r7, #6]
 8015e0a:	4413      	add	r3, r2
 8015e0c:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8015e0e:	8a7b      	ldrh	r3, [r7, #18]
 8015e10:	0a1b      	lsrs	r3, r3, #8
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	3305      	adds	r3, #5
 8015e1a:	b2d2      	uxtb	r2, r2
 8015e1c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	3306      	adds	r3, #6
 8015e24:	8a7a      	ldrh	r2, [r7, #18]
 8015e26:	b2d2      	uxtb	r2, r2
 8015e28:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 8015e2a:	88fb      	ldrh	r3, [r7, #6]
 8015e2c:	3303      	adds	r3, #3
 8015e2e:	b29b      	uxth	r3, r3
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	371c      	adds	r7, #28
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr

08015e3c <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b083      	sub	sp, #12
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2200      	movs	r2, #0
 8015e48:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e50:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2200      	movs	r2, #0
 8015e56:	809a      	strh	r2, [r3, #4]
}
 8015e58:	bf00      	nop
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d101      	bne.n	8015e78 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 8015e74:	23ff      	movs	r3, #255	; 0xff
 8015e76:	e01d      	b.n	8015eb4 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2bfd      	cmp	r3, #253	; 0xfd
 8015e7e:	d10e      	bne.n	8015e9e <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	3301      	adds	r3, #1
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	2bfd      	cmp	r3, #253	; 0xfd
 8015e88:	d109      	bne.n	8015e9e <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	3302      	adds	r3, #2
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	2bfd      	cmp	r3, #253	; 0xfd
 8015e92:	d104      	bne.n	8015e9e <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	3303      	adds	r3, #3
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	2bfd      	cmp	r3, #253	; 0xfd
 8015e9c:	d001      	beq.n	8015ea2 <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 8015e9e:	23ff      	movs	r3, #255	; 0xff
 8015ea0:	e008      	b.n	8015eb4 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	683a      	ldr	r2, [r7, #0]
 8015ea6:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2207      	movs	r2, #7
 8015eac:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	889b      	ldrh	r3, [r3, #4]
 8015eb2:	b2db      	uxtb	r3, r3
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	370c      	adds	r7, #12
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr

08015ec0 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b085      	sub	sp, #20
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d101      	bne.n	8015eda <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 8015ed6:	23ff      	movs	r3, #255	; 0xff
 8015ed8:	e048      	b.n	8015f6c <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	889b      	ldrh	r3, [r3, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d101      	bne.n	8015ee6 <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 8015ee2:	23ff      	movs	r3, #255	; 0xff
 8015ee4:	e042      	b.n	8015f6c <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	8892      	ldrh	r2, [r2, #4]
 8015eee:	4413      	add	r3, r2
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	2ba5      	cmp	r3, #165	; 0xa5
 8015ef4:	d101      	bne.n	8015efa <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 8015ef6:	23ff      	movs	r3, #255	; 0xff
 8015ef8:	e038      	b.n	8015f6c <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	68fa      	ldr	r2, [r7, #12]
 8015f00:	8892      	ldrh	r2, [r2, #4]
 8015f02:	4413      	add	r3, r2
 8015f04:	781a      	ldrb	r2, [r3, #0]
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	889b      	ldrh	r3, [r3, #4]
 8015f0e:	3301      	adds	r3, #1
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	8892      	ldrh	r2, [r2, #4]
 8015f1e:	4413      	add	r3, r2
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	021b      	lsls	r3, r3, #8
 8015f26:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	6819      	ldr	r1, [r3, #0]
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	889b      	ldrh	r3, [r3, #4]
 8015f30:	3301      	adds	r3, #1
 8015f32:	440b      	add	r3, r1
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	4413      	add	r3, r2
 8015f3a:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	889b      	ldrh	r3, [r3, #4]
 8015f44:	3302      	adds	r3, #2
 8015f46:	b29a      	uxth	r2, r3
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	68fa      	ldr	r2, [r7, #12]
 8015f52:	8892      	ldrh	r2, [r2, #4]
 8015f54:	441a      	add	r2, r3
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	889a      	ldrh	r2, [r3, #4]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	881b      	ldrh	r3, [r3, #0]
 8015f62:	4413      	add	r3, r2
 8015f64:	b29a      	uxth	r2, r3
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	809a      	strh	r2, [r3, #4]

  return 0;
 8015f6a:	2300      	movs	r3, #0
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3714      	adds	r7, #20
 8015f70:	46bd      	mov	sp, r7
 8015f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f76:	4770      	bx	lr

08015f78 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b083      	sub	sp, #12
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2200      	movs	r2, #0
 8015f84:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	809a      	strh	r2, [r3, #4]
}
 8015f8c:	bf00      	nop
 8015f8e:	370c      	adds	r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr

08015f98 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b085      	sub	sp, #20
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	73fb      	strb	r3, [r7, #15]

  while (pString[start] == TLV_SOF)
 8015fa4:	e002      	b.n	8015fac <TLV_get_string_length+0x14>
  {
    start++;
 8015fa6:	7bfb      	ldrb	r3, [r7, #15]
 8015fa8:	3301      	adds	r3, #1
 8015faa:	73fb      	strb	r3, [r7, #15]
  while (pString[start] == TLV_SOF)
 8015fac:	7bfb      	ldrb	r3, [r7, #15]
 8015fae:	687a      	ldr	r2, [r7, #4]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2bfd      	cmp	r3, #253	; 0xfd
 8015fb6:	d0f6      	beq.n	8015fa6 <TLV_get_string_length+0xe>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 8015fb8:	7bfb      	ldrb	r3, [r7, #15]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	021b      	lsls	r3, r3, #8
 8015fc4:	b21a      	sxth	r2, r3
 8015fc6:	7bfb      	ldrb	r3, [r7, #15]
 8015fc8:	3302      	adds	r3, #2
 8015fca:	6879      	ldr	r1, [r7, #4]
 8015fcc:	440b      	add	r3, r1
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	b21b      	sxth	r3, r3
 8015fd2:	4313      	orrs	r3, r2
 8015fd4:	b21b      	sxth	r3, r3
 8015fd6:	81bb      	strh	r3, [r7, #12]
  length += 3U;
 8015fd8:	89bb      	ldrh	r3, [r7, #12]
 8015fda:	3303      	adds	r3, #3
 8015fdc:	81bb      	strh	r3, [r7, #12]

  return length;
 8015fde:	89bb      	ldrh	r3, [r7, #12]
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3714      	adds	r7, #20
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr

08015fec <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	607a      	str	r2, [r7, #4]
 8015ff8:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	75fb      	strb	r3, [r7, #23]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 8015ffe:	f7ff fad3 	bl	80155a8 <BSP_GUI_LoadDataFromFlash>
 8016002:	4603      	mov	r3, r0
 8016004:	2b00      	cmp	r3, #0
 8016006:	bf14      	ite	ne
 8016008:	2301      	movne	r3, #1
 801600a:	2300      	moveq	r3, #0
 801600c:	b2db      	uxtb	r3, r3
 801600e:	461a      	mov	r2, r3
 8016010:	4b32      	ldr	r3, [pc, #200]	; (80160dc <GUI_Init+0xf0>)
 8016012:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 8016014:	4b32      	ldr	r3, [pc, #200]	; (80160e0 <GUI_Init+0xf4>)
 8016016:	799b      	ldrb	r3, [r3, #6]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d003      	beq.n	8016024 <GUI_Init+0x38>
 801601c:	4b30      	ldr	r3, [pc, #192]	; (80160e0 <GUI_Init+0xf4>)
 801601e:	79db      	ldrb	r3, [r3, #7]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d110      	bne.n	8016046 <GUI_Init+0x5a>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 8016024:	4a2f      	ldr	r2, [pc, #188]	; (80160e4 <GUI_Init+0xf8>)
 8016026:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801602a:	2150      	movs	r1, #80	; 0x50
 801602c:	f361 0347 	bfi	r3, r1, #1, #7
 8016030:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 8016034:	4a2b      	ldr	r2, [pc, #172]	; (80160e4 <GUI_Init+0xf8>)
 8016036:	f892 306d 	ldrb.w	r3, [r2, #109]	; 0x6d
 801603a:	2132      	movs	r1, #50	; 0x32
 801603c:	f361 0306 	bfi	r3, r1, #0, #7
 8016040:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
 8016044:	e02f      	b.n	80160a6 <GUI_Init+0xba>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8016046:	4b26      	ldr	r3, [pc, #152]	; (80160e0 <GUI_Init+0xf4>)
 8016048:	79db      	ldrb	r3, [r3, #7]
 801604a:	461a      	mov	r2, r3
 801604c:	2364      	movs	r3, #100	; 0x64
 801604e:	fb02 f303 	mul.w	r3, r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 8016052:	4a23      	ldr	r2, [pc, #140]	; (80160e0 <GUI_Init+0xf4>)
 8016054:	79d2      	ldrb	r2, [r2, #7]
 8016056:	4611      	mov	r1, r2
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 8016058:	4a21      	ldr	r2, [pc, #132]	; (80160e0 <GUI_Init+0xf4>)
 801605a:	7992      	ldrb	r2, [r2, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801605c:	440a      	add	r2, r1
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801605e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016066:	b2d9      	uxtb	r1, r3
 8016068:	4a1e      	ldr	r2, [pc, #120]	; (80160e4 <GUI_Init+0xf8>)
 801606a:	f892 306d 	ldrb.w	r3, [r2, #109]	; 0x6d
 801606e:	f361 0306 	bfi	r3, r1, #0, #7
 8016072:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8016076:	4b1a      	ldr	r3, [pc, #104]	; (80160e0 <GUI_Init+0xf4>)
 8016078:	79db      	ldrb	r3, [r3, #7]
 801607a:	461a      	mov	r2, r3
 801607c:	2364      	movs	r3, #100	; 0x64
 801607e:	fb02 f303 	mul.w	r3, r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 8016082:	4a18      	ldr	r2, [pc, #96]	; (80160e4 <GUI_Init+0xf8>)
 8016084:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8016088:	f3c2 0206 	ubfx	r2, r2, #0, #7
 801608c:	b2d2      	uxtb	r2, r2
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801608e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016096:	b2d9      	uxtb	r1, r3
 8016098:	4a12      	ldr	r2, [pc, #72]	; (80160e4 <GUI_Init+0xf8>)
 801609a:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801609e:	f361 0347 	bfi	r3, r1, #1, #7
 80160a2:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 80160a6:	4a10      	ldr	r2, [pc, #64]	; (80160e8 <GUI_Init+0xfc>)
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	6013      	str	r3, [r2, #0]
  pCB_HWPDType        = CB_HWPDType;
 80160ac:	4a0f      	ldr	r2, [pc, #60]	; (80160ec <GUI_Init+0x100>)
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	6013      	str	r3, [r2, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 80160b2:	4a0f      	ldr	r2, [pc, #60]	; (80160f0 <GUI_Init+0x104>)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6013      	str	r3, [r2, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 80160b8:	4a0e      	ldr	r2, [pc, #56]	; (80160f4 <GUI_Init+0x108>)
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	6013      	str	r3, [r2, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 80160be:	4a0e      	ldr	r2, [pc, #56]	; (80160f8 <GUI_Init+0x10c>)
 80160c0:	490e      	ldr	r1, [pc, #56]	; (80160fc <GUI_Init+0x110>)
 80160c2:	480f      	ldr	r0, [pc, #60]	; (8016100 <GUI_Init+0x114>)
 80160c4:	f7f1 fc2e 	bl	8007924 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 80160c8:	2000      	movs	r0, #0
 80160ca:	f000 f81b 	bl	8016104 <GUI_InitOS>
 80160ce:	4603      	mov	r3, r0
 80160d0:	75fb      	strb	r3, [r7, #23]
#endif /* !USBPD_THREADX */
  return _status;
 80160d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	20002e35 	.word	0x20002e35
 80160e0:	20000004 	.word	0x20000004
 80160e4:	20000018 	.word	0x20000018
 80160e8:	20002e40 	.word	0x20002e40
 80160ec:	20002e44 	.word	0x20002e44
 80160f0:	20002e48 	.word	0x20002e48
 80160f4:	20002e4c 	.word	0x20002e4c
 80160f8:	080171b5 	.word	0x080171b5
 80160fc:	080170f9 	.word	0x080170f9
 8016100:	0801648d 	.word	0x0801648d

08016104 <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 8016104:	b5b0      	push	{r4, r5, r7, lr}
 8016106:	b08a      	sub	sp, #40	; 0x28
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 801610c:	2301      	movs	r3, #1
 801610e:	627b      	str	r3, [r7, #36]	; 0x24

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 8016110:	4b1d      	ldr	r3, [pc, #116]	; (8016188 <GUI_InitOS+0x84>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d131      	bne.n	801617c <GUI_InitOS+0x78>
  {
    _init = 1;
 8016118:	4b1b      	ldr	r3, [pc, #108]	; (8016188 <GUI_InitOS+0x84>)
 801611a:	2201      	movs	r2, #1
 801611c:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 801611e:	4a1b      	ldr	r2, [pc, #108]	; (801618c <GUI_InitOS+0x88>)
 8016120:	f107 031c 	add.w	r3, r7, #28
 8016124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016128:	e883 0003 	stmia.w	r3, {r0, r1}
 801612c:	f107 031c 	add.w	r3, r7, #28
 8016130:	2100      	movs	r1, #0
 8016132:	4618      	mov	r0, r3
 8016134:	f7fd f894 	bl	8013260 <osMessageCreate>
 8016138:	4603      	mov	r3, r0
 801613a:	4a15      	ldr	r2, [pc, #84]	; (8016190 <GUI_InitOS+0x8c>)
 801613c:	6013      	str	r3, [r2, #0]
 801613e:	4b14      	ldr	r3, [pc, #80]	; (8016190 <GUI_InitOS+0x8c>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d102      	bne.n	801614c <GUI_InitOS+0x48>
 8016146:	2300      	movs	r3, #0
 8016148:	627b      	str	r3, [r7, #36]	; 0x24
 801614a:	e018      	b.n	801617e <GUI_InitOS+0x7a>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 801614c:	4b11      	ldr	r3, [pc, #68]	; (8016194 <GUI_InitOS+0x90>)
 801614e:	f107 0408 	add.w	r4, r7, #8
 8016152:	461d      	mov	r5, r3
 8016154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016158:	682b      	ldr	r3, [r5, #0]
 801615a:	6023      	str	r3, [r4, #0]
 801615c:	f107 0308 	add.w	r3, r7, #8
 8016160:	490b      	ldr	r1, [pc, #44]	; (8016190 <GUI_InitOS+0x8c>)
 8016162:	4618      	mov	r0, r3
 8016164:	f7fd f835 	bl	80131d2 <osThreadCreate>
 8016168:	4603      	mov	r3, r0
 801616a:	4a0b      	ldr	r2, [pc, #44]	; (8016198 <GUI_InitOS+0x94>)
 801616c:	6013      	str	r3, [r2, #0]
 801616e:	4b0a      	ldr	r3, [pc, #40]	; (8016198 <GUI_InitOS+0x94>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d103      	bne.n	801617e <GUI_InitOS+0x7a>
 8016176:	2300      	movs	r3, #0
 8016178:	627b      	str	r3, [r7, #36]	; 0x24
 801617a:	e000      	b.n	801617e <GUI_InitOS+0x7a>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 801617c:	bf00      	nop
  return (_status);
 801617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#else
  return (USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 8016180:	4618      	mov	r0, r3
 8016182:	3728      	adds	r7, #40	; 0x28
 8016184:	46bd      	mov	sp, r7
 8016186:	bdb0      	pop	{r4, r5, r7, pc}
 8016188:	20002ec4 	.word	0x20002ec4
 801618c:	0801b808 	.word	0x0801b808
 8016190:	20002e38 	.word	0x20002e38
 8016194:	0801b810 	.word	0x0801b810
 8016198:	20002e3c 	.word	0x20002e3c

0801619c <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 80161a0:	4802      	ldr	r0, [pc, #8]	; (80161ac <GUI_Start+0x10>)
 80161a2:	f003 f8dd 	bl	8019360 <TRACER_EMB_StartRX>
}
 80161a6:	bf00      	nop
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	080163ad 	.word	0x080163ad

080161b0 <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b08a      	sub	sp, #40	; 0x28
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 80161b8:	f04f 33ff 	mov.w	r3, #4294967295
 80161bc:	627b      	str	r3, [r7, #36]	; 0x24
  GUI_Start();
 80161be:	f7ff ffed 	bl	801619c <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	61fb      	str	r3, [r7, #28]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 80161c6:	4b50      	ldr	r3, [pc, #320]	; (8016308 <TaskGUI+0x158>)
 80161c8:	6819      	ldr	r1, [r3, #0]
 80161ca:	f107 030c 	add.w	r3, r7, #12
 80161ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7fd f897 	bl	8013304 <osMessageGet>
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	61fb      	str	r3, [r7, #28]
    switch ((GUI_USER_EVENT)(event & 0xFU))
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	f003 030f 	and.w	r3, r3, #15
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00d      	beq.n	8016202 <TaskGUI+0x52>
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	f040 8088 	bne.w	80162fc <TaskGUI+0x14c>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 80161ec:	69f8      	ldr	r0, [r7, #28]
 80161ee:	f000 f901 	bl	80163f4 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 80161f2:	4b45      	ldr	r3, [pc, #276]	; (8016308 <TaskGUI+0x158>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2200      	movs	r2, #0
 80161f8:	2100      	movs	r1, #0
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7fd f842 	bl	8013284 <osMessagePut>
        break;
 8016200:	e07d      	b.n	80162fe <TaskGUI+0x14e>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8016202:	2300      	movs	r3, #0
 8016204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8016208:	e073      	b.n	80162f2 <TaskGUI+0x142>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801620a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801620e:	4a3f      	ldr	r2, [pc, #252]	; (801630c <TaskGUI+0x15c>)
 8016210:	009b      	lsls	r3, r3, #2
 8016212:	4413      	add	r3, r2
 8016214:	785b      	ldrb	r3, [r3, #1]
 8016216:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801621a:	b2db      	uxtb	r3, r3
 801621c:	2b01      	cmp	r3, #1
 801621e:	d15d      	bne.n	80162dc <TaskGUI+0x12c>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8016220:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016224:	493a      	ldr	r1, [pc, #232]	; (8016310 <TaskGUI+0x160>)
 8016226:	4613      	mov	r3, r2
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	4413      	add	r3, r2
 801622c:	005b      	lsls	r3, r3, #1
 801622e:	440b      	add	r3, r1
 8016230:	791b      	ldrb	r3, [r3, #4]
 8016232:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016236:	b2db      	uxtb	r3, r3
 8016238:	2b01      	cmp	r3, #1
 801623a:	d14f      	bne.n	80162dc <TaskGUI+0x12c>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 801623c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016240:	4933      	ldr	r1, [pc, #204]	; (8016310 <TaskGUI+0x160>)
 8016242:	4613      	mov	r3, r2
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	4413      	add	r3, r2
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	440b      	add	r3, r1
 801624c:	791b      	ldrb	r3, [r3, #4]
 801624e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8016252:	b2db      	uxtb	r3, r3
 8016254:	2b00      	cmp	r3, #0
 8016256:	d041      	beq.n	80162dc <TaskGUI+0x12c>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 8016258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801625c:	4a2d      	ldr	r2, [pc, #180]	; (8016314 <TaskGUI+0x164>)
 801625e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016262:	b29b      	uxth	r3, r3
 8016264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016268:	d10a      	bne.n	8016280 <TaskGUI+0xd0>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 801626a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801626e:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 8016270:	f443 63f2 	orr.w	r3, r3, #1936	; 0x790
 8016274:	f043 0301 	orr.w	r3, r3, #1
              uint32_t event_mr = GUI_USER_EVENT_GUI
 8016278:	61bb      	str	r3, [r7, #24]
              (void)GUI_RXProcess(event_mr);
 801627a:	69b8      	ldr	r0, [r7, #24]
 801627c:	f000 f8ba 	bl	80163f4 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8016280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016284:	4a23      	ldr	r2, [pc, #140]	; (8016314 <TaskGUI+0x164>)
 8016286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801628a:	b29b      	uxth	r3, r3
 801628c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016290:	2b00      	cmp	r3, #0
 8016292:	dc29      	bgt.n	80162e8 <TaskGUI+0x138>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 8016294:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016298:	491d      	ldr	r1, [pc, #116]	; (8016310 <TaskGUI+0x160>)
 801629a:	4613      	mov	r3, r2
 801629c:	005b      	lsls	r3, r3, #1
 801629e:	4413      	add	r3, r2
 80162a0:	005b      	lsls	r3, r3, #1
 80162a2:	440b      	add	r3, r1
 80162a4:	791b      	ldrb	r3, [r3, #4]
 80162a6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	461a      	mov	r2, r3
 80162b0:	0092      	lsls	r2, r2, #2
 80162b2:	4413      	add	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80162bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80162c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80162c4:	b299      	uxth	r1, r3
 80162c6:	4b13      	ldr	r3, [pc, #76]	; (8016314 <TaskGUI+0x164>)
 80162c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80162cc:	4b0e      	ldr	r3, [pc, #56]	; (8016308 <TaskGUI+0x158>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	2200      	movs	r2, #0
 80162d2:	2100      	movs	r1, #0
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7fc ffd5 	bl	8013284 <osMessagePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 80162da:	e005      	b.n	80162e8 <TaskGUI+0x138>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 80162dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162e0:	4a0c      	ldr	r2, [pc, #48]	; (8016314 <TaskGUI+0x164>)
 80162e2:	2100      	movs	r1, #0
 80162e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 80162e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162ec:	3301      	adds	r3, #1
 80162ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80162f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d087      	beq.n	801620a <TaskGUI+0x5a>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 80162fa:	e000      	b.n	80162fe <TaskGUI+0x14e>
      }

      default:
        break;
 80162fc:	bf00      	nop
    }
    _timing = CheckGUITimers();
 80162fe:	f000 f80b 	bl	8016318 <CheckGUITimers>
 8016302:	6278      	str	r0, [r7, #36]	; 0x24
  {
 8016304:	e75d      	b.n	80161c2 <TaskGUI+0x12>
 8016306:	bf00      	nop
 8016308:	20002e38 	.word	0x20002e38
 801630c:	20000228 	.word	0x20000228
 8016310:	20002c2c 	.word	0x20002c2c
 8016314:	20002c28 	.word	0x20002c28

08016318 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 8016318:	b480      	push	{r7}
 801631a:	b085      	sub	sp, #20
 801631c:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801631e:	f04f 33ff 	mov.w	r3, #4294967295
 8016322:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8016324:	2300      	movs	r3, #0
 8016326:	72fb      	strb	r3, [r7, #11]
 8016328:	e013      	b.n	8016352 <CheckGUITimers+0x3a>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 801632a:	7afb      	ldrb	r3, [r7, #11]
 801632c:	4a0e      	ldr	r2, [pc, #56]	; (8016368 <CheckGUITimers+0x50>)
 801632e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016332:	b29b      	uxth	r3, r3
 8016334:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016338:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d005      	beq.n	801634c <CheckGUITimers+0x34>
    {
      if (_current_timing < _timing)
 8016340:	687a      	ldr	r2, [r7, #4]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	429a      	cmp	r2, r3
 8016346:	d201      	bcs.n	801634c <CheckGUITimers+0x34>
      {
        _timing = _current_timing;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801634c:	7afb      	ldrb	r3, [r7, #11]
 801634e:	3301      	adds	r3, #1
 8016350:	72fb      	strb	r3, [r7, #11]
 8016352:	7afb      	ldrb	r3, [r7, #11]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d0e8      	beq.n	801632a <CheckGUITimers+0x12>
      }
    }
  }
  return _timing;
 8016358:	68fb      	ldr	r3, [r7, #12]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr
 8016366:	bf00      	nop
 8016368:	20002c28 	.word	0x20002c28

0801636c <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 801636c:	b480      	push	{r7}
 801636e:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 8016370:	4b0c      	ldr	r3, [pc, #48]	; (80163a4 <GUI_TimerCounter+0x38>)
 8016372:	791b      	ldrb	r3, [r3, #4]
 8016374:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016378:	b2db      	uxtb	r3, r3
 801637a:	2b00      	cmp	r3, #0
 801637c:	d00d      	beq.n	801639a <GUI_TimerCounter+0x2e>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 801637e:	4b0a      	ldr	r3, [pc, #40]	; (80163a8 <GUI_TimerCounter+0x3c>)
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	b29b      	uxth	r3, r3
 8016384:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016388:	2b00      	cmp	r3, #0
 801638a:	d006      	beq.n	801639a <GUI_TimerCounter+0x2e>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 801638c:	4b06      	ldr	r3, [pc, #24]	; (80163a8 <GUI_TimerCounter+0x3c>)
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	b29b      	uxth	r3, r3
 8016392:	3b01      	subs	r3, #1
 8016394:	b29a      	uxth	r2, r3
 8016396:	4b04      	ldr	r3, [pc, #16]	; (80163a8 <GUI_TimerCounter+0x3c>)
 8016398:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 801639a:	bf00      	nop
 801639c:	46bd      	mov	sp, r7
 801639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a2:	4770      	bx	lr
 80163a4:	20002c2c 	.word	0x20002c2c
 80163a8:	20002c28 	.word	0x20002c28

080163ac <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	4603      	mov	r3, r0
 80163b4:	460a      	mov	r2, r1
 80163b6:	71fb      	strb	r3, [r7, #7]
 80163b8:	4613      	mov	r3, r2
 80163ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80163bc:	b672      	cpsid	i
}
 80163be:	bf00      	nop
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 80163c0:	79ba      	ldrb	r2, [r7, #6]
 80163c2:	79fb      	ldrb	r3, [r7, #7]
 80163c4:	4611      	mov	r1, r2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 f880 	bl	80164cc <GUI_GetMessage>
 80163cc:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80163ce:	b662      	cpsie	i
}
 80163d0:	bf00      	nop
  __enable_irq();
  if (event == 1U)
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	2b01      	cmp	r3, #1
 80163d6:	d106      	bne.n	80163e6 <GUI_CALLBACK_RX+0x3a>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 80163d8:	4b05      	ldr	r3, [pc, #20]	; (80163f0 <GUI_CALLBACK_RX+0x44>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2200      	movs	r2, #0
 80163de:	2101      	movs	r1, #1
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fc ff4f 	bl	8013284 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 80163e6:	bf00      	nop
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	20002e38 	.word	0x20002e38

080163f4 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 80163f4:	b590      	push	{r4, r7, lr}
 80163f6:	b087      	sub	sp, #28
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8016402:	2b00      	cmp	r3, #0
 8016404:	d11a      	bne.n	801643c <GUI_RXProcess+0x48>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8016406:	f107 020f 	add.w	r2, r7, #15
 801640a:	f107 0310 	add.w	r3, r7, #16
 801640e:	4611      	mov	r1, r2
 8016410:	4618      	mov	r0, r3
 8016412:	f000 f963 	bl	80166dc <GUI_SendAnswer>
 8016416:	4603      	mov	r3, r0
 8016418:	757b      	strb	r3, [r7, #21]

    switch (state)
 801641a:	7d7b      	ldrb	r3, [r7, #21]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d02f      	beq.n	8016480 <GUI_RXProcess+0x8c>
 8016420:	2b02      	cmp	r3, #2
 8016422:	d104      	bne.n	801642e <GUI_RXProcess+0x3a>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 8016424:	f7ff f964 	bl	80156f0 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 8016428:	f7f7 f80d 	bl	800d446 <HAL_NVIC_SystemReset>
        break;
 801642c:	e029      	b.n	8016482 <GUI_RXProcess+0x8e>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	7bfa      	ldrb	r2, [r7, #15]
 8016432:	4611      	mov	r1, r2
 8016434:	4618      	mov	r0, r3
 8016436:	f002 ff2f 	bl	8019298 <TRACER_EMB_Add>
        break;
 801643a:	e022      	b.n	8016482 <GUI_RXProcess+0x8e>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	b29b      	uxth	r3, r3
 8016440:	091b      	lsrs	r3, r3, #4
 8016442:	b29b      	uxth	r3, r3
 8016444:	b2db      	uxtb	r3, r3
 8016446:	82fb      	strh	r3, [r7, #22]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 8016448:	8afb      	ldrh	r3, [r7, #22]
 801644a:	2b79      	cmp	r3, #121	; 0x79
 801644c:	d10d      	bne.n	801646a <GUI_RXProcess+0x76>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	0e1b      	lsrs	r3, r3, #24
 8016452:	f003 0403 	and.w	r4, r3, #3
 8016456:	f7f6 fedb 	bl	800d210 <HAL_GetTick>
 801645a:	4603      	mov	r3, r0
 801645c:	461a      	mov	r2, r3
 801645e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016462:	4620      	mov	r0, r4
 8016464:	f000 f812 	bl	801648c <GUI_FormatAndSendNotification>
 8016468:	e00b      	b.n	8016482 <GUI_RXProcess+0x8e>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	0e1b      	lsrs	r3, r3, #24
 801646e:	f003 0303 	and.w	r3, r3, #3
 8016472:	8afa      	ldrh	r2, [r7, #22]
 8016474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016478:	4618      	mov	r0, r3
 801647a:	f000 f807 	bl	801648c <GUI_FormatAndSendNotification>
 801647e:	e000      	b.n	8016482 <GUI_RXProcess+0x8e>
        break;
 8016480:	bf00      	nop
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 8016482:	2300      	movs	r3, #0
}
 8016484:	4618      	mov	r0, r3
 8016486:	371c      	adds	r7, #28
 8016488:	46bd      	mov	sp, r7
 801648a:	bd90      	pop	{r4, r7, pc}

0801648c <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b088      	sub	sp, #32
 8016490:	af02      	add	r7, sp, #8
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	b2d8      	uxtb	r0, r3
 801649c:	f107 0213 	add.w	r2, r7, #19
 80164a0:	f107 0114 	add.w	r1, r7, #20
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	9300      	str	r3, [sp, #0]
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	f000 f9ff 	bl	80168ac <GUI_SendNotification>
 80164ae:	4603      	mov	r3, r0
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d005      	beq.n	80164c0 <GUI_FormatAndSendNotification+0x34>
  {
    TRACER_EMB_Add(msg, size);
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	7cfa      	ldrb	r2, [r7, #19]
 80164b8:	4611      	mov	r1, r2
 80164ba:	4618      	mov	r0, r3
 80164bc:	f002 feec 	bl	8019298 <TRACER_EMB_Add>
  }
  return 0;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3718      	adds	r7, #24
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
	...

080164cc <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 80164cc:	b480      	push	{r7}
 80164ce:	b085      	sub	sp, #20
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	4603      	mov	r3, r0
 80164d4:	460a      	mov	r2, r1
 80164d6:	71fb      	strb	r3, [r7, #7]
 80164d8:	4613      	mov	r3, r2
 80164da:	71bb      	strb	r3, [r7, #6]
  uint32_t status = 0;
 80164dc:	2300      	movs	r3, #0
 80164de:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 80164e0:	4b79      	ldr	r3, [pc, #484]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80164e2:	881b      	ldrh	r3, [r3, #0]
 80164e4:	2bff      	cmp	r3, #255	; 0xff
 80164e6:	d809      	bhi.n	80164fc <GUI_GetMessage+0x30>
  {
    PtrDataRx[cursor] = Character;
 80164e8:	4b77      	ldr	r3, [pc, #476]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80164ea:	881b      	ldrh	r3, [r3, #0]
 80164ec:	4619      	mov	r1, r3
 80164ee:	4a77      	ldr	r2, [pc, #476]	; (80166cc <GUI_GetMessage+0x200>)
 80164f0:	79fb      	ldrb	r3, [r7, #7]
 80164f2:	5453      	strb	r3, [r2, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 80164f4:	79bb      	ldrb	r3, [r7, #6]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00e      	beq.n	8016518 <GUI_GetMessage+0x4c>
 80164fa:	e00a      	b.n	8016512 <GUI_GetMessage+0x46>
    cursor = 0U;
 80164fc:	4b72      	ldr	r3, [pc, #456]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80164fe:	2200      	movs	r2, #0
 8016500:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 8016502:	4b73      	ldr	r3, [pc, #460]	; (80166d0 <GUI_GetMessage+0x204>)
 8016504:	2200      	movs	r2, #0
 8016506:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8016508:	4b72      	ldr	r3, [pc, #456]	; (80166d4 <GUI_GetMessage+0x208>)
 801650a:	2200      	movs	r2, #0
 801650c:	701a      	strb	r2, [r3, #0]
    return 0;
 801650e:	2300      	movs	r3, #0
 8016510:	e0d4      	b.n	80166bc <GUI_GetMessage+0x1f0>
  {
    Rstate = Rerror;
 8016512:	4b70      	ldr	r3, [pc, #448]	; (80166d4 <GUI_GetMessage+0x208>)
 8016514:	2204      	movs	r2, #4
 8016516:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8016518:	4b6e      	ldr	r3, [pc, #440]	; (80166d4 <GUI_GetMessage+0x208>)
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	2b04      	cmp	r3, #4
 801651e:	f200 80bd 	bhi.w	801669c <GUI_GetMessage+0x1d0>
 8016522:	a201      	add	r2, pc, #4	; (adr r2, 8016528 <GUI_GetMessage+0x5c>)
 8016524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016528:	0801653d 	.word	0x0801653d
 801652c:	080165d7 	.word	0x080165d7
 8016530:	0801657f 	.word	0x0801657f
 8016534:	080165fd 	.word	0x080165fd
 8016538:	08016687 	.word	0x08016687
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 801653c:	4b62      	ldr	r3, [pc, #392]	; (80166c8 <GUI_GetMessage+0x1fc>)
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	461a      	mov	r2, r3
 8016542:	4b62      	ldr	r3, [pc, #392]	; (80166cc <GUI_GetMessage+0x200>)
 8016544:	5c9b      	ldrb	r3, [r3, r2]
 8016546:	2bfd      	cmp	r3, #253	; 0xfd
 8016548:	d106      	bne.n	8016558 <GUI_GetMessage+0x8c>
      {
        counter++;
 801654a:	4b61      	ldr	r3, [pc, #388]	; (80166d0 <GUI_GetMessage+0x204>)
 801654c:	881b      	ldrh	r3, [r3, #0]
 801654e:	3301      	adds	r3, #1
 8016550:	b29a      	uxth	r2, r3
 8016552:	4b5f      	ldr	r3, [pc, #380]	; (80166d0 <GUI_GetMessage+0x204>)
 8016554:	801a      	strh	r2, [r3, #0]
 8016556:	e006      	b.n	8016566 <GUI_GetMessage+0x9a>
      }
      else
      {
        counter = 0U;
 8016558:	4b5d      	ldr	r3, [pc, #372]	; (80166d0 <GUI_GetMessage+0x204>)
 801655a:	2200      	movs	r2, #0
 801655c:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 801655e:	4b5a      	ldr	r3, [pc, #360]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016564:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 8016566:	4b5a      	ldr	r3, [pc, #360]	; (80166d0 <GUI_GetMessage+0x204>)
 8016568:	881b      	ldrh	r3, [r3, #0]
 801656a:	2b04      	cmp	r3, #4
 801656c:	f040 8098 	bne.w	80166a0 <GUI_GetMessage+0x1d4>
      {
        counter = 0U;
 8016570:	4b57      	ldr	r3, [pc, #348]	; (80166d0 <GUI_GetMessage+0x204>)
 8016572:	2200      	movs	r2, #0
 8016574:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 8016576:	4b57      	ldr	r3, [pc, #348]	; (80166d4 <GUI_GetMessage+0x208>)
 8016578:	2202      	movs	r2, #2
 801657a:	701a      	strb	r2, [r3, #0]
      }
      break;
 801657c:	e090      	b.n	80166a0 <GUI_GetMessage+0x1d4>
    case Rsize :
      counter++;
 801657e:	4b54      	ldr	r3, [pc, #336]	; (80166d0 <GUI_GetMessage+0x204>)
 8016580:	881b      	ldrh	r3, [r3, #0]
 8016582:	3301      	adds	r3, #1
 8016584:	b29a      	uxth	r2, r3
 8016586:	4b52      	ldr	r3, [pc, #328]	; (80166d0 <GUI_GetMessage+0x204>)
 8016588:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 801658a:	4b51      	ldr	r3, [pc, #324]	; (80166d0 <GUI_GetMessage+0x204>)
 801658c:	881b      	ldrh	r3, [r3, #0]
 801658e:	2b03      	cmp	r3, #3
 8016590:	f040 8088 	bne.w	80166a4 <GUI_GetMessage+0x1d8>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 8016594:	4b4c      	ldr	r3, [pc, #304]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	3b01      	subs	r3, #1
 801659a:	4a4c      	ldr	r2, [pc, #304]	; (80166cc <GUI_GetMessage+0x200>)
 801659c:	5cd3      	ldrb	r3, [r2, r3]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	021b      	lsls	r3, r3, #8
 80165a2:	b29a      	uxth	r2, r3
 80165a4:	4b48      	ldr	r3, [pc, #288]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	4619      	mov	r1, r3
 80165aa:	4b48      	ldr	r3, [pc, #288]	; (80166cc <GUI_GetMessage+0x200>)
 80165ac:	5c5b      	ldrb	r3, [r3, r1]
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	4413      	add	r3, r2
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	4b48      	ldr	r3, [pc, #288]	; (80166d8 <GUI_GetMessage+0x20c>)
 80165b6:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 80165b8:	4b47      	ldr	r3, [pc, #284]	; (80166d8 <GUI_GetMessage+0x20c>)
 80165ba:	881b      	ldrh	r3, [r3, #0]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d103      	bne.n	80165c8 <GUI_GetMessage+0xfc>
        {
          Rstate = Rend;
 80165c0:	4b44      	ldr	r3, [pc, #272]	; (80166d4 <GUI_GetMessage+0x208>)
 80165c2:	2203      	movs	r2, #3
 80165c4:	701a      	strb	r2, [r3, #0]
 80165c6:	e002      	b.n	80165ce <GUI_GetMessage+0x102>
        }
        else
        {
          Rstate = RonGoing;
 80165c8:	4b42      	ldr	r3, [pc, #264]	; (80166d4 <GUI_GetMessage+0x208>)
 80165ca:	2201      	movs	r2, #1
 80165cc:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 80165ce:	4b40      	ldr	r3, [pc, #256]	; (80166d0 <GUI_GetMessage+0x204>)
 80165d0:	2200      	movs	r2, #0
 80165d2:	801a      	strh	r2, [r3, #0]
      }
      break;
 80165d4:	e066      	b.n	80166a4 <GUI_GetMessage+0x1d8>
    case RonGoing :
      counter++;
 80165d6:	4b3e      	ldr	r3, [pc, #248]	; (80166d0 <GUI_GetMessage+0x204>)
 80165d8:	881b      	ldrh	r3, [r3, #0]
 80165da:	3301      	adds	r3, #1
 80165dc:	b29a      	uxth	r2, r3
 80165de:	4b3c      	ldr	r3, [pc, #240]	; (80166d0 <GUI_GetMessage+0x204>)
 80165e0:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 80165e2:	4b3b      	ldr	r3, [pc, #236]	; (80166d0 <GUI_GetMessage+0x204>)
 80165e4:	881a      	ldrh	r2, [r3, #0]
 80165e6:	4b3c      	ldr	r3, [pc, #240]	; (80166d8 <GUI_GetMessage+0x20c>)
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d15c      	bne.n	80166a8 <GUI_GetMessage+0x1dc>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 80165ee:	4b38      	ldr	r3, [pc, #224]	; (80166d0 <GUI_GetMessage+0x204>)
 80165f0:	2200      	movs	r2, #0
 80165f2:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 80165f4:	4b37      	ldr	r3, [pc, #220]	; (80166d4 <GUI_GetMessage+0x208>)
 80165f6:	2203      	movs	r2, #3
 80165f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80165fa:	e055      	b.n	80166a8 <GUI_GetMessage+0x1dc>
    case Rend :
      counter++;
 80165fc:	4b34      	ldr	r3, [pc, #208]	; (80166d0 <GUI_GetMessage+0x204>)
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	3301      	adds	r3, #1
 8016602:	b29a      	uxth	r2, r3
 8016604:	4b32      	ldr	r3, [pc, #200]	; (80166d0 <GUI_GetMessage+0x204>)
 8016606:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 8016608:	4b2f      	ldr	r3, [pc, #188]	; (80166c8 <GUI_GetMessage+0x1fc>)
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	461a      	mov	r2, r3
 801660e:	4b2f      	ldr	r3, [pc, #188]	; (80166cc <GUI_GetMessage+0x200>)
 8016610:	5c9b      	ldrb	r3, [r3, r2]
 8016612:	2ba5      	cmp	r3, #165	; 0xa5
 8016614:	d124      	bne.n	8016660 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 8016616:	4b2c      	ldr	r3, [pc, #176]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	3b01      	subs	r3, #1
 801661c:	4a2b      	ldr	r2, [pc, #172]	; (80166cc <GUI_GetMessage+0x200>)
 801661e:	5cd3      	ldrb	r3, [r2, r3]
 8016620:	2ba5      	cmp	r3, #165	; 0xa5
 8016622:	d11d      	bne.n	8016660 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8016624:	4b28      	ldr	r3, [pc, #160]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016626:	881b      	ldrh	r3, [r3, #0]
 8016628:	3b02      	subs	r3, #2
 801662a:	4a28      	ldr	r2, [pc, #160]	; (80166cc <GUI_GetMessage+0x200>)
 801662c:	5cd3      	ldrb	r3, [r2, r3]
 801662e:	2ba5      	cmp	r3, #165	; 0xa5
 8016630:	d116      	bne.n	8016660 <GUI_GetMessage+0x194>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8016632:	4b25      	ldr	r3, [pc, #148]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016634:	881b      	ldrh	r3, [r3, #0]
 8016636:	3b03      	subs	r3, #3
 8016638:	4a24      	ldr	r2, [pc, #144]	; (80166cc <GUI_GetMessage+0x200>)
 801663a:	5cd3      	ldrb	r3, [r2, r3]
 801663c:	2ba5      	cmp	r3, #165	; 0xa5
 801663e:	d10f      	bne.n	8016660 <GUI_GetMessage+0x194>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 8016640:	4b23      	ldr	r3, [pc, #140]	; (80166d0 <GUI_GetMessage+0x204>)
 8016642:	881b      	ldrh	r3, [r3, #0]
 8016644:	2b04      	cmp	r3, #4
 8016646:	d101      	bne.n	801664c <GUI_GetMessage+0x180>
        {
          status = 1U;
 8016648:	2301      	movs	r3, #1
 801664a:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 801664c:	4b20      	ldr	r3, [pc, #128]	; (80166d0 <GUI_GetMessage+0x204>)
 801664e:	2200      	movs	r2, #0
 8016650:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016652:	4b1d      	ldr	r3, [pc, #116]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016658:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801665a:	4b1e      	ldr	r3, [pc, #120]	; (80166d4 <GUI_GetMessage+0x208>)
 801665c:	2200      	movs	r2, #0
 801665e:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 8016660:	4b19      	ldr	r3, [pc, #100]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016662:	881b      	ldrh	r3, [r3, #0]
 8016664:	461a      	mov	r2, r3
 8016666:	4b1c      	ldr	r3, [pc, #112]	; (80166d8 <GUI_GetMessage+0x20c>)
 8016668:	881b      	ldrh	r3, [r3, #0]
 801666a:	330b      	adds	r3, #11
 801666c:	429a      	cmp	r2, r3
 801666e:	d11d      	bne.n	80166ac <GUI_GetMessage+0x1e0>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 8016670:	4b17      	ldr	r3, [pc, #92]	; (80166d0 <GUI_GetMessage+0x204>)
 8016672:	2200      	movs	r2, #0
 8016674:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016676:	4b14      	ldr	r3, [pc, #80]	; (80166c8 <GUI_GetMessage+0x1fc>)
 8016678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801667c:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801667e:	4b15      	ldr	r3, [pc, #84]	; (80166d4 <GUI_GetMessage+0x208>)
 8016680:	2200      	movs	r2, #0
 8016682:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016684:	e012      	b.n	80166ac <GUI_GetMessage+0x1e0>
    case Rerror :
      counter = 0U;
 8016686:	4b12      	ldr	r3, [pc, #72]	; (80166d0 <GUI_GetMessage+0x204>)
 8016688:	2200      	movs	r2, #0
 801668a:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 801668c:	4b0e      	ldr	r3, [pc, #56]	; (80166c8 <GUI_GetMessage+0x1fc>)
 801668e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016692:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 8016694:	4b0f      	ldr	r3, [pc, #60]	; (80166d4 <GUI_GetMessage+0x208>)
 8016696:	2200      	movs	r2, #0
 8016698:	701a      	strb	r2, [r3, #0]
      break;
 801669a:	e008      	b.n	80166ae <GUI_GetMessage+0x1e2>
    default:
      break;
 801669c:	bf00      	nop
 801669e:	e006      	b.n	80166ae <GUI_GetMessage+0x1e2>
      break;
 80166a0:	bf00      	nop
 80166a2:	e004      	b.n	80166ae <GUI_GetMessage+0x1e2>
      break;
 80166a4:	bf00      	nop
 80166a6:	e002      	b.n	80166ae <GUI_GetMessage+0x1e2>
      break;
 80166a8:	bf00      	nop
 80166aa:	e000      	b.n	80166ae <GUI_GetMessage+0x1e2>
      break;
 80166ac:	bf00      	nop
  }

  cursor++;
 80166ae:	4b06      	ldr	r3, [pc, #24]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80166b0:	881b      	ldrh	r3, [r3, #0]
 80166b2:	3301      	adds	r3, #1
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	4b04      	ldr	r3, [pc, #16]	; (80166c8 <GUI_GetMessage+0x1fc>)
 80166b8:	801a      	strh	r2, [r3, #0]
  return status;
 80166ba:	68fb      	ldr	r3, [r7, #12]
}
 80166bc:	4618      	mov	r0, r3
 80166be:	3714      	adds	r7, #20
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr
 80166c8:	20002ec6 	.word	0x20002ec6
 80166cc:	20002c34 	.word	0x20002c34
 80166d0:	20002ec8 	.word	0x20002ec8
 80166d4:	20002eca 	.word	0x20002eca
 80166d8:	20002ecc 	.word	0x20002ecc

080166dc <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 80166e6:	4b6e      	ldr	r3, [pc, #440]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 80166e8:	791b      	ldrb	r3, [r3, #4]
 80166ea:	095b      	lsrs	r3, r3, #5
 80166ec:	73fb      	strb	r3, [r7, #15]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 80166ee:	4b6c      	ldr	r3, [pc, #432]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 80166f0:	791b      	ldrb	r3, [r3, #4]
 80166f2:	f003 031f 	and.w	r3, r3, #31
 80166f6:	3b01      	subs	r3, #1
 80166f8:	2b0f      	cmp	r3, #15
 80166fa:	f200 80bd 	bhi.w	8016878 <GUI_SendAnswer+0x19c>
 80166fe:	a201      	add	r2, pc, #4	; (adr r2, 8016704 <GUI_SendAnswer+0x28>)
 8016700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016704:	08016745 	.word	0x08016745
 8016708:	08016749 	.word	0x08016749
 801670c:	08016879 	.word	0x08016879
 8016710:	08016797 	.word	0x08016797
 8016714:	08016879 	.word	0x08016879
 8016718:	080167bd 	.word	0x080167bd
 801671c:	08016879 	.word	0x08016879
 8016720:	08016879 	.word	0x08016879
 8016724:	080167e3 	.word	0x080167e3
 8016728:	08016879 	.word	0x08016879
 801672c:	08016879 	.word	0x08016879
 8016730:	08016879 	.word	0x08016879
 8016734:	08016879 	.word	0x08016879
 8016738:	08016809 	.word	0x08016809
 801673c:	08016879 	.word	0x08016879
 8016740:	08016853 	.word	0x08016853
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8016744:	2302      	movs	r3, #2
 8016746:	e0a6      	b.n	8016896 <GUI_SendAnswer+0x1ba>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8016748:	7bfb      	ldrb	r3, [r7, #15]
 801674a:	4956      	ldr	r1, [pc, #344]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 801674c:	4618      	mov	r0, r3
 801674e:	f000 fe21 	bl	8017394 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	4a53      	ldr	r2, [pc, #332]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016756:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8016758:	4852      	ldr	r0, [pc, #328]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 801675a:	f7ff fc1d 	bl	8015f98 <TLV_get_string_length>
 801675e:	4603      	mov	r3, r0
 8016760:	b2db      	uxtb	r3, r3
 8016762:	3308      	adds	r3, #8
 8016764:	b2da      	uxtb	r2, r3
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	681a      	ldr	r2, [r3, #0]
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	4619      	mov	r1, r3
 8016774:	4610      	mov	r0, r2
 8016776:	f002 fd8f 	bl	8019298 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 801677a:	4b4b      	ldr	r3, [pc, #300]	; (80168a8 <GUI_SendAnswer+0x1cc>)
 801677c:	2201      	movs	r2, #1
 801677e:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 8016780:	7bfb      	ldrb	r3, [r7, #15]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d105      	bne.n	8016792 <GUI_SendAnswer+0xb6>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 8016786:	2278      	movs	r2, #120	; 0x78
 8016788:	f246 0120 	movw	r1, #24608	; 0x6020
 801678c:	2000      	movs	r0, #0
 801678e:	f7ff fe7d 	bl	801648c <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 8016792:	2300      	movs	r3, #0
 8016794:	e07f      	b.n	8016896 <GUI_SendAnswer+0x1ba>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 8016796:	7bfb      	ldrb	r3, [r7, #15]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d008      	beq.n	80167ae <GUI_SendAnswer+0xd2>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 801679c:	7bfb      	ldrb	r3, [r7, #15]
 801679e:	3b01      	subs	r3, #1
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	4a40      	ldr	r2, [pc, #256]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 80167a4:	493e      	ldr	r1, [pc, #248]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 80167a6:	4618      	mov	r0, r3
 80167a8:	f001 feaa 	bl	8018500 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80167ac:	e065      	b.n	801687a <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80167ae:	7bfb      	ldrb	r3, [r7, #15]
 80167b0:	2205      	movs	r2, #5
 80167b2:	493c      	ldr	r1, [pc, #240]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 80167b4:	4618      	mov	r0, r3
 80167b6:	f002 f977 	bl	8018aa8 <Send_DpmConfigGetRej>
      break;
 80167ba:	e05e      	b.n	801687a <GUI_SendAnswer+0x19e>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d008      	beq.n	80167d4 <GUI_SendAnswer+0xf8>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 80167c2:	7bfb      	ldrb	r3, [r7, #15]
 80167c4:	3b01      	subs	r3, #1
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	4a36      	ldr	r2, [pc, #216]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 80167ca:	4935      	ldr	r1, [pc, #212]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 80167cc:	4618      	mov	r0, r3
 80167ce:	f001 fa85 	bl	8017cdc <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80167d2:	e052      	b.n	801687a <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80167d4:	7bfb      	ldrb	r3, [r7, #15]
 80167d6:	2205      	movs	r2, #5
 80167d8:	4932      	ldr	r1, [pc, #200]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 80167da:	4618      	mov	r0, r3
 80167dc:	f002 f964 	bl	8018aa8 <Send_DpmConfigGetRej>
      break;
 80167e0:	e04b      	b.n	801687a <GUI_SendAnswer+0x19e>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d008      	beq.n	80167fa <GUI_SendAnswer+0x11e>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 80167e8:	7bfb      	ldrb	r3, [r7, #15]
 80167ea:	3b01      	subs	r3, #1
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	4a2d      	ldr	r2, [pc, #180]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 80167f0:	492b      	ldr	r1, [pc, #172]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 80167f2:	4618      	mov	r0, r3
 80167f4:	f000 ff80 	bl	80176f8 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80167f8:	e03f      	b.n	801687a <GUI_SendAnswer+0x19e>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80167fa:	7bfb      	ldrb	r3, [r7, #15]
 80167fc:	2205      	movs	r2, #5
 80167fe:	4929      	ldr	r1, [pc, #164]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016800:	4618      	mov	r0, r3
 8016802:	f002 f971 	bl	8018ae8 <Send_DpmMessageRej>
      break;
 8016806:	e038      	b.n	801687a <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 8016808:	7bfb      	ldrb	r3, [r7, #15]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d01a      	beq.n	8016844 <GUI_SendAnswer+0x168>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 801680e:	4b24      	ldr	r3, [pc, #144]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 8016810:	795b      	ldrb	r3, [r3, #5]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d10c      	bne.n	8016830 <GUI_SendAnswer+0x154>
 8016816:	4b22      	ldr	r3, [pc, #136]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 8016818:	799b      	ldrb	r3, [r3, #6]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d108      	bne.n	8016830 <GUI_SendAnswer+0x154>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 801681e:	7bfb      	ldrb	r3, [r7, #15]
 8016820:	3b01      	subs	r3, #1
 8016822:	b2db      	uxtb	r3, r3
 8016824:	22ff      	movs	r2, #255	; 0xff
 8016826:	491f      	ldr	r1, [pc, #124]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016828:	4618      	mov	r0, r3
 801682a:	f002 f97d 	bl	8018b28 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801682e:	e024      	b.n	801687a <GUI_SendAnswer+0x19e>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 8016830:	7bfb      	ldrb	r3, [r7, #15]
 8016832:	3b01      	subs	r3, #1
 8016834:	b2db      	uxtb	r3, r3
 8016836:	4a1a      	ldr	r2, [pc, #104]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 8016838:	79d2      	ldrb	r2, [r2, #7]
 801683a:	491a      	ldr	r1, [pc, #104]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 801683c:	4618      	mov	r0, r3
 801683e:	f002 f973 	bl	8018b28 <Send_DpmRegisterReadCnf>
      break;
 8016842:	e01a      	b.n	801687a <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016844:	7bfb      	ldrb	r3, [r7, #15]
 8016846:	2205      	movs	r2, #5
 8016848:	4916      	ldr	r1, [pc, #88]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 801684a:	4618      	mov	r0, r3
 801684c:	f002 f92c 	bl	8018aa8 <Send_DpmConfigGetRej>
      break;
 8016850:	e013      	b.n	801687a <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 8016852:	7bfb      	ldrb	r3, [r7, #15]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d008      	beq.n	801686a <GUI_SendAnswer+0x18e>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 8016858:	7bfb      	ldrb	r3, [r7, #15]
 801685a:	3b01      	subs	r3, #1
 801685c:	b2db      	uxtb	r3, r3
 801685e:	4a10      	ldr	r2, [pc, #64]	; (80168a0 <GUI_SendAnswer+0x1c4>)
 8016860:	4910      	ldr	r1, [pc, #64]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016862:	4618      	mov	r0, r3
 8016864:	f002 fab8 	bl	8018dd8 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016868:	e007      	b.n	801687a <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801686a:	7bfb      	ldrb	r3, [r7, #15]
 801686c:	2205      	movs	r2, #5
 801686e:	490d      	ldr	r1, [pc, #52]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016870:	4618      	mov	r0, r3
 8016872:	f002 f919 	bl	8018aa8 <Send_DpmConfigGetRej>
      break;
 8016876:	e000      	b.n	801687a <GUI_SendAnswer+0x19e>
    default :
      break;
 8016878:	bf00      	nop
  }

  *pMsgToSend = Processed;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	4a09      	ldr	r2, [pc, #36]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 801687e:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8016880:	4808      	ldr	r0, [pc, #32]	; (80168a4 <GUI_SendAnswer+0x1c8>)
 8016882:	f7ff fb89 	bl	8015f98 <TLV_get_string_length>
 8016886:	4603      	mov	r3, r0
 8016888:	b2db      	uxtb	r3, r3
 801688a:	3308      	adds	r3, #8
 801688c:	b2da      	uxtb	r2, r3
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8016892:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <GUI_SendAnswer+0x1cc>)
 8016894:	781b      	ldrb	r3, [r3, #0]
}
 8016896:	4618      	mov	r0, r3
 8016898:	3710      	adds	r7, #16
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	20002c34 	.word	0x20002c34
 80168a4:	20002d34 	.word	0x20002d34
 80168a8:	20002e34 	.word	0x20002e34

080168ac <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b0a6      	sub	sp, #152	; 0x98
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	60b9      	str	r1, [r7, #8]
 80168b4:	607a      	str	r2, [r7, #4]
 80168b6:	603b      	str	r3, [r7, #0]
 80168b8:	4603      	mov	r3, r0
 80168ba:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 80168bc:	2300      	movs	r3, #0
 80168be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80168c2:	4bd6      	ldr	r3, [pc, #856]	; (8016c1c <GUI_SendNotification+0x370>)
 80168c4:	781b      	ldrb	r3, [r3, #0]
 80168c6:	2b01      	cmp	r3, #1
 80168c8:	f040 8406 	bne.w	80170d8 <GUI_SendNotification+0x82c>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 80168cc:	7bfb      	ldrb	r3, [r7, #15]
 80168ce:	3301      	adds	r3, #1
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	015b      	lsls	r3, r3, #5
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	f043 030c 	orr.w	r3, r3, #12
 80168da:	b2d9      	uxtb	r1, r3
 80168dc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80168e0:	4bcf      	ldr	r3, [pc, #828]	; (8016c20 <GUI_SendNotification+0x374>)
 80168e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80168e6:	f7ff f902 	bl	8015aee <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	f003 0320 	and.w	r3, r3, #32
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	f000 8087 	beq.w	8016a04 <GUI_SendNotification+0x158>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 80168f6:	7bfb      	ldrb	r3, [r7, #15]
 80168f8:	4aca      	ldr	r2, [pc, #808]	; (8016c24 <GUI_SendNotification+0x378>)
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	4413      	add	r3, r2
 80168fe:	785b      	ldrb	r3, [r3, #1]
 8016900:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016904:	b2db      	uxtb	r3, r3
 8016906:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801690a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801690e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016912:	2201      	movs	r2, #1
 8016914:	2105      	movs	r1, #5
 8016916:	f7ff f943 	bl	8015ba0 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801691a:	7bfb      	ldrb	r3, [r7, #15]
 801691c:	4ac1      	ldr	r2, [pc, #772]	; (8016c24 <GUI_SendNotification+0x378>)
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	4413      	add	r3, r2
 8016922:	785b      	ldrb	r3, [r3, #1]
 8016924:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016928:	b2db      	uxtb	r3, r3
 801692a:	2b01      	cmp	r3, #1
 801692c:	d16a      	bne.n	8016a04 <GUI_SendNotification+0x158>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801692e:	7bfb      	ldrb	r3, [r7, #15]
 8016930:	4abc      	ldr	r2, [pc, #752]	; (8016c24 <GUI_SendNotification+0x378>)
 8016932:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016936:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801693a:	b2db      	uxtb	r3, r3
 801693c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8016940:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8016944:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016948:	2201      	movs	r2, #1
 801694a:	2106      	movs	r1, #6
 801694c:	f7ff f928 	bl	8015ba0 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016950:	7bfb      	ldrb	r3, [r7, #15]
 8016952:	4ab4      	ldr	r2, [pc, #720]	; (8016c24 <GUI_SendNotification+0x378>)
 8016954:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016958:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801695c:	b2db      	uxtb	r3, r3
 801695e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016962:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016966:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801696a:	2201      	movs	r2, #1
 801696c:	2108      	movs	r1, #8
 801696e:	f7ff f917 	bl	8015ba0 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 8016972:	2303      	movs	r3, #3
 8016974:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 8016978:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 801697c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016980:	2201      	movs	r2, #1
 8016982:	2109      	movs	r1, #9
 8016984:	f7ff f90c 	bl	8015ba0 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 8016988:	7bfb      	ldrb	r3, [r7, #15]
 801698a:	4aa6      	ldr	r2, [pc, #664]	; (8016c24 <GUI_SendNotification+0x378>)
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	4413      	add	r3, r2
 8016990:	785b      	ldrb	r3, [r3, #1]
 8016992:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016996:	b2db      	uxtb	r3, r3
 8016998:	2b03      	cmp	r3, #3
 801699a:	d133      	bne.n	8016a04 <GUI_SendNotification+0x158>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801699c:	7bfb      	ldrb	r3, [r7, #15]
 801699e:	4aa1      	ldr	r2, [pc, #644]	; (8016c24 <GUI_SendNotification+0x378>)
 80169a0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80169a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80169ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80169b2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80169b6:	2201      	movs	r2, #1
 80169b8:	2107      	movs	r1, #7
 80169ba:	f7ff f8f1 	bl	8015ba0 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80169be:	7bfb      	ldrb	r3, [r7, #15]
 80169c0:	4a98      	ldr	r2, [pc, #608]	; (8016c24 <GUI_SendNotification+0x378>)
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	4413      	add	r3, r2
 80169c6:	785b      	ldrb	r3, [r3, #1]
 80169c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 80169d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80169d6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80169da:	2201      	movs	r2, #1
 80169dc:	210a      	movs	r1, #10
 80169de:	f7ff f8df 	bl	8015ba0 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80169e2:	7bfb      	ldrb	r3, [r7, #15]
 80169e4:	4a8f      	ldr	r2, [pc, #572]	; (8016c24 <GUI_SendNotification+0x378>)
 80169e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80169ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80169f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80169f8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80169fc:	2201      	movs	r2, #1
 80169fe:	210d      	movs	r1, #13
 8016a00:	f7ff f8ce 	bl	8015ba0 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f000 82bd 	beq.w	8016f8a <GUI_SendNotification+0x6de>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 8016a10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016a14:	2b78      	cmp	r3, #120	; 0x78
 8016a16:	f000 8215 	beq.w	8016e44 <GUI_SendNotification+0x598>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 8016a1a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016a22:	2201      	movs	r2, #1
 8016a24:	210e      	movs	r1, #14
 8016a26:	f7ff f8bb 	bl	8015ba0 <TLV_add>

        switch (Value)
 8016a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016a2e:	2b42      	cmp	r3, #66	; 0x42
 8016a30:	f200 8082 	bhi.w	8016b38 <GUI_SendNotification+0x28c>
 8016a34:	2b07      	cmp	r3, #7
 8016a36:	f0c0 82a5 	bcc.w	8016f84 <GUI_SendNotification+0x6d8>
 8016a3a:	3b07      	subs	r3, #7
 8016a3c:	2b3b      	cmp	r3, #59	; 0x3b
 8016a3e:	f200 82a1 	bhi.w	8016f84 <GUI_SendNotification+0x6d8>
 8016a42:	a201      	add	r2, pc, #4	; (adr r2, 8016a48 <GUI_SendNotification+0x19c>)
 8016a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a48:	08016bbf 	.word	0x08016bbf
 8016a4c:	08016f85 	.word	0x08016f85
 8016a50:	08016f85 	.word	0x08016f85
 8016a54:	08016f85 	.word	0x08016f85
 8016a58:	08016f85 	.word	0x08016f85
 8016a5c:	08016f85 	.word	0x08016f85
 8016a60:	08016c2d 	.word	0x08016c2d
 8016a64:	08016f85 	.word	0x08016f85
 8016a68:	08016f85 	.word	0x08016f85
 8016a6c:	08016c89 	.word	0x08016c89
 8016a70:	08016f85 	.word	0x08016f85
 8016a74:	08016f85 	.word	0x08016f85
 8016a78:	08016f85 	.word	0x08016f85
 8016a7c:	08016da9 	.word	0x08016da9
 8016a80:	08016da9 	.word	0x08016da9
 8016a84:	08016f85 	.word	0x08016f85
 8016a88:	08016f85 	.word	0x08016f85
 8016a8c:	08016f85 	.word	0x08016f85
 8016a90:	08016f85 	.word	0x08016f85
 8016a94:	08016f85 	.word	0x08016f85
 8016a98:	08016f85 	.word	0x08016f85
 8016a9c:	08016f85 	.word	0x08016f85
 8016aa0:	08016f85 	.word	0x08016f85
 8016aa4:	08016f85 	.word	0x08016f85
 8016aa8:	08016f85 	.word	0x08016f85
 8016aac:	08016f85 	.word	0x08016f85
 8016ab0:	08016f85 	.word	0x08016f85
 8016ab4:	08016f85 	.word	0x08016f85
 8016ab8:	08016f85 	.word	0x08016f85
 8016abc:	08016dcd 	.word	0x08016dcd
 8016ac0:	08016dcd 	.word	0x08016dcd
 8016ac4:	08016f85 	.word	0x08016f85
 8016ac8:	08016f85 	.word	0x08016f85
 8016acc:	08016f85 	.word	0x08016f85
 8016ad0:	08016f85 	.word	0x08016f85
 8016ad4:	08016f85 	.word	0x08016f85
 8016ad8:	08016f85 	.word	0x08016f85
 8016adc:	08016f85 	.word	0x08016f85
 8016ae0:	08016f85 	.word	0x08016f85
 8016ae4:	08016f85 	.word	0x08016f85
 8016ae8:	08016f85 	.word	0x08016f85
 8016aec:	08016f85 	.word	0x08016f85
 8016af0:	08016f85 	.word	0x08016f85
 8016af4:	08016f85 	.word	0x08016f85
 8016af8:	08016f85 	.word	0x08016f85
 8016afc:	08016f85 	.word	0x08016f85
 8016b00:	08016f85 	.word	0x08016f85
 8016b04:	08016f85 	.word	0x08016f85
 8016b08:	08016f85 	.word	0x08016f85
 8016b0c:	08016df1 	.word	0x08016df1
 8016b10:	08016f85 	.word	0x08016f85
 8016b14:	08016f85 	.word	0x08016f85
 8016b18:	08016f85 	.word	0x08016f85
 8016b1c:	08016f85 	.word	0x08016f85
 8016b20:	08016f85 	.word	0x08016f85
 8016b24:	08016f85 	.word	0x08016f85
 8016b28:	08016f85 	.word	0x08016f85
 8016b2c:	08016f85 	.word	0x08016f85
 8016b30:	08016f85 	.word	0x08016f85
 8016b34:	08016e15 	.word	0x08016e15
 8016b38:	2b5a      	cmp	r3, #90	; 0x5a
 8016b3a:	f040 8223 	bne.w	8016f84 <GUI_SendNotification+0x6d8>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8016b3e:	7bfb      	ldrb	r3, [r7, #15]
 8016b40:	4a38      	ldr	r2, [pc, #224]	; (8016c24 <GUI_SendNotification+0x378>)
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	4413      	add	r3, r2
 8016b46:	785b      	ldrb	r3, [r3, #1]
 8016b48:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8016b52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016b56:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	2105      	movs	r1, #5
 8016b5e:	f7ff f81f 	bl	8015ba0 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8016b62:	7bfb      	ldrb	r3, [r7, #15]
 8016b64:	4a2f      	ldr	r2, [pc, #188]	; (8016c24 <GUI_SendNotification+0x378>)
 8016b66:	009b      	lsls	r3, r3, #2
 8016b68:	4413      	add	r3, r2
 8016b6a:	785b      	ldrb	r3, [r3, #1]
 8016b6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	f040 8208 	bne.w	8016f88 <GUI_SendNotification+0x6dc>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8016b78:	7bfb      	ldrb	r3, [r7, #15]
 8016b7a:	4a2a      	ldr	r2, [pc, #168]	; (8016c24 <GUI_SendNotification+0x378>)
 8016b7c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016b80:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8016b84:	b2db      	uxtb	r3, r3
 8016b86:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8016b8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b8e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016b92:	2201      	movs	r2, #1
 8016b94:	2106      	movs	r1, #6
 8016b96:	f7ff f803 	bl	8015ba0 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016b9a:	7bfb      	ldrb	r3, [r7, #15]
 8016b9c:	4a21      	ldr	r2, [pc, #132]	; (8016c24 <GUI_SendNotification+0x378>)
 8016b9e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016ba2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016bb0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	2108      	movs	r1, #8
 8016bb8:	f7fe fff2 	bl	8015ba0 <TLV_add>
            }
            break;
 8016bbc:	e1e4      	b.n	8016f88 <GUI_SendNotification+0x6dc>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8016bbe:	7bfa      	ldrb	r2, [r7, #15]
 8016bc0:	4919      	ldr	r1, [pc, #100]	; (8016c28 <GUI_SendNotification+0x37c>)
 8016bc2:	4613      	mov	r3, r2
 8016bc4:	00db      	lsls	r3, r3, #3
 8016bc6:	1a9b      	subs	r3, r3, r2
 8016bc8:	011b      	lsls	r3, r3, #4
 8016bca:	440b      	add	r3, r1
 8016bcc:	333c      	adds	r3, #60	; 0x3c
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8016bd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016bda:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016bde:	2201      	movs	r2, #1
 8016be0:	2100      	movs	r1, #0
 8016be2:	f7fe ffdd 	bl	8015ba0 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8016be6:	7bfa      	ldrb	r2, [r7, #15]
 8016be8:	490f      	ldr	r1, [pc, #60]	; (8016c28 <GUI_SendNotification+0x37c>)
 8016bea:	4613      	mov	r3, r2
 8016bec:	00db      	lsls	r3, r3, #3
 8016bee:	1a9b      	subs	r3, r3, r2
 8016bf0:	011b      	lsls	r3, r3, #4
 8016bf2:	440b      	add	r3, r1
 8016bf4:	333c      	adds	r3, #60	; 0x3c
 8016bf6:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8016bfe:	7bfa      	ldrb	r2, [r7, #15]
 8016c00:	4613      	mov	r3, r2
 8016c02:	00db      	lsls	r3, r3, #3
 8016c04:	1a9b      	subs	r3, r3, r2
 8016c06:	011b      	lsls	r3, r3, #4
 8016c08:	3320      	adds	r3, #32
 8016c0a:	4a07      	ldr	r2, [pc, #28]	; (8016c28 <GUI_SendNotification+0x37c>)
 8016c0c:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016c0e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016c12:	460a      	mov	r2, r1
 8016c14:	2104      	movs	r1, #4
 8016c16:	f7fe ffc3 	bl	8015ba0 <TLV_add>
            break;
 8016c1a:	e1b6      	b.n	8016f8a <GUI_SendNotification+0x6de>
 8016c1c:	20002e34 	.word	0x20002e34
 8016c20:	20002d34 	.word	0x20002d34
 8016c24:	20000228 	.word	0x20000228
 8016c28:	20002e54 	.word	0x20002e54
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8016c2c:	7bfa      	ldrb	r2, [r7, #15]
 8016c2e:	4983      	ldr	r1, [pc, #524]	; (8016e3c <GUI_SendNotification+0x590>)
 8016c30:	4613      	mov	r3, r2
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	1a9b      	subs	r3, r3, r2
 8016c36:	011b      	lsls	r3, r3, #4
 8016c38:	440b      	add	r3, r1
 8016c3a:	331c      	adds	r3, #28
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	b2db      	uxtb	r3, r3
 8016c40:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8016c44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016c48:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	2103      	movs	r1, #3
 8016c50:	f7fe ffa6 	bl	8015ba0 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8016c54:	7bfa      	ldrb	r2, [r7, #15]
 8016c56:	4979      	ldr	r1, [pc, #484]	; (8016e3c <GUI_SendNotification+0x590>)
 8016c58:	4613      	mov	r3, r2
 8016c5a:	00db      	lsls	r3, r3, #3
 8016c5c:	1a9b      	subs	r3, r3, r2
 8016c5e:	011b      	lsls	r3, r3, #4
 8016c60:	440b      	add	r3, r1
 8016c62:	331c      	adds	r3, #28
 8016c64:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016c66:	b29b      	uxth	r3, r3
 8016c68:	009b      	lsls	r3, r3, #2
 8016c6a:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8016c6c:	7bfa      	ldrb	r2, [r7, #15]
 8016c6e:	4613      	mov	r3, r2
 8016c70:	00db      	lsls	r3, r3, #3
 8016c72:	1a9b      	subs	r3, r3, r2
 8016c74:	011b      	lsls	r3, r3, #4
 8016c76:	4a71      	ldr	r2, [pc, #452]	; (8016e3c <GUI_SendNotification+0x590>)
 8016c78:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016c7a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016c7e:	460a      	mov	r2, r1
 8016c80:	2102      	movs	r1, #2
 8016c82:	f7fe ff8d 	bl	8015ba0 <TLV_add>
            break;
 8016c86:	e180      	b.n	8016f8a <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8016c88:	7bfb      	ldrb	r3, [r7, #15]
 8016c8a:	4a6d      	ldr	r2, [pc, #436]	; (8016e40 <GUI_SendNotification+0x594>)
 8016c8c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016c94:	b2db      	uxtb	r3, r3
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d12c      	bne.n	8016cf4 <GUI_SendNotification+0x448>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8016c9a:	7bfa      	ldrb	r2, [r7, #15]
 8016c9c:	4967      	ldr	r1, [pc, #412]	; (8016e3c <GUI_SendNotification+0x590>)
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	00db      	lsls	r3, r3, #3
 8016ca2:	1a9b      	subs	r3, r3, r2
 8016ca4:	011b      	lsls	r3, r3, #4
 8016ca6:	440b      	add	r3, r1
 8016ca8:	331c      	adds	r3, #28
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8016cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016cb6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016cba:	2201      	movs	r2, #1
 8016cbc:	2103      	movs	r1, #3
 8016cbe:	f7fe ff6f 	bl	8015ba0 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8016cc2:	7bfa      	ldrb	r2, [r7, #15]
 8016cc4:	495d      	ldr	r1, [pc, #372]	; (8016e3c <GUI_SendNotification+0x590>)
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	1a9b      	subs	r3, r3, r2
 8016ccc:	011b      	lsls	r3, r3, #4
 8016cce:	440b      	add	r3, r1
 8016cd0:	331c      	adds	r3, #28
 8016cd2:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8016cda:	7bfa      	ldrb	r2, [r7, #15]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	1a9b      	subs	r3, r3, r2
 8016ce2:	011b      	lsls	r3, r3, #4
 8016ce4:	4a55      	ldr	r2, [pc, #340]	; (8016e3c <GUI_SendNotification+0x590>)
 8016ce6:	4413      	add	r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016ce8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016cec:	460a      	mov	r2, r1
 8016cee:	2102      	movs	r1, #2
 8016cf0:	f7fe ff56 	bl	8015ba0 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8016cf4:	7bfa      	ldrb	r2, [r7, #15]
 8016cf6:	4951      	ldr	r1, [pc, #324]	; (8016e3c <GUI_SendNotification+0x590>)
 8016cf8:	4613      	mov	r3, r2
 8016cfa:	00db      	lsls	r3, r3, #3
 8016cfc:	1a9b      	subs	r3, r3, r2
 8016cfe:	011b      	lsls	r3, r3, #4
 8016d00:	440b      	add	r3, r1
 8016d02:	3340      	adds	r3, #64	; 0x40
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	b2db      	uxtb	r3, r3
 8016d08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8016d0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016d10:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016d14:	2201      	movs	r2, #1
 8016d16:	2101      	movs	r1, #1
 8016d18:	f7fe ff42 	bl	8015ba0 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8016d1c:	7bfb      	ldrb	r3, [r7, #15]
 8016d1e:	4a48      	ldr	r2, [pc, #288]	; (8016e40 <GUI_SendNotification+0x594>)
 8016d20:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8016d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016d32:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016d36:	2201      	movs	r2, #1
 8016d38:	2107      	movs	r1, #7
 8016d3a:	f7fe ff31 	bl	8015ba0 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016d3e:	7bfb      	ldrb	r3, [r7, #15]
 8016d40:	4a3f      	ldr	r2, [pc, #252]	; (8016e40 <GUI_SendNotification+0x594>)
 8016d42:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016d4a:	b2db      	uxtb	r3, r3
 8016d4c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016d50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016d54:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016d58:	2201      	movs	r2, #1
 8016d5a:	2108      	movs	r1, #8
 8016d5c:	f7fe ff20 	bl	8015ba0 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8016d60:	7bfb      	ldrb	r3, [r7, #15]
 8016d62:	4a37      	ldr	r2, [pc, #220]	; (8016e40 <GUI_SendNotification+0x594>)
 8016d64:	009b      	lsls	r3, r3, #2
 8016d66:	4413      	add	r3, r2
 8016d68:	785b      	ldrb	r3, [r3, #1]
 8016d6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8016d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016d78:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	210a      	movs	r1, #10
 8016d80:	f7fe ff0e 	bl	8015ba0 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8016d84:	7bfb      	ldrb	r3, [r7, #15]
 8016d86:	4a2e      	ldr	r2, [pc, #184]	; (8016e40 <GUI_SendNotification+0x594>)
 8016d88:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d8c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016d90:	b2db      	uxtb	r3, r3
 8016d92:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016d9a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016d9e:	2201      	movs	r2, #1
 8016da0:	210d      	movs	r1, #13
 8016da2:	f7fe fefd 	bl	8015ba0 <TLV_add>
            break;
 8016da6:	e0f0      	b.n	8016f8a <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016da8:	7bfb      	ldrb	r3, [r7, #15]
 8016daa:	4a25      	ldr	r2, [pc, #148]	; (8016e40 <GUI_SendNotification+0x594>)
 8016dac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016db0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016dbe:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	2108      	movs	r1, #8
 8016dc6:	f7fe feeb 	bl	8015ba0 <TLV_add>
            break;
 8016dca:	e0de      	b.n	8016f8a <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8016dcc:	7bfb      	ldrb	r3, [r7, #15]
 8016dce:	4a1c      	ldr	r2, [pc, #112]	; (8016e40 <GUI_SendNotification+0x594>)
 8016dd0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016dd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016dd8:	b2db      	uxtb	r3, r3
 8016dda:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8016dde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016de2:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016de6:	2201      	movs	r2, #1
 8016de8:	2107      	movs	r1, #7
 8016dea:	f7fe fed9 	bl	8015ba0 <TLV_add>
            break;
 8016dee:	e0cc      	b.n	8016f8a <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8016df0:	7bfb      	ldrb	r3, [r7, #15]
 8016df2:	4a13      	ldr	r2, [pc, #76]	; (8016e40 <GUI_SendNotification+0x594>)
 8016df4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016df8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016e06:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016e0a:	2201      	movs	r2, #1
 8016e0c:	210d      	movs	r1, #13
 8016e0e:	f7fe fec7 	bl	8015ba0 <TLV_add>
            break;
 8016e12:	e0ba      	b.n	8016f8a <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8016e14:	7bfb      	ldrb	r3, [r7, #15]
 8016e16:	4a0a      	ldr	r2, [pc, #40]	; (8016e40 <GUI_SendNotification+0x594>)
 8016e18:	009b      	lsls	r3, r3, #2
 8016e1a:	4413      	add	r3, r2
 8016e1c:	785b      	ldrb	r3, [r3, #1]
 8016e1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8016e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016e2c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016e30:	2201      	movs	r2, #1
 8016e32:	210a      	movs	r1, #10
 8016e34:	f7fe feb4 	bl	8015ba0 <TLV_add>
            break;
 8016e38:	e0a7      	b.n	8016f8a <GUI_SendNotification+0x6de>
 8016e3a:	bf00      	nop
 8016e3c:	20002e54 	.word	0x20002e54
 8016e40:	20000228 	.word	0x20000228
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8016e44:	7bfb      	ldrb	r3, [r7, #15]
 8016e46:	4aa7      	ldr	r2, [pc, #668]	; (80170e4 <GUI_SendNotification+0x838>)
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	4413      	add	r3, r2
 8016e4c:	785b      	ldrb	r3, [r3, #1]
 8016e4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	f040 8098 	bne.w	8016f8a <GUI_SendNotification+0x6de>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8016e5a:	7bfa      	ldrb	r2, [r7, #15]
 8016e5c:	49a2      	ldr	r1, [pc, #648]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016e5e:	4613      	mov	r3, r2
 8016e60:	00db      	lsls	r3, r3, #3
 8016e62:	1a9b      	subs	r3, r3, r2
 8016e64:	011b      	lsls	r3, r3, #4
 8016e66:	440b      	add	r3, r1
 8016e68:	333c      	adds	r3, #60	; 0x3c
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d02d      	beq.n	8016ecc <GUI_SendNotification+0x620>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8016e70:	7bfa      	ldrb	r2, [r7, #15]
 8016e72:	499d      	ldr	r1, [pc, #628]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016e74:	4613      	mov	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	1a9b      	subs	r3, r3, r2
 8016e7a:	011b      	lsls	r3, r3, #4
 8016e7c:	440b      	add	r3, r1
 8016e7e:	333c      	adds	r3, #60	; 0x3c
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8016e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e8c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016e90:	2201      	movs	r2, #1
 8016e92:	2100      	movs	r1, #0
 8016e94:	f7fe fe84 	bl	8015ba0 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8016e98:	7bfa      	ldrb	r2, [r7, #15]
 8016e9a:	4993      	ldr	r1, [pc, #588]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	1a9b      	subs	r3, r3, r2
 8016ea2:	011b      	lsls	r3, r3, #4
 8016ea4:	440b      	add	r3, r1
 8016ea6:	333c      	adds	r3, #60	; 0x3c
 8016ea8:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016eaa:	b29b      	uxth	r3, r3
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8016eb0:	7bfa      	ldrb	r2, [r7, #15]
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	00db      	lsls	r3, r3, #3
 8016eb6:	1a9b      	subs	r3, r3, r2
 8016eb8:	011b      	lsls	r3, r3, #4
 8016eba:	3320      	adds	r3, #32
 8016ebc:	4a8a      	ldr	r2, [pc, #552]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016ebe:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016ec0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016ec4:	460a      	mov	r2, r1
 8016ec6:	2104      	movs	r1, #4
 8016ec8:	f7fe fe6a 	bl	8015ba0 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 8016ecc:	7bfa      	ldrb	r2, [r7, #15]
 8016ece:	4986      	ldr	r1, [pc, #536]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	1a9b      	subs	r3, r3, r2
 8016ed6:	011b      	lsls	r3, r3, #4
 8016ed8:	440b      	add	r3, r1
 8016eda:	3340      	adds	r3, #64	; 0x40
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8016ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ee8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016eec:	2201      	movs	r2, #1
 8016eee:	2101      	movs	r1, #1
 8016ef0:	f7fe fe56 	bl	8015ba0 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8016ef4:	7bfb      	ldrb	r3, [r7, #15]
 8016ef6:	4a7b      	ldr	r2, [pc, #492]	; (80170e4 <GUI_SendNotification+0x838>)
 8016ef8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016efc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d12c      	bne.n	8016f60 <GUI_SendNotification+0x6b4>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8016f06:	7bfa      	ldrb	r2, [r7, #15]
 8016f08:	4977      	ldr	r1, [pc, #476]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	00db      	lsls	r3, r3, #3
 8016f0e:	1a9b      	subs	r3, r3, r2
 8016f10:	011b      	lsls	r3, r3, #4
 8016f12:	440b      	add	r3, r1
 8016f14:	331c      	adds	r3, #28
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	f887 3020 	strb.w	r3, [r7, #32]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8016f1e:	f107 0320 	add.w	r3, r7, #32
 8016f22:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016f26:	2201      	movs	r2, #1
 8016f28:	2103      	movs	r1, #3
 8016f2a:	f7fe fe39 	bl	8015ba0 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 8016f2e:	7bfa      	ldrb	r2, [r7, #15]
 8016f30:	496d      	ldr	r1, [pc, #436]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016f32:	4613      	mov	r3, r2
 8016f34:	00db      	lsls	r3, r3, #3
 8016f36:	1a9b      	subs	r3, r3, r2
 8016f38:	011b      	lsls	r3, r3, #4
 8016f3a:	440b      	add	r3, r1
 8016f3c:	331c      	adds	r3, #28
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016f42:	009b      	lsls	r3, r3, #2
 8016f44:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8016f46:	7bfa      	ldrb	r2, [r7, #15]
 8016f48:	4613      	mov	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	1a9b      	subs	r3, r3, r2
 8016f4e:	011b      	lsls	r3, r3, #4
 8016f50:	4a65      	ldr	r2, [pc, #404]	; (80170e8 <GUI_SendNotification+0x83c>)
 8016f52:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8016f54:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016f58:	460a      	mov	r2, r1
 8016f5a:	2102      	movs	r1, #2
 8016f5c:	f7fe fe20 	bl	8015ba0 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8016f60:	7bfb      	ldrb	r3, [r7, #15]
 8016f62:	4a60      	ldr	r2, [pc, #384]	; (80170e4 <GUI_SendNotification+0x838>)
 8016f64:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016f68:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f76:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016f7a:	2201      	movs	r2, #1
 8016f7c:	210d      	movs	r1, #13
 8016f7e:	f7fe fe0f 	bl	8015ba0 <TLV_add>
 8016f82:	e002      	b.n	8016f8a <GUI_SendNotification+0x6de>
            break;
 8016f84:	bf00      	nop
 8016f86:	e000      	b.n	8016f8a <GUI_SendNotification+0x6de>
            break;
 8016f88:	bf00      	nop
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d03a      	beq.n	801700a <GUI_SendNotification+0x75e>
    {
      uint32_t vsense = 0;
 8016f94:	2300      	movs	r3, #0
 8016f96:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8016f9e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8016fa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016fa6:	2204      	movs	r2, #4
 8016fa8:	2113      	movs	r1, #19
 8016faa:	f7fe fdf9 	bl	8015ba0 <TLV_add>

      if (NULL != pCB_GetVoltage)
 8016fae:	4b4f      	ldr	r3, [pc, #316]	; (80170ec <GUI_SendNotification+0x840>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d006      	beq.n	8016fc4 <GUI_SendNotification+0x718>
      {
        vsense = pCB_GetVoltage(PortNum);
 8016fb6:	4b4d      	ldr	r3, [pc, #308]	; (80170ec <GUI_SendNotification+0x840>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	7bfa      	ldrb	r2, [r7, #15]
 8016fbc:	4610      	mov	r0, r2
 8016fbe:	4798      	blx	r3
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 8016fc4:	4b49      	ldr	r3, [pc, #292]	; (80170ec <GUI_SendNotification+0x840>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d010      	beq.n	8016fee <GUI_SendNotification+0x742>
      {
        isense = pCB_GetCurrent(PortNum);
 8016fcc:	4b48      	ldr	r3, [pc, #288]	; (80170f0 <GUI_SendNotification+0x844>)
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	7bfa      	ldrb	r2, [r7, #15]
 8016fd2:	4610      	mov	r0, r2
 8016fd4:	4798      	blx	r3
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        if (isense < 0)
 8016fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	da04      	bge.n	8016fee <GUI_SendNotification+0x742>
        {
          isense = -isense;
 8016fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016fe8:	425b      	negs	r3, r3
 8016fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 8016fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ff2:	041a      	lsls	r2, r3, #16
 8016ff4:	69fb      	ldr	r3, [r7, #28]
 8016ff6:	4313      	orrs	r3, r2
 8016ff8:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8016ffa:	f107 031c 	add.w	r3, r7, #28
 8016ffe:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8017002:	2204      	movs	r2, #4
 8017004:	210c      	movs	r1, #12
 8017006:	f7fe fdcb 	bl	8015ba0 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017010:	2b00      	cmp	r3, #0
 8017012:	d007      	beq.n	8017024 <GUI_SendNotification+0x778>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8017014:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8017018:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801701c:	2204      	movs	r2, #4
 801701e:	2113      	movs	r1, #19
 8017020:	f7fe fdbe 	bl	8015ba0 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801702a:	2b00      	cmp	r3, #0
 801702c:	d03a      	beq.n	80170a4 <GUI_SendNotification+0x7f8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801702e:	7bfb      	ldrb	r3, [r7, #15]
 8017030:	4a2c      	ldr	r2, [pc, #176]	; (80170e4 <GUI_SendNotification+0x838>)
 8017032:	009b      	lsls	r3, r3, #2
 8017034:	4413      	add	r3, r2
 8017036:	785b      	ldrb	r3, [r3, #1]
 8017038:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801703c:	b2db      	uxtb	r3, r3
 801703e:	763b      	strb	r3, [r7, #24]
 8017040:	f107 0318 	add.w	r3, r7, #24
 8017044:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8017048:	2201      	movs	r2, #1
 801704a:	2105      	movs	r1, #5
 801704c:	f7fe fda8 	bl	8015ba0 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8017050:	7bfb      	ldrb	r3, [r7, #15]
 8017052:	4a24      	ldr	r2, [pc, #144]	; (80170e4 <GUI_SendNotification+0x838>)
 8017054:	009b      	lsls	r3, r3, #2
 8017056:	4413      	add	r3, r2
 8017058:	785b      	ldrb	r3, [r3, #1]
 801705a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801705e:	b2db      	uxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	d11f      	bne.n	80170a4 <GUI_SendNotification+0x7f8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8017064:	7bfb      	ldrb	r3, [r7, #15]
 8017066:	4a1f      	ldr	r2, [pc, #124]	; (80170e4 <GUI_SendNotification+0x838>)
 8017068:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801706c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017070:	b2db      	uxtb	r3, r3
 8017072:	753b      	strb	r3, [r7, #20]
 8017074:	f107 0314 	add.w	r3, r7, #20
 8017078:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801707c:	2201      	movs	r2, #1
 801707e:	2106      	movs	r1, #6
 8017080:	f7fe fd8e 	bl	8015ba0 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017084:	7bfb      	ldrb	r3, [r7, #15]
 8017086:	4a17      	ldr	r2, [pc, #92]	; (80170e4 <GUI_SendNotification+0x838>)
 8017088:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801708c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017090:	b2db      	uxtb	r3, r3
 8017092:	743b      	strb	r3, [r7, #16]
 8017094:	f107 0310 	add.w	r3, r7, #16
 8017098:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801709c:	2201      	movs	r2, #1
 801709e:	2108      	movs	r1, #8
 80170a0:	f7fe fd7e 	bl	8015ba0 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80170a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80170a8:	4618      	mov	r0, r3
 80170aa:	f7fe fec7 	bl	8015e3c <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 80170ae:	4811      	ldr	r0, [pc, #68]	; (80170f4 <GUI_SendNotification+0x848>)
 80170b0:	f7fe ff72 	bl	8015f98 <TLV_get_string_length>
 80170b4:	4603      	mov	r3, r0
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d00e      	beq.n	80170d8 <GUI_SendNotification+0x82c>
    {
      *pMsgToSend = Processed;
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	4a0d      	ldr	r2, [pc, #52]	; (80170f4 <GUI_SendNotification+0x848>)
 80170be:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80170c0:	480c      	ldr	r0, [pc, #48]	; (80170f4 <GUI_SendNotification+0x848>)
 80170c2:	f7fe ff69 	bl	8015f98 <TLV_get_string_length>
 80170c6:	4603      	mov	r3, r0
 80170c8:	b2db      	uxtb	r3, r3
 80170ca:	3308      	adds	r3, #8
 80170cc:	b2da      	uxtb	r2, r3
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 80170d2:	2301      	movs	r3, #1
 80170d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    }

  }

  return gui_state;
 80170d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3798      	adds	r7, #152	; 0x98
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	20000228 	.word	0x20000228
 80170e8:	20002e54 	.word	0x20002e54
 80170ec:	20002e48 	.word	0x20002e48
 80170f0:	20002e4c 	.word	0x20002e4c
 80170f4:	20002d34 	.word	0x20002d34

080170f8 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b084      	sub	sp, #16
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	460a      	mov	r2, r1
 8017102:	71fb      	strb	r3, [r7, #7]
 8017104:	4613      	mov	r3, r2
 8017106:	80bb      	strh	r3, [r7, #4]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 8017108:	88bb      	ldrh	r3, [r7, #4]
 801710a:	2b01      	cmp	r3, #1
 801710c:	d130      	bne.n	8017170 <GUI_PostNotificationMessage+0x78>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 801710e:	79fa      	ldrb	r2, [r7, #7]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 8017110:	79f9      	ldrb	r1, [r7, #7]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8017112:	4823      	ldr	r0, [pc, #140]	; (80171a0 <GUI_PostNotificationMessage+0xa8>)
 8017114:	4613      	mov	r3, r2
 8017116:	00db      	lsls	r3, r3, #3
 8017118:	1a9b      	subs	r3, r3, r2
 801711a:	011b      	lsls	r3, r3, #4
 801711c:	4403      	add	r3, r0
 801711e:	3344      	adds	r3, #68	; 0x44
 8017120:	681a      	ldr	r2, [r3, #0]
 8017122:	4820      	ldr	r0, [pc, #128]	; (80171a4 <GUI_PostNotificationMessage+0xac>)
 8017124:	2374      	movs	r3, #116	; 0x74
 8017126:	fb01 f303 	mul.w	r3, r1, r3
 801712a:	4403      	add	r3, r0
 801712c:	3308      	adds	r3, #8
 801712e:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8017130:	79fa      	ldrb	r2, [r7, #7]
 8017132:	491b      	ldr	r1, [pc, #108]	; (80171a0 <GUI_PostNotificationMessage+0xa8>)
 8017134:	4613      	mov	r3, r2
 8017136:	00db      	lsls	r3, r3, #3
 8017138:	1a9b      	subs	r3, r3, r2
 801713a:	011b      	lsls	r3, r3, #4
 801713c:	440b      	add	r3, r1
 801713e:	3344      	adds	r3, #68	; 0x44
 8017140:	6819      	ldr	r1, [r3, #0]
 8017142:	79fa      	ldrb	r2, [r7, #7]
 8017144:	4816      	ldr	r0, [pc, #88]	; (80171a0 <GUI_PostNotificationMessage+0xa8>)
 8017146:	4613      	mov	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	1a9b      	subs	r3, r3, r2
 801714c:	011b      	lsls	r3, r3, #4
 801714e:	4403      	add	r3, r0
 8017150:	3348      	adds	r3, #72	; 0x48
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	fb03 f201 	mul.w	r2, r3, r1
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 8017158:	79fb      	ldrb	r3, [r7, #7]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 801715a:	4913      	ldr	r1, [pc, #76]	; (80171a8 <GUI_PostNotificationMessage+0xb0>)
 801715c:	fba1 1202 	umull	r1, r2, r1, r2
 8017160:	0992      	lsrs	r2, r2, #6
 8017162:	4910      	ldr	r1, [pc, #64]	; (80171a4 <GUI_PostNotificationMessage+0xac>)
 8017164:	2074      	movs	r0, #116	; 0x74
 8017166:	fb00 f303 	mul.w	r3, r0, r3
 801716a:	440b      	add	r3, r1
 801716c:	3314      	adds	r3, #20
 801716e:	601a      	str	r2, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8017170:	4b0e      	ldr	r3, [pc, #56]	; (80171ac <GUI_PostNotificationMessage+0xb4>)
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	2b01      	cmp	r3, #1
 8017176:	d10e      	bne.n	8017196 <GUI_PostNotificationMessage+0x9e>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 8017178:	79fb      	ldrb	r3, [r7, #7]
 801717a:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 801717c:	88bb      	ldrh	r3, [r7, #4]
 801717e:	011b      	lsls	r3, r3, #4
 8017180:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 8017182:	f043 0301 	orr.w	r3, r3, #1
 8017186:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 8017188:	4b09      	ldr	r3, [pc, #36]	; (80171b0 <GUI_PostNotificationMessage+0xb8>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	2200      	movs	r2, #0
 801718e:	68f9      	ldr	r1, [r7, #12]
 8017190:	4618      	mov	r0, r3
 8017192:	f7fc f877 	bl	8013284 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8017196:	bf00      	nop
 8017198:	3710      	adds	r7, #16
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	20002e54 	.word	0x20002e54
 80171a4:	20000018 	.word	0x20000018
 80171a8:	10624dd3 	.word	0x10624dd3
 80171ac:	20002e34 	.word	0x20002e34
 80171b0:	20002e38 	.word	0x20002e38

080171b4 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b08a      	sub	sp, #40	; 0x28
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	60ba      	str	r2, [r7, #8]
 80171bc:	607b      	str	r3, [r7, #4]
 80171be:	4603      	mov	r3, r0
 80171c0:	73fb      	strb	r3, [r7, #15]
 80171c2:	460b      	mov	r3, r1
 80171c4:	73bb      	strb	r3, [r7, #14]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 80171c6:	7bbb      	ldrb	r3, [r7, #14]
 80171c8:	3b02      	subs	r3, #2
 80171ca:	2b11      	cmp	r3, #17
 80171cc:	f200 80d3 	bhi.w	8017376 <GUI_SaveInfo+0x1c2>
 80171d0:	a201      	add	r2, pc, #4	; (adr r2, 80171d8 <GUI_SaveInfo+0x24>)
 80171d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171d6:	bf00      	nop
 80171d8:	08017221 	.word	0x08017221
 80171dc:	08017377 	.word	0x08017377
 80171e0:	0801727d 	.word	0x0801727d
 80171e4:	080172d7 	.word	0x080172d7
 80171e8:	08017333 	.word	0x08017333
 80171ec:	08017377 	.word	0x08017377
 80171f0:	08017377 	.word	0x08017377
 80171f4:	08017377 	.word	0x08017377
 80171f8:	08017377 	.word	0x08017377
 80171fc:	08017377 	.word	0x08017377
 8017200:	08017377 	.word	0x08017377
 8017204:	08017377 	.word	0x08017377
 8017208:	08017377 	.word	0x08017377
 801720c:	08017377 	.word	0x08017377
 8017210:	08017377 	.word	0x08017377
 8017214:	08017377 	.word	0x08017377
 8017218:	08017377 	.word	0x08017377
 801721c:	08017357 	.word	0x08017357
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2b04      	cmp	r3, #4
 8017224:	f040 80a9 	bne.w	801737a <GUI_SaveInfo+0x1c6>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8017228:	7bfa      	ldrb	r2, [r7, #15]
 801722a:	4613      	mov	r3, r2
 801722c:	00db      	lsls	r3, r3, #3
 801722e:	1a9b      	subs	r3, r3, r2
 8017230:	011b      	lsls	r3, r3, #4
 8017232:	3340      	adds	r3, #64	; 0x40
 8017234:	4a56      	ldr	r2, [pc, #344]	; (8017390 <GUI_SaveInfo+0x1dc>)
 8017236:	4413      	add	r3, r2
 8017238:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	68b9      	ldr	r1, [r7, #8]
 801723e:	6938      	ldr	r0, [r7, #16]
 8017240:	f003 f8bc 	bl	801a3bc <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	7bfa      	ldrb	r2, [r7, #15]
 801724a:	4618      	mov	r0, r3
 801724c:	4950      	ldr	r1, [pc, #320]	; (8017390 <GUI_SaveInfo+0x1dc>)
 801724e:	4613      	mov	r3, r2
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	1a9b      	subs	r3, r3, r2
 8017254:	011b      	lsls	r3, r3, #4
 8017256:	440b      	add	r3, r1
 8017258:	334c      	adds	r3, #76	; 0x4c
 801725a:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 801725c:	7bfa      	ldrb	r2, [r7, #15]
 801725e:	4613      	mov	r3, r2
 8017260:	00db      	lsls	r3, r3, #3
 8017262:	1a9b      	subs	r3, r3, r2
 8017264:	011b      	lsls	r3, r3, #4
 8017266:	3348      	adds	r3, #72	; 0x48
 8017268:	4a49      	ldr	r2, [pc, #292]	; (8017390 <GUI_SaveInfo+0x1dc>)
 801726a:	4413      	add	r3, r2
 801726c:	3304      	adds	r3, #4
 801726e:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8017270:	687a      	ldr	r2, [r7, #4]
 8017272:	68b9      	ldr	r1, [r7, #8]
 8017274:	6938      	ldr	r0, [r7, #16]
 8017276:	f003 f8a1 	bl	801a3bc <memcpy>
      }
      break;
 801727a:	e07e      	b.n	801737a <GUI_SaveInfo+0x1c6>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2b1c      	cmp	r3, #28
 8017280:	d87d      	bhi.n	801737e <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 8017282:	7bfa      	ldrb	r2, [r7, #15]
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	0899      	lsrs	r1, r3, #2
 8017288:	4841      	ldr	r0, [pc, #260]	; (8017390 <GUI_SaveInfo+0x1dc>)
 801728a:	4613      	mov	r3, r2
 801728c:	00db      	lsls	r3, r3, #3
 801728e:	1a9b      	subs	r3, r3, r2
 8017290:	011b      	lsls	r3, r3, #4
 8017292:	4403      	add	r3, r0
 8017294:	331c      	adds	r3, #28
 8017296:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8017298:	2300      	movs	r3, #0
 801729a:	627b      	str	r3, [r7, #36]	; 0x24
 801729c:	e015      	b.n	80172ca <GUI_SaveInfo+0x116>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 801729e:	7bfa      	ldrb	r2, [r7, #15]
 80172a0:	4613      	mov	r3, r2
 80172a2:	00db      	lsls	r3, r3, #3
 80172a4:	1a9b      	subs	r3, r3, r2
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172aa:	4413      	add	r3, r2
 80172ac:	009b      	lsls	r3, r3, #2
 80172ae:	4a38      	ldr	r2, [pc, #224]	; (8017390 <GUI_SaveInfo+0x1dc>)
 80172b0:	4413      	add	r3, r2
 80172b2:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 80172b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	68ba      	ldr	r2, [r7, #8]
 80172ba:	4413      	add	r3, r2
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	461a      	mov	r2, r3
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 80172c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c6:	3301      	adds	r3, #1
 80172c8:	627b      	str	r3, [r7, #36]	; 0x24
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	089b      	lsrs	r3, r3, #2
 80172ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d3e4      	bcc.n	801729e <GUI_SaveInfo+0xea>
        }
      }
      break;
 80172d4:	e053      	b.n	801737e <GUI_SaveInfo+0x1ca>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2b1c      	cmp	r3, #28
 80172da:	d852      	bhi.n	8017382 <GUI_SaveInfo+0x1ce>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 80172dc:	7bfa      	ldrb	r2, [r7, #15]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	0899      	lsrs	r1, r3, #2
 80172e2:	482b      	ldr	r0, [pc, #172]	; (8017390 <GUI_SaveInfo+0x1dc>)
 80172e4:	4613      	mov	r3, r2
 80172e6:	00db      	lsls	r3, r3, #3
 80172e8:	1a9b      	subs	r3, r3, r2
 80172ea:	011b      	lsls	r3, r3, #4
 80172ec:	4403      	add	r3, r0
 80172ee:	333c      	adds	r3, #60	; 0x3c
 80172f0:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 80172f2:	2300      	movs	r3, #0
 80172f4:	627b      	str	r3, [r7, #36]	; 0x24
 80172f6:	e016      	b.n	8017326 <GUI_SaveInfo+0x172>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 80172f8:	7bfa      	ldrb	r2, [r7, #15]
 80172fa:	4613      	mov	r3, r2
 80172fc:	00db      	lsls	r3, r3, #3
 80172fe:	1a9b      	subs	r3, r3, r2
 8017300:	009b      	lsls	r3, r3, #2
 8017302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017304:	4413      	add	r3, r2
 8017306:	3308      	adds	r3, #8
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4a21      	ldr	r2, [pc, #132]	; (8017390 <GUI_SaveInfo+0x1dc>)
 801730c:	4413      	add	r3, r2
 801730e:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8017310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017312:	009b      	lsls	r3, r3, #2
 8017314:	68ba      	ldr	r2, [r7, #8]
 8017316:	4413      	add	r3, r2
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	461a      	mov	r2, r3
 801731c:	69bb      	ldr	r3, [r7, #24]
 801731e:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 8017320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017322:	3301      	adds	r3, #1
 8017324:	627b      	str	r3, [r7, #36]	; 0x24
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	089b      	lsrs	r3, r3, #2
 801732a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801732c:	429a      	cmp	r2, r3
 801732e:	d3e3      	bcc.n	80172f8 <GUI_SaveInfo+0x144>
        }
      }
      break;
 8017330:	e027      	b.n	8017382 <GUI_SaveInfo+0x1ce>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2b04      	cmp	r3, #4
 8017336:	d126      	bne.n	8017386 <GUI_SaveInfo+0x1d2>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8017338:	7bfa      	ldrb	r2, [r7, #15]
 801733a:	4613      	mov	r3, r2
 801733c:	00db      	lsls	r3, r3, #3
 801733e:	1a9b      	subs	r3, r3, r2
 8017340:	011b      	lsls	r3, r3, #4
 8017342:	3350      	adds	r3, #80	; 0x50
 8017344:	4a12      	ldr	r2, [pc, #72]	; (8017390 <GUI_SaveInfo+0x1dc>)
 8017346:	4413      	add	r3, r2
 8017348:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 801734a:	687a      	ldr	r2, [r7, #4]
 801734c:	68b9      	ldr	r1, [r7, #8]
 801734e:	69f8      	ldr	r0, [r7, #28]
 8017350:	f003 f834 	bl	801a3bc <memcpy>
      }
      break;
 8017354:	e017      	b.n	8017386 <GUI_SaveInfo+0x1d2>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 8017356:	7bfa      	ldrb	r2, [r7, #15]
 8017358:	4613      	mov	r3, r2
 801735a:	00db      	lsls	r3, r3, #3
 801735c:	1a9b      	subs	r3, r3, r2
 801735e:	011b      	lsls	r3, r3, #4
 8017360:	3350      	adds	r3, #80	; 0x50
 8017362:	4a0b      	ldr	r2, [pc, #44]	; (8017390 <GUI_SaveInfo+0x1dc>)
 8017364:	4413      	add	r3, r2
 8017366:	3304      	adds	r3, #4
 8017368:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	68b9      	ldr	r1, [r7, #8]
 801736e:	6a38      	ldr	r0, [r7, #32]
 8017370:	f003 f824 	bl	801a3bc <memcpy>
      break;
 8017374:	e008      	b.n	8017388 <GUI_SaveInfo+0x1d4>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 8017376:	bf00      	nop
 8017378:	e006      	b.n	8017388 <GUI_SaveInfo+0x1d4>
      break;
 801737a:	bf00      	nop
 801737c:	e004      	b.n	8017388 <GUI_SaveInfo+0x1d4>
      break;
 801737e:	bf00      	nop
 8017380:	e002      	b.n	8017388 <GUI_SaveInfo+0x1d4>
      break;
 8017382:	bf00      	nop
 8017384:	e000      	b.n	8017388 <GUI_SaveInfo+0x1d4>
      break;
 8017386:	bf00      	nop
  }
}
 8017388:	bf00      	nop
 801738a:	3728      	adds	r7, #40	; 0x28
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	20002e54 	.word	0x20002e54

08017394 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b090      	sub	sp, #64	; 0x40
 8017398:	af00      	add	r7, sp, #0
 801739a:	4603      	mov	r3, r0
 801739c:	6039      	str	r1, [r7, #0]
 801739e:	71fb      	strb	r3, [r7, #7]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80173a0:	79fb      	ldrb	r3, [r7, #7]
 80173a2:	015b      	lsls	r3, r3, #5
 80173a4:	b25b      	sxtb	r3, r3
 80173a6:	f043 0303 	orr.w	r3, r3, #3
 80173aa:	b25b      	sxtb	r3, r3
 80173ac:	b2d9      	uxtb	r1, r3
 80173ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80173b8:	f7fe fb99 	bl	8015aee <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 80173bc:	79fb      	ldrb	r3, [r7, #7]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d166      	bne.n	8017490 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 80173c2:	4bc6      	ldr	r3, [pc, #792]	; (80176dc <Send_DpmInitCnf+0x348>)
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d004      	beq.n	80173d4 <Send_DpmInitCnf+0x40>
    {
      hwversion = pCB_HWBoardVersion();
 80173ca:	4bc4      	ldr	r3, [pc, #784]	; (80176dc <Send_DpmInitCnf+0x348>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	4798      	blx	r3
 80173d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80173d2:	e001      	b.n	80173d8 <Send_DpmInitCnf+0x44>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 80173d4:	4bc2      	ldr	r3, [pc, #776]	; (80176e0 <Send_DpmInitCnf+0x34c>)
 80173d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 80173d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173da:	f7ef faa7 	bl	800692c <strlen>
 80173de:	4603      	mov	r3, r0
 80173e0:	b29a      	uxth	r2, r3
 80173e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80173e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173e8:	2100      	movs	r1, #0
 80173ea:	f7fe fbd9 	bl	8015ba0 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 80173ee:	4bbb      	ldr	r3, [pc, #748]	; (80176dc <Send_DpmInitCnf+0x348>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d004      	beq.n	8017400 <Send_DpmInitCnf+0x6c>
    {
      hwpdtype  = pCB_HWPDType();
 80173f6:	4bbb      	ldr	r3, [pc, #748]	; (80176e4 <Send_DpmInitCnf+0x350>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	4798      	blx	r3
 80173fc:	63b8      	str	r0, [r7, #56]	; 0x38
 80173fe:	e001      	b.n	8017404 <Send_DpmInitCnf+0x70>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8017400:	4bb7      	ldr	r3, [pc, #732]	; (80176e0 <Send_DpmInitCnf+0x34c>)
 8017402:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8017404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017406:	f7ef fa91 	bl	800692c <strlen>
 801740a:	4603      	mov	r3, r0
 801740c:	b29a      	uxth	r2, r3
 801740e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017414:	2101      	movs	r1, #1
 8017416:	f7fe fbc3 	bl	8015ba0 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 801741a:	2301      	movs	r3, #1
 801741c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8017420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017424:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017428:	2201      	movs	r2, #1
 801742a:	2102      	movs	r1, #2
 801742c:	f7fe fbb8 	bl	8015ba0 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 8017430:	4aad      	ldr	r2, [pc, #692]	; (80176e8 <Send_DpmInitCnf+0x354>)
 8017432:	f107 031c 	add.w	r3, r7, #28
 8017436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801743a:	e883 0003 	stmia.w	r3, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 801743e:	f107 031c 	add.w	r3, r7, #28
 8017442:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017446:	2208      	movs	r2, #8
 8017448:	2103      	movs	r1, #3
 801744a:	f7fe fba9 	bl	8015ba0 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 801744e:	2300      	movs	r3, #0
 8017450:	763b      	strb	r3, [r7, #24]
 8017452:	f107 0318 	add.w	r3, r7, #24
 8017456:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801745a:	2201      	movs	r2, #1
 801745c:	211e      	movs	r1, #30
 801745e:	f7fe fb9f 	bl	8015ba0 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8017462:	2300      	movs	r3, #0
 8017464:	753b      	strb	r3, [r7, #20]
 8017466:	f107 0314 	add.w	r3, r7, #20
 801746a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801746e:	2201      	movs	r2, #1
 8017470:	211e      	movs	r1, #30
 8017472:	f7fe fb95 	bl	8015ba0 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 8017476:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801747a:	4b9c      	ldr	r3, [pc, #624]	; (80176ec <Send_DpmInitCnf+0x358>)
 801747c:	2201      	movs	r2, #1
 801747e:	211f      	movs	r1, #31
 8017480:	f7fe fb8e 	bl	8015ba0 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 8017484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017488:	4618      	mov	r0, r3
 801748a:	f7fe fcd7 	bl	8015e3c <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 801748e:	e120      	b.n	80176d2 <Send_DpmInitCnf+0x33e>
    uint8_t port = PortNum - 1U;
 8017490:	79fb      	ldrb	r3, [r7, #7]
 8017492:	3b01      	subs	r3, #1
 8017494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8017498:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801749c:	4994      	ldr	r1, [pc, #592]	; (80176f0 <Send_DpmInitCnf+0x35c>)
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	009b      	lsls	r3, r3, #2
 80174a6:	440b      	add	r3, r1
 80174a8:	791b      	ldrb	r3, [r3, #4]
 80174aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 80174b4:	2312      	movs	r3, #18
 80174b6:	743b      	strb	r3, [r7, #16]
 80174b8:	8a7b      	ldrh	r3, [r7, #18]
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	747b      	strb	r3, [r7, #17]
 80174be:	f107 0310 	add.w	r3, r7, #16
 80174c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80174c6:	2202      	movs	r2, #2
 80174c8:	2104      	movs	r1, #4
 80174ca:	f7fe fb69 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 80174ce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80174d2:	4987      	ldr	r1, [pc, #540]	; (80176f0 <Send_DpmInitCnf+0x35c>)
 80174d4:	4613      	mov	r3, r2
 80174d6:	005b      	lsls	r3, r3, #1
 80174d8:	4413      	add	r3, r2
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	440b      	add	r3, r1
 80174de:	3308      	adds	r3, #8
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 80174ec:	f107 0312 	add.w	r3, r7, #18
 80174f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80174f4:	2201      	movs	r2, #1
 80174f6:	2106      	movs	r1, #6
 80174f8:	f7fe fb52 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 80174fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017500:	497b      	ldr	r1, [pc, #492]	; (80176f0 <Send_DpmInitCnf+0x35c>)
 8017502:	4613      	mov	r3, r2
 8017504:	005b      	lsls	r3, r3, #1
 8017506:	4413      	add	r3, r2
 8017508:	009b      	lsls	r3, r3, #2
 801750a:	440b      	add	r3, r1
 801750c:	795b      	ldrb	r3, [r3, #5]
 801750e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8017512:	b2db      	uxtb	r3, r3
 8017514:	b29b      	uxth	r3, r3
 8017516:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8017518:	f107 0312 	add.w	r3, r7, #18
 801751c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017520:	2201      	movs	r2, #1
 8017522:	2107      	movs	r1, #7
 8017524:	f7fe fb3c 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8017528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801752c:	4a71      	ldr	r2, [pc, #452]	; (80176f4 <Send_DpmInitCnf+0x360>)
 801752e:	2174      	movs	r1, #116	; 0x74
 8017530:	fb01 f303 	mul.w	r3, r1, r3
 8017534:	4413      	add	r3, r2
 8017536:	3368      	adds	r3, #104	; 0x68
 8017538:	78db      	ldrb	r3, [r3, #3]
 801753a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801753e:	b2db      	uxtb	r3, r3
 8017540:	b29b      	uxth	r3, r3
 8017542:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8017544:	f107 0312 	add.w	r3, r7, #18
 8017548:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801754c:	2201      	movs	r2, #1
 801754e:	2108      	movs	r1, #8
 8017550:	f7fe fb26 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 8017554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017558:	4a66      	ldr	r2, [pc, #408]	; (80176f4 <Send_DpmInitCnf+0x360>)
 801755a:	2174      	movs	r1, #116	; 0x74
 801755c:	fb01 f303 	mul.w	r3, r1, r3
 8017560:	4413      	add	r3, r2
 8017562:	3368      	adds	r3, #104	; 0x68
 8017564:	78db      	ldrb	r3, [r3, #3]
 8017566:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801756a:	b2db      	uxtb	r3, r3
 801756c:	b29b      	uxth	r3, r3
 801756e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 8017570:	f107 0312 	add.w	r3, r7, #18
 8017574:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017578:	2201      	movs	r2, #1
 801757a:	2109      	movs	r1, #9
 801757c:	f7fe fb10 	bl	8015ba0 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8017580:	2300      	movs	r3, #0
 8017582:	733b      	strb	r3, [r7, #12]
 8017584:	f107 030c 	add.w	r3, r7, #12
 8017588:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801758c:	2201      	movs	r2, #1
 801758e:	210b      	movs	r1, #11
 8017590:	f7fe fb06 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8017594:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017598:	4955      	ldr	r1, [pc, #340]	; (80176f0 <Send_DpmInitCnf+0x35c>)
 801759a:	4613      	mov	r3, r2
 801759c:	005b      	lsls	r3, r3, #1
 801759e:	4413      	add	r3, r2
 80175a0:	009b      	lsls	r3, r3, #2
 80175a2:	440b      	add	r3, r1
 80175a4:	795b      	ldrb	r3, [r3, #5]
 80175a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80175aa:	b2db      	uxtb	r3, r3
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 80175b0:	f107 0312 	add.w	r3, r7, #18
 80175b4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80175b8:	2201      	movs	r2, #1
 80175ba:	2110      	movs	r1, #16
 80175bc:	f7fe faf0 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 80175c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80175c4:	4a4b      	ldr	r2, [pc, #300]	; (80176f4 <Send_DpmInitCnf+0x360>)
 80175c6:	2174      	movs	r1, #116	; 0x74
 80175c8:	fb01 f303 	mul.w	r3, r1, r3
 80175cc:	4413      	add	r3, r2
 80175ce:	3368      	adds	r3, #104	; 0x68
 80175d0:	78db      	ldrb	r3, [r3, #3]
 80175d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	b29b      	uxth	r3, r3
 80175da:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 80175dc:	f107 0312 	add.w	r3, r7, #18
 80175e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80175e4:	2201      	movs	r2, #1
 80175e6:	2112      	movs	r1, #18
 80175e8:	f7fe fada 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 80175ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80175f0:	4a40      	ldr	r2, [pc, #256]	; (80176f4 <Send_DpmInitCnf+0x360>)
 80175f2:	2174      	movs	r1, #116	; 0x74
 80175f4:	fb01 f303 	mul.w	r3, r1, r3
 80175f8:	4413      	add	r3, r2
 80175fa:	3368      	adds	r3, #104	; 0x68
 80175fc:	78db      	ldrb	r3, [r3, #3]
 80175fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017602:	b2db      	uxtb	r3, r3
 8017604:	b29b      	uxth	r3, r3
 8017606:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8017608:	f107 0312 	add.w	r3, r7, #18
 801760c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017610:	2201      	movs	r2, #1
 8017612:	2113      	movs	r1, #19
 8017614:	f7fe fac4 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8017618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801761c:	4a35      	ldr	r2, [pc, #212]	; (80176f4 <Send_DpmInitCnf+0x360>)
 801761e:	2174      	movs	r1, #116	; 0x74
 8017620:	fb01 f303 	mul.w	r3, r1, r3
 8017624:	4413      	add	r3, r2
 8017626:	3368      	adds	r3, #104	; 0x68
 8017628:	78db      	ldrb	r3, [r3, #3]
 801762a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801762e:	b2db      	uxtb	r3, r3
 8017630:	b29b      	uxth	r3, r3
 8017632:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 8017634:	f107 0312 	add.w	r3, r7, #18
 8017638:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801763c:	2201      	movs	r2, #1
 801763e:	2114      	movs	r1, #20
 8017640:	f7fe faae 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8017644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017648:	4a2a      	ldr	r2, [pc, #168]	; (80176f4 <Send_DpmInitCnf+0x360>)
 801764a:	2174      	movs	r1, #116	; 0x74
 801764c:	fb01 f303 	mul.w	r3, r1, r3
 8017650:	4413      	add	r3, r2
 8017652:	3368      	adds	r3, #104	; 0x68
 8017654:	78db      	ldrb	r3, [r3, #3]
 8017656:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801765a:	b2db      	uxtb	r3, r3
 801765c:	b29b      	uxth	r3, r3
 801765e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 8017660:	f107 0312 	add.w	r3, r7, #18
 8017664:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017668:	2201      	movs	r2, #1
 801766a:	2115      	movs	r1, #21
 801766c:	f7fe fa98 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8017670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017674:	4a1f      	ldr	r2, [pc, #124]	; (80176f4 <Send_DpmInitCnf+0x360>)
 8017676:	2174      	movs	r1, #116	; 0x74
 8017678:	fb01 f303 	mul.w	r3, r1, r3
 801767c:	4413      	add	r3, r2
 801767e:	3368      	adds	r3, #104	; 0x68
 8017680:	78db      	ldrb	r3, [r3, #3]
 8017682:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017686:	b2db      	uxtb	r3, r3
 8017688:	b29b      	uxth	r3, r3
 801768a:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 801768c:	f107 0312 	add.w	r3, r7, #18
 8017690:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8017694:	2201      	movs	r2, #1
 8017696:	2116      	movs	r1, #22
 8017698:	f7fe fa82 	bl	8015ba0 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 801769c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80176a0:	4a14      	ldr	r2, [pc, #80]	; (80176f4 <Send_DpmInitCnf+0x360>)
 80176a2:	2174      	movs	r1, #116	; 0x74
 80176a4:	fb01 f303 	mul.w	r3, r1, r3
 80176a8:	4413      	add	r3, r2
 80176aa:	3368      	adds	r3, #104	; 0x68
 80176ac:	791b      	ldrb	r3, [r3, #4]
 80176ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 80176b8:	f107 0312 	add.w	r3, r7, #18
 80176bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80176c0:	2201      	movs	r2, #1
 80176c2:	2117      	movs	r1, #23
 80176c4:	f7fe fa6c 	bl	8015ba0 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 80176c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7fe fbb5 	bl	8015e3c <TLV_deinit_encode>
}
 80176d2:	bf00      	nop
 80176d4:	3740      	adds	r7, #64	; 0x40
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	bf00      	nop
 80176dc:	20002e40 	.word	0x20002e40
 80176e0:	0801b824 	.word	0x0801b824
 80176e4:	20002e44 	.word	0x20002e44
 80176e8:	0801b82c 	.word	0x0801b82c
 80176ec:	20002e35 	.word	0x20002e35
 80176f0:	20000004 	.word	0x20000004
 80176f4:	20000018 	.word	0x20000018

080176f8 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b090      	sub	sp, #64	; 0x40
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	4603      	mov	r3, r0
 8017700:	60b9      	str	r1, [r7, #8]
 8017702:	607a      	str	r2, [r7, #4]
 8017704:	73fb      	strb	r3, [r7, #15]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8017706:	2302      	movs	r3, #2
 8017708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 801770c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017710:	68b9      	ldr	r1, [r7, #8]
 8017712:	4618      	mov	r0, r3
 8017714:	f7fe fba6 	bl	8015e64 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017718:	7bfb      	ldrb	r3, [r7, #15]
 801771a:	3301      	adds	r3, #1
 801771c:	015b      	lsls	r3, r3, #5
 801771e:	b25b      	sxtb	r3, r3
 8017720:	f043 030a 	orr.w	r3, r3, #10
 8017724:	b25b      	sxtb	r3, r3
 8017726:	b2d9      	uxtb	r1, r3
 8017728:	f107 0020 	add.w	r0, r7, #32
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017732:	f7fe f9dc 	bl	8015aee <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017736:	f107 0318 	add.w	r3, r7, #24
 801773a:	f107 021c 	add.w	r2, r7, #28
 801773e:	f107 011e 	add.w	r1, r7, #30
 8017742:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017746:	f7fe fbbb 	bl	8015ec0 <TLV_get>
  switch (tag)
 801774a:	7fbb      	ldrb	r3, [r7, #30]
 801774c:	2b2b      	cmp	r3, #43	; 0x2b
 801774e:	f200 8267 	bhi.w	8017c20 <Request_MessageReq+0x528>
 8017752:	a201      	add	r2, pc, #4	; (adr r2, 8017758 <Request_MessageReq+0x60>)
 8017754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017758:	08017809 	.word	0x08017809
 801775c:	08017819 	.word	0x08017819
 8017760:	08017c21 	.word	0x08017c21
 8017764:	08017829 	.word	0x08017829
 8017768:	08017839 	.word	0x08017839
 801776c:	08017849 	.word	0x08017849
 8017770:	08017859 	.word	0x08017859
 8017774:	08017869 	.word	0x08017869
 8017778:	08017937 	.word	0x08017937
 801777c:	08017a2b 	.word	0x08017a2b
 8017780:	08017a1b 	.word	0x08017a1b
 8017784:	080179eb 	.word	0x080179eb
 8017788:	080179fb 	.word	0x080179fb
 801778c:	08017a0b 	.word	0x08017a0b
 8017790:	08017879 	.word	0x08017879
 8017794:	08017889 	.word	0x08017889
 8017798:	08017c21 	.word	0x08017c21
 801779c:	08017a4b 	.word	0x08017a4b
 80177a0:	08017aa9 	.word	0x08017aa9
 80177a4:	08017c21 	.word	0x08017c21
 80177a8:	08017c21 	.word	0x08017c21
 80177ac:	08017c21 	.word	0x08017c21
 80177b0:	08017c21 	.word	0x08017c21
 80177b4:	08017c21 	.word	0x08017c21
 80177b8:	08017c21 	.word	0x08017c21
 80177bc:	08017c21 	.word	0x08017c21
 80177c0:	08017989 	.word	0x08017989
 80177c4:	08017c21 	.word	0x08017c21
 80177c8:	08017c21 	.word	0x08017c21
 80177cc:	08017c21 	.word	0x08017c21
 80177d0:	08017c21 	.word	0x08017c21
 80177d4:	08017c21 	.word	0x08017c21
 80177d8:	08017c21 	.word	0x08017c21
 80177dc:	08017c21 	.word	0x08017c21
 80177e0:	08017c21 	.word	0x08017c21
 80177e4:	08017c21 	.word	0x08017c21
 80177e8:	08017969 	.word	0x08017969
 80177ec:	08017979 	.word	0x08017979
 80177f0:	08017af9 	.word	0x08017af9
 80177f4:	08017b33 	.word	0x08017b33
 80177f8:	08017b6b 	.word	0x08017b6b
 80177fc:	08017c11 	.word	0x08017c11
 8017800:	08017c21 	.word	0x08017c21
 8017804:	08017a3b 	.word	0x08017a3b
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8017808:	7bfb      	ldrb	r3, [r7, #15]
 801780a:	4618      	mov	r0, r3
 801780c:	f7f0 fe7e 	bl	800850c <USBPD_DPM_RequestGotoMin>
 8017810:	4603      	mov	r3, r0
 8017812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017816:	e222      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8017818:	7bfb      	ldrb	r3, [r7, #15]
 801781a:	4618      	mov	r0, r3
 801781c:	f7f0 feb6 	bl	800858c <USBPD_DPM_RequestPing>
 8017820:	4603      	mov	r3, r0
 8017822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017826:	e21a      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8017828:	7bfb      	ldrb	r3, [r7, #15]
 801782a:	4618      	mov	r0, r3
 801782c:	f7f0 ffb4 	bl	8008798 <USBPD_DPM_RequestGetSourceCapability>
 8017830:	4603      	mov	r3, r0
 8017832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017836:	e212      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8017838:	7bfb      	ldrb	r3, [r7, #15]
 801783a:	4618      	mov	r0, r3
 801783c:	f7f0 ffec 	bl	8008818 <USBPD_DPM_RequestGetSinkCapability>
 8017840:	4603      	mov	r3, r0
 8017842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017846:	e20a      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8017848:	7bfb      	ldrb	r3, [r7, #15]
 801784a:	4618      	mov	r0, r3
 801784c:	f7f1 f824 	bl	8008898 <USBPD_DPM_RequestDataRoleSwap>
 8017850:	4603      	mov	r3, r0
 8017852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017856:	e202      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8017858:	7bfb      	ldrb	r3, [r7, #15]
 801785a:	4618      	mov	r0, r3
 801785c:	f7f1 f85c 	bl	8008918 <USBPD_DPM_RequestPowerRoleSwap>
 8017860:	4603      	mov	r3, r0
 8017862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017866:	e1fa      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8017868:	7bfb      	ldrb	r3, [r7, #15]
 801786a:	4618      	mov	r0, r3
 801786c:	f7f1 f894 	bl	8008998 <USBPD_DPM_RequestVconnSwap>
 8017870:	4603      	mov	r3, r0
 8017872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017876:	e1f2      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8017878:	7bfb      	ldrb	r3, [r7, #15]
 801787a:	4618      	mov	r0, r3
 801787c:	f7f1 f910 	bl	8008aa0 <USBPD_DPM_RequestSourceCapability>
 8017880:	4603      	mov	r3, r0
 8017882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017886:	e1ea      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8017888:	2300      	movs	r3, #0
 801788a:	87bb      	strh	r3, [r7, #60]	; 0x3c
      uint8_t nb_expected_tag = 0U;
 801788c:	2300      	movs	r3, #0
 801788e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      uint8_t index_pdo = 0;
 8017892:	2300      	movs	r3, #0
 8017894:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      if (length > TLV_SIZE_MAX)
 8017898:	8bbb      	ldrh	r3, [r7, #28]
 801789a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801789e:	f200 81c1 	bhi.w	8017c24 <Request_MessageReq+0x52c>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80178a2:	f107 0318 	add.w	r3, r7, #24
 80178a6:	f107 021c 	add.w	r2, r7, #28
 80178aa:	f107 011e 	add.w	r1, r7, #30
 80178ae:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80178b2:	f7fe fb05 	bl	8015ec0 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 80178b6:	e024      	b.n	8017902 <Request_MessageReq+0x20a>
      {
        nb_expected_tag++;
 80178b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80178bc:	3301      	adds	r3, #1
 80178be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 80178c2:	7fbb      	ldrb	r3, [r7, #30]
 80178c4:	2b01      	cmp	r3, #1
 80178c6:	d104      	bne.n	80178d2 <Request_MessageReq+0x1da>
        {
          index_pdo = value[0];
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80178d0:	e00d      	b.n	80178ee <Request_MessageReq+0x1f6>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 80178d2:	7fbb      	ldrb	r3, [r7, #30]
 80178d4:	2b02      	cmp	r3, #2
 80178d6:	d10a      	bne.n	80178ee <Request_MessageReq+0x1f6>
        {
          voltage = USBPD_LE16(&value[0]);
 80178d8:	69bb      	ldr	r3, [r7, #24]
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	b29a      	uxth	r2, r3
 80178de:	69bb      	ldr	r3, [r7, #24]
 80178e0:	3301      	adds	r3, #1
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	021b      	lsls	r3, r3, #8
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	4413      	add	r3, r2
 80178ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 80178ee:	f107 0318 	add.w	r3, r7, #24
 80178f2:	f107 021c 	add.w	r2, r7, #28
 80178f6:	f107 011e 	add.w	r1, r7, #30
 80178fa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80178fe:	f7fe fadf 	bl	8015ec0 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8017902:	8bbb      	ldrh	r3, [r7, #28]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d006      	beq.n	8017916 <Request_MessageReq+0x21e>
 8017908:	8bbb      	ldrh	r3, [r7, #28]
 801790a:	2bff      	cmp	r3, #255	; 0xff
 801790c:	d803      	bhi.n	8017916 <Request_MessageReq+0x21e>
 801790e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017912:	2b01      	cmp	r3, #1
 8017914:	d9d0      	bls.n	80178b8 <Request_MessageReq+0x1c0>
      }
      if (2U == nb_expected_tag)
 8017916:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801791a:	2b02      	cmp	r3, #2
 801791c:	f040 8184 	bne.w	8017c28 <Request_MessageReq+0x530>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8017920:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017922:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8017926:	7bfb      	ldrb	r3, [r7, #15]
 8017928:	4618      	mov	r0, r3
 801792a:	f7f0 fe6f 	bl	800860c <USBPD_DPM_RequestMessageRequest>
 801792e:	4603      	mov	r3, r0
 8017930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017934:	e178      	b.n	8017c28 <Request_MessageReq+0x530>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017936:	f107 0318 	add.w	r3, r7, #24
 801793a:	f107 021c 	add.w	r2, r7, #28
 801793e:	f107 011e 	add.w	r1, r7, #30
 8017942:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017946:	f7fe fabb 	bl	8015ec0 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 801794a:	7fbb      	ldrb	r3, [r7, #30]
 801794c:	2b00      	cmp	r3, #0
 801794e:	f040 816d 	bne.w	8017c2c <Request_MessageReq+0x534>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	781a      	ldrb	r2, [r3, #0]
 8017956:	7bfb      	ldrb	r3, [r7, #15]
 8017958:	4611      	mov	r1, r2
 801795a:	4618      	mov	r0, r3
 801795c:	f7f1 f85c 	bl	8008a18 <USBPD_DPM_RequestSoftReset>
 8017960:	4603      	mov	r3, r0
 8017962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017966:	e161      	b.n	8017c2c <Request_MessageReq+0x534>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8017968:	7bfb      	ldrb	r3, [r7, #15]
 801796a:	4618      	mov	r0, r3
 801796c:	f7f0 fd52 	bl	8008414 <USBPD_DPM_RequestHardReset>
 8017970:	4603      	mov	r3, r0
 8017972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017976:	e172      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8017978:	7bfb      	ldrb	r3, [r7, #15]
 801797a:	4618      	mov	r0, r3
 801797c:	f7f0 fd88 	bl	8008490 <USBPD_DPM_RequestCableReset>
 8017980:	4603      	mov	r3, r0
 8017982:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017986:	e16a      	b.n	8017c5e <Request_MessageReq+0x566>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8017988:	2300      	movs	r3, #0
 801798a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      if (length > TLV_SIZE_MAX)
 801798e:	8bbb      	ldrh	r3, [r7, #28]
 8017990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017994:	f200 814c 	bhi.w	8017c30 <Request_MessageReq+0x538>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017998:	f107 0318 	add.w	r3, r7, #24
 801799c:	f107 021c 	add.w	r2, r7, #28
 80179a0:	f107 011e 	add.w	r1, r7, #30
 80179a4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80179a8:	f7fe fa8a 	bl	8015ec0 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80179ac:	e004      	b.n	80179b8 <Request_MessageReq+0x2c0>
      {
        nb_expected_tag++;
 80179ae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80179b2:	3301      	adds	r3, #1
 80179b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80179b8:	8bbb      	ldrh	r3, [r7, #28]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d006      	beq.n	80179cc <Request_MessageReq+0x2d4>
 80179be:	8bbb      	ldrh	r3, [r7, #28]
 80179c0:	2bff      	cmp	r3, #255	; 0xff
 80179c2:	d803      	bhi.n	80179cc <Request_MessageReq+0x2d4>
 80179c4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d0f0      	beq.n	80179ae <Request_MessageReq+0x2b6>
      }
      if (1U == nb_expected_tag)
 80179cc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80179d0:	2b01      	cmp	r3, #1
 80179d2:	f040 812f 	bne.w	8017c34 <Request_MessageReq+0x53c>
      {
        status = Manage_FreeText(PortNum, value, length);
 80179d6:	69b9      	ldr	r1, [r7, #24]
 80179d8:	8bba      	ldrh	r2, [r7, #28]
 80179da:	7bfb      	ldrb	r3, [r7, #15]
 80179dc:	4618      	mov	r0, r3
 80179de:	f001 fb3b 	bl	8019058 <Manage_FreeText>
 80179e2:	4603      	mov	r3, r0
 80179e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 80179e8:	e124      	b.n	8017c34 <Request_MessageReq+0x53c>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 80179ea:	7bfb      	ldrb	r3, [r7, #15]
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7f1 fa25 	bl	8008e3c <USBPD_DPM_RequestFastRoleSwap>
 80179f2:	4603      	mov	r3, r0
 80179f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 80179f8:	e131      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 80179fa:	7bfb      	ldrb	r3, [r7, #15]
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7f1 f99d 	bl	8008d3c <USBPD_DPM_RequestGetPPS_Status>
 8017a02:	4603      	mov	r3, r0
 8017a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017a08:	e129      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8017a0a:	7bfb      	ldrb	r3, [r7, #15]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7f1 fa55 	bl	8008ebc <USBPD_DPM_RequestGetCountryCodes>
 8017a12:	4603      	mov	r3, r0
 8017a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017a18:	e121      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8017a1a:	7bfb      	ldrb	r3, [r7, #15]
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f7f1 f9cd 	bl	8008dbc <USBPD_DPM_RequestGetStatus>
 8017a22:	4603      	mov	r3, r0
 8017a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017a28:	e119      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8017a2a:	7bfb      	ldrb	r3, [r7, #15]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7f1 f8b9 	bl	8008ba4 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8017a32:	4603      	mov	r3, r0
 8017a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017a38:	e111      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8017a3a:	7bfb      	ldrb	r3, [r7, #15]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f1 f8f1 	bl	8008c24 <USBPD_DPM_RequestGetSinkCapabilityExt>
 8017a42:	4603      	mov	r3, r0
 8017a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017a48:	e109      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8017a4a:	8bbb      	ldrh	r3, [r7, #28]
 8017a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a50:	f200 80f2 	bhi.w	8017c38 <Request_MessageReq+0x540>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017a54:	f107 0318 	add.w	r3, r7, #24
 8017a58:	f107 021c 	add.w	r2, r7, #28
 8017a5c:	f107 011e 	add.w	r1, r7, #30
 8017a60:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017a64:	f7fe fa2c 	bl	8015ec0 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8017a68:	7fbb      	ldrb	r3, [r7, #30]
 8017a6a:	2b04      	cmp	r3, #4
 8017a6c:	f040 80e6 	bne.w	8017c3c <Request_MessageReq+0x544>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 8017a70:	69bb      	ldr	r3, [r7, #24]
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	461a      	mov	r2, r3
 8017a76:	69bb      	ldr	r3, [r7, #24]
 8017a78:	3301      	adds	r3, #1
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	021b      	lsls	r3, r3, #8
 8017a7e:	441a      	add	r2, r3
 8017a80:	69bb      	ldr	r3, [r7, #24]
 8017a82:	3302      	adds	r3, #2
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	041b      	lsls	r3, r3, #16
 8017a88:	441a      	add	r2, r3
 8017a8a:	69bb      	ldr	r3, [r7, #24]
 8017a8c:	3303      	adds	r3, #3
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	061b      	lsls	r3, r3, #24
 8017a92:	4413      	add	r3, r2
 8017a94:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8017a96:	7bfb      	ldrb	r3, [r7, #15]
 8017a98:	6979      	ldr	r1, [r7, #20]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7f1 f840 	bl	8008b20 <USBPD_DPM_RequestAlert>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017aa6:	e0c9      	b.n	8017c3c <Request_MessageReq+0x544>
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8017aa8:	8bbb      	ldrh	r3, [r7, #28]
 8017aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017aae:	f200 80c7 	bhi.w	8017c40 <Request_MessageReq+0x548>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017ab2:	f107 0318 	add.w	r3, r7, #24
 8017ab6:	f107 021c 	add.w	r2, r7, #28
 8017aba:	f107 011e 	add.w	r1, r7, #30
 8017abe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017ac2:	f7fe f9fd 	bl	8015ec0 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017ac6:	7fbb      	ldrb	r3, [r7, #30]
 8017ac8:	2b05      	cmp	r3, #5
 8017aca:	f040 80bb 	bne.w	8017c44 <Request_MessageReq+0x54c>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8017ace:	69bb      	ldr	r3, [r7, #24]
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	69bb      	ldr	r3, [r7, #24]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	021b      	lsls	r3, r3, #8
 8017ade:	b29b      	uxth	r3, r3
 8017ae0:	4413      	add	r3, r2
 8017ae2:	86bb      	strh	r3, [r7, #52]	; 0x34
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8017ae4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017ae6:	7bfb      	ldrb	r3, [r7, #15]
 8017ae8:	4611      	mov	r1, r2
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7f1 fa26 	bl	8008f3c <USBPD_DPM_RequestGetCountryInfo>
 8017af0:	4603      	mov	r3, r0
 8017af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017af6:	e0a5      	b.n	8017c44 <Request_MessageReq+0x54c>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8017af8:	8bbb      	ldrh	r3, [r7, #28]
 8017afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017afe:	f200 80a3 	bhi.w	8017c48 <Request_MessageReq+0x550>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017b02:	f107 0318 	add.w	r3, r7, #24
 8017b06:	f107 021c 	add.w	r2, r7, #28
 8017b0a:	f107 011e 	add.w	r1, r7, #30
 8017b0e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017b12:	f7fe f9d5 	bl	8015ec0 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8017b16:	7fbb      	ldrb	r3, [r7, #30]
 8017b18:	2b0c      	cmp	r3, #12
 8017b1a:	f040 8097 	bne.w	8017c4c <Request_MessageReq+0x554>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8017b1e:	69ba      	ldr	r2, [r7, #24]
 8017b20:	7bfb      	ldrb	r3, [r7, #15]
 8017b22:	4611      	mov	r1, r2
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7f1 fa4d 	bl	8008fc4 <USBPD_DPM_RequestGetBatteryCapability>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017b30:	e08c      	b.n	8017c4c <Request_MessageReq+0x554>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 8017b32:	8bbb      	ldrh	r3, [r7, #28]
 8017b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b38:	f200 808a 	bhi.w	8017c50 <Request_MessageReq+0x558>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017b3c:	f107 0318 	add.w	r3, r7, #24
 8017b40:	f107 021c 	add.w	r2, r7, #28
 8017b44:	f107 011e 	add.w	r1, r7, #30
 8017b48:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017b4c:	f7fe f9b8 	bl	8015ec0 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8017b50:	7fbb      	ldrb	r3, [r7, #30]
 8017b52:	2b0c      	cmp	r3, #12
 8017b54:	d17e      	bne.n	8017c54 <Request_MessageReq+0x55c>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8017b56:	69ba      	ldr	r2, [r7, #24]
 8017b58:	7bfb      	ldrb	r3, [r7, #15]
 8017b5a:	4611      	mov	r1, r2
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7f1 fa75 	bl	800904c <USBPD_DPM_RequestGetBatteryStatus>
 8017b62:	4603      	mov	r3, r0
 8017b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017b68:	e074      	b.n	8017c54 <Request_MessageReq+0x55c>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 8017b70:	2300      	movs	r3, #0
 8017b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (length > TLV_SIZE_MAX)
 8017b76:	8bbb      	ldrh	r3, [r7, #28]
 8017b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017b7c:	d86c      	bhi.n	8017c58 <Request_MessageReq+0x560>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017b7e:	f107 0318 	add.w	r3, r7, #24
 8017b82:	f107 021c 	add.w	r2, r7, #28
 8017b86:	f107 011e 	add.w	r1, r7, #30
 8017b8a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017b8e:	f7fe f997 	bl	8015ec0 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8017b92:	e023      	b.n	8017bdc <Request_MessageReq+0x4e4>
      {
        nb_expected_tag++;
 8017b94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017b98:	3301      	adds	r3, #1
 8017b9a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017b9e:	7fbb      	ldrb	r3, [r7, #30]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d104      	bne.n	8017bae <Request_MessageReq+0x4b6>
        {
          sop = value[0];
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017bac:	e00c      	b.n	8017bc8 <Request_MessageReq+0x4d0>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8017bae:	7fbb      	ldrb	r3, [r7, #30]
 8017bb0:	2b0c      	cmp	r3, #12
 8017bb2:	d103      	bne.n	8017bbc <Request_MessageReq+0x4c4>
        {
          manu_info[1] = value[0];
 8017bb4:	69bb      	ldr	r3, [r7, #24]
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	747b      	strb	r3, [r7, #17]
 8017bba:	e005      	b.n	8017bc8 <Request_MessageReq+0x4d0>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8017bbc:	7fbb      	ldrb	r3, [r7, #30]
 8017bbe:	2b0d      	cmp	r3, #13
 8017bc0:	d102      	bne.n	8017bc8 <Request_MessageReq+0x4d0>
        {
          manu_info[0] = value[0];
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	743b      	strb	r3, [r7, #16]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017bc8:	f107 0318 	add.w	r3, r7, #24
 8017bcc:	f107 021c 	add.w	r2, r7, #28
 8017bd0:	f107 011e 	add.w	r1, r7, #30
 8017bd4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017bd8:	f7fe f972 	bl	8015ec0 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8017bdc:	8bbb      	ldrh	r3, [r7, #28]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d006      	beq.n	8017bf0 <Request_MessageReq+0x4f8>
 8017be2:	8bbb      	ldrh	r3, [r7, #28]
 8017be4:	2bff      	cmp	r3, #255	; 0xff
 8017be6:	d803      	bhi.n	8017bf0 <Request_MessageReq+0x4f8>
 8017be8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017bec:	2b02      	cmp	r3, #2
 8017bee:	d9d1      	bls.n	8017b94 <Request_MessageReq+0x49c>
      }
      if (3U == nb_expected_tag)
 8017bf0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017bf4:	2b03      	cmp	r3, #3
 8017bf6:	d131      	bne.n	8017c5c <Request_MessageReq+0x564>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8017bf8:	f107 0210 	add.w	r2, r7, #16
 8017bfc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8017c00:	7bfb      	ldrb	r3, [r7, #15]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7f1 f84e 	bl	8008ca4 <USBPD_DPM_RequestGetManufacturerInfo>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8017c0e:	e025      	b.n	8017c5c <Request_MessageReq+0x564>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8017c10:	7bfb      	ldrb	r3, [r7, #15]
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7f1 fa5e 	bl	80090d4 <USBPD_DPM_RequestSecurityRequest>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8017c1e:	e01e      	b.n	8017c5e <Request_MessageReq+0x566>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 8017c20:	bf00      	nop
 8017c22:	e01c      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c24:	bf00      	nop
 8017c26:	e01a      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c28:	bf00      	nop
 8017c2a:	e018      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c2c:	bf00      	nop
 8017c2e:	e016      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c30:	bf00      	nop
 8017c32:	e014      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c34:	bf00      	nop
 8017c36:	e012      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c38:	bf00      	nop
 8017c3a:	e010      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c3c:	bf00      	nop
 8017c3e:	e00e      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c40:	bf00      	nop
 8017c42:	e00c      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c44:	bf00      	nop
 8017c46:	e00a      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c48:	bf00      	nop
 8017c4a:	e008      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c4c:	bf00      	nop
 8017c4e:	e006      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c50:	bf00      	nop
 8017c52:	e004      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c54:	bf00      	nop
 8017c56:	e002      	b.n	8017c5e <Request_MessageReq+0x566>
        break;
 8017c58:	bf00      	nop
 8017c5a:	e000      	b.n	8017c5e <Request_MessageReq+0x566>
      break;
 8017c5c:	bf00      	nop
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 8017c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d02b      	beq.n	8017cbe <Request_MessageReq+0x5c6>
  {
    switch (status)
 8017c66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017c6a:	2b03      	cmp	r3, #3
 8017c6c:	d002      	beq.n	8017c74 <Request_MessageReq+0x57c>
 8017c6e:	2b04      	cmp	r3, #4
 8017c70:	d003      	beq.n	8017c7a <Request_MessageReq+0x582>
 8017c72:	e005      	b.n	8017c80 <Request_MessageReq+0x588>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8017c74:	2306      	movs	r3, #6
 8017c76:	77fb      	strb	r3, [r7, #31]
        break;
 8017c78:	e005      	b.n	8017c86 <Request_MessageReq+0x58e>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 8017c7a:	2302      	movs	r3, #2
 8017c7c:	77fb      	strb	r3, [r7, #31]
        break;
 8017c7e:	e002      	b.n	8017c86 <Request_MessageReq+0x58e>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8017c80:	2300      	movs	r3, #0
 8017c82:	77fb      	strb	r3, [r7, #31]
        break;
 8017c84:	bf00      	nop
    }
    TLV_deinit_encode(&send_tlv);
 8017c86:	f107 0320 	add.w	r3, r7, #32
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fe f8d6 	bl	8015e3c <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 8017c90:	7bfb      	ldrb	r3, [r7, #15]
 8017c92:	3301      	adds	r3, #1
 8017c94:	015b      	lsls	r3, r3, #5
 8017c96:	b25b      	sxtb	r3, r3
 8017c98:	f043 030b 	orr.w	r3, r3, #11
 8017c9c:	b25b      	sxtb	r3, r3
 8017c9e:	b2d9      	uxtb	r1, r3
 8017ca0:	f107 0020 	add.w	r0, r7, #32
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017caa:	f7fd ff20 	bl	8015aee <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8017cae:	f107 011f 	add.w	r1, r7, #31
 8017cb2:	f107 0320 	add.w	r3, r7, #32
 8017cb6:	2201      	movs	r2, #1
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7fe f82f 	bl	8015d1c <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8017cbe:	f107 0320 	add.w	r3, r7, #32
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f7fe f8ba 	bl	8015e3c <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8017cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7fe f953 	bl	8015f78 <TLV_deinit_decode>
}
 8017cd2:	bf00      	nop
 8017cd4:	3740      	adds	r7, #64	; 0x40
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop

08017cdc <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8017cdc:	b590      	push	{r4, r7, lr}
 8017cde:	b0d7      	sub	sp, #348	; 0x15c
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017ce6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8017cea:	6019      	str	r1, [r3, #0]
 8017cec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017cf0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8017cf4:	601a      	str	r2, [r3, #0]
 8017cf6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017cfa:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017cfe:	4602      	mov	r2, r0
 8017d00:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8017d02:	2300      	movs	r3, #0
 8017d04:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
  uint8_t error = 0xFF;
 8017d08:	23ff      	movs	r3, #255	; 0xff
 8017d0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
  uint8_t tag;
  uint8_t flag_drp = 0;
 8017d14:	2300      	movs	r3, #0
 8017d16:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
  uint8_t tdrp = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

  (void)TLV_init_decode(&process_tlv, instruction);
 8017d20:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017d24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8017d28:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8017d2c:	6819      	ldr	r1, [r3, #0]
 8017d2e:	4610      	mov	r0, r2
 8017d30:	f7fe f898 	bl	8015e64 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017d34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017d38:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	3301      	adds	r3, #1
 8017d40:	015b      	lsls	r3, r3, #5
 8017d42:	b25b      	sxtb	r3, r3
 8017d44:	f043 0307 	orr.w	r3, r3, #7
 8017d48:	b25b      	sxtb	r3, r3
 8017d4a:	b2d9      	uxtb	r1, r3
 8017d4c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017d50:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8017d54:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017d5e:	f7fd fec6 	bl	8015aee <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8017d62:	e2d2      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 8017d64:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017d68:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8017d6c:	781b      	ldrb	r3, [r3, #0]
 8017d6e:	2b1c      	cmp	r3, #28
 8017d70:	f200 82b6 	bhi.w	80182e0 <Send_DpmConfigSetCnf+0x604>
 8017d74:	a201      	add	r2, pc, #4	; (adr r2, 8017d7c <Send_DpmConfigSetCnf+0xa0>)
 8017d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d7a:	bf00      	nop
 8017d7c:	08017df1 	.word	0x08017df1
 8017d80:	080182e1 	.word	0x080182e1
 8017d84:	08017e13 	.word	0x08017e13
 8017d88:	08017e45 	.word	0x08017e45
 8017d8c:	08017e99 	.word	0x08017e99
 8017d90:	08017ec7 	.word	0x08017ec7
 8017d94:	08017ef5 	.word	0x08017ef5
 8017d98:	08017f23 	.word	0x08017f23
 8017d9c:	08017f51 	.word	0x08017f51
 8017da0:	080182e1 	.word	0x080182e1
 8017da4:	08017f7b 	.word	0x08017f7b
 8017da8:	08017fa9 	.word	0x08017fa9
 8017dac:	08017fe1 	.word	0x08017fe1
 8017db0:	08018085 	.word	0x08018085
 8017db4:	08018139 	.word	0x08018139
 8017db8:	08018175 	.word	0x08018175
 8017dbc:	080181b1 	.word	0x080181b1
 8017dc0:	080181df 	.word	0x080181df
 8017dc4:	0801820d 	.word	0x0801820d
 8017dc8:	080182e1 	.word	0x080182e1
 8017dcc:	080182e1 	.word	0x080182e1
 8017dd0:	080182e1 	.word	0x080182e1
 8017dd4:	080182e1 	.word	0x080182e1
 8017dd8:	0801824b 	.word	0x0801824b
 8017ddc:	0801827b 	.word	0x0801827b
 8017de0:	080182e1 	.word	0x080182e1
 8017de4:	080182ab 	.word	0x080182ab
 8017de8:	080182e1 	.word	0x080182e1
 8017dec:	08017e6f 	.word	0x08017e6f
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = (USBPD_SupportedSOP_TypeDef)value[0];
 8017df0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017df4:	7819      	ldrb	r1, [r3, #0]
 8017df6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017dfa:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017dfe:	781a      	ldrb	r2, [r3, #0]
 8017e00:	4608      	mov	r0, r1
 8017e02:	49c8      	ldr	r1, [pc, #800]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017e04:	4613      	mov	r3, r2
 8017e06:	005b      	lsls	r3, r3, #1
 8017e08:	4413      	add	r3, r2
 8017e0a:	009b      	lsls	r3, r3, #2
 8017e0c:	440b      	add	r3, r1
 8017e0e:	6018      	str	r0, [r3, #0]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8017e10:	e27b      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8017e12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017e16:	7819      	ldrb	r1, [r3, #0]
 8017e18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017e1c:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017e20:	781a      	ldrb	r2, [r3, #0]
 8017e22:	460b      	mov	r3, r1
 8017e24:	f003 0301 	and.w	r3, r3, #1
 8017e28:	b2d9      	uxtb	r1, r3
 8017e2a:	48be      	ldr	r0, [pc, #760]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	4403      	add	r3, r0
 8017e36:	f103 0208 	add.w	r2, r3, #8
 8017e3a:	7813      	ldrb	r3, [r2, #0]
 8017e3c:	f361 0341 	bfi	r3, r1, #1, #1
 8017e40:	7013      	strb	r3, [r2, #0]
        break;
 8017e42:	e262      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 8017e44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017e48:	781a      	ldrb	r2, [r3, #0]
 8017e4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017e4e:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017e52:	781b      	ldrb	r3, [r3, #0]
 8017e54:	f002 0201 	and.w	r2, r2, #1
 8017e58:	b2d1      	uxtb	r1, r2
 8017e5a:	4ab3      	ldr	r2, [pc, #716]	; (8018128 <Send_DpmConfigSetCnf+0x44c>)
 8017e5c:	2074      	movs	r0, #116	; 0x74
 8017e5e:	fb00 f303 	mul.w	r3, r0, r3
 8017e62:	441a      	add	r2, r3
 8017e64:	7813      	ldrb	r3, [r2, #0]
 8017e66:	f361 03c3 	bfi	r3, r1, #3, #1
 8017e6a:	7013      	strb	r3, [r2, #0]
        break;
 8017e6c:	e24d      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 8017e6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017e72:	781a      	ldrb	r2, [r3, #0]
 8017e74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017e78:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017e7c:	781b      	ldrb	r3, [r3, #0]
 8017e7e:	f002 0201 	and.w	r2, r2, #1
 8017e82:	b2d1      	uxtb	r1, r2
 8017e84:	4aa8      	ldr	r2, [pc, #672]	; (8018128 <Send_DpmConfigSetCnf+0x44c>)
 8017e86:	2074      	movs	r0, #116	; 0x74
 8017e88:	fb00 f303 	mul.w	r3, r0, r3
 8017e8c:	441a      	add	r2, r3
 8017e8e:	7813      	ldrb	r3, [r2, #0]
 8017e90:	f361 0382 	bfi	r3, r1, #2, #1
 8017e94:	7013      	strb	r3, [r2, #0]
        break;
 8017e96:	e238      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 8017e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017e9c:	7819      	ldrb	r1, [r3, #0]
 8017e9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017ea2:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017ea6:	781a      	ldrb	r2, [r3, #0]
 8017ea8:	460b      	mov	r3, r1
 8017eaa:	f003 0301 	and.w	r3, r3, #1
 8017eae:	b2d9      	uxtb	r1, r3
 8017eb0:	489c      	ldr	r0, [pc, #624]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	005b      	lsls	r3, r3, #1
 8017eb6:	4413      	add	r3, r2
 8017eb8:	009b      	lsls	r3, r3, #2
 8017eba:	18c2      	adds	r2, r0, r3
 8017ebc:	7913      	ldrb	r3, [r2, #4]
 8017ebe:	f361 0382 	bfi	r3, r1, #2, #1
 8017ec2:	7113      	strb	r3, [r2, #4]
        break;
 8017ec4:	e221      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 8017ec6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017eca:	7819      	ldrb	r1, [r3, #0]
 8017ecc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017ed0:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017ed4:	781a      	ldrb	r2, [r3, #0]
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	f003 0301 	and.w	r3, r3, #1
 8017edc:	b2d9      	uxtb	r1, r3
 8017ede:	4891      	ldr	r0, [pc, #580]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	4413      	add	r3, r2
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	18c2      	adds	r2, r0, r3
 8017eea:	7913      	ldrb	r3, [r2, #4]
 8017eec:	f361 03c3 	bfi	r3, r1, #3, #1
 8017ef0:	7113      	strb	r3, [r2, #4]
        break;
 8017ef2:	e20a      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 8017ef4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017ef8:	7819      	ldrb	r1, [r3, #0]
 8017efa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017efe:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017f02:	781a      	ldrb	r2, [r3, #0]
 8017f04:	460b      	mov	r3, r1
 8017f06:	f003 0301 	and.w	r3, r3, #1
 8017f0a:	b2d9      	uxtb	r1, r3
 8017f0c:	4885      	ldr	r0, [pc, #532]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017f0e:	4613      	mov	r3, r2
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	4413      	add	r3, r2
 8017f14:	009b      	lsls	r3, r3, #2
 8017f16:	18c2      	adds	r2, r0, r3
 8017f18:	7953      	ldrb	r3, [r2, #5]
 8017f1a:	f361 1345 	bfi	r3, r1, #5, #1
 8017f1e:	7153      	strb	r3, [r2, #5]
        break;
 8017f20:	e1f3      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 8017f22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017f26:	7819      	ldrb	r1, [r3, #0]
 8017f28:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017f2c:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017f30:	781a      	ldrb	r2, [r3, #0]
 8017f32:	460b      	mov	r3, r1
 8017f34:	f003 0301 	and.w	r3, r3, #1
 8017f38:	b2d9      	uxtb	r1, r3
 8017f3a:	487a      	ldr	r0, [pc, #488]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	005b      	lsls	r3, r3, #1
 8017f40:	4413      	add	r3, r2
 8017f42:	009b      	lsls	r3, r3, #2
 8017f44:	18c2      	adds	r2, r0, r3
 8017f46:	7913      	ldrb	r3, [r2, #4]
 8017f48:	f361 13c7 	bfi	r3, r1, #7, #1
 8017f4c:	7113      	strb	r3, [r2, #4]
        break;
 8017f4e:	e1dc      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 8017f50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017f54:	781a      	ldrb	r2, [r3, #0]
 8017f56:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017f5a:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	f002 0201 	and.w	r2, r2, #1
 8017f64:	b2d1      	uxtb	r1, r2
 8017f66:	4a70      	ldr	r2, [pc, #448]	; (8018128 <Send_DpmConfigSetCnf+0x44c>)
 8017f68:	2074      	movs	r0, #116	; 0x74
 8017f6a:	fb00 f303 	mul.w	r3, r0, r3
 8017f6e:	441a      	add	r2, r3
 8017f70:	7813      	ldrb	r3, [r2, #0]
 8017f72:	f361 0341 	bfi	r3, r1, #1, #1
 8017f76:	7013      	strb	r3, [r2, #0]
        break;
 8017f78:	e1c7      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 8017f7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017f7e:	7819      	ldrb	r1, [r3, #0]
 8017f80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8017f84:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8017f88:	781a      	ldrb	r2, [r3, #0]
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	f003 0301 	and.w	r3, r3, #1
 8017f90:	b2d9      	uxtb	r1, r3
 8017f92:	4864      	ldr	r0, [pc, #400]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017f94:	4613      	mov	r3, r2
 8017f96:	005b      	lsls	r3, r3, #1
 8017f98:	4413      	add	r3, r2
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	18c2      	adds	r2, r0, r3
 8017f9e:	7913      	ldrb	r3, [r2, #4]
 8017fa0:	f361 1386 	bfi	r3, r1, #6, #1
 8017fa4:	7113      	strb	r3, [r2, #4]
        break;
 8017fa6:	e1b0      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 8017fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	b299      	uxth	r1, r3
 8017fb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	021b      	lsls	r3, r3, #8
 8017fbc:	b29b      	uxth	r3, r3
 8017fbe:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8017fc2:	f2a2 1249 	subw	r2, r2, #329	; 0x149
 8017fc6:	7812      	ldrb	r2, [r2, #0]
 8017fc8:	440b      	add	r3, r1
 8017fca:	b298      	uxth	r0, r3
 8017fcc:	4955      	ldr	r1, [pc, #340]	; (8018124 <Send_DpmConfigSetCnf+0x448>)
 8017fce:	4613      	mov	r3, r2
 8017fd0:	005b      	lsls	r3, r3, #1
 8017fd2:	4413      	add	r3, r2
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	440b      	add	r3, r1
 8017fd8:	3308      	adds	r3, #8
 8017fda:	4602      	mov	r2, r0
 8017fdc:	801a      	strh	r2, [r3, #0]
        break;
 8017fde:	e194      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 8017fe0:	221c      	movs	r2, #28
 8017fe2:	2100      	movs	r1, #0
 8017fe4:	4851      	ldr	r0, [pc, #324]	; (801812c <Send_DpmConfigSetCnf+0x450>)
 8017fe6:	f002 f9f7 	bl	801a3d8 <memset>
          index_pdo = 0;
 8017fea:	2300      	movs	r3, #0
 8017fec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8017ff6:	e034      	b.n	8018062 <Send_DpmConfigSetCnf+0x386>
          {
            pdo = USBPD_LE32(&value[index_gui]);
 8017ff8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017ffc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8018000:	4413      	add	r3, r2
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	4619      	mov	r1, r3
 8018006:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801800a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801800e:	3301      	adds	r3, #1
 8018010:	4413      	add	r3, r2
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	021b      	lsls	r3, r3, #8
 8018016:	18ca      	adds	r2, r1, r3
 8018018:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801801c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8018020:	3302      	adds	r3, #2
 8018022:	440b      	add	r3, r1
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	041b      	lsls	r3, r3, #16
 8018028:	441a      	add	r2, r3
 801802a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801802e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8018032:	3303      	adds	r3, #3
 8018034:	440b      	add	r3, r1
 8018036:	781b      	ldrb	r3, [r3, #0]
 8018038:	061b      	lsls	r3, r3, #24
 801803a:	4413      	add	r3, r2
 801803c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 8018040:	493a      	ldr	r1, [pc, #232]	; (801812c <Send_DpmConfigSetCnf+0x450>)
 8018042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8018046:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801804a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            index_pdo++;
 801804e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8018052:	3301      	adds	r3, #1
 8018054:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8018058:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801805c:	3304      	adds	r3, #4
 801805e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8018062:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018066:	461a      	mov	r2, r3
 8018068:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801806c:	4293      	cmp	r3, r2
 801806e:	d3c3      	bcc.n	8017ff8 <Send_DpmConfigSetCnf+0x31c>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 8018070:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018074:	089b      	lsrs	r3, r3, #2
 8018076:	b29b      	uxth	r3, r3
 8018078:	b2da      	uxtb	r2, r3
 801807a:	4b2d      	ldr	r3, [pc, #180]	; (8018130 <Send_DpmConfigSetCnf+0x454>)
 801807c:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 801807e:	f001 f809 	bl	8019094 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8018082:	e142      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSRC, 0, sizeof(PORT0_PDO_ListSRC));
 8018084:	221c      	movs	r2, #28
 8018086:	2100      	movs	r1, #0
 8018088:	482a      	ldr	r0, [pc, #168]	; (8018134 <Send_DpmConfigSetCnf+0x458>)
 801808a:	f002 f9a5 	bl	801a3d8 <memset>
          index_pdo = 0;
 801808e:	2300      	movs	r3, #0
 8018090:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8018094:	2300      	movs	r3, #0
 8018096:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801809a:	e034      	b.n	8018106 <Send_DpmConfigSetCnf+0x42a>
          {
            pdo = USBPD_LE32(&value[index_gui]);
 801809c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80180a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80180a4:	4413      	add	r3, r2
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	4619      	mov	r1, r3
 80180aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80180ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80180b2:	3301      	adds	r3, #1
 80180b4:	4413      	add	r3, r2
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	021b      	lsls	r3, r3, #8
 80180ba:	18ca      	adds	r2, r1, r3
 80180bc:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80180c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80180c4:	3302      	adds	r3, #2
 80180c6:	440b      	add	r3, r1
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	041b      	lsls	r3, r3, #16
 80180cc:	441a      	add	r2, r3
 80180ce:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80180d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80180d6:	3303      	adds	r3, #3
 80180d8:	440b      	add	r3, r1
 80180da:	781b      	ldrb	r3, [r3, #0]
 80180dc:	061b      	lsls	r3, r3, #24
 80180de:	4413      	add	r3, r2
 80180e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            PORT0_PDO_ListSRC[index_pdo] = pdo;
 80180e4:	4913      	ldr	r1, [pc, #76]	; (8018134 <Send_DpmConfigSetCnf+0x458>)
 80180e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80180ea:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80180ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            index_pdo++;
 80180f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80180f6:	3301      	adds	r3, #1
 80180f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80180fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8018100:	3304      	adds	r3, #4
 8018102:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8018106:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801810a:	461a      	mov	r2, r3
 801810c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8018110:	4293      	cmp	r3, r2
 8018112:	d3c3      	bcc.n	801809c <Send_DpmConfigSetCnf+0x3c0>
          }
          USBPD_NbPDO[1] = (uint8_t)(size / 4U);
 8018114:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8018118:	089b      	lsrs	r3, r3, #2
 801811a:	b29b      	uxth	r3, r3
 801811c:	b2da      	uxtb	r2, r3
 801811e:	4b04      	ldr	r3, [pc, #16]	; (8018130 <Send_DpmConfigSetCnf+0x454>)
 8018120:	705a      	strb	r2, [r3, #1]
            index_pdo++;
          }
          USBPD_NbPDO[3] = (uint8_t)(size / 4U);
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8018122:	e0f2      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
 8018124:	20000004 	.word	0x20000004
 8018128:	20000018 	.word	0x20000018
 801812c:	200000ac 	.word	0x200000ac
 8018130:	2000008c 	.word	0x2000008c
 8018134:	20000090 	.word	0x20000090
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8018138:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8018142:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018146:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8018150:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8018154:	b2d1      	uxtb	r1, r2
 8018156:	4a5e      	ldr	r2, [pc, #376]	; (80182d0 <Send_DpmConfigSetCnf+0x5f4>)
 8018158:	2074      	movs	r0, #116	; 0x74
 801815a:	fb00 f303 	mul.w	r3, r0, r3
 801815e:	4413      	add	r3, r2
 8018160:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018164:	7913      	ldrb	r3, [r2, #4]
 8018166:	f361 0347 	bfi	r3, r1, #1, #7
 801816a:	7113      	strb	r3, [r2, #4]
        flag_drp = 1;
 801816c:	2301      	movs	r3, #1
 801816e:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
        break;
 8018172:	e0ca      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 8018174:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018178:	781b      	ldrb	r3, [r3, #0]
 801817a:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 801817e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018182:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 801818c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8018190:	b2d1      	uxtb	r1, r2
 8018192:	4a4f      	ldr	r2, [pc, #316]	; (80182d0 <Send_DpmConfigSetCnf+0x5f4>)
 8018194:	2074      	movs	r0, #116	; 0x74
 8018196:	fb00 f303 	mul.w	r3, r0, r3
 801819a:	4413      	add	r3, r2
 801819c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80181a0:	7953      	ldrb	r3, [r2, #5]
 80181a2:	f361 0306 	bfi	r3, r1, #0, #7
 80181a6:	7153      	strb	r3, [r2, #5]
        flag_drp = 1;
 80181a8:	2301      	movs	r3, #1
 80181aa:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
        break;
 80181ae:	e0ac      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 80181b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80181b4:	7819      	ldrb	r1, [r3, #0]
 80181b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80181ba:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80181be:	781a      	ldrb	r2, [r3, #0]
 80181c0:	460b      	mov	r3, r1
 80181c2:	f003 0301 	and.w	r3, r3, #1
 80181c6:	b2d9      	uxtb	r1, r3
 80181c8:	4842      	ldr	r0, [pc, #264]	; (80182d4 <Send_DpmConfigSetCnf+0x5f8>)
 80181ca:	4613      	mov	r3, r2
 80181cc:	005b      	lsls	r3, r3, #1
 80181ce:	4413      	add	r3, r2
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	18c2      	adds	r2, r0, r3
 80181d4:	7953      	ldrb	r3, [r2, #5]
 80181d6:	f361 0300 	bfi	r3, r1, #0, #1
 80181da:	7153      	strb	r3, [r2, #5]
        break;
 80181dc:	e095      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 80181de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80181e2:	7819      	ldrb	r1, [r3, #0]
 80181e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80181e8:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80181ec:	781a      	ldrb	r2, [r3, #0]
 80181ee:	460b      	mov	r3, r1
 80181f0:	f003 0301 	and.w	r3, r3, #1
 80181f4:	b2d9      	uxtb	r1, r3
 80181f6:	4837      	ldr	r0, [pc, #220]	; (80182d4 <Send_DpmConfigSetCnf+0x5f8>)
 80181f8:	4613      	mov	r3, r2
 80181fa:	005b      	lsls	r3, r3, #1
 80181fc:	4413      	add	r3, r2
 80181fe:	009b      	lsls	r3, r3, #2
 8018200:	18c2      	adds	r2, r0, r3
 8018202:	7953      	ldrb	r3, [r2, #5]
 8018204:	f361 0341 	bfi	r3, r1, #1, #1
 8018208:	7153      	strb	r3, [r2, #5]
        break;
 801820a:	e07e      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 801820c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	461a      	mov	r2, r3
 8018214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018218:	3301      	adds	r3, #1
 801821a:	781b      	ldrb	r3, [r3, #0]
 801821c:	021b      	lsls	r3, r3, #8
 801821e:	441a      	add	r2, r3
 8018220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018224:	3302      	adds	r3, #2
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	041b      	lsls	r3, r3, #16
 801822a:	18d1      	adds	r1, r2, r3
 801822c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018230:	3303      	adds	r3, #3
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	061a      	lsls	r2, r3, #24
 8018236:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801823a:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	440a      	add	r2, r1
 8018242:	4925      	ldr	r1, [pc, #148]	; (80182d8 <Send_DpmConfigSetCnf+0x5fc>)
 8018244:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        break;
 8018248:	e05f      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 801824a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	b299      	uxth	r1, r3
 8018252:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018256:	3301      	adds	r3, #1
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	b29b      	uxth	r3, r3
 801825c:	021b      	lsls	r3, r3, #8
 801825e:	b29a      	uxth	r2, r3
 8018260:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018264:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	440a      	add	r2, r1
 801826c:	b291      	uxth	r1, r2
 801826e:	4a1a      	ldr	r2, [pc, #104]	; (80182d8 <Send_DpmConfigSetCnf+0x5fc>)
 8018270:	00db      	lsls	r3, r3, #3
 8018272:	4413      	add	r3, r2
 8018274:	460a      	mov	r2, r1
 8018276:	809a      	strh	r2, [r3, #4]
        break;
 8018278:	e047      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 801827a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801827e:	781b      	ldrb	r3, [r3, #0]
 8018280:	b299      	uxth	r1, r3
 8018282:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018286:	3301      	adds	r3, #1
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	b29b      	uxth	r3, r3
 801828c:	021b      	lsls	r3, r3, #8
 801828e:	b29a      	uxth	r2, r3
 8018290:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018294:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018298:	781b      	ldrb	r3, [r3, #0]
 801829a:	440a      	add	r2, r1
 801829c:	b291      	uxth	r1, r2
 801829e:	4a0e      	ldr	r2, [pc, #56]	; (80182d8 <Send_DpmConfigSetCnf+0x5fc>)
 80182a0:	00db      	lsls	r3, r3, #3
 80182a2:	4413      	add	r3, r2
 80182a4:	460a      	mov	r2, r1
 80182a6:	80da      	strh	r2, [r3, #6]
        break;
 80182a8:	e02f      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 80182aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80182ae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80182b2:	f2a2 1249 	subw	r2, r2, #329	; 0x149
 80182b6:	7812      	ldrb	r2, [r2, #0]
 80182b8:	7818      	ldrb	r0, [r3, #0]
 80182ba:	4908      	ldr	r1, [pc, #32]	; (80182dc <Send_DpmConfigSetCnf+0x600>)
 80182bc:	4613      	mov	r3, r2
 80182be:	005b      	lsls	r3, r3, #1
 80182c0:	4413      	add	r3, r2
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	440b      	add	r3, r1
 80182c6:	3304      	adds	r3, #4
 80182c8:	4602      	mov	r2, r0
 80182ca:	701a      	strb	r2, [r3, #0]
        break;
 80182cc:	e01d      	b.n	801830a <Send_DpmConfigSetCnf+0x62e>
 80182ce:	bf00      	nop
 80182d0:	20000018 	.word	0x20000018
 80182d4:	20000004 	.word	0x20000004
 80182d8:	20000010 	.word	0x20000010
 80182dc:	20002c2c 	.word	0x20002c2c
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 80182e0:	2300      	movs	r3, #0
 80182e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        param_not_applicated[counter_param_not_applicated] = tag;
 80182e6:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80182ea:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80182ee:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 80182f2:	7811      	ldrb	r1, [r2, #0]
 80182f4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80182f8:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80182fc:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 80182fe:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8018302:	3301      	adds	r3, #1
 8018304:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
        break;
 8018308:	bf00      	nop
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 801830a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801830e:	f507 728b 	add.w	r2, r7, #278	; 0x116
 8018312:	f107 0113 	add.w	r1, r7, #19
 8018316:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 801831a:	f7fd fdd1 	bl	8015ec0 <TLV_get>
 801831e:	4603      	mov	r3, r0
 8018320:	2bff      	cmp	r3, #255	; 0xff
 8018322:	f47f ad1f 	bne.w	8017d64 <Send_DpmConfigSetCnf+0x88>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8018326:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 801832a:	2b01      	cmp	r3, #1
 801832c:	f040 8093 	bne.w	8018456 <Send_DpmConfigSetCnf+0x77a>
  {
    uint16_t calcul;
    if (0U == tdrp)
 8018330:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8018334:	2b00      	cmp	r3, #0
 8018336:	d11c      	bne.n	8018372 <Send_DpmConfigSetCnf+0x696>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 8018338:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801833c:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018340:	781a      	ldrb	r2, [r3, #0]
 8018342:	496d      	ldr	r1, [pc, #436]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 8018344:	4613      	mov	r3, r2
 8018346:	005b      	lsls	r3, r3, #1
 8018348:	4413      	add	r3, r2
 801834a:	009b      	lsls	r3, r3, #2
 801834c:	440b      	add	r3, r1
 801834e:	3306      	adds	r3, #6
 8018350:	7819      	ldrb	r1, [r3, #0]
 8018352:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018356:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 801835a:	781a      	ldrb	r2, [r3, #0]
 801835c:	4866      	ldr	r0, [pc, #408]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 801835e:	4613      	mov	r3, r2
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	4413      	add	r3, r2
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	4403      	add	r3, r0
 8018368:	3307      	adds	r3, #7
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	440b      	add	r3, r1
 801836e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
    }
    if (0U == dcdrp)
 8018372:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8018376:	2b00      	cmp	r3, #0
 8018378:	d130      	bne.n	80183dc <Send_DpmConfigSetCnf+0x700>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 801837a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801837e:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018382:	781a      	ldrb	r2, [r3, #0]
 8018384:	495c      	ldr	r1, [pc, #368]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 8018386:	4613      	mov	r3, r2
 8018388:	005b      	lsls	r3, r3, #1
 801838a:	4413      	add	r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	440b      	add	r3, r1
 8018390:	3307      	adds	r3, #7
 8018392:	781b      	ldrb	r3, [r3, #0]
 8018394:	461a      	mov	r2, r3
 8018396:	2364      	movs	r3, #100	; 0x64
 8018398:	fb03 f102 	mul.w	r1, r3, r2
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 801839c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80183a0:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80183a4:	781a      	ldrb	r2, [r3, #0]
 80183a6:	4854      	ldr	r0, [pc, #336]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 80183a8:	4613      	mov	r3, r2
 80183aa:	005b      	lsls	r3, r3, #1
 80183ac:	4413      	add	r3, r2
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	4403      	add	r3, r0
 80183b2:	3306      	adds	r3, #6
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	461c      	mov	r4, r3
 80183b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80183bc:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80183c0:	781a      	ldrb	r2, [r3, #0]
 80183c2:	484d      	ldr	r0, [pc, #308]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 80183c4:	4613      	mov	r3, r2
 80183c6:	005b      	lsls	r3, r3, #1
 80183c8:	4413      	add	r3, r2
 80183ca:	009b      	lsls	r3, r3, #2
 80183cc:	4403      	add	r3, r0
 80183ce:	3307      	adds	r3, #7
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	4423      	add	r3, r4
 80183d4:	fbb1 f3f3 	udiv	r3, r1, r3
      dcdrp = (uint16_t)
 80183d8:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
    }
    calcul = (tdrp * dcdrp) / 100U;
 80183dc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80183e0:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 80183e4:	fb02 f303 	mul.w	r3, r2, r3
 80183e8:	461a      	mov	r2, r3
 80183ea:	4b44      	ldr	r3, [pc, #272]	; (80184fc <Send_DpmConfigSetCnf+0x820>)
 80183ec:	fba3 2302 	umull	r2, r3, r3, r2
 80183f0:	095b      	lsrs	r3, r3, #5
 80183f2:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80183f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80183fa:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 80183fe:	781a      	ldrb	r2, [r3, #0]
 8018400:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8018404:	b2d8      	uxtb	r0, r3
 8018406:	493c      	ldr	r1, [pc, #240]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 8018408:	4613      	mov	r3, r2
 801840a:	005b      	lsls	r3, r3, #1
 801840c:	4413      	add	r3, r2
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	440b      	add	r3, r1
 8018412:	3307      	adds	r3, #7
 8018414:	4602      	mov	r2, r0
 8018416:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 8018418:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 801841c:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8018420:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8018424:	fb02 f303 	mul.w	r3, r2, r3
 8018428:	4a34      	ldr	r2, [pc, #208]	; (80184fc <Send_DpmConfigSetCnf+0x820>)
 801842a:	fba2 2303 	umull	r2, r3, r2, r3
 801842e:	095b      	lsrs	r3, r3, #5
 8018430:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8018434:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018438:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 801843c:	781a      	ldrb	r2, [r3, #0]
 801843e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8018442:	b2d8      	uxtb	r0, r3
 8018444:	492c      	ldr	r1, [pc, #176]	; (80184f8 <Send_DpmConfigSetCnf+0x81c>)
 8018446:	4613      	mov	r3, r2
 8018448:	005b      	lsls	r3, r3, #1
 801844a:	4413      	add	r3, r2
 801844c:	009b      	lsls	r3, r3, #2
 801844e:	440b      	add	r3, r1
 8018450:	3306      	adds	r3, #6
 8018452:	4602      	mov	r2, r0
 8018454:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8018456:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 801845a:	2bff      	cmp	r3, #255	; 0xff
 801845c:	d046      	beq.n	80184ec <Send_DpmConfigSetCnf+0x810>
  {
    TLV_deinit_encode(&send_tlv);
 801845e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018462:	4618      	mov	r0, r3
 8018464:	f7fd fcea 	bl	8015e3c <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8018468:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801846c:	f2a3 1349 	subw	r3, r3, #329	; 0x149
 8018470:	781b      	ldrb	r3, [r3, #0]
 8018472:	3301      	adds	r3, #1
 8018474:	015b      	lsls	r3, r3, #5
 8018476:	b25b      	sxtb	r3, r3
 8018478:	f043 0308 	orr.w	r3, r3, #8
 801847c:	b25b      	sxtb	r3, r3
 801847e:	b2d9      	uxtb	r1, r3
 8018480:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018484:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8018488:	f507 7092 	add.w	r0, r7, #292	; 0x124
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018492:	f7fd fb2c 	bl	8015aee <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8018496:	f207 1115 	addw	r1, r7, #277	; 0x115
 801849a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801849e:	2201      	movs	r2, #1
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7fd fc3b 	bl	8015d1c <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 80184a6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d019      	beq.n	80184e2 <Send_DpmConfigSetCnf+0x806>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 80184ae:	2300      	movs	r3, #0
 80184b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80184b4:	e00f      	b.n	80184d6 <Send_DpmConfigSetCnf+0x7fa>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 80184b6:	f107 0214 	add.w	r2, r7, #20
 80184ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80184be:	18d1      	adds	r1, r2, r3
 80184c0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80184c4:	2201      	movs	r2, #1
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fd fc28 	bl	8015d1c <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 80184cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80184d0:	3301      	adds	r3, #1
 80184d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80184d6:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80184da:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80184de:	429a      	cmp	r2, r3
 80184e0:	d3e9      	bcc.n	80184b6 <Send_DpmConfigSetCnf+0x7da>
      }
    }
    TLV_deinit_encode(&send_tlv);
 80184e2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7fd fca8 	bl	8015e3c <TLV_deinit_encode>
  }
}
 80184ec:	bf00      	nop
 80184ee:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd90      	pop	{r4, r7, pc}
 80184f6:	bf00      	nop
 80184f8:	20000004 	.word	0x20000004
 80184fc:	51eb851f 	.word	0x51eb851f

08018500 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b094      	sub	sp, #80	; 0x50
 8018504:	af00      	add	r7, sp, #0
 8018506:	4603      	mov	r3, r0
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
 801850c:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801850e:	7bfb      	ldrb	r3, [r7, #15]
 8018510:	3301      	adds	r3, #1
 8018512:	015b      	lsls	r3, r3, #5
 8018514:	b25b      	sxtb	r3, r3
 8018516:	f043 0305 	orr.w	r3, r3, #5
 801851a:	b25b      	sxtb	r3, r3
 801851c:	b2d9      	uxtb	r1, r3
 801851e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018528:	f7fd fae1 	bl	8015aee <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 801852c:	68b8      	ldr	r0, [r7, #8]
 801852e:	f7fd fd33 	bl	8015f98 <TLV_get_string_length>
 8018532:	4603      	mov	r3, r0
 8018534:	3b03      	subs	r3, #3
 8018536:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint8_t index = 0;
 801853a:	2300      	movs	r3, #0
 801853c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 8018540:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018544:	2b00      	cmp	r3, #0
 8018546:	d103      	bne.n	8018550 <Send_DpmConfigGetCnf+0x50>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8018548:	23ff      	movs	r3, #255	; 0xff
 801854a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801854e:	e007      	b.n	8018560 <Send_DpmConfigGetCnf+0x60>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8018550:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018554:	3307      	adds	r3, #7
 8018556:	68ba      	ldr	r2, [r7, #8]
 8018558:	4413      	add	r3, r2
 801855a:	781b      	ldrb	r3, [r3, #0]
 801855c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8018560:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8018564:	2b1c      	cmp	r3, #28
 8018566:	dc43      	bgt.n	80185f0 <Send_DpmConfigGetCnf+0xf0>
 8018568:	2b00      	cmp	r3, #0
 801856a:	f2c0 8247 	blt.w	80189fc <Send_DpmConfigGetCnf+0x4fc>
 801856e:	2b1c      	cmp	r3, #28
 8018570:	f200 8244 	bhi.w	80189fc <Send_DpmConfigGetCnf+0x4fc>
 8018574:	a201      	add	r2, pc, #4	; (adr r2, 801857c <Send_DpmConfigGetCnf+0x7c>)
 8018576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801857a:	bf00      	nop
 801857c:	080185f7 	.word	0x080185f7
 8018580:	080189fd 	.word	0x080189fd
 8018584:	08018627 	.word	0x08018627
 8018588:	0801865d 	.word	0x0801865d
 801858c:	080186c1 	.word	0x080186c1
 8018590:	080186f5 	.word	0x080186f5
 8018594:	08018729 	.word	0x08018729
 8018598:	0801875d 	.word	0x0801875d
 801859c:	080187f3 	.word	0x080187f3
 80185a0:	080189fd 	.word	0x080189fd
 80185a4:	08018791 	.word	0x08018791
 80185a8:	080187c5 	.word	0x080187c5
 80185ac:	08018825 	.word	0x08018825
 80185b0:	08018851 	.word	0x08018851
 80185b4:	0801887d 	.word	0x0801887d
 80185b8:	080188b1 	.word	0x080188b1
 80185bc:	080188e5 	.word	0x080188e5
 80185c0:	08018919 	.word	0x08018919
 80185c4:	0801894b 	.word	0x0801894b
 80185c8:	080189fd 	.word	0x080189fd
 80185cc:	080189fd 	.word	0x080189fd
 80185d0:	080189fd 	.word	0x080189fd
 80185d4:	080189fd 	.word	0x080189fd
 80185d8:	08018989 	.word	0x08018989
 80185dc:	080189ad 	.word	0x080189ad
 80185e0:	080189fd 	.word	0x080189fd
 80185e4:	080189d1 	.word	0x080189d1
 80185e8:	080189fd 	.word	0x080189fd
 80185ec:	0801868f 	.word	0x0801868f
 80185f0:	2bff      	cmp	r3, #255	; 0xff
 80185f2:	f040 8203 	bne.w	80189fc <Send_DpmConfigGetCnf+0x4fc>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 80185f6:	7bfa      	ldrb	r2, [r7, #15]
 80185f8:	49d7      	ldr	r1, [pc, #860]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 80185fa:	4613      	mov	r3, r2
 80185fc:	005b      	lsls	r3, r3, #1
 80185fe:	4413      	add	r3, r2
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	440b      	add	r3, r1
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	b2db      	uxtb	r3, r3
 8018608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 801860c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8018610:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018614:	2201      	movs	r2, #1
 8018616:	2100      	movs	r1, #0
 8018618:	f7fd fac2 	bl	8015ba0 <TLV_add>
        if (0U != length)
 801861c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018620:	2b00      	cmp	r3, #0
 8018622:	f040 81fb 	bne.w	8018a1c <Send_DpmConfigGetCnf+0x51c>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8018626:	7bfa      	ldrb	r2, [r7, #15]
 8018628:	49cb      	ldr	r1, [pc, #812]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 801862a:	4613      	mov	r3, r2
 801862c:	005b      	lsls	r3, r3, #1
 801862e:	4413      	add	r3, r2
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	440b      	add	r3, r1
 8018634:	3308      	adds	r3, #8
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801863c:	b2db      	uxtb	r3, r3
 801863e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8018642:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8018646:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801864a:	2201      	movs	r2, #1
 801864c:	2102      	movs	r1, #2
 801864e:	f7fd faa7 	bl	8015ba0 <TLV_add>
        if (0U != length)
 8018652:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018656:	2b00      	cmp	r3, #0
 8018658:	f040 81e2 	bne.w	8018a20 <Send_DpmConfigGetCnf+0x520>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 801865c:	7bfb      	ldrb	r3, [r7, #15]
 801865e:	4abf      	ldr	r2, [pc, #764]	; (801895c <Send_DpmConfigGetCnf+0x45c>)
 8018660:	2174      	movs	r1, #116	; 0x74
 8018662:	fb01 f303 	mul.w	r3, r1, r3
 8018666:	4413      	add	r3, r2
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801866e:	b2db      	uxtb	r3, r3
 8018670:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8018674:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8018678:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801867c:	2201      	movs	r2, #1
 801867e:	2103      	movs	r1, #3
 8018680:	f7fd fa8e 	bl	8015ba0 <TLV_add>
        if (0U != length)
 8018684:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018688:	2b00      	cmp	r3, #0
 801868a:	f040 81cb 	bne.w	8018a24 <Send_DpmConfigGetCnf+0x524>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 801868e:	7bfb      	ldrb	r3, [r7, #15]
 8018690:	4ab2      	ldr	r2, [pc, #712]	; (801895c <Send_DpmConfigGetCnf+0x45c>)
 8018692:	2174      	movs	r1, #116	; 0x74
 8018694:	fb01 f303 	mul.w	r3, r1, r3
 8018698:	4413      	add	r3, r2
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 80186a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80186aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80186ae:	2201      	movs	r2, #1
 80186b0:	211c      	movs	r1, #28
 80186b2:	f7fd fa75 	bl	8015ba0 <TLV_add>
        if (0U != length)
 80186b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	f040 81b4 	bne.w	8018a28 <Send_DpmConfigGetCnf+0x528>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 80186c0:	7bfa      	ldrb	r2, [r7, #15]
 80186c2:	49a5      	ldr	r1, [pc, #660]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 80186c4:	4613      	mov	r3, r2
 80186c6:	005b      	lsls	r3, r3, #1
 80186c8:	4413      	add	r3, r2
 80186ca:	009b      	lsls	r3, r3, #2
 80186cc:	440b      	add	r3, r1
 80186ce:	791b      	ldrb	r3, [r3, #4]
 80186d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80186d4:	b2db      	uxtb	r3, r3
 80186d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 80186da:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80186de:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80186e2:	2201      	movs	r2, #1
 80186e4:	2104      	movs	r1, #4
 80186e6:	f7fd fa5b 	bl	8015ba0 <TLV_add>
        if (0U != length)
 80186ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	f040 819c 	bne.w	8018a2c <Send_DpmConfigGetCnf+0x52c>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 80186f4:	7bfa      	ldrb	r2, [r7, #15]
 80186f6:	4998      	ldr	r1, [pc, #608]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 80186f8:	4613      	mov	r3, r2
 80186fa:	005b      	lsls	r3, r3, #1
 80186fc:	4413      	add	r3, r2
 80186fe:	009b      	lsls	r3, r3, #2
 8018700:	440b      	add	r3, r1
 8018702:	791b      	ldrb	r3, [r3, #4]
 8018704:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018708:	b2db      	uxtb	r3, r3
 801870a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 801870e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8018712:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018716:	2201      	movs	r2, #1
 8018718:	2105      	movs	r1, #5
 801871a:	f7fd fa41 	bl	8015ba0 <TLV_add>
        if (0U != length)
 801871e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018722:	2b00      	cmp	r3, #0
 8018724:	f040 8184 	bne.w	8018a30 <Send_DpmConfigGetCnf+0x530>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8018728:	7bfa      	ldrb	r2, [r7, #15]
 801872a:	498b      	ldr	r1, [pc, #556]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 801872c:	4613      	mov	r3, r2
 801872e:	005b      	lsls	r3, r3, #1
 8018730:	4413      	add	r3, r2
 8018732:	009b      	lsls	r3, r3, #2
 8018734:	440b      	add	r3, r1
 8018736:	795b      	ldrb	r3, [r3, #5]
 8018738:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801873c:	b2db      	uxtb	r3, r3
 801873e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8018742:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8018746:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801874a:	2201      	movs	r2, #1
 801874c:	2106      	movs	r1, #6
 801874e:	f7fd fa27 	bl	8015ba0 <TLV_add>
        if (0U != length)
 8018752:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018756:	2b00      	cmp	r3, #0
 8018758:	f040 816c 	bne.w	8018a34 <Send_DpmConfigGetCnf+0x534>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 801875c:	7bfa      	ldrb	r2, [r7, #15]
 801875e:	497e      	ldr	r1, [pc, #504]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 8018760:	4613      	mov	r3, r2
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	4413      	add	r3, r2
 8018766:	009b      	lsls	r3, r3, #2
 8018768:	440b      	add	r3, r1
 801876a:	791b      	ldrb	r3, [r3, #4]
 801876c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018770:	b2db      	uxtb	r3, r3
 8018772:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8018776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801877a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801877e:	2201      	movs	r2, #1
 8018780:	2107      	movs	r1, #7
 8018782:	f7fd fa0d 	bl	8015ba0 <TLV_add>
        if (0U != length)
 8018786:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801878a:	2b00      	cmp	r3, #0
 801878c:	f040 8154 	bne.w	8018a38 <Send_DpmConfigGetCnf+0x538>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8018790:	7bfa      	ldrb	r2, [r7, #15]
 8018792:	4971      	ldr	r1, [pc, #452]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 8018794:	4613      	mov	r3, r2
 8018796:	005b      	lsls	r3, r3, #1
 8018798:	4413      	add	r3, r2
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	440b      	add	r3, r1
 801879e:	791b      	ldrb	r3, [r3, #4]
 80187a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 80187aa:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80187ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80187b2:	2201      	movs	r2, #1
 80187b4:	210a      	movs	r1, #10
 80187b6:	f7fd f9f3 	bl	8015ba0 <TLV_add>
        if (0U != length)
 80187ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80187be:	2b00      	cmp	r3, #0
 80187c0:	f040 813c 	bne.w	8018a3c <Send_DpmConfigGetCnf+0x53c>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 80187c4:	7bfa      	ldrb	r2, [r7, #15]
 80187c6:	4964      	ldr	r1, [pc, #400]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 80187c8:	4613      	mov	r3, r2
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	4413      	add	r3, r2
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	440b      	add	r3, r1
 80187d2:	3308      	adds	r3, #8
 80187d4:	881b      	ldrh	r3, [r3, #0]
 80187d6:	84bb      	strh	r3, [r7, #36]	; 0x24
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 80187d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80187dc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80187e0:	2202      	movs	r2, #2
 80187e2:	210b      	movs	r1, #11
 80187e4:	f7fd f9dc 	bl	8015ba0 <TLV_add>
        if (0U != length)
 80187e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	f040 8127 	bne.w	8018a40 <Send_DpmConfigGetCnf+0x540>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 80187f2:	7bfb      	ldrb	r3, [r7, #15]
 80187f4:	4a59      	ldr	r2, [pc, #356]	; (801895c <Send_DpmConfigGetCnf+0x45c>)
 80187f6:	2174      	movs	r1, #116	; 0x74
 80187f8:	fb01 f303 	mul.w	r3, r1, r3
 80187fc:	4413      	add	r3, r2
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018804:	b2db      	uxtb	r3, r3
 8018806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 801880a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801880e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018812:	2201      	movs	r2, #1
 8018814:	2108      	movs	r1, #8
 8018816:	f7fd f9c3 	bl	8015ba0 <TLV_add>
        if (0U != length)
 801881a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801881e:	2b00      	cmp	r3, #0
 8018820:	f040 8110 	bne.w	8018a44 <Send_DpmConfigGetCnf+0x544>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8018824:	4b4e      	ldr	r3, [pc, #312]	; (8018960 <Send_DpmConfigGetCnf+0x460>)
 8018826:	781b      	ldrb	r3, [r3, #0]
 8018828:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 801882c:	4b4d      	ldr	r3, [pc, #308]	; (8018964 <Send_DpmConfigGetCnf+0x464>)
 801882e:	647b      	str	r3, [r7, #68]	; 0x44
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8018830:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8018834:	b29b      	uxth	r3, r3
 8018836:	009b      	lsls	r3, r3, #2
 8018838:	b29a      	uxth	r2, r3
 801883a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801883e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018840:	210c      	movs	r1, #12
 8018842:	f7fd f9ad 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 8018846:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801884a:	2b00      	cmp	r3, #0
 801884c:	f040 80fc 	bne.w	8018a48 <Send_DpmConfigGetCnf+0x548>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[1];
 8018850:	4b43      	ldr	r3, [pc, #268]	; (8018960 <Send_DpmConfigGetCnf+0x460>)
 8018852:	785b      	ldrb	r3, [r3, #1]
 8018854:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
          list_pdo  = (uint8_t *)PORT0_PDO_ListSRC;
 8018858:	4b43      	ldr	r3, [pc, #268]	; (8018968 <Send_DpmConfigGetCnf+0x468>)
 801885a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[3];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSRC;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SRC_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 801885c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018860:	b29b      	uxth	r3, r3
 8018862:	009b      	lsls	r3, r3, #2
 8018864:	b29a      	uxth	r2, r3
 8018866:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801886c:	210d      	movs	r1, #13
 801886e:	f7fd f997 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 8018872:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018876:	2b00      	cmp	r3, #0
 8018878:	f040 80e8 	bne.w	8018a4c <Send_DpmConfigGetCnf+0x54c>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 801887c:	7bfb      	ldrb	r3, [r7, #15]
 801887e:	4a37      	ldr	r2, [pc, #220]	; (801895c <Send_DpmConfigGetCnf+0x45c>)
 8018880:	2174      	movs	r1, #116	; 0x74
 8018882:	fb01 f303 	mul.w	r3, r1, r3
 8018886:	4413      	add	r3, r2
 8018888:	3368      	adds	r3, #104	; 0x68
 801888a:	791b      	ldrb	r3, [r3, #4]
 801888c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8018890:	b2db      	uxtb	r3, r3
 8018892:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8018896:	f107 0322 	add.w	r3, r7, #34	; 0x22
 801889a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801889e:	2201      	movs	r2, #1
 80188a0:	210e      	movs	r1, #14
 80188a2:	f7fd f97d 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 80188a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	f040 80d0 	bne.w	8018a50 <Send_DpmConfigGetCnf+0x550>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 80188b0:	7bfb      	ldrb	r3, [r7, #15]
 80188b2:	4a2a      	ldr	r2, [pc, #168]	; (801895c <Send_DpmConfigGetCnf+0x45c>)
 80188b4:	2174      	movs	r1, #116	; 0x74
 80188b6:	fb01 f303 	mul.w	r3, r1, r3
 80188ba:	4413      	add	r3, r2
 80188bc:	3368      	adds	r3, #104	; 0x68
 80188be:	795b      	ldrb	r3, [r3, #5]
 80188c0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80188c4:	b2db      	uxtb	r3, r3
 80188c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 80188ca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80188ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80188d2:	2201      	movs	r2, #1
 80188d4:	210f      	movs	r1, #15
 80188d6:	f7fd f963 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 80188da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f040 80b8 	bne.w	8018a54 <Send_DpmConfigGetCnf+0x554>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 80188e4:	7bfa      	ldrb	r2, [r7, #15]
 80188e6:	491c      	ldr	r1, [pc, #112]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 80188e8:	4613      	mov	r3, r2
 80188ea:	005b      	lsls	r3, r3, #1
 80188ec:	4413      	add	r3, r2
 80188ee:	009b      	lsls	r3, r3, #2
 80188f0:	440b      	add	r3, r1
 80188f2:	795b      	ldrb	r3, [r3, #5]
 80188f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	f887 3020 	strb.w	r3, [r7, #32]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 80188fe:	f107 0320 	add.w	r3, r7, #32
 8018902:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018906:	2201      	movs	r2, #1
 8018908:	2110      	movs	r1, #16
 801890a:	f7fd f949 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 801890e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018912:	2b00      	cmp	r3, #0
 8018914:	f040 80a0 	bne.w	8018a58 <Send_DpmConfigGetCnf+0x558>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8018918:	7bfa      	ldrb	r2, [r7, #15]
 801891a:	490f      	ldr	r1, [pc, #60]	; (8018958 <Send_DpmConfigGetCnf+0x458>)
 801891c:	4613      	mov	r3, r2
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	4413      	add	r3, r2
 8018922:	009b      	lsls	r3, r3, #2
 8018924:	440b      	add	r3, r1
 8018926:	795b      	ldrb	r3, [r3, #5]
 8018928:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801892c:	b2db      	uxtb	r3, r3
 801892e:	77fb      	strb	r3, [r7, #31]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8018930:	f107 031f 	add.w	r3, r7, #31
 8018934:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018938:	2201      	movs	r2, #1
 801893a:	2111      	movs	r1, #17
 801893c:	f7fd f930 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 8018940:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018944:	2b00      	cmp	r3, #0
 8018946:	f040 8089 	bne.w	8018a5c <Send_DpmConfigGetCnf+0x55c>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 801894a:	7bfb      	ldrb	r3, [r7, #15]
 801894c:	4a07      	ldr	r2, [pc, #28]	; (801896c <Send_DpmConfigGetCnf+0x46c>)
 801894e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018952:	61bb      	str	r3, [r7, #24]
 8018954:	e00c      	b.n	8018970 <Send_DpmConfigGetCnf+0x470>
 8018956:	bf00      	nop
 8018958:	20000004 	.word	0x20000004
 801895c:	20000018 	.word	0x20000018
 8018960:	2000008c 	.word	0x2000008c
 8018964:	200000ac 	.word	0x200000ac
 8018968:	20000090 	.word	0x20000090
 801896c:	20000010 	.word	0x20000010
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8018970:	f107 0318 	add.w	r3, r7, #24
 8018974:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018978:	2204      	movs	r2, #4
 801897a:	2112      	movs	r1, #18
 801897c:	f7fd f910 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 8018980:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018984:	2b00      	cmp	r3, #0
 8018986:	d16b      	bne.n	8018a60 <Send_DpmConfigGetCnf+0x560>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8018988:	7bfb      	ldrb	r3, [r7, #15]
 801898a:	4a45      	ldr	r2, [pc, #276]	; (8018aa0 <Send_DpmConfigGetCnf+0x5a0>)
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	4413      	add	r3, r2
 8018990:	889b      	ldrh	r3, [r3, #4]
 8018992:	82fb      	strh	r3, [r7, #22]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8018994:	f107 0316 	add.w	r3, r7, #22
 8018998:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801899c:	2202      	movs	r2, #2
 801899e:	2117      	movs	r1, #23
 80189a0:	f7fd f8fe 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 80189a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d15b      	bne.n	8018a64 <Send_DpmConfigGetCnf+0x564>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 80189ac:	7bfb      	ldrb	r3, [r7, #15]
 80189ae:	4a3c      	ldr	r2, [pc, #240]	; (8018aa0 <Send_DpmConfigGetCnf+0x5a0>)
 80189b0:	00db      	lsls	r3, r3, #3
 80189b2:	4413      	add	r3, r2
 80189b4:	88db      	ldrh	r3, [r3, #6]
 80189b6:	82bb      	strh	r3, [r7, #20]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 80189b8:	f107 0314 	add.w	r3, r7, #20
 80189bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80189c0:	2202      	movs	r2, #2
 80189c2:	2118      	movs	r1, #24
 80189c4:	f7fd f8ec 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 80189c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d14b      	bne.n	8018a68 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 80189d0:	7bfa      	ldrb	r2, [r7, #15]
 80189d2:	4934      	ldr	r1, [pc, #208]	; (8018aa4 <Send_DpmConfigGetCnf+0x5a4>)
 80189d4:	4613      	mov	r3, r2
 80189d6:	005b      	lsls	r3, r3, #1
 80189d8:	4413      	add	r3, r2
 80189da:	005b      	lsls	r3, r3, #1
 80189dc:	440b      	add	r3, r1
 80189de:	3304      	adds	r3, #4
 80189e0:	781b      	ldrb	r3, [r3, #0]
 80189e2:	74fb      	strb	r3, [r7, #19]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 80189e4:	f107 0313 	add.w	r3, r7, #19
 80189e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80189ec:	2201      	movs	r2, #1
 80189ee:	211a      	movs	r1, #26
 80189f0:	f7fd f8d6 	bl	8015ba0 <TLV_add>
      }
      if (0U != length)
 80189f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d137      	bne.n	8018a6c <Send_DpmConfigGetCnf+0x56c>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 80189fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d035      	beq.n	8018a70 <Send_DpmConfigGetCnf+0x570>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8018a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7fd fa17 	bl	8015e3c <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8018a0e:	7bfb      	ldrb	r3, [r7, #15]
 8018a10:	2203      	movs	r2, #3
 8018a12:	6879      	ldr	r1, [r7, #4]
 8018a14:	4618      	mov	r0, r3
 8018a16:	f000 f847 	bl	8018aa8 <Send_DpmConfigGetRej>
          goto __end;
 8018a1a:	e038      	b.n	8018a8e <Send_DpmConfigGetCnf+0x58e>
          break;
 8018a1c:	bf00      	nop
 8018a1e:	e028      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a20:	bf00      	nop
 8018a22:	e026      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a24:	bf00      	nop
 8018a26:	e024      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a28:	bf00      	nop
 8018a2a:	e022      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a2c:	bf00      	nop
 8018a2e:	e020      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a30:	bf00      	nop
 8018a32:	e01e      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a34:	bf00      	nop
 8018a36:	e01c      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a38:	bf00      	nop
 8018a3a:	e01a      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a3c:	bf00      	nop
 8018a3e:	e018      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a40:	bf00      	nop
 8018a42:	e016      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
          break;
 8018a44:	bf00      	nop
 8018a46:	e014      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a48:	bf00      	nop
 8018a4a:	e012      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a4c:	bf00      	nop
 8018a4e:	e010      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a50:	bf00      	nop
 8018a52:	e00e      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a54:	bf00      	nop
 8018a56:	e00c      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a58:	bf00      	nop
 8018a5a:	e00a      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a5c:	bf00      	nop
 8018a5e:	e008      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a60:	bf00      	nop
 8018a62:	e006      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a64:	bf00      	nop
 8018a66:	e004      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a68:	bf00      	nop
 8018a6a:	e002      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        break;
 8018a6c:	bf00      	nop
 8018a6e:	e000      	b.n	8018a72 <Send_DpmConfigGetCnf+0x572>
        }
        break;
 8018a70:	bf00      	nop
    }
    index++;
 8018a72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018a76:	3301      	adds	r3, #1
 8018a78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8018a7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8018a86:	429a      	cmp	r2, r3
 8018a88:	f63f ad5a 	bhi.w	8018540 <Send_DpmConfigGetCnf+0x40>

__end:
 8018a8c:	bf00      	nop
  TLV_deinit_encode(&send_tlv);
 8018a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7fd f9d2 	bl	8015e3c <TLV_deinit_encode>
}
 8018a98:	bf00      	nop
 8018a9a:	3750      	adds	r7, #80	; 0x50
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	20000010 	.word	0x20000010
 8018aa4:	20002c2c 	.word	0x20002c2c

08018aa8 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b086      	sub	sp, #24
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	4603      	mov	r3, r0
 8018ab0:	6039      	str	r1, [r7, #0]
 8018ab2:	71fb      	strb	r3, [r7, #7]
 8018ab4:	4613      	mov	r3, r2
 8018ab6:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8018ab8:	f107 000c 	add.w	r0, r7, #12
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018ac2:	2108      	movs	r1, #8
 8018ac4:	f7fd f813 	bl	8015aee <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8018ac8:	79b9      	ldrb	r1, [r7, #6]
 8018aca:	f107 000c 	add.w	r0, r7, #12
 8018ace:	2300      	movs	r3, #0
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	f7fd f865 	bl	8015ba0 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8018ad6:	f107 030c 	add.w	r3, r7, #12
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7fd f9ae 	bl	8015e3c <TLV_deinit_encode>
}
 8018ae0:	bf00      	nop
 8018ae2:	3718      	adds	r7, #24
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b086      	sub	sp, #24
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	4603      	mov	r3, r0
 8018af0:	6039      	str	r1, [r7, #0]
 8018af2:	71fb      	strb	r3, [r7, #7]
 8018af4:	4613      	mov	r3, r2
 8018af6:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8018af8:	f107 000c 	add.w	r0, r7, #12
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018b02:	210b      	movs	r1, #11
 8018b04:	f7fc fff3 	bl	8015aee <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8018b08:	79b9      	ldrb	r1, [r7, #6]
 8018b0a:	f107 000c 	add.w	r0, r7, #12
 8018b0e:	2300      	movs	r3, #0
 8018b10:	2200      	movs	r2, #0
 8018b12:	f7fd f845 	bl	8015ba0 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8018b16:	f107 030c 	add.w	r3, r7, #12
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7fd f98e 	bl	8015e3c <TLV_deinit_encode>
}
 8018b20:	bf00      	nop
 8018b22:	3718      	adds	r7, #24
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}

08018b28 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8018b28:	b5b0      	push	{r4, r5, r7, lr}
 8018b2a:	b090      	sub	sp, #64	; 0x40
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	4603      	mov	r3, r0
 8018b30:	6039      	str	r1, [r7, #0]
 8018b32:	71fb      	strb	r3, [r7, #7]
 8018b34:	4613      	mov	r3, r2
 8018b36:	71bb      	strb	r3, [r7, #6]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018b38:	79fb      	ldrb	r3, [r7, #7]
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	015b      	lsls	r3, r3, #5
 8018b3e:	b25b      	sxtb	r3, r3
 8018b40:	f043 030f 	orr.w	r3, r3, #15
 8018b44:	b25b      	sxtb	r3, r3
 8018b46:	b2d9      	uxtb	r1, r3
 8018b48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018b4c:	683b      	ldr	r3, [r7, #0]
 8018b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018b52:	f7fc ffcc 	bl	8015aee <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 8018b56:	4b9f      	ldr	r3, [pc, #636]	; (8018dd4 <Send_DpmRegisterReadCnf+0x2ac>)
 8018b58:	f107 0408 	add.w	r4, r7, #8
 8018b5c:	461d      	mov	r5, r3
 8018b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018b6a:	6020      	str	r0, [r4, #0]
 8018b6c:	3404      	adds	r4, #4
 8018b6e:	8021      	strh	r1, [r4, #0]
 8018b70:	3402      	adds	r4, #2
 8018b72:	0c0b      	lsrs	r3, r1, #16
 8018b74:	7023      	strb	r3, [r4, #0]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8018b76:	2300      	movs	r3, #0
 8018b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 8018b7c:	79bb      	ldrb	r3, [r7, #6]
 8018b7e:	2bff      	cmp	r3, #255	; 0xff
 8018b80:	d001      	beq.n	8018b86 <Send_DpmRegisterReadCnf+0x5e>
  {
    *stateMachineArray = param;
 8018b82:	79bb      	ldrb	r3, [r7, #6]
 8018b84:	723b      	strb	r3, [r7, #8]
  }

  do
  {
    switch (stateMachineArray[counter])
 8018b86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018b8a:	3340      	adds	r3, #64	; 0x40
 8018b8c:	443b      	add	r3, r7
 8018b8e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8018b92:	2b80      	cmp	r3, #128	; 0x80
 8018b94:	f200 8106 	bhi.w	8018da4 <Send_DpmRegisterReadCnf+0x27c>
 8018b98:	a201      	add	r2, pc, #4	; (adr r2, 8018ba0 <Send_DpmRegisterReadCnf+0x78>)
 8018b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b9e:	bf00      	nop
 8018ba0:	08018da5 	.word	0x08018da5
 8018ba4:	08018da5 	.word	0x08018da5
 8018ba8:	08018da5 	.word	0x08018da5
 8018bac:	08018da5 	.word	0x08018da5
 8018bb0:	08018da5 	.word	0x08018da5
 8018bb4:	08018da5 	.word	0x08018da5
 8018bb8:	08018da5 	.word	0x08018da5
 8018bbc:	08018da5 	.word	0x08018da5
 8018bc0:	08018da5 	.word	0x08018da5
 8018bc4:	08018da5 	.word	0x08018da5
 8018bc8:	08018da5 	.word	0x08018da5
 8018bcc:	08018da5 	.word	0x08018da5
 8018bd0:	08018da5 	.word	0x08018da5
 8018bd4:	08018da5 	.word	0x08018da5
 8018bd8:	08018da5 	.word	0x08018da5
 8018bdc:	08018da5 	.word	0x08018da5
 8018be0:	08018da5 	.word	0x08018da5
 8018be4:	08018da5 	.word	0x08018da5
 8018be8:	08018da5 	.word	0x08018da5
 8018bec:	08018da5 	.word	0x08018da5
 8018bf0:	08018da5 	.word	0x08018da5
 8018bf4:	08018da5 	.word	0x08018da5
 8018bf8:	08018da5 	.word	0x08018da5
 8018bfc:	08018da5 	.word	0x08018da5
 8018c00:	08018da5 	.word	0x08018da5
 8018c04:	08018da5 	.word	0x08018da5
 8018c08:	08018da5 	.word	0x08018da5
 8018c0c:	08018da5 	.word	0x08018da5
 8018c10:	08018da5 	.word	0x08018da5
 8018c14:	08018da5 	.word	0x08018da5
 8018c18:	08018da5 	.word	0x08018da5
 8018c1c:	08018da5 	.word	0x08018da5
 8018c20:	08018da5 	.word	0x08018da5
 8018c24:	08018da5 	.word	0x08018da5
 8018c28:	08018da5 	.word	0x08018da5
 8018c2c:	08018da5 	.word	0x08018da5
 8018c30:	08018da5 	.word	0x08018da5
 8018c34:	08018da5 	.word	0x08018da5
 8018c38:	08018da5 	.word	0x08018da5
 8018c3c:	08018da5 	.word	0x08018da5
 8018c40:	08018da5 	.word	0x08018da5
 8018c44:	08018da5 	.word	0x08018da5
 8018c48:	08018da5 	.word	0x08018da5
 8018c4c:	08018da5 	.word	0x08018da5
 8018c50:	08018da5 	.word	0x08018da5
 8018c54:	08018da5 	.word	0x08018da5
 8018c58:	08018da5 	.word	0x08018da5
 8018c5c:	08018da5 	.word	0x08018da5
 8018c60:	08018da5 	.word	0x08018da5
 8018c64:	08018da5 	.word	0x08018da5
 8018c68:	08018da5 	.word	0x08018da5
 8018c6c:	08018da5 	.word	0x08018da5
 8018c70:	08018da5 	.word	0x08018da5
 8018c74:	08018da5 	.word	0x08018da5
 8018c78:	08018da5 	.word	0x08018da5
 8018c7c:	08018da5 	.word	0x08018da5
 8018c80:	08018da5 	.word	0x08018da5
 8018c84:	08018da5 	.word	0x08018da5
 8018c88:	08018da5 	.word	0x08018da5
 8018c8c:	08018da5 	.word	0x08018da5
 8018c90:	08018da5 	.word	0x08018da5
 8018c94:	08018da5 	.word	0x08018da5
 8018c98:	08018da5 	.word	0x08018da5
 8018c9c:	08018da5 	.word	0x08018da5
 8018ca0:	08018da5 	.word	0x08018da5
 8018ca4:	08018da5 	.word	0x08018da5
 8018ca8:	08018da5 	.word	0x08018da5
 8018cac:	08018da5 	.word	0x08018da5
 8018cb0:	08018da5 	.word	0x08018da5
 8018cb4:	08018da5 	.word	0x08018da5
 8018cb8:	08018da5 	.word	0x08018da5
 8018cbc:	08018da5 	.word	0x08018da5
 8018cc0:	08018da5 	.word	0x08018da5
 8018cc4:	08018da5 	.word	0x08018da5
 8018cc8:	08018da5 	.word	0x08018da5
 8018ccc:	08018da5 	.word	0x08018da5
 8018cd0:	08018da5 	.word	0x08018da5
 8018cd4:	08018da5 	.word	0x08018da5
 8018cd8:	08018da5 	.word	0x08018da5
 8018cdc:	08018da5 	.word	0x08018da5
 8018ce0:	08018da5 	.word	0x08018da5
 8018ce4:	08018da5 	.word	0x08018da5
 8018ce8:	08018da5 	.word	0x08018da5
 8018cec:	08018da5 	.word	0x08018da5
 8018cf0:	08018da5 	.word	0x08018da5
 8018cf4:	08018da5 	.word	0x08018da5
 8018cf8:	08018da5 	.word	0x08018da5
 8018cfc:	08018da5 	.word	0x08018da5
 8018d00:	08018da5 	.word	0x08018da5
 8018d04:	08018da5 	.word	0x08018da5
 8018d08:	08018da5 	.word	0x08018da5
 8018d0c:	08018da5 	.word	0x08018da5
 8018d10:	08018da5 	.word	0x08018da5
 8018d14:	08018da5 	.word	0x08018da5
 8018d18:	08018da5 	.word	0x08018da5
 8018d1c:	08018da5 	.word	0x08018da5
 8018d20:	08018da5 	.word	0x08018da5
 8018d24:	08018da5 	.word	0x08018da5
 8018d28:	08018da5 	.word	0x08018da5
 8018d2c:	08018da5 	.word	0x08018da5
 8018d30:	08018da5 	.word	0x08018da5
 8018d34:	08018da5 	.word	0x08018da5
 8018d38:	08018da5 	.word	0x08018da5
 8018d3c:	08018da5 	.word	0x08018da5
 8018d40:	08018da5 	.word	0x08018da5
 8018d44:	08018da5 	.word	0x08018da5
 8018d48:	08018da5 	.word	0x08018da5
 8018d4c:	08018da5 	.word	0x08018da5
 8018d50:	08018da5 	.word	0x08018da5
 8018d54:	08018da5 	.word	0x08018da5
 8018d58:	08018da5 	.word	0x08018da5
 8018d5c:	08018da5 	.word	0x08018da5
 8018d60:	08018da5 	.word	0x08018da5
 8018d64:	08018da5 	.word	0x08018da5
 8018d68:	08018da5 	.word	0x08018da5
 8018d6c:	08018da5 	.word	0x08018da5
 8018d70:	08018da5 	.word	0x08018da5
 8018d74:	08018da5 	.word	0x08018da5
 8018d78:	08018da5 	.word	0x08018da5
 8018d7c:	08018da5 	.word	0x08018da5
 8018d80:	08018da5 	.word	0x08018da5
 8018d84:	08018da5 	.word	0x08018da5
 8018d88:	08018da5 	.word	0x08018da5
 8018d8c:	08018da5 	.word	0x08018da5
 8018d90:	08018da5 	.word	0x08018da5
 8018d94:	08018da5 	.word	0x08018da5
 8018d98:	08018da5 	.word	0x08018da5
 8018d9c:	08018da5 	.word	0x08018da5
 8018da0:	08018da5 	.word	0x08018da5
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 8018da4:	bf00      	nop
    }
    counter++;
 8018da6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018daa:	3301      	adds	r3, #1
 8018dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8018db0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018db4:	2b26      	cmp	r3, #38	; 0x26
 8018db6:	d803      	bhi.n	8018dc0 <Send_DpmRegisterReadCnf+0x298>
 8018db8:	79bb      	ldrb	r3, [r7, #6]
 8018dba:	2bff      	cmp	r3, #255	; 0xff
 8018dbc:	f47f aee3 	bne.w	8018b86 <Send_DpmRegisterReadCnf+0x5e>

  TLV_deinit_encode(&ToSendTLV);
 8018dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	f7fd f839 	bl	8015e3c <TLV_deinit_encode>
}
 8018dca:	bf00      	nop
 8018dcc:	3740      	adds	r7, #64	; 0x40
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8018dd2:	bf00      	nop
 8018dd4:	0801b834 	.word	0x0801b834

08018dd8 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b08c      	sub	sp, #48	; 0x30
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	4603      	mov	r3, r0
 8018de0:	60b9      	str	r1, [r7, #8]
 8018de2:	607a      	str	r2, [r7, #4]
 8018de4:	73fb      	strb	r3, [r7, #15]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 8018de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dea:	6879      	ldr	r1, [r7, #4]
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7fd f839 	bl	8015e64 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8018df2:	f107 0320 	add.w	r3, r7, #32
 8018df6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8018dfa:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8018dfe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8018e02:	f7fd f85d 	bl	8015ec0 <TLV_get>

  switch (registerName)
 8018e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e0a:	2b80      	cmp	r3, #128	; 0x80
 8018e0c:	f200 8106 	bhi.w	801901c <Send_DpmRegisterWriteCnf+0x244>
 8018e10:	a201      	add	r2, pc, #4	; (adr r2, 8018e18 <Send_DpmRegisterWriteCnf+0x40>)
 8018e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e16:	bf00      	nop
 8018e18:	0801901d 	.word	0x0801901d
 8018e1c:	0801901d 	.word	0x0801901d
 8018e20:	0801901d 	.word	0x0801901d
 8018e24:	0801901d 	.word	0x0801901d
 8018e28:	0801901d 	.word	0x0801901d
 8018e2c:	0801901d 	.word	0x0801901d
 8018e30:	0801901d 	.word	0x0801901d
 8018e34:	0801901d 	.word	0x0801901d
 8018e38:	0801901d 	.word	0x0801901d
 8018e3c:	0801901d 	.word	0x0801901d
 8018e40:	0801901d 	.word	0x0801901d
 8018e44:	0801901d 	.word	0x0801901d
 8018e48:	0801901d 	.word	0x0801901d
 8018e4c:	0801901d 	.word	0x0801901d
 8018e50:	0801901d 	.word	0x0801901d
 8018e54:	0801901d 	.word	0x0801901d
 8018e58:	0801901d 	.word	0x0801901d
 8018e5c:	0801901d 	.word	0x0801901d
 8018e60:	0801901d 	.word	0x0801901d
 8018e64:	0801901d 	.word	0x0801901d
 8018e68:	0801901d 	.word	0x0801901d
 8018e6c:	0801901d 	.word	0x0801901d
 8018e70:	0801901d 	.word	0x0801901d
 8018e74:	0801901d 	.word	0x0801901d
 8018e78:	0801901d 	.word	0x0801901d
 8018e7c:	0801901d 	.word	0x0801901d
 8018e80:	0801901d 	.word	0x0801901d
 8018e84:	0801901d 	.word	0x0801901d
 8018e88:	0801901d 	.word	0x0801901d
 8018e8c:	0801901d 	.word	0x0801901d
 8018e90:	0801901d 	.word	0x0801901d
 8018e94:	0801901d 	.word	0x0801901d
 8018e98:	0801901d 	.word	0x0801901d
 8018e9c:	0801901d 	.word	0x0801901d
 8018ea0:	0801901d 	.word	0x0801901d
 8018ea4:	0801901d 	.word	0x0801901d
 8018ea8:	0801901d 	.word	0x0801901d
 8018eac:	0801901d 	.word	0x0801901d
 8018eb0:	0801901d 	.word	0x0801901d
 8018eb4:	0801901d 	.word	0x0801901d
 8018eb8:	0801901d 	.word	0x0801901d
 8018ebc:	0801901d 	.word	0x0801901d
 8018ec0:	0801901d 	.word	0x0801901d
 8018ec4:	0801901d 	.word	0x0801901d
 8018ec8:	0801901d 	.word	0x0801901d
 8018ecc:	0801901d 	.word	0x0801901d
 8018ed0:	0801901d 	.word	0x0801901d
 8018ed4:	0801901d 	.word	0x0801901d
 8018ed8:	0801901d 	.word	0x0801901d
 8018edc:	0801901d 	.word	0x0801901d
 8018ee0:	0801901d 	.word	0x0801901d
 8018ee4:	0801901d 	.word	0x0801901d
 8018ee8:	0801901d 	.word	0x0801901d
 8018eec:	0801901d 	.word	0x0801901d
 8018ef0:	0801901d 	.word	0x0801901d
 8018ef4:	0801901d 	.word	0x0801901d
 8018ef8:	0801901d 	.word	0x0801901d
 8018efc:	0801901d 	.word	0x0801901d
 8018f00:	0801901d 	.word	0x0801901d
 8018f04:	0801901d 	.word	0x0801901d
 8018f08:	0801901d 	.word	0x0801901d
 8018f0c:	0801901d 	.word	0x0801901d
 8018f10:	0801901d 	.word	0x0801901d
 8018f14:	0801901d 	.word	0x0801901d
 8018f18:	0801901d 	.word	0x0801901d
 8018f1c:	0801901d 	.word	0x0801901d
 8018f20:	0801901d 	.word	0x0801901d
 8018f24:	0801901d 	.word	0x0801901d
 8018f28:	0801901d 	.word	0x0801901d
 8018f2c:	0801901d 	.word	0x0801901d
 8018f30:	0801901d 	.word	0x0801901d
 8018f34:	0801901d 	.word	0x0801901d
 8018f38:	0801901d 	.word	0x0801901d
 8018f3c:	0801901d 	.word	0x0801901d
 8018f40:	0801901d 	.word	0x0801901d
 8018f44:	0801901d 	.word	0x0801901d
 8018f48:	0801901d 	.word	0x0801901d
 8018f4c:	0801901d 	.word	0x0801901d
 8018f50:	0801901d 	.word	0x0801901d
 8018f54:	0801901d 	.word	0x0801901d
 8018f58:	0801901d 	.word	0x0801901d
 8018f5c:	0801901d 	.word	0x0801901d
 8018f60:	0801901d 	.word	0x0801901d
 8018f64:	0801901d 	.word	0x0801901d
 8018f68:	0801901d 	.word	0x0801901d
 8018f6c:	0801901d 	.word	0x0801901d
 8018f70:	0801901d 	.word	0x0801901d
 8018f74:	0801901d 	.word	0x0801901d
 8018f78:	0801901d 	.word	0x0801901d
 8018f7c:	0801901d 	.word	0x0801901d
 8018f80:	0801901d 	.word	0x0801901d
 8018f84:	0801901d 	.word	0x0801901d
 8018f88:	0801901d 	.word	0x0801901d
 8018f8c:	0801901d 	.word	0x0801901d
 8018f90:	0801901d 	.word	0x0801901d
 8018f94:	0801901d 	.word	0x0801901d
 8018f98:	0801901d 	.word	0x0801901d
 8018f9c:	0801901d 	.word	0x0801901d
 8018fa0:	0801901d 	.word	0x0801901d
 8018fa4:	0801901d 	.word	0x0801901d
 8018fa8:	0801901d 	.word	0x0801901d
 8018fac:	0801901d 	.word	0x0801901d
 8018fb0:	0801901d 	.word	0x0801901d
 8018fb4:	0801901d 	.word	0x0801901d
 8018fb8:	0801901d 	.word	0x0801901d
 8018fbc:	0801901d 	.word	0x0801901d
 8018fc0:	0801901d 	.word	0x0801901d
 8018fc4:	0801901d 	.word	0x0801901d
 8018fc8:	0801901d 	.word	0x0801901d
 8018fcc:	0801901d 	.word	0x0801901d
 8018fd0:	0801901d 	.word	0x0801901d
 8018fd4:	0801901d 	.word	0x0801901d
 8018fd8:	0801901d 	.word	0x0801901d
 8018fdc:	0801901d 	.word	0x0801901d
 8018fe0:	0801901d 	.word	0x0801901d
 8018fe4:	0801901d 	.word	0x0801901d
 8018fe8:	0801901d 	.word	0x0801901d
 8018fec:	0801901d 	.word	0x0801901d
 8018ff0:	0801901d 	.word	0x0801901d
 8018ff4:	0801901d 	.word	0x0801901d
 8018ff8:	0801901d 	.word	0x0801901d
 8018ffc:	0801901d 	.word	0x0801901d
 8019000:	0801901d 	.word	0x0801901d
 8019004:	0801901d 	.word	0x0801901d
 8019008:	0801901d 	.word	0x0801901d
 801900c:	0801901d 	.word	0x0801901d
 8019010:	0801901d 	.word	0x0801901d
 8019014:	0801901d 	.word	0x0801901d
 8019018:	0801901d 	.word	0x0801901d
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 801901c:	bf00      	nop
  }
  TLV_deinit_decode(&ToProcessTLV);
 801901e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019022:	4618      	mov	r0, r3
 8019024:	f7fc ffa8 	bl	8015f78 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8019028:	7bfb      	ldrb	r3, [r7, #15]
 801902a:	3301      	adds	r3, #1
 801902c:	015b      	lsls	r3, r3, #5
 801902e:	b25b      	sxtb	r3, r3
 8019030:	f043 0311 	orr.w	r3, r3, #17
 8019034:	b25b      	sxtb	r3, r3
 8019036:	b2d9      	uxtb	r1, r3
 8019038:	f107 0014 	add.w	r0, r7, #20
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	220c      	movs	r2, #12
 8019040:	f7fc fd55 	bl	8015aee <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8019044:	f107 0314 	add.w	r3, r7, #20
 8019048:	4618      	mov	r0, r3
 801904a:	f7fc fef7 	bl	8015e3c <TLV_deinit_encode>
}
 801904e:	bf00      	nop
 8019050:	3730      	adds	r7, #48	; 0x30
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}
 8019056:	bf00      	nop

08019058 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b084      	sub	sp, #16
 801905c:	af00      	add	r7, sp, #0
 801905e:	4603      	mov	r3, r0
 8019060:	6039      	str	r1, [r7, #0]
 8019062:	71fb      	strb	r3, [r7, #7]
 8019064:	4613      	mov	r3, r2
 8019066:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 8019068:	2310      	movs	r3, #16
 801906a:	73fb      	strb	r3, [r7, #15]

  if (NULL != pCB_FreeText)
 801906c:	4b08      	ldr	r3, [pc, #32]	; (8019090 <Manage_FreeText+0x38>)
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d007      	beq.n	8019084 <Manage_FreeText+0x2c>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 8019074:	4b06      	ldr	r3, [pc, #24]	; (8019090 <Manage_FreeText+0x38>)
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	88ba      	ldrh	r2, [r7, #4]
 801907a:	79f8      	ldrb	r0, [r7, #7]
 801907c:	6839      	ldr	r1, [r7, #0]
 801907e:	4798      	blx	r3
    _status = USBPD_OK;
 8019080:	2300      	movs	r3, #0
 8019082:	73fb      	strb	r3, [r7, #15]
  }

  return _status;
 8019084:	7bfb      	ldrb	r3, [r7, #15]
}
 8019086:	4618      	mov	r0, r3
 8019088:	3710      	adds	r7, #16
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	20002e50 	.word	0x20002e50

08019094 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 8019094:	b480      	push	{r7}
 8019096:	b089      	sub	sp, #36	; 0x24
 8019098:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 801909a:	2300      	movs	r3, #0
 801909c:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 801909e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190a2:	837b      	strh	r3, [r7, #26]
  uint16_t _max_voltage = 0;
 80190a4:	2300      	movs	r3, #0
 80190a6:	833b      	strh	r3, [r7, #24]
  uint16_t _max_current = 0;
 80190a8:	2300      	movs	r3, #0
 80190aa:	82fb      	strh	r3, [r7, #22]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80190ac:	2300      	movs	r3, #0
 80190ae:	613b      	str	r3, [r7, #16]
 80190b0:	e0b8      	b.n	8019224 <UpdateSNKPowerPort0+0x190>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 80190b2:	4a6d      	ldr	r2, [pc, #436]	; (8019268 <UpdateSNKPowerPort0+0x1d4>)
 80190b4:	693b      	ldr	r3, [r7, #16]
 80190b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190ba:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 80190bc:	79fb      	ldrb	r3, [r7, #7]
 80190be:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80190c2:	b2db      	uxtb	r3, r3
 80190c4:	2b02      	cmp	r3, #2
 80190c6:	d06b      	beq.n	80191a0 <UpdateSNKPowerPort0+0x10c>
 80190c8:	2b02      	cmp	r3, #2
 80190ca:	f300 80a1 	bgt.w	8019210 <UpdateSNKPowerPort0+0x17c>
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d002      	beq.n	80190d8 <UpdateSNKPowerPort0+0x44>
 80190d2:	2b01      	cmp	r3, #1
 80190d4:	d02a      	beq.n	801912c <UpdateSNKPowerPort0+0x98>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 80190d6:	e09b      	b.n	8019210 <UpdateSNKPowerPort0+0x17c>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80190de:	b29b      	uxth	r3, r3
 80190e0:	461a      	mov	r2, r3
 80190e2:	0092      	lsls	r2, r2, #2
 80190e4:	4413      	add	r3, r2
 80190e6:	461a      	mov	r2, r3
 80190e8:	0091      	lsls	r1, r2, #2
 80190ea:	461a      	mov	r2, r3
 80190ec:	460b      	mov	r3, r1
 80190ee:	4413      	add	r3, r2
 80190f0:	005b      	lsls	r3, r3, #1
 80190f2:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80190f4:	89fa      	ldrh	r2, [r7, #14]
 80190f6:	8b7b      	ldrh	r3, [r7, #26]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d201      	bcs.n	8019100 <UpdateSNKPowerPort0+0x6c>
 80190fc:	89fb      	ldrh	r3, [r7, #14]
 80190fe:	837b      	strh	r3, [r7, #26]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8019100:	89fa      	ldrh	r2, [r7, #14]
 8019102:	8b3b      	ldrh	r3, [r7, #24]
 8019104:	429a      	cmp	r2, r3
 8019106:	d901      	bls.n	801910c <UpdateSNKPowerPort0+0x78>
 8019108:	89fb      	ldrh	r3, [r7, #14]
 801910a:	833b      	strh	r3, [r7, #24]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 801910c:	88bb      	ldrh	r3, [r7, #4]
 801910e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019112:	b29b      	uxth	r3, r3
 8019114:	461a      	mov	r2, r3
 8019116:	0092      	lsls	r2, r2, #2
 8019118:	4413      	add	r3, r2
 801911a:	005b      	lsls	r3, r3, #1
 801911c:	81bb      	strh	r3, [r7, #12]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 801911e:	89ba      	ldrh	r2, [r7, #12]
 8019120:	8afb      	ldrh	r3, [r7, #22]
 8019122:	429a      	cmp	r2, r3
 8019124:	d976      	bls.n	8019214 <UpdateSNKPowerPort0+0x180>
 8019126:	89bb      	ldrh	r3, [r7, #12]
 8019128:	82fb      	strh	r3, [r7, #22]
        break;
 801912a:	e073      	b.n	8019214 <UpdateSNKPowerPort0+0x180>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8019132:	b29b      	uxth	r3, r3
 8019134:	461a      	mov	r2, r3
 8019136:	0092      	lsls	r2, r2, #2
 8019138:	4413      	add	r3, r2
 801913a:	461a      	mov	r2, r3
 801913c:	0091      	lsls	r1, r2, #2
 801913e:	461a      	mov	r2, r3
 8019140:	460b      	mov	r3, r1
 8019142:	4413      	add	r3, r2
 8019144:	005b      	lsls	r3, r3, #1
 8019146:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8019148:	89fa      	ldrh	r2, [r7, #14]
 801914a:	8b7b      	ldrh	r3, [r7, #26]
 801914c:	429a      	cmp	r2, r3
 801914e:	d201      	bcs.n	8019154 <UpdateSNKPowerPort0+0xc0>
 8019150:	89fb      	ldrh	r3, [r7, #14]
 8019152:	837b      	strh	r3, [r7, #26]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 8019154:	88fb      	ldrh	r3, [r7, #6]
 8019156:	f3c3 1309 	ubfx	r3, r3, #4, #10
 801915a:	b29b      	uxth	r3, r3
 801915c:	461a      	mov	r2, r3
 801915e:	0092      	lsls	r2, r2, #2
 8019160:	4413      	add	r3, r2
 8019162:	461a      	mov	r2, r3
 8019164:	0091      	lsls	r1, r2, #2
 8019166:	461a      	mov	r2, r3
 8019168:	460b      	mov	r3, r1
 801916a:	4413      	add	r3, r2
 801916c:	005b      	lsls	r3, r3, #1
 801916e:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8019170:	89fa      	ldrh	r2, [r7, #14]
 8019172:	8b3b      	ldrh	r3, [r7, #24]
 8019174:	429a      	cmp	r2, r3
 8019176:	d901      	bls.n	801917c <UpdateSNKPowerPort0+0xe8>
 8019178:	89fb      	ldrh	r3, [r7, #14]
 801917a:	833b      	strh	r3, [r7, #24]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 801917c:	88bb      	ldrh	r3, [r7, #4]
 801917e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019182:	b29b      	uxth	r3, r3
 8019184:	461a      	mov	r2, r3
 8019186:	0152      	lsls	r2, r2, #5
 8019188:	1ad2      	subs	r2, r2, r3
 801918a:	0092      	lsls	r2, r2, #2
 801918c:	4413      	add	r3, r2
 801918e:	005b      	lsls	r3, r3, #1
 8019190:	817b      	strh	r3, [r7, #10]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 8019192:	897b      	ldrh	r3, [r7, #10]
 8019194:	69fa      	ldr	r2, [r7, #28]
 8019196:	429a      	cmp	r2, r3
 8019198:	d23e      	bcs.n	8019218 <UpdateSNKPowerPort0+0x184>
 801919a:	897b      	ldrh	r3, [r7, #10]
 801919c:	61fb      	str	r3, [r7, #28]
        break;
 801919e:	e03b      	b.n	8019218 <UpdateSNKPowerPort0+0x184>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	461a      	mov	r2, r3
 80191aa:	0092      	lsls	r2, r2, #2
 80191ac:	4413      	add	r3, r2
 80191ae:	461a      	mov	r2, r3
 80191b0:	0091      	lsls	r1, r2, #2
 80191b2:	461a      	mov	r2, r3
 80191b4:	460b      	mov	r3, r1
 80191b6:	4413      	add	r3, r2
 80191b8:	005b      	lsls	r3, r3, #1
 80191ba:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80191bc:	89fa      	ldrh	r2, [r7, #14]
 80191be:	8b7b      	ldrh	r3, [r7, #26]
 80191c0:	429a      	cmp	r2, r3
 80191c2:	d201      	bcs.n	80191c8 <UpdateSNKPowerPort0+0x134>
 80191c4:	89fb      	ldrh	r3, [r7, #14]
 80191c6:	837b      	strh	r3, [r7, #26]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 80191c8:	88fb      	ldrh	r3, [r7, #6]
 80191ca:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	461a      	mov	r2, r3
 80191d2:	0092      	lsls	r2, r2, #2
 80191d4:	4413      	add	r3, r2
 80191d6:	461a      	mov	r2, r3
 80191d8:	0091      	lsls	r1, r2, #2
 80191da:	461a      	mov	r2, r3
 80191dc:	460b      	mov	r3, r1
 80191de:	4413      	add	r3, r2
 80191e0:	005b      	lsls	r3, r3, #1
 80191e2:	81fb      	strh	r3, [r7, #14]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 80191e4:	89fa      	ldrh	r2, [r7, #14]
 80191e6:	8b3b      	ldrh	r3, [r7, #24]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	d901      	bls.n	80191f0 <UpdateSNKPowerPort0+0x15c>
 80191ec:	89fb      	ldrh	r3, [r7, #14]
 80191ee:	833b      	strh	r3, [r7, #24]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 80191f0:	88bb      	ldrh	r3, [r7, #4]
 80191f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	461a      	mov	r2, r3
 80191fa:	0092      	lsls	r2, r2, #2
 80191fc:	4413      	add	r3, r2
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	81bb      	strh	r3, [r7, #12]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 8019202:	89ba      	ldrh	r2, [r7, #12]
 8019204:	8afb      	ldrh	r3, [r7, #22]
 8019206:	429a      	cmp	r2, r3
 8019208:	d908      	bls.n	801921c <UpdateSNKPowerPort0+0x188>
 801920a:	89bb      	ldrh	r3, [r7, #12]
 801920c:	82fb      	strh	r3, [r7, #22]
        break;
 801920e:	e005      	b.n	801921c <UpdateSNKPowerPort0+0x188>
        break;
 8019210:	bf00      	nop
 8019212:	e004      	b.n	801921e <UpdateSNKPowerPort0+0x18a>
        break;
 8019214:	bf00      	nop
 8019216:	e002      	b.n	801921e <UpdateSNKPowerPort0+0x18a>
        break;
 8019218:	bf00      	nop
 801921a:	e000      	b.n	801921e <UpdateSNKPowerPort0+0x18a>
        break;
 801921c:	bf00      	nop
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 801921e:	693b      	ldr	r3, [r7, #16]
 8019220:	3301      	adds	r3, #1
 8019222:	613b      	str	r3, [r7, #16]
 8019224:	4b11      	ldr	r3, [pc, #68]	; (801926c <UpdateSNKPowerPort0+0x1d8>)
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	461a      	mov	r2, r3
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	4293      	cmp	r3, r2
 801922e:	f4ff af40 	bcc.w	80190b2 <UpdateSNKPowerPort0+0x1e>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 8019232:	8b7b      	ldrh	r3, [r7, #26]
 8019234:	4a0e      	ldr	r2, [pc, #56]	; (8019270 <UpdateSNKPowerPort0+0x1dc>)
 8019236:	6113      	str	r3, [r2, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 8019238:	8b3b      	ldrh	r3, [r7, #24]
 801923a:	4a0d      	ldr	r2, [pc, #52]	; (8019270 <UpdateSNKPowerPort0+0x1dc>)
 801923c:	60d3      	str	r3, [r2, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 801923e:	8afb      	ldrh	r3, [r7, #22]
 8019240:	4a0b      	ldr	r2, [pc, #44]	; (8019270 <UpdateSNKPowerPort0+0x1dc>)
 8019242:	6053      	str	r3, [r2, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 8019244:	8b3b      	ldrh	r3, [r7, #24]
 8019246:	8afa      	ldrh	r2, [r7, #22]
 8019248:	fb02 f303 	mul.w	r3, r2, r3
 801924c:	4a09      	ldr	r2, [pc, #36]	; (8019274 <UpdateSNKPowerPort0+0x1e0>)
 801924e:	fba2 2303 	umull	r2, r3, r2, r3
 8019252:	099b      	lsrs	r3, r3, #6
 8019254:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 8019256:	4a06      	ldr	r2, [pc, #24]	; (8019270 <UpdateSNKPowerPort0+0x1dc>)
 8019258:	69fb      	ldr	r3, [r7, #28]
 801925a:	6193      	str	r3, [r2, #24]
}
 801925c:	bf00      	nop
 801925e:	3724      	adds	r7, #36	; 0x24
 8019260:	46bd      	mov	sp, r7
 8019262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019266:	4770      	bx	lr
 8019268:	200000ac 	.word	0x200000ac
 801926c:	2000008c 	.word	0x2000008c
 8019270:	20000018 	.word	0x20000018
 8019274:	10624dd3 	.word	0x10624dd3

08019278 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 801927c:	f240 421c 	movw	r2, #1052	; 0x41c
 8019280:	2100      	movs	r1, #0
 8019282:	4804      	ldr	r0, [pc, #16]	; (8019294 <TRACER_EMB_Init+0x1c>)
 8019284:	f001 f8a8 	bl	801a3d8 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8019288:	f000 fea0 	bl	8019fcc <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 801928c:	f000 f9d0 	bl	8019630 <TRACER_EMB_LowPowerInit>
}
 8019290:	bf00      	nop
 8019292:	bd80      	pop	{r7, pc}
 8019294:	20002ed0 	.word	0x20002ed0

08019298 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b086      	sub	sp, #24
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 80192a6:	f000 f8cd 	bl	8019444 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 80192aa:	6838      	ldr	r0, [r7, #0]
 80192ac:	f000 f966 	bl	801957c <TRACER_EMB_AllocateBufer>
 80192b0:	6178      	str	r0, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192b8:	d023      	beq.n	8019302 <TRACER_EMB_Add+0x6a>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 80192ba:	2300      	movs	r3, #0
 80192bc:	613b      	str	r3, [r7, #16]
 80192be:	e01c      	b.n	80192fa <TRACER_EMB_Add+0x62>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 80192c0:	68fa      	ldr	r2, [r7, #12]
 80192c2:	693b      	ldr	r3, [r7, #16]
 80192c4:	441a      	add	r2, r3
 80192c6:	697b      	ldr	r3, [r7, #20]
 80192c8:	4259      	negs	r1, r3
 80192ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80192ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80192d2:	bf58      	it	pl
 80192d4:	424b      	negpl	r3, r1
 80192d6:	7811      	ldrb	r1, [r2, #0]
 80192d8:	4a0e      	ldr	r2, [pc, #56]	; (8019314 <TRACER_EMB_Add+0x7c>)
 80192da:	4413      	add	r3, r2
 80192dc:	460a      	mov	r2, r1
 80192de:	76da      	strb	r2, [r3, #27]
 80192e0:	697b      	ldr	r3, [r7, #20]
 80192e2:	3301      	adds	r3, #1
 80192e4:	425a      	negs	r2, r3
 80192e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80192ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80192ee:	bf58      	it	pl
 80192f0:	4253      	negpl	r3, r2
 80192f2:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 80192f4:	693b      	ldr	r3, [r7, #16]
 80192f6:	3301      	adds	r3, #1
 80192f8:	613b      	str	r3, [r7, #16]
 80192fa:	693a      	ldr	r2, [r7, #16]
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	429a      	cmp	r2, r3
 8019300:	d3de      	bcc.n	80192c0 <TRACER_EMB_Add+0x28>
    }
  }
  TRACER_EMB_UnLock();
 8019302:	f000 f8bf 	bl	8019484 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 8019306:	f000 f8dd 	bl	80194c4 <TRACER_EMB_SendData>
}
 801930a:	bf00      	nop
 801930c:	3718      	adds	r7, #24
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop
 8019314:	20002ed0 	.word	0x20002ed0

08019318 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 801931c:	f000 ff20 	bl	801a160 <HW_TRACER_EMB_IRQHandlerDMA>
}
 8019320:	bf00      	nop
 8019322:	bd80      	pop	{r7, pc}

08019324 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 8019328:	f000 ff2e 	bl	801a188 <HW_TRACER_EMB_IRQHandlerUSART>
}
 801932c:	bf00      	nop
 801932e:	bd80      	pop	{r7, pc}

08019330 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8019330:	b480      	push	{r7}
 8019332:	b083      	sub	sp, #12
 8019334:	af00      	add	r7, sp, #0
 8019336:	4603      	mov	r3, r0
 8019338:	460a      	mov	r2, r1
 801933a:	80fb      	strh	r3, [r7, #6]
 801933c:	4613      	mov	r3, r2
 801933e:	717b      	strb	r3, [r7, #5]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 8019340:	88fb      	ldrh	r3, [r7, #6]
 8019342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019346:	4a05      	ldr	r2, [pc, #20]	; (801935c <TRACER_EMB_WriteData+0x2c>)
 8019348:	4413      	add	r3, r2
 801934a:	797a      	ldrb	r2, [r7, #5]
 801934c:	76da      	strb	r2, [r3, #27]
}
 801934e:	bf00      	nop
 8019350:	370c      	adds	r7, #12
 8019352:	46bd      	mov	sp, r7
 8019354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019358:	4770      	bx	lr
 801935a:	bf00      	nop
 801935c:	20002ed0 	.word	0x20002ed0

08019360 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 8019368:	6878      	ldr	r0, [r7, #4]
 801936a:	f000 fed3 	bl	801a114 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 801936e:	f000 fee1 	bl	801a134 <HW_TRACER_EMB_StartRX>
}
 8019372:	bf00      	nop
 8019374:	3708      	adds	r7, #8
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
	...

0801937c <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 801937c:	b480      	push	{r7}
 801937e:	b083      	sub	sp, #12
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	460b      	mov	r3, r1
 8019386:	70fb      	strb	r3, [r7, #3]
  if (Size != 0U)
 8019388:	78fb      	ldrb	r3, [r7, #3]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d007      	beq.n	801939e <TRACER_EMB_EnableOverFlow+0x22>
  {
    TracerContext.OverFlow_Data = Data;
 801938e:	4a08      	ldr	r2, [pc, #32]	; (80193b0 <TRACER_EMB_EnableOverFlow+0x34>)
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6153      	str	r3, [r2, #20]
    TracerContext.OverFlow_Size = Size;
 8019394:	4a06      	ldr	r2, [pc, #24]	; (80193b0 <TRACER_EMB_EnableOverFlow+0x34>)
 8019396:	78fb      	ldrb	r3, [r7, #3]
 8019398:	7613      	strb	r3, [r2, #24]
    return 0;
 801939a:	2300      	movs	r3, #0
 801939c:	e001      	b.n	80193a2 <TRACER_EMB_EnableOverFlow+0x26>
  }
  return -1;
 801939e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	370c      	adds	r7, #12
 80193a6:	46bd      	mov	sp, r7
 80193a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ac:	4770      	bx	lr
 80193ae:	bf00      	nop
 80193b0:	20002ed0 	.word	0x20002ed0

080193b4 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b084      	sub	sp, #16
 80193b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193ba:	f3ef 8310 	mrs	r3, PRIMASK
 80193be:	60bb      	str	r3, [r7, #8]
  return(result);
 80193c0:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 80193c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80193c4:	b672      	cpsid	i
}
 80193c6:	bf00      	nop
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 80193c8:	4b1d      	ldr	r3, [pc, #116]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	4b1c      	ldr	r3, [pc, #112]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193ce:	689b      	ldr	r3, [r3, #8]
 80193d0:	4413      	add	r3, r2
 80193d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80193d6:	4a1a      	ldr	r2, [pc, #104]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193d8:	6013      	str	r3, [r2, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 80193da:	4b19      	ldr	r3, [pc, #100]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193dc:	695b      	ldr	r3, [r3, #20]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d019      	beq.n	8019416 <TRACER_EMB_CALLBACK_TX+0x62>
 80193e2:	4b17      	ldr	r3, [pc, #92]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193e4:	7e9b      	ldrb	r3, [r3, #26]
 80193e6:	2b01      	cmp	r3, #1
 80193e8:	d115      	bne.n	8019416 <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 80193ea:	4b15      	ldr	r3, [pc, #84]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193ec:	7e5b      	ldrb	r3, [r3, #25]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d111      	bne.n	8019416 <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 80193f2:	4b13      	ldr	r3, [pc, #76]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193f4:	2202      	movs	r2, #2
 80193f6:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 80193f8:	4b11      	ldr	r3, [pc, #68]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193fa:	695b      	ldr	r3, [r3, #20]
 80193fc:	4a10      	ldr	r2, [pc, #64]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80193fe:	7e12      	ldrb	r2, [r2, #24]
 8019400:	4611      	mov	r1, r2
 8019402:	4618      	mov	r0, r3
 8019404:	f000 ff74 	bl	801a2f0 <HW_TRACER_EMB_SendData>
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f383 8810 	msr	PRIMASK, r3
}
 8019412:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
 8019414:	e00f      	b.n	8019436 <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 8019416:	4b0a      	ldr	r3, [pc, #40]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019418:	68db      	ldr	r3, [r3, #12]
 801941a:	3b01      	subs	r3, #1
 801941c:	4a08      	ldr	r2, [pc, #32]	; (8019440 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801941e:	60d3      	str	r3, [r2, #12]
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	f383 8810 	msr	PRIMASK, r3
}
 801942a:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 801942c:	f000 f82a 	bl	8019484 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8019430:	f000 f848 	bl	80194c4 <TRACER_EMB_SendData>
  }
}
 8019434:	bf00      	nop
 8019436:	bf00      	nop
 8019438:	3710      	adds	r7, #16
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}
 801943e:	bf00      	nop
 8019440:	20002ed0 	.word	0x20002ed0

08019444 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 8019444:	b480      	push	{r7}
 8019446:	b085      	sub	sp, #20
 8019448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801944a:	f3ef 8310 	mrs	r3, PRIMASK
 801944e:	607b      	str	r3, [r7, #4]
  return(result);
 8019450:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8019452:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019454:	b672      	cpsid	i
}
 8019456:	bf00      	nop
  TracerContext.Counter++;
 8019458:	4b09      	ldr	r3, [pc, #36]	; (8019480 <TRACER_EMB_Lock+0x3c>)
 801945a:	7c1b      	ldrb	r3, [r3, #16]
 801945c:	b2db      	uxtb	r3, r3
 801945e:	3301      	adds	r3, #1
 8019460:	b2da      	uxtb	r2, r3
 8019462:	4b07      	ldr	r3, [pc, #28]	; (8019480 <TRACER_EMB_Lock+0x3c>)
 8019464:	741a      	strb	r2, [r3, #16]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	f383 8810 	msr	PRIMASK, r3
}
 8019470:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8019472:	bf00      	nop
 8019474:	3714      	adds	r7, #20
 8019476:	46bd      	mov	sp, r7
 8019478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947c:	4770      	bx	lr
 801947e:	bf00      	nop
 8019480:	20002ed0 	.word	0x20002ed0

08019484 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 8019484:	b480      	push	{r7}
 8019486:	b085      	sub	sp, #20
 8019488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801948a:	f3ef 8310 	mrs	r3, PRIMASK
 801948e:	607b      	str	r3, [r7, #4]
  return(result);
 8019490:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8019492:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019494:	b672      	cpsid	i
}
 8019496:	bf00      	nop
  TracerContext.Counter--;
 8019498:	4b09      	ldr	r3, [pc, #36]	; (80194c0 <TRACER_EMB_UnLock+0x3c>)
 801949a:	7c1b      	ldrb	r3, [r3, #16]
 801949c:	b2db      	uxtb	r3, r3
 801949e:	3b01      	subs	r3, #1
 80194a0:	b2da      	uxtb	r2, r3
 80194a2:	4b07      	ldr	r3, [pc, #28]	; (80194c0 <TRACER_EMB_UnLock+0x3c>)
 80194a4:	741a      	strb	r2, [r3, #16]
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	f383 8810 	msr	PRIMASK, r3
}
 80194b0:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 80194b2:	bf00      	nop
 80194b4:	3714      	adds	r7, #20
 80194b6:	46bd      	mov	sp, r7
 80194b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	20002ed0 	.word	0x20002ed0

080194c4 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b086      	sub	sp, #24
 80194c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194ca:	f3ef 8310 	mrs	r3, PRIMASK
 80194ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80194d0:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 80194d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80194d4:	b672      	cpsid	i
}
 80194d6:	bf00      	nop

  if (0u == TracerContext.Counter)
 80194d8:	4b27      	ldr	r3, [pc, #156]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 80194da:	7c1b      	ldrb	r3, [r3, #16]
 80194dc:	b2db      	uxtb	r3, r3
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d132      	bne.n	8019548 <TRACER_EMB_SendData+0x84>
  {
    _begin = TracerContext.PtrTx_Read;
 80194e2:	4b25      	ldr	r3, [pc, #148]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 80194e8:	4b23      	ldr	r3, [pc, #140]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 80194ee:	693a      	ldr	r2, [r7, #16]
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	429a      	cmp	r2, r3
 80194f4:	d028      	beq.n	8019548 <TRACER_EMB_SendData+0x84>
    {
      TRACER_EMB_Lock();
 80194f6:	f7ff ffa5 	bl	8019444 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 80194fa:	68fa      	ldr	r2, [r7, #12]
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	429a      	cmp	r2, r3
 8019500:	d908      	bls.n	8019514 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 8019502:	68fa      	ldr	r2, [r7, #12]
 8019504:	693b      	ldr	r3, [r7, #16]
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	4a1b      	ldr	r2, [pc, #108]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801950a:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 0;
 801950c:	4b1a      	ldr	r3, [pc, #104]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801950e:	2200      	movs	r2, #0
 8019510:	765a      	strb	r2, [r3, #25]
 8019512:	e007      	b.n	8019524 <TRACER_EMB_SendData+0x60>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8019514:	693b      	ldr	r3, [r7, #16]
 8019516:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801951a:	4a17      	ldr	r2, [pc, #92]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801951c:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 1;
 801951e:	4b16      	ldr	r3, [pc, #88]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 8019520:	2201      	movs	r2, #1
 8019522:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8019524:	f000 f88b 	bl	801963e <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 8019528:	4b13      	ldr	r3, [pc, #76]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801952a:	68db      	ldr	r3, [r3, #12]
 801952c:	3301      	adds	r3, #1
 801952e:	4a12      	ldr	r2, [pc, #72]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 8019530:	60d3      	str	r3, [r2, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8019532:	693b      	ldr	r3, [r7, #16]
 8019534:	3318      	adds	r3, #24
 8019536:	4a10      	ldr	r2, [pc, #64]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 8019538:	4413      	add	r3, r2
 801953a:	3303      	adds	r3, #3
 801953c:	4a0e      	ldr	r2, [pc, #56]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801953e:	6892      	ldr	r2, [r2, #8]
 8019540:	4611      	mov	r1, r2
 8019542:	4618      	mov	r0, r3
 8019544:	f000 fed4 	bl	801a2f0 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 8019548:	4b0b      	ldr	r3, [pc, #44]	; (8019578 <TRACER_EMB_SendData+0xb4>)
 801954a:	68db      	ldr	r3, [r3, #12]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d004      	beq.n	801955a <TRACER_EMB_SendData+0x96>
 8019550:	2b01      	cmp	r3, #1
 8019552:	d105      	bne.n	8019560 <TRACER_EMB_SendData+0x9c>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8019554:	f000 f873 	bl	801963e <TRACER_EMB_LowPowerSendData>
      break;
 8019558:	e003      	b.n	8019562 <TRACER_EMB_SendData+0x9e>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 801955a:	f000 f877 	bl	801964c <TRACER_EMB_LowPowerSendDataComplete>
      break;
 801955e:	e000      	b.n	8019562 <TRACER_EMB_SendData+0x9e>
    default:
      break;
 8019560:	bf00      	nop
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	f383 8810 	msr	PRIMASK, r3
}
 801956c:	bf00      	nop
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 801956e:	bf00      	nop
 8019570:	3718      	adds	r7, #24
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	20002ed0 	.word	0x20002ed0

0801957c <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 801957c:	b480      	push	{r7}
 801957e:	b089      	sub	sp, #36	; 0x24
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 8019584:	f04f 33ff 	mov.w	r3, #4294967295
 8019588:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801958a:	f3ef 8310 	mrs	r3, PRIMASK
 801958e:	613b      	str	r3, [r7, #16]
  return(result);
 8019590:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 8019592:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019594:	b672      	cpsid	i
}
 8019596:	bf00      	nop

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8019598:	4b24      	ldr	r3, [pc, #144]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 801959a:	685a      	ldr	r2, [r3, #4]
 801959c:	4b23      	ldr	r3, [pc, #140]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	429a      	cmp	r2, r3
 80195a2:	d103      	bne.n	80195ac <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 80195a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80195a8:	61fb      	str	r3, [r7, #28]
 80195aa:	e014      	b.n	80195d6 <TRACER_EMB_AllocateBufer+0x5a>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 80195ac:	4b1f      	ldr	r3, [pc, #124]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195ae:	685a      	ldr	r2, [r3, #4]
 80195b0:	4b1e      	ldr	r3, [pc, #120]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	429a      	cmp	r2, r3
 80195b6:	d908      	bls.n	80195ca <TRACER_EMB_AllocateBufer+0x4e>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 80195b8:	4b1c      	ldr	r3, [pc, #112]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195ba:	681a      	ldr	r2, [r3, #0]
 80195bc:	4b1b      	ldr	r3, [pc, #108]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195be:	685b      	ldr	r3, [r3, #4]
 80195c0:	1ad3      	subs	r3, r2, r3
 80195c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80195c6:	61fb      	str	r3, [r7, #28]
 80195c8:	e005      	b.n	80195d6 <TRACER_EMB_AllocateBufer+0x5a>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 80195ca:	4b18      	ldr	r3, [pc, #96]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195cc:	681a      	ldr	r2, [r3, #0]
 80195ce:	4b17      	ldr	r3, [pc, #92]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	1ad3      	subs	r3, r2, r3
 80195d4:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 80195d6:	69fa      	ldr	r2, [r7, #28]
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	429a      	cmp	r2, r3
 80195dc:	d912      	bls.n	8019604 <TRACER_EMB_AllocateBufer+0x88>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 80195de:	4b13      	ldr	r3, [pc, #76]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195e0:	685b      	ldr	r3, [r3, #4]
 80195e2:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 80195e4:	4b11      	ldr	r3, [pc, #68]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195e6:	685a      	ldr	r2, [r3, #4]
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	4413      	add	r3, r2
 80195ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80195f0:	4a0e      	ldr	r2, [pc, #56]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195f2:	6053      	str	r3, [r2, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 80195f4:	4b0d      	ldr	r3, [pc, #52]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195f6:	7e9b      	ldrb	r3, [r3, #26]
 80195f8:	2b02      	cmp	r3, #2
 80195fa:	d10a      	bne.n	8019612 <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 80195fc:	4b0b      	ldr	r3, [pc, #44]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 80195fe:	2200      	movs	r2, #0
 8019600:	769a      	strb	r2, [r3, #26]
 8019602:	e006      	b.n	8019612 <TRACER_EMB_AllocateBufer+0x96>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 8019604:	4b09      	ldr	r3, [pc, #36]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 8019606:	7e9b      	ldrb	r3, [r3, #26]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d102      	bne.n	8019612 <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 801960c:	4b07      	ldr	r3, [pc, #28]	; (801962c <TRACER_EMB_AllocateBufer+0xb0>)
 801960e:	2201      	movs	r2, #1
 8019610:	769a      	strb	r2, [r3, #26]
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	f383 8810 	msr	PRIMASK, r3
}
 801961c:	bf00      	nop
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 801961e:	69bb      	ldr	r3, [r7, #24]
}
 8019620:	4618      	mov	r0, r3
 8019622:	3724      	adds	r7, #36	; 0x24
 8019624:	46bd      	mov	sp, r7
 8019626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962a:	4770      	bx	lr
 801962c:	20002ed0 	.word	0x20002ed0

08019630 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8019630:	b480      	push	{r7}
 8019632:	af00      	add	r7, sp, #0
}
 8019634:	bf00      	nop
 8019636:	46bd      	mov	sp, r7
 8019638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963c:	4770      	bx	lr

0801963e <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 801963e:	b480      	push	{r7}
 8019640:	af00      	add	r7, sp, #0
}
 8019642:	bf00      	nop
 8019644:	46bd      	mov	sp, r7
 8019646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964a:	4770      	bx	lr

0801964c <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 801964c:	b480      	push	{r7}
 801964e:	af00      	add	r7, sp, #0
}
 8019650:	bf00      	nop
 8019652:	46bd      	mov	sp, r7
 8019654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019658:	4770      	bx	lr
	...

0801965c <__NVIC_EnableIRQ>:
{
 801965c:	b480      	push	{r7}
 801965e:	b083      	sub	sp, #12
 8019660:	af00      	add	r7, sp, #0
 8019662:	4603      	mov	r3, r0
 8019664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801966a:	2b00      	cmp	r3, #0
 801966c:	db0b      	blt.n	8019686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801966e:	79fb      	ldrb	r3, [r7, #7]
 8019670:	f003 021f 	and.w	r2, r3, #31
 8019674:	4907      	ldr	r1, [pc, #28]	; (8019694 <__NVIC_EnableIRQ+0x38>)
 8019676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801967a:	095b      	lsrs	r3, r3, #5
 801967c:	2001      	movs	r0, #1
 801967e:	fa00 f202 	lsl.w	r2, r0, r2
 8019682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019686:	bf00      	nop
 8019688:	370c      	adds	r7, #12
 801968a:	46bd      	mov	sp, r7
 801968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop
 8019694:	e000e100 	.word	0xe000e100

08019698 <__NVIC_SetPriority>:
{
 8019698:	b480      	push	{r7}
 801969a:	b083      	sub	sp, #12
 801969c:	af00      	add	r7, sp, #0
 801969e:	4603      	mov	r3, r0
 80196a0:	6039      	str	r1, [r7, #0]
 80196a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80196a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	db0a      	blt.n	80196c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	b2da      	uxtb	r2, r3
 80196b0:	490c      	ldr	r1, [pc, #48]	; (80196e4 <__NVIC_SetPriority+0x4c>)
 80196b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196b6:	0112      	lsls	r2, r2, #4
 80196b8:	b2d2      	uxtb	r2, r2
 80196ba:	440b      	add	r3, r1
 80196bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80196c0:	e00a      	b.n	80196d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80196c2:	683b      	ldr	r3, [r7, #0]
 80196c4:	b2da      	uxtb	r2, r3
 80196c6:	4908      	ldr	r1, [pc, #32]	; (80196e8 <__NVIC_SetPriority+0x50>)
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	f003 030f 	and.w	r3, r3, #15
 80196ce:	3b04      	subs	r3, #4
 80196d0:	0112      	lsls	r2, r2, #4
 80196d2:	b2d2      	uxtb	r2, r2
 80196d4:	440b      	add	r3, r1
 80196d6:	761a      	strb	r2, [r3, #24]
}
 80196d8:	bf00      	nop
 80196da:	370c      	adds	r7, #12
 80196dc:	46bd      	mov	sp, r7
 80196de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e2:	4770      	bx	lr
 80196e4:	e000e100 	.word	0xe000e100
 80196e8:	e000ed00 	.word	0xe000ed00

080196ec <LL_AHB1_GRP1_EnableClock>:
{
 80196ec:	b480      	push	{r7}
 80196ee:	b085      	sub	sp, #20
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80196f4:	4b08      	ldr	r3, [pc, #32]	; (8019718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80196f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80196f8:	4907      	ldr	r1, [pc, #28]	; (8019718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	4313      	orrs	r3, r2
 80196fe:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8019700:	4b05      	ldr	r3, [pc, #20]	; (8019718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8019702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	4013      	ands	r3, r2
 8019708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801970a:	68fb      	ldr	r3, [r7, #12]
}
 801970c:	bf00      	nop
 801970e:	3714      	adds	r7, #20
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr
 8019718:	40021000 	.word	0x40021000

0801971c <LL_AHB2_GRP1_EnableClock>:
{
 801971c:	b480      	push	{r7}
 801971e:	b085      	sub	sp, #20
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019724:	4b08      	ldr	r3, [pc, #32]	; (8019748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8019726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019728:	4907      	ldr	r1, [pc, #28]	; (8019748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	4313      	orrs	r3, r2
 801972e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019730:	4b05      	ldr	r3, [pc, #20]	; (8019748 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8019732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	4013      	ands	r3, r2
 8019738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801973a:	68fb      	ldr	r3, [r7, #12]
}
 801973c:	bf00      	nop
 801973e:	3714      	adds	r7, #20
 8019740:	46bd      	mov	sp, r7
 8019742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019746:	4770      	bx	lr
 8019748:	40021000 	.word	0x40021000

0801974c <LL_APB1_GRP2_EnableClock>:
{
 801974c:	b480      	push	{r7}
 801974e:	b085      	sub	sp, #20
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8019754:	4b08      	ldr	r3, [pc, #32]	; (8019778 <LL_APB1_GRP2_EnableClock+0x2c>)
 8019756:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019758:	4907      	ldr	r1, [pc, #28]	; (8019778 <LL_APB1_GRP2_EnableClock+0x2c>)
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	4313      	orrs	r3, r2
 801975e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8019760:	4b05      	ldr	r3, [pc, #20]	; (8019778 <LL_APB1_GRP2_EnableClock+0x2c>)
 8019762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	4013      	ands	r3, r2
 8019768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801976a:	68fb      	ldr	r3, [r7, #12]
}
 801976c:	bf00      	nop
 801976e:	3714      	adds	r7, #20
 8019770:	46bd      	mov	sp, r7
 8019772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019776:	4770      	bx	lr
 8019778:	40021000 	.word	0x40021000

0801977c <LL_APB1_GRP2_DisableClock>:
{
 801977c:	b480      	push	{r7}
 801977e:	b083      	sub	sp, #12
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8019784:	4b06      	ldr	r3, [pc, #24]	; (80197a0 <LL_APB1_GRP2_DisableClock+0x24>)
 8019786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	43db      	mvns	r3, r3
 801978c:	4904      	ldr	r1, [pc, #16]	; (80197a0 <LL_APB1_GRP2_DisableClock+0x24>)
 801978e:	4013      	ands	r3, r2
 8019790:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8019792:	bf00      	nop
 8019794:	370c      	adds	r7, #12
 8019796:	46bd      	mov	sp, r7
 8019798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979c:	4770      	bx	lr
 801979e:	bf00      	nop
 80197a0:	40021000 	.word	0x40021000

080197a4 <LL_DMA_EnableChannel>:
{
 80197a4:	b480      	push	{r7}
 80197a6:	b085      	sub	sp, #20
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80197b2:	4a0c      	ldr	r2, [pc, #48]	; (80197e4 <LL_DMA_EnableChannel+0x40>)
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	4413      	add	r3, r2
 80197b8:	781b      	ldrb	r3, [r3, #0]
 80197ba:	461a      	mov	r2, r3
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	4413      	add	r3, r2
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4908      	ldr	r1, [pc, #32]	; (80197e4 <LL_DMA_EnableChannel+0x40>)
 80197c4:	683a      	ldr	r2, [r7, #0]
 80197c6:	440a      	add	r2, r1
 80197c8:	7812      	ldrb	r2, [r2, #0]
 80197ca:	4611      	mov	r1, r2
 80197cc:	68fa      	ldr	r2, [r7, #12]
 80197ce:	440a      	add	r2, r1
 80197d0:	f043 0301 	orr.w	r3, r3, #1
 80197d4:	6013      	str	r3, [r2, #0]
}
 80197d6:	bf00      	nop
 80197d8:	3714      	adds	r7, #20
 80197da:	46bd      	mov	sp, r7
 80197dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e0:	4770      	bx	lr
 80197e2:	bf00      	nop
 80197e4:	0801bc78 	.word	0x0801bc78

080197e8 <LL_DMA_DisableChannel>:
{
 80197e8:	b480      	push	{r7}
 80197ea:	b085      	sub	sp, #20
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80197f6:	4a0c      	ldr	r2, [pc, #48]	; (8019828 <LL_DMA_DisableChannel+0x40>)
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	4413      	add	r3, r2
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	461a      	mov	r2, r3
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	4413      	add	r3, r2
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	4908      	ldr	r1, [pc, #32]	; (8019828 <LL_DMA_DisableChannel+0x40>)
 8019808:	683a      	ldr	r2, [r7, #0]
 801980a:	440a      	add	r2, r1
 801980c:	7812      	ldrb	r2, [r2, #0]
 801980e:	4611      	mov	r1, r2
 8019810:	68fa      	ldr	r2, [r7, #12]
 8019812:	440a      	add	r2, r1
 8019814:	f023 0301 	bic.w	r3, r3, #1
 8019818:	6013      	str	r3, [r2, #0]
}
 801981a:	bf00      	nop
 801981c:	3714      	adds	r7, #20
 801981e:	46bd      	mov	sp, r7
 8019820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop
 8019828:	0801bc78 	.word	0x0801bc78

0801982c <LL_DMA_ConfigTransfer>:
{
 801982c:	b480      	push	{r7}
 801982e:	b087      	sub	sp, #28
 8019830:	af00      	add	r7, sp, #0
 8019832:	60f8      	str	r0, [r7, #12]
 8019834:	60b9      	str	r1, [r7, #8]
 8019836:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 801983c:	4a0e      	ldr	r2, [pc, #56]	; (8019878 <LL_DMA_ConfigTransfer+0x4c>)
 801983e:	68bb      	ldr	r3, [r7, #8]
 8019840:	4413      	add	r3, r2
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	461a      	mov	r2, r3
 8019846:	697b      	ldr	r3, [r7, #20]
 8019848:	4413      	add	r3, r2
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8019850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019854:	4908      	ldr	r1, [pc, #32]	; (8019878 <LL_DMA_ConfigTransfer+0x4c>)
 8019856:	68ba      	ldr	r2, [r7, #8]
 8019858:	440a      	add	r2, r1
 801985a:	7812      	ldrb	r2, [r2, #0]
 801985c:	4611      	mov	r1, r2
 801985e:	697a      	ldr	r2, [r7, #20]
 8019860:	440a      	add	r2, r1
 8019862:	4611      	mov	r1, r2
 8019864:	687a      	ldr	r2, [r7, #4]
 8019866:	4313      	orrs	r3, r2
 8019868:	600b      	str	r3, [r1, #0]
}
 801986a:	bf00      	nop
 801986c:	371c      	adds	r7, #28
 801986e:	46bd      	mov	sp, r7
 8019870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop
 8019878:	0801bc78 	.word	0x0801bc78

0801987c <LL_DMA_GetDataTransferDirection>:
{
 801987c:	b480      	push	{r7}
 801987e:	b085      	sub	sp, #20
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 801988a:	4a08      	ldr	r2, [pc, #32]	; (80198ac <LL_DMA_GetDataTransferDirection+0x30>)
 801988c:	683b      	ldr	r3, [r7, #0]
 801988e:	4413      	add	r3, r2
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	461a      	mov	r2, r3
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	4413      	add	r3, r2
 8019898:	681a      	ldr	r2, [r3, #0]
 801989a:	f244 0310 	movw	r3, #16400	; 0x4010
 801989e:	4013      	ands	r3, r2
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3714      	adds	r7, #20
 80198a4:	46bd      	mov	sp, r7
 80198a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198aa:	4770      	bx	lr
 80198ac:	0801bc78 	.word	0x0801bc78

080198b0 <LL_DMA_SetDataLength>:
{
 80198b0:	b480      	push	{r7}
 80198b2:	b087      	sub	sp, #28
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	60f8      	str	r0, [r7, #12]
 80198b8:	60b9      	str	r1, [r7, #8]
 80198ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80198c0:	4a0d      	ldr	r2, [pc, #52]	; (80198f8 <LL_DMA_SetDataLength+0x48>)
 80198c2:	68bb      	ldr	r3, [r7, #8]
 80198c4:	4413      	add	r3, r2
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	461a      	mov	r2, r3
 80198ca:	697b      	ldr	r3, [r7, #20]
 80198cc:	4413      	add	r3, r2
 80198ce:	685b      	ldr	r3, [r3, #4]
 80198d0:	0c1b      	lsrs	r3, r3, #16
 80198d2:	041b      	lsls	r3, r3, #16
 80198d4:	4908      	ldr	r1, [pc, #32]	; (80198f8 <LL_DMA_SetDataLength+0x48>)
 80198d6:	68ba      	ldr	r2, [r7, #8]
 80198d8:	440a      	add	r2, r1
 80198da:	7812      	ldrb	r2, [r2, #0]
 80198dc:	4611      	mov	r1, r2
 80198de:	697a      	ldr	r2, [r7, #20]
 80198e0:	440a      	add	r2, r1
 80198e2:	4611      	mov	r1, r2
 80198e4:	687a      	ldr	r2, [r7, #4]
 80198e6:	4313      	orrs	r3, r2
 80198e8:	604b      	str	r3, [r1, #4]
}
 80198ea:	bf00      	nop
 80198ec:	371c      	adds	r7, #28
 80198ee:	46bd      	mov	sp, r7
 80198f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f4:	4770      	bx	lr
 80198f6:	bf00      	nop
 80198f8:	0801bc78 	.word	0x0801bc78

080198fc <LL_DMA_ConfigAddresses>:
{
 80198fc:	b480      	push	{r7}
 80198fe:	b087      	sub	sp, #28
 8019900:	af00      	add	r7, sp, #0
 8019902:	60f8      	str	r0, [r7, #12]
 8019904:	60b9      	str	r1, [r7, #8]
 8019906:	607a      	str	r2, [r7, #4]
 8019908:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 801990e:	6a3b      	ldr	r3, [r7, #32]
 8019910:	2b10      	cmp	r3, #16
 8019912:	d114      	bne.n	801993e <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 8019914:	4a17      	ldr	r2, [pc, #92]	; (8019974 <LL_DMA_ConfigAddresses+0x78>)
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	4413      	add	r3, r2
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	461a      	mov	r2, r3
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	4413      	add	r3, r2
 8019922:	461a      	mov	r2, r3
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 8019928:	4a12      	ldr	r2, [pc, #72]	; (8019974 <LL_DMA_ConfigAddresses+0x78>)
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	4413      	add	r3, r2
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	461a      	mov	r2, r3
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	4413      	add	r3, r2
 8019936:	461a      	mov	r2, r3
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	6093      	str	r3, [r2, #8]
}
 801993c:	e013      	b.n	8019966 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 801993e:	4a0d      	ldr	r2, [pc, #52]	; (8019974 <LL_DMA_ConfigAddresses+0x78>)
 8019940:	68bb      	ldr	r3, [r7, #8]
 8019942:	4413      	add	r3, r2
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	461a      	mov	r2, r3
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	4413      	add	r3, r2
 801994c:	461a      	mov	r2, r3
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 8019952:	4a08      	ldr	r2, [pc, #32]	; (8019974 <LL_DMA_ConfigAddresses+0x78>)
 8019954:	68bb      	ldr	r3, [r7, #8]
 8019956:	4413      	add	r3, r2
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	461a      	mov	r2, r3
 801995c:	697b      	ldr	r3, [r7, #20]
 801995e:	4413      	add	r3, r2
 8019960:	461a      	mov	r2, r3
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	60d3      	str	r3, [r2, #12]
}
 8019966:	bf00      	nop
 8019968:	371c      	adds	r7, #28
 801996a:	46bd      	mov	sp, r7
 801996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019970:	4770      	bx	lr
 8019972:	bf00      	nop
 8019974:	0801bc78 	.word	0x0801bc78

08019978 <LL_DMA_SetPeriphRequest>:
{
 8019978:	b480      	push	{r7}
 801997a:	b087      	sub	sp, #28
 801997c:	af00      	add	r7, sp, #0
 801997e:	60f8      	str	r0, [r7, #12]
 8019980:	60b9      	str	r1, [r7, #8]
 8019982:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	0a9b      	lsrs	r3, r3, #10
 8019988:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801998c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8019990:	00db      	lsls	r3, r3, #3
 8019992:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8019994:	68ba      	ldr	r2, [r7, #8]
 8019996:	697b      	ldr	r3, [r7, #20]
 8019998:	4413      	add	r3, r2
 801999a:	009b      	lsls	r3, r3, #2
 801999c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80199a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80199aa:	68ba      	ldr	r2, [r7, #8]
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	4413      	add	r3, r2
 80199b0:	009b      	lsls	r3, r3, #2
 80199b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80199b6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80199ba:	687a      	ldr	r2, [r7, #4]
 80199bc:	430a      	orrs	r2, r1
 80199be:	601a      	str	r2, [r3, #0]
}
 80199c0:	bf00      	nop
 80199c2:	371c      	adds	r7, #28
 80199c4:	46bd      	mov	sp, r7
 80199c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ca:	4770      	bx	lr

080199cc <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 80199cc:	b480      	push	{r7}
 80199ce:	b083      	sub	sp, #12
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80199dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199e0:	d101      	bne.n	80199e6 <LL_DMA_IsActiveFlag_TC3+0x1a>
 80199e2:	2301      	movs	r3, #1
 80199e4:	e000      	b.n	80199e8 <LL_DMA_IsActiveFlag_TC3+0x1c>
 80199e6:	2300      	movs	r3, #0
}
 80199e8:	4618      	mov	r0, r3
 80199ea:	370c      	adds	r7, #12
 80199ec:	46bd      	mov	sp, r7
 80199ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f2:	4770      	bx	lr

080199f4 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 80199f4:	b480      	push	{r7}
 80199f6:	b083      	sub	sp, #12
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a02:	605a      	str	r2, [r3, #4]
}
 8019a04:	bf00      	nop
 8019a06:	370c      	adds	r7, #12
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0e:	4770      	bx	lr

08019a10 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8019a10:	b480      	push	{r7}
 8019a12:	b085      	sub	sp, #20
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8019a1e:	4a0c      	ldr	r2, [pc, #48]	; (8019a50 <LL_DMA_EnableIT_TC+0x40>)
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	4413      	add	r3, r2
 8019a24:	781b      	ldrb	r3, [r3, #0]
 8019a26:	461a      	mov	r2, r3
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	4413      	add	r3, r2
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	4908      	ldr	r1, [pc, #32]	; (8019a50 <LL_DMA_EnableIT_TC+0x40>)
 8019a30:	683a      	ldr	r2, [r7, #0]
 8019a32:	440a      	add	r2, r1
 8019a34:	7812      	ldrb	r2, [r2, #0]
 8019a36:	4611      	mov	r1, r2
 8019a38:	68fa      	ldr	r2, [r7, #12]
 8019a3a:	440a      	add	r2, r1
 8019a3c:	f043 0302 	orr.w	r3, r3, #2
 8019a40:	6013      	str	r3, [r2, #0]
}
 8019a42:	bf00      	nop
 8019a44:	3714      	adds	r7, #20
 8019a46:	46bd      	mov	sp, r7
 8019a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4c:	4770      	bx	lr
 8019a4e:	bf00      	nop
 8019a50:	0801bc78 	.word	0x0801bc78

08019a54 <LL_GPIO_SetPinMode>:
{
 8019a54:	b480      	push	{r7}
 8019a56:	b08b      	sub	sp, #44	; 0x2c
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	60f8      	str	r0, [r7, #12]
 8019a5c:	60b9      	str	r1, [r7, #8]
 8019a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	681a      	ldr	r2, [r3, #0]
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	fa93 f3a3 	rbit	r3, r3
 8019a6e:	613b      	str	r3, [r7, #16]
  return result;
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d101      	bne.n	8019a7e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8019a7a:	2320      	movs	r3, #32
 8019a7c:	e003      	b.n	8019a86 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8019a7e:	69bb      	ldr	r3, [r7, #24]
 8019a80:	fab3 f383 	clz	r3, r3
 8019a84:	b2db      	uxtb	r3, r3
 8019a86:	005b      	lsls	r3, r3, #1
 8019a88:	2103      	movs	r1, #3
 8019a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8019a8e:	43db      	mvns	r3, r3
 8019a90:	401a      	ands	r2, r3
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019a96:	6a3b      	ldr	r3, [r7, #32]
 8019a98:	fa93 f3a3 	rbit	r3, r3
 8019a9c:	61fb      	str	r3, [r7, #28]
  return result;
 8019a9e:	69fb      	ldr	r3, [r7, #28]
 8019aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d101      	bne.n	8019aac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8019aa8:	2320      	movs	r3, #32
 8019aaa:	e003      	b.n	8019ab4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8019aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aae:	fab3 f383 	clz	r3, r3
 8019ab2:	b2db      	uxtb	r3, r3
 8019ab4:	005b      	lsls	r3, r3, #1
 8019ab6:	6879      	ldr	r1, [r7, #4]
 8019ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8019abc:	431a      	orrs	r2, r3
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	601a      	str	r2, [r3, #0]
}
 8019ac2:	bf00      	nop
 8019ac4:	372c      	adds	r7, #44	; 0x2c
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019acc:	4770      	bx	lr

08019ace <LL_GPIO_SetPinOutputType>:
{
 8019ace:	b480      	push	{r7}
 8019ad0:	b085      	sub	sp, #20
 8019ad2:	af00      	add	r7, sp, #0
 8019ad4:	60f8      	str	r0, [r7, #12]
 8019ad6:	60b9      	str	r1, [r7, #8]
 8019ad8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	685a      	ldr	r2, [r3, #4]
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	43db      	mvns	r3, r3
 8019ae2:	401a      	ands	r2, r3
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	6879      	ldr	r1, [r7, #4]
 8019ae8:	fb01 f303 	mul.w	r3, r1, r3
 8019aec:	431a      	orrs	r2, r3
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	605a      	str	r2, [r3, #4]
}
 8019af2:	bf00      	nop
 8019af4:	3714      	adds	r7, #20
 8019af6:	46bd      	mov	sp, r7
 8019af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afc:	4770      	bx	lr

08019afe <LL_GPIO_SetPinSpeed>:
{
 8019afe:	b480      	push	{r7}
 8019b00:	b08b      	sub	sp, #44	; 0x2c
 8019b02:	af00      	add	r7, sp, #0
 8019b04:	60f8      	str	r0, [r7, #12]
 8019b06:	60b9      	str	r1, [r7, #8]
 8019b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	689a      	ldr	r2, [r3, #8]
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	fa93 f3a3 	rbit	r3, r3
 8019b18:	613b      	str	r3, [r7, #16]
  return result;
 8019b1a:	693b      	ldr	r3, [r7, #16]
 8019b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019b1e:	69bb      	ldr	r3, [r7, #24]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d101      	bne.n	8019b28 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8019b24:	2320      	movs	r3, #32
 8019b26:	e003      	b.n	8019b30 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8019b28:	69bb      	ldr	r3, [r7, #24]
 8019b2a:	fab3 f383 	clz	r3, r3
 8019b2e:	b2db      	uxtb	r3, r3
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	2103      	movs	r1, #3
 8019b34:	fa01 f303 	lsl.w	r3, r1, r3
 8019b38:	43db      	mvns	r3, r3
 8019b3a:	401a      	ands	r2, r3
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b40:	6a3b      	ldr	r3, [r7, #32]
 8019b42:	fa93 f3a3 	rbit	r3, r3
 8019b46:	61fb      	str	r3, [r7, #28]
  return result;
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d101      	bne.n	8019b56 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8019b52:	2320      	movs	r3, #32
 8019b54:	e003      	b.n	8019b5e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8019b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b58:	fab3 f383 	clz	r3, r3
 8019b5c:	b2db      	uxtb	r3, r3
 8019b5e:	005b      	lsls	r3, r3, #1
 8019b60:	6879      	ldr	r1, [r7, #4]
 8019b62:	fa01 f303 	lsl.w	r3, r1, r3
 8019b66:	431a      	orrs	r2, r3
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	609a      	str	r2, [r3, #8]
}
 8019b6c:	bf00      	nop
 8019b6e:	372c      	adds	r7, #44	; 0x2c
 8019b70:	46bd      	mov	sp, r7
 8019b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b76:	4770      	bx	lr

08019b78 <LL_GPIO_SetPinPull>:
{
 8019b78:	b480      	push	{r7}
 8019b7a:	b08b      	sub	sp, #44	; 0x2c
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	60f8      	str	r0, [r7, #12]
 8019b80:	60b9      	str	r1, [r7, #8]
 8019b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	68da      	ldr	r2, [r3, #12]
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b8c:	697b      	ldr	r3, [r7, #20]
 8019b8e:	fa93 f3a3 	rbit	r3, r3
 8019b92:	613b      	str	r3, [r7, #16]
  return result;
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019b98:	69bb      	ldr	r3, [r7, #24]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d101      	bne.n	8019ba2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8019b9e:	2320      	movs	r3, #32
 8019ba0:	e003      	b.n	8019baa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8019ba2:	69bb      	ldr	r3, [r7, #24]
 8019ba4:	fab3 f383 	clz	r3, r3
 8019ba8:	b2db      	uxtb	r3, r3
 8019baa:	005b      	lsls	r3, r3, #1
 8019bac:	2103      	movs	r1, #3
 8019bae:	fa01 f303 	lsl.w	r3, r1, r3
 8019bb2:	43db      	mvns	r3, r3
 8019bb4:	401a      	ands	r2, r3
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019bba:	6a3b      	ldr	r3, [r7, #32]
 8019bbc:	fa93 f3a3 	rbit	r3, r3
 8019bc0:	61fb      	str	r3, [r7, #28]
  return result;
 8019bc2:	69fb      	ldr	r3, [r7, #28]
 8019bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8019bcc:	2320      	movs	r3, #32
 8019bce:	e003      	b.n	8019bd8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8019bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd2:	fab3 f383 	clz	r3, r3
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	005b      	lsls	r3, r3, #1
 8019bda:	6879      	ldr	r1, [r7, #4]
 8019bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8019be0:	431a      	orrs	r2, r3
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	60da      	str	r2, [r3, #12]
}
 8019be6:	bf00      	nop
 8019be8:	372c      	adds	r7, #44	; 0x2c
 8019bea:	46bd      	mov	sp, r7
 8019bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf0:	4770      	bx	lr

08019bf2 <LL_GPIO_SetAFPin_0_7>:
{
 8019bf2:	b480      	push	{r7}
 8019bf4:	b08b      	sub	sp, #44	; 0x2c
 8019bf6:	af00      	add	r7, sp, #0
 8019bf8:	60f8      	str	r0, [r7, #12]
 8019bfa:	60b9      	str	r1, [r7, #8]
 8019bfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	6a1a      	ldr	r2, [r3, #32]
 8019c02:	68bb      	ldr	r3, [r7, #8]
 8019c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	fa93 f3a3 	rbit	r3, r3
 8019c0c:	613b      	str	r3, [r7, #16]
  return result;
 8019c0e:	693b      	ldr	r3, [r7, #16]
 8019c10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019c12:	69bb      	ldr	r3, [r7, #24]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d101      	bne.n	8019c1c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8019c18:	2320      	movs	r3, #32
 8019c1a:	e003      	b.n	8019c24 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8019c1c:	69bb      	ldr	r3, [r7, #24]
 8019c1e:	fab3 f383 	clz	r3, r3
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	210f      	movs	r1, #15
 8019c28:	fa01 f303 	lsl.w	r3, r1, r3
 8019c2c:	43db      	mvns	r3, r3
 8019c2e:	401a      	ands	r2, r3
 8019c30:	68bb      	ldr	r3, [r7, #8]
 8019c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c34:	6a3b      	ldr	r3, [r7, #32]
 8019c36:	fa93 f3a3 	rbit	r3, r3
 8019c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8019c3c:	69fb      	ldr	r3, [r7, #28]
 8019c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8019c46:	2320      	movs	r3, #32
 8019c48:	e003      	b.n	8019c52 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4c:	fab3 f383 	clz	r3, r3
 8019c50:	b2db      	uxtb	r3, r3
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	6879      	ldr	r1, [r7, #4]
 8019c56:	fa01 f303 	lsl.w	r3, r1, r3
 8019c5a:	431a      	orrs	r2, r3
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	621a      	str	r2, [r3, #32]
}
 8019c60:	bf00      	nop
 8019c62:	372c      	adds	r7, #44	; 0x2c
 8019c64:	46bd      	mov	sp, r7
 8019c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6a:	4770      	bx	lr

08019c6c <LL_LPUART_Enable>:
{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b083      	sub	sp, #12
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f043 0201 	orr.w	r2, r3, #1
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	601a      	str	r2, [r3, #0]
}
 8019c80:	bf00      	nop
 8019c82:	370c      	adds	r7, #12
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr

08019c8c <LL_LPUART_Disable>:
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b083      	sub	sp, #12
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	f023 0201 	bic.w	r2, r3, #1
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	601a      	str	r2, [r3, #0]
}
 8019ca0:	bf00      	nop
 8019ca2:	370c      	adds	r7, #12
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <LL_LPUART_EnableDirectionRx>:
{
 8019cac:	b480      	push	{r7}
 8019cae:	b089      	sub	sp, #36	; 0x24
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	e853 3f00 	ldrex	r3, [r3]
 8019cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	f043 0304 	orr.w	r3, r3, #4
 8019cc6:	61fb      	str	r3, [r7, #28]
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	69fa      	ldr	r2, [r7, #28]
 8019ccc:	61ba      	str	r2, [r7, #24]
 8019cce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cd0:	6979      	ldr	r1, [r7, #20]
 8019cd2:	69ba      	ldr	r2, [r7, #24]
 8019cd4:	e841 2300 	strex	r3, r2, [r1]
 8019cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8019cda:	693b      	ldr	r3, [r7, #16]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d1e9      	bne.n	8019cb4 <LL_LPUART_EnableDirectionRx+0x8>
}
 8019ce0:	bf00      	nop
 8019ce2:	bf00      	nop
 8019ce4:	3724      	adds	r7, #36	; 0x24
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cec:	4770      	bx	lr

08019cee <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(USART_TypeDef *LPUARTx)
{
 8019cee:	b480      	push	{r7}
 8019cf0:	b083      	sub	sp, #12
 8019cf2:	af00      	add	r7, sp, #0
 8019cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	69db      	ldr	r3, [r3, #28]
 8019cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8019d02:	d101      	bne.n	8019d08 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8019d04:	2301      	movs	r3, #1
 8019d06:	e000      	b.n	8019d0a <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8019d08:	2300      	movs	r3, #0
}
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	370c      	adds	r7, #12
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d14:	4770      	bx	lr

08019d16 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8019d16:	b480      	push	{r7}
 8019d18:	b083      	sub	sp, #12
 8019d1a:	af00      	add	r7, sp, #0
 8019d1c:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	2201      	movs	r2, #1
 8019d22:	621a      	str	r2, [r3, #32]
}
 8019d24:	bf00      	nop
 8019d26:	370c      	adds	r7, #12
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2e:	4770      	bx	lr

08019d30 <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 8019d30:	b480      	push	{r7}
 8019d32:	b083      	sub	sp, #12
 8019d34:	af00      	add	r7, sp, #0
 8019d36:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	2202      	movs	r2, #2
 8019d3c:	621a      	str	r2, [r3, #32]
}
 8019d3e:	bf00      	nop
 8019d40:	370c      	adds	r7, #12
 8019d42:	46bd      	mov	sp, r7
 8019d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d48:	4770      	bx	lr

08019d4a <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8019d4a:	b480      	push	{r7}
 8019d4c:	b083      	sub	sp, #12
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	2204      	movs	r2, #4
 8019d56:	621a      	str	r2, [r3, #32]
}
 8019d58:	bf00      	nop
 8019d5a:	370c      	adds	r7, #12
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d62:	4770      	bx	lr

08019d64 <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 8019d64:	b480      	push	{r7}
 8019d66:	b083      	sub	sp, #12
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2208      	movs	r2, #8
 8019d70:	621a      	str	r2, [r3, #32]
}
 8019d72:	bf00      	nop
 8019d74:	370c      	adds	r7, #12
 8019d76:	46bd      	mov	sp, r7
 8019d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7c:	4770      	bx	lr

08019d7e <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 8019d7e:	b480      	push	{r7}
 8019d80:	b083      	sub	sp, #12
 8019d82:	af00      	add	r7, sp, #0
 8019d84:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	2240      	movs	r2, #64	; 0x40
 8019d8a:	621a      	str	r2, [r3, #32]
}
 8019d8c:	bf00      	nop
 8019d8e:	370c      	adds	r7, #12
 8019d90:	46bd      	mov	sp, r7
 8019d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d96:	4770      	bx	lr

08019d98 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8019d98:	b480      	push	{r7}
 8019d9a:	b089      	sub	sp, #36	; 0x24
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	e853 3f00 	ldrex	r3, [r3]
 8019daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	f043 0320 	orr.w	r3, r3, #32
 8019db2:	61fb      	str	r3, [r7, #28]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	69fa      	ldr	r2, [r7, #28]
 8019db8:	61ba      	str	r2, [r7, #24]
 8019dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dbc:	6979      	ldr	r1, [r7, #20]
 8019dbe:	69ba      	ldr	r2, [r7, #24]
 8019dc0:	e841 2300 	strex	r3, r2, [r1]
 8019dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8019dc6:	693b      	ldr	r3, [r7, #16]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d1e9      	bne.n	8019da0 <LL_LPUART_EnableIT_RXNE_RXFNE+0x8>
}
 8019dcc:	bf00      	nop
 8019dce:	bf00      	nop
 8019dd0:	3724      	adds	r7, #36	; 0x24
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd8:	4770      	bx	lr

08019dda <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8019dda:	b480      	push	{r7}
 8019ddc:	b089      	sub	sp, #36	; 0x24
 8019dde:	af00      	add	r7, sp, #0
 8019de0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	e853 3f00 	ldrex	r3, [r3]
 8019dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019df4:	61fb      	str	r3, [r7, #28]
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	69fa      	ldr	r2, [r7, #28]
 8019dfa:	61ba      	str	r2, [r7, #24]
 8019dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dfe:	6979      	ldr	r1, [r7, #20]
 8019e00:	69ba      	ldr	r2, [r7, #24]
 8019e02:	e841 2300 	strex	r3, r2, [r1]
 8019e06:	613b      	str	r3, [r7, #16]
   return(result);
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d1e9      	bne.n	8019de2 <LL_LPUART_EnableIT_TC+0x8>
}
 8019e0e:	bf00      	nop
 8019e10:	bf00      	nop
 8019e12:	3724      	adds	r7, #36	; 0x24
 8019e14:	46bd      	mov	sp, r7
 8019e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1a:	4770      	bx	lr

08019e1c <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b089      	sub	sp, #36	; 0x24
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	3308      	adds	r3, #8
 8019e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	e853 3f00 	ldrex	r3, [r3]
 8019e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	f043 0301 	orr.w	r3, r3, #1
 8019e38:	61fb      	str	r3, [r7, #28]
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	3308      	adds	r3, #8
 8019e3e:	69fa      	ldr	r2, [r7, #28]
 8019e40:	61ba      	str	r2, [r7, #24]
 8019e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e44:	6979      	ldr	r1, [r7, #20]
 8019e46:	69ba      	ldr	r2, [r7, #24]
 8019e48:	e841 2300 	strex	r3, r2, [r1]
 8019e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8019e4e:	693b      	ldr	r3, [r7, #16]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d1e7      	bne.n	8019e24 <LL_LPUART_EnableIT_ERROR+0x8>
}
 8019e54:	bf00      	nop
 8019e56:	bf00      	nop
 8019e58:	3724      	adds	r7, #36	; 0x24
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e60:	4770      	bx	lr

08019e62 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8019e62:	b480      	push	{r7}
 8019e64:	b089      	sub	sp, #36	; 0x24
 8019e66:	af00      	add	r7, sp, #0
 8019e68:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	e853 3f00 	ldrex	r3, [r3]
 8019e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019e7c:	61fb      	str	r3, [r7, #28]
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	69fa      	ldr	r2, [r7, #28]
 8019e82:	61ba      	str	r2, [r7, #24]
 8019e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e86:	6979      	ldr	r1, [r7, #20]
 8019e88:	69ba      	ldr	r2, [r7, #24]
 8019e8a:	e841 2300 	strex	r3, r2, [r1]
 8019e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d1e9      	bne.n	8019e6a <LL_LPUART_DisableIT_TC+0x8>
}
 8019e96:	bf00      	nop
 8019e98:	bf00      	nop
 8019e9a:	3724      	adds	r7, #36	; 0x24
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea2:	4770      	bx	lr

08019ea4 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8019ea4:	b480      	push	{r7}
 8019ea6:	b083      	sub	sp, #12
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	f003 0320 	and.w	r3, r3, #32
 8019eb4:	2b20      	cmp	r3, #32
 8019eb6:	d101      	bne.n	8019ebc <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8019eb8:	2301      	movs	r3, #1
 8019eba:	e000      	b.n	8019ebe <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8019ebc:	2300      	movs	r3, #0
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	370c      	adds	r7, #12
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec8:	4770      	bx	lr

08019eca <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(USART_TypeDef *LPUARTx)
{
 8019eca:	b480      	push	{r7}
 8019ecc:	b083      	sub	sp, #12
 8019ece:	af00      	add	r7, sp, #0
 8019ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019eda:	2b40      	cmp	r3, #64	; 0x40
 8019edc:	d101      	bne.n	8019ee2 <LL_LPUART_IsEnabledIT_TC+0x18>
 8019ede:	2301      	movs	r3, #1
 8019ee0:	e000      	b.n	8019ee4 <LL_LPUART_IsEnabledIT_TC+0x1a>
 8019ee2:	2300      	movs	r3, #0
}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	370c      	adds	r7, #12
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eee:	4770      	bx	lr

08019ef0 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(USART_TypeDef *LPUARTx)
{
 8019ef0:	b480      	push	{r7}
 8019ef2:	b083      	sub	sp, #12
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019f04:	d101      	bne.n	8019f0a <LL_LPUART_IsEnabledIT_PE+0x1a>
 8019f06:	2301      	movs	r3, #1
 8019f08:	e000      	b.n	8019f0c <LL_LPUART_IsEnabledIT_PE+0x1c>
 8019f0a:	2300      	movs	r3, #0
}
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	370c      	adds	r7, #12
 8019f10:	46bd      	mov	sp, r7
 8019f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f16:	4770      	bx	lr

08019f18 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(USART_TypeDef *LPUARTx)
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b083      	sub	sp, #12
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	689b      	ldr	r3, [r3, #8]
 8019f24:	f003 0301 	and.w	r3, r3, #1
 8019f28:	2b01      	cmp	r3, #1
 8019f2a:	d101      	bne.n	8019f30 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8019f2c:	2301      	movs	r3, #1
 8019f2e:	e000      	b.n	8019f32 <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8019f30:	2300      	movs	r3, #0
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	370c      	adds	r7, #12
 8019f36:	46bd      	mov	sp, r7
 8019f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3c:	4770      	bx	lr

08019f3e <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8019f3e:	b480      	push	{r7}
 8019f40:	b089      	sub	sp, #36	; 0x24
 8019f42:	af00      	add	r7, sp, #0
 8019f44:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	3308      	adds	r3, #8
 8019f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	e853 3f00 	ldrex	r3, [r3]
 8019f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f5a:	61fb      	str	r3, [r7, #28]
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	3308      	adds	r3, #8
 8019f60:	69fa      	ldr	r2, [r7, #28]
 8019f62:	61ba      	str	r2, [r7, #24]
 8019f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f66:	6979      	ldr	r1, [r7, #20]
 8019f68:	69ba      	ldr	r2, [r7, #24]
 8019f6a:	e841 2300 	strex	r3, r2, [r1]
 8019f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8019f70:	693b      	ldr	r3, [r7, #16]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d1e7      	bne.n	8019f46 <LL_LPUART_EnableDMAReq_TX+0x8>
}
 8019f76:	bf00      	nop
 8019f78:	bf00      	nop
 8019f7a:	3724      	adds	r7, #36	; 0x24
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f82:	4770      	bx	lr

08019f84 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8019f84:	b480      	push	{r7}
 8019f86:	b085      	sub	sp, #20
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
 8019f8c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d103      	bne.n	8019f9c <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	3328      	adds	r3, #40	; 0x28
 8019f98:	60fb      	str	r3, [r7, #12]
 8019f9a:	e002      	b.n	8019fa2 <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	3324      	adds	r3, #36	; 0x24
 8019fa0:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
}
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	3714      	adds	r7, #20
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fae:	4770      	bx	lr

08019fb0 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(USART_TypeDef *LPUARTx)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fbc:	b2db      	uxtb	r3, r3
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	370c      	adds	r7, #12
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc8:	4770      	bx	lr
	...

08019fcc <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b088      	sub	sp, #32
 8019fd0:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 8019fd2:	2001      	movs	r0, #1
 8019fd4:	f7ff fba2 	bl	801971c <LL_AHB2_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 8019fd8:	2001      	movs	r0, #1
 8019fda:	f7ff fb9f 	bl	801971c <LL_AHB2_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 8019fde:	220c      	movs	r2, #12
 8019fe0:	2104      	movs	r1, #4
 8019fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019fe6:	f7ff fe04 	bl	8019bf2 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 8019fea:	2202      	movs	r2, #2
 8019fec:	2104      	movs	r1, #4
 8019fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019ff2:	f7ff fd2f 	bl	8019a54 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8019ff6:	2202      	movs	r2, #2
 8019ff8:	2104      	movs	r1, #4
 8019ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019ffe:	f7ff fd7e 	bl	8019afe <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a002:	2200      	movs	r2, #0
 801a004:	2104      	movs	r1, #4
 801a006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a00a:	f7ff fd60 	bl	8019ace <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 801a00e:	2201      	movs	r2, #1
 801a010:	2104      	movs	r1, #4
 801a012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a016:	f7ff fdaf 	bl	8019b78 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 801a01a:	220c      	movs	r2, #12
 801a01c:	2108      	movs	r1, #8
 801a01e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a022:	f7ff fde6 	bl	8019bf2 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 801a026:	2202      	movs	r2, #2
 801a028:	2108      	movs	r1, #8
 801a02a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a02e:	f7ff fd11 	bl	8019a54 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801a032:	2202      	movs	r2, #2
 801a034:	2108      	movs	r1, #8
 801a036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a03a:	f7ff fd60 	bl	8019afe <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a03e:	2200      	movs	r2, #0
 801a040:	2108      	movs	r1, #8
 801a042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a046:	f7ff fd42 	bl	8019ace <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 801a04a:	2201      	movs	r2, #1
 801a04c:	2108      	movs	r1, #8
 801a04e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a052:	f7ff fd91 	bl	8019b78 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a056:	2001      	movs	r0, #1
 801a058:	f7ff fb78 	bl	801974c <LL_APB1_GRP2_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 801a05c:	482a      	ldr	r0, [pc, #168]	; (801a108 <HW_TRACER_EMB_Init+0x13c>)
 801a05e:	f7ff fe15 	bl	8019c8c <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 801a062:	2300      	movs	r3, #0
 801a064:	603b      	str	r3, [r7, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 801a066:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 801a06a:	607b      	str	r3, [r7, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 801a06c:	2300      	movs	r3, #0
 801a06e:	60bb      	str	r3, [r7, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 801a070:	2300      	movs	r3, #0
 801a072:	60fb      	str	r3, [r7, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 801a074:	2300      	movs	r3, #0
 801a076:	613b      	str	r3, [r7, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 801a078:	2308      	movs	r3, #8
 801a07a:	617b      	str	r3, [r7, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 801a07c:	2300      	movs	r3, #0
 801a07e:	61bb      	str	r3, [r7, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 801a080:	463b      	mov	r3, r7
 801a082:	4619      	mov	r1, r3
 801a084:	4820      	ldr	r0, [pc, #128]	; (801a108 <HW_TRACER_EMB_Init+0x13c>)
 801a086:	f7f5 fa83 	bl	800f590 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 801a08a:	481f      	ldr	r0, [pc, #124]	; (801a108 <HW_TRACER_EMB_Init+0x13c>)
 801a08c:	f7ff fdee 	bl	8019c6c <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a090:	481d      	ldr	r0, [pc, #116]	; (801a108 <HW_TRACER_EMB_Init+0x13c>)
 801a092:	f7ff fe2c 	bl	8019cee <LL_LPUART_IsActiveFlag_TEACK>
 801a096:	61f8      	str	r0, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 801a098:	e003      	b.n	801a0a2 <HW_TRACER_EMB_Init+0xd6>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a09a:	481b      	ldr	r0, [pc, #108]	; (801a108 <HW_TRACER_EMB_Init+0x13c>)
 801a09c:	f7ff fe27 	bl	8019cee <LL_LPUART_IsActiveFlag_TEACK>
 801a0a0:	61f8      	str	r0, [r7, #28]
    while (_temp1 == 0U)
 801a0a2:	69fb      	ldr	r3, [r7, #28]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d0f8      	beq.n	801a09a <HW_TRACER_EMB_Init+0xce>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 801a0a8:	2004      	movs	r0, #4
 801a0aa:	f7ff fb1f 	bl	80196ec <LL_AHB1_GRP1_EnableClock>
 801a0ae:	2001      	movs	r0, #1
 801a0b0:	f7ff fb1c 	bl	80196ec <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a0b4:	f242 0290 	movw	r2, #8336	; 0x2090
 801a0b8:	2102      	movs	r1, #2
 801a0ba:	4814      	ldr	r0, [pc, #80]	; (801a10c <HW_TRACER_EMB_Init+0x140>)
 801a0bc:	f7ff fbb6 	bl	801982c <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 801a0c0:	2223      	movs	r2, #35	; 0x23
 801a0c2:	2102      	movs	r1, #2
 801a0c4:	4811      	ldr	r0, [pc, #68]	; (801a10c <HW_TRACER_EMB_Init+0x140>)
 801a0c6:	f7ff fc57 	bl	8019978 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a0ca:	2102      	movs	r1, #2
 801a0cc:	480f      	ldr	r0, [pc, #60]	; (801a10c <HW_TRACER_EMB_Init+0x140>)
 801a0ce:	f7ff fc9f 	bl	8019a10 <LL_DMA_EnableIT_TC>
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
 801a0d2:	2100      	movs	r1, #0
 801a0d4:	200d      	movs	r0, #13
 801a0d6:	f7ff fadf 	bl	8019698 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 801a0da:	200d      	movs	r0, #13
 801a0dc:	f7ff fabe 	bl	801965c <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801a0e0:	2103      	movs	r1, #3
 801a0e2:	205b      	movs	r0, #91	; 0x5b
 801a0e4:	f7ff fad8 	bl	8019698 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a0e8:	205b      	movs	r0, #91	; 0x5b
 801a0ea:	f7ff fab7 	bl	801965c <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 801a0ee:	4b08      	ldr	r3, [pc, #32]	; (801a110 <HW_TRACER_EMB_Init+0x144>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d103      	bne.n	801a0fe <HW_TRACER_EMB_Init+0x132>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 801a0f6:	2001      	movs	r0, #1
 801a0f8:	f7ff fb40 	bl	801977c <LL_APB1_GRP2_DisableClock>
  }
  return;
 801a0fc:	bf00      	nop
 801a0fe:	bf00      	nop
}
 801a100:	3720      	adds	r7, #32
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}
 801a106:	bf00      	nop
 801a108:	40008000 	.word	0x40008000
 801a10c:	40020000 	.word	0x40020000
 801a110:	200032ec 	.word	0x200032ec

0801a114 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b082      	sub	sp, #8
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 801a11c:	4a04      	ldr	r2, [pc, #16]	; (801a130 <HW_TRACER_EMB_RegisterRxCallback+0x1c>)
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6013      	str	r3, [r2, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 801a122:	2001      	movs	r0, #1
 801a124:	f7ff fb12 	bl	801974c <LL_APB1_GRP2_EnableClock>
}
 801a128:	bf00      	nop
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	200032ec 	.word	0x200032ec

0801a134 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 801a134:	b580      	push	{r7, lr}
 801a136:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a138:	4808      	ldr	r0, [pc, #32]	; (801a15c <HW_TRACER_EMB_StartRX+0x28>)
 801a13a:	f7ff fe2d 	bl	8019d98 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a13e:	4807      	ldr	r0, [pc, #28]	; (801a15c <HW_TRACER_EMB_StartRX+0x28>)
 801a140:	f7ff fe6c 	bl	8019e1c <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 801a144:	4805      	ldr	r0, [pc, #20]	; (801a15c <HW_TRACER_EMB_StartRX+0x28>)
 801a146:	f7ff fdb1 	bl	8019cac <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801a14a:	2103      	movs	r1, #3
 801a14c:	205b      	movs	r0, #91	; 0x5b
 801a14e:	f7ff faa3 	bl	8019698 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a152:	205b      	movs	r0, #91	; 0x5b
 801a154:	f7ff fa82 	bl	801965c <__NVIC_EnableIRQ>
}
 801a158:	bf00      	nop
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	40008000 	.word	0x40008000

0801a160 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 801a164:	4806      	ldr	r0, [pc, #24]	; (801a180 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801a166:	f7ff fc31 	bl	80199cc <LL_DMA_IsActiveFlag_TC3>
 801a16a:	4603      	mov	r3, r0
 801a16c:	2b01      	cmp	r3, #1
 801a16e:	d105      	bne.n	801a17c <HW_TRACER_EMB_IRQHandlerDMA+0x1c>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 801a170:	4804      	ldr	r0, [pc, #16]	; (801a184 <HW_TRACER_EMB_IRQHandlerDMA+0x24>)
 801a172:	f7ff fe32 	bl	8019dda <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 801a176:	4802      	ldr	r0, [pc, #8]	; (801a180 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801a178:	f7ff fc3c 	bl	80199f4 <LL_DMA_ClearFlag_GI3>
  }
}
 801a17c:	bf00      	nop
 801a17e:	bd80      	pop	{r7, pc}
 801a180:	40020000 	.word	0x40020000
 801a184:	40008000 	.word	0x40008000

0801a188 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b086      	sub	sp, #24
 801a18c:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 801a18e:	2300      	movs	r3, #0
 801a190:	75fb      	strb	r3, [r7, #23]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 801a192:	4b54      	ldr	r3, [pc, #336]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a194:	69db      	ldr	r3, [r3, #28]
 801a196:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a198:	4852      	ldr	r0, [pc, #328]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a19a:	f7ff fe83 	bl	8019ea4 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 801a19e:	60f8      	str	r0, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	d178      	bne.n	801a298 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 801a1a6:	693b      	ldr	r3, [r7, #16]
 801a1a8:	f003 030f 	and.w	r3, r3, #15
 801a1ac:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a1ae:	693b      	ldr	r3, [r7, #16]
 801a1b0:	f003 0320 	and.w	r3, r3, #32
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d014      	beq.n	801a1e2 <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
        && (_errorflags == 0UL))
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d111      	bne.n	801a1e2 <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a1be:	4849      	ldr	r0, [pc, #292]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a1c0:	f7ff fef6 	bl	8019fb0 <LL_LPUART_ReceiveData8>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 801a1c8:	4b47      	ldr	r3, [pc, #284]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	f000 8083 	beq.w	801a2d8 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
      {
        fptr_rx(received_char, 0U);
 801a1d2:	4b45      	ldr	r3, [pc, #276]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	683a      	ldr	r2, [r7, #0]
 801a1d8:	b2d2      	uxtb	r2, r2
 801a1da:	2100      	movs	r1, #0
 801a1dc:	4610      	mov	r0, r2
 801a1de:	4798      	blx	r3
      }
      return;
 801a1e0:	e07a      	b.n	801a2d8 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
    }
    else if (_errorflags != 0UL)
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d057      	beq.n	801a298 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	f003 0320 	and.w	r3, r3, #32
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d010      	beq.n	801a214 <HW_TRACER_EMB_IRQHandlerUSART+0x8c>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a1f2:	483c      	ldr	r0, [pc, #240]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a1f4:	f7ff fedc 	bl	8019fb0 <LL_LPUART_ReceiveData8>
 801a1f8:	4603      	mov	r3, r0
 801a1fa:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 801a1fc:	4b3a      	ldr	r3, [pc, #232]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d06b      	beq.n	801a2dc <HW_TRACER_EMB_IRQHandlerUSART+0x154>
        {
          fptr_rx(received_char, 0U);
 801a204:	4b38      	ldr	r3, [pc, #224]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	683a      	ldr	r2, [r7, #0]
 801a20a:	b2d2      	uxtb	r2, r2
 801a20c:	2100      	movs	r1, #0
 801a20e:	4610      	mov	r0, r2
 801a210:	4798      	blx	r3
        }
        return;
 801a212:	e063      	b.n	801a2dc <HW_TRACER_EMB_IRQHandlerUSART+0x154>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 801a214:	4833      	ldr	r0, [pc, #204]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a216:	f7ff fe6b 	bl	8019ef0 <LL_LPUART_IsEnabledIT_PE>
 801a21a:	6078      	str	r0, [r7, #4]
      if ((_temp2 == 1U)
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2b01      	cmp	r3, #1
 801a220:	d109      	bne.n	801a236 <HW_TRACER_EMB_IRQHandlerUSART+0xae>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	f003 0301 	and.w	r3, r3, #1
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d004      	beq.n	801a236 <HW_TRACER_EMB_IRQHandlerUSART+0xae>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 801a22c:	482d      	ldr	r0, [pc, #180]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a22e:	f7ff fd72 	bl	8019d16 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 801a232:	2301      	movs	r3, #1
 801a234:	75fb      	strb	r3, [r7, #23]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a236:	482b      	ldr	r0, [pc, #172]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a238:	f7ff fe6e 	bl	8019f18 <LL_LPUART_IsEnabledIT_ERROR>
 801a23c:	6078      	str	r0, [r7, #4]
      if (_temp2 == 1U)
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	2b01      	cmp	r3, #1
 801a242:	d11d      	bne.n	801a280 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	f003 0302 	and.w	r3, r3, #2
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d004      	beq.n	801a258 <HW_TRACER_EMB_IRQHandlerUSART+0xd0>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 801a24e:	4825      	ldr	r0, [pc, #148]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a250:	f7ff fd6e 	bl	8019d30 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 801a254:	2301      	movs	r3, #1
 801a256:	75fb      	strb	r3, [r7, #23]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	f003 0308 	and.w	r3, r3, #8
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d004      	beq.n	801a26c <HW_TRACER_EMB_IRQHandlerUSART+0xe4>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 801a262:	4820      	ldr	r0, [pc, #128]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a264:	f7ff fd7e 	bl	8019d64 <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 801a268:	2301      	movs	r3, #1
 801a26a:	75fb      	strb	r3, [r7, #23]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	f003 0304 	and.w	r3, r3, #4
 801a272:	2b00      	cmp	r3, #0
 801a274:	d004      	beq.n	801a280 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 801a276:	481b      	ldr	r0, [pc, #108]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a278:	f7ff fd67 	bl	8019d4a <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 801a27c:	2301      	movs	r3, #1
 801a27e:	75fb      	strb	r3, [r7, #23]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 801a280:	7dfb      	ldrb	r3, [r7, #23]
 801a282:	2b01      	cmp	r3, #1
 801a284:	d108      	bne.n	801a298 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
 801a286:	4b18      	ldr	r3, [pc, #96]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d004      	beq.n	801a298 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801a28e:	4b16      	ldr	r3, [pc, #88]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	2101      	movs	r1, #1
 801a294:	2001      	movs	r0, #1
 801a296:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 801a298:	4812      	ldr	r0, [pc, #72]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a29a:	f7ff fe16 	bl	8019eca <LL_LPUART_IsEnabledIT_TC>
 801a29e:	6078      	str	r0, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d019      	beq.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0x156>
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2b01      	cmp	r3, #1
 801a2ae:	d116      	bne.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0x156>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 801a2b0:	480c      	ldr	r0, [pc, #48]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2b2:	f7ff fdd6 	bl	8019e62 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 801a2b6:	480b      	ldr	r0, [pc, #44]	; (801a2e4 <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2b8:	f7ff fd61 	bl	8019d7e <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a2bc:	2102      	movs	r1, #2
 801a2be:	480b      	ldr	r0, [pc, #44]	; (801a2ec <HW_TRACER_EMB_IRQHandlerUSART+0x164>)
 801a2c0:	f7ff fa92 	bl	80197e8 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 801a2c4:	4b08      	ldr	r3, [pc, #32]	; (801a2e8 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d102      	bne.n	801a2d2 <HW_TRACER_EMB_IRQHandlerUSART+0x14a>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 801a2cc:	2001      	movs	r0, #1
 801a2ce:	f7ff fa55 	bl	801977c <LL_APB1_GRP2_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 801a2d2:	f7ff f86f 	bl	80193b4 <TRACER_EMB_CALLBACK_TX>
 801a2d6:	e002      	b.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0x156>
      return;
 801a2d8:	bf00      	nop
 801a2da:	e000      	b.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0x156>
        return;
 801a2dc:	bf00      	nop
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 801a2de:	3718      	adds	r7, #24
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	40008000 	.word	0x40008000
 801a2e8:	200032ec 	.word	0x200032ec
 801a2ec:	40020000 	.word	0x40020000

0801a2f0 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 801a2f0:	b5b0      	push	{r4, r5, r7, lr}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af02      	add	r7, sp, #8
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a2fa:	2001      	movs	r0, #1
 801a2fc:	f7ff fa26 	bl	801974c <LL_APB1_GRP2_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a300:	687c      	ldr	r4, [r7, #4]
 801a302:	2100      	movs	r1, #0
 801a304:	480f      	ldr	r0, [pc, #60]	; (801a344 <HW_TRACER_EMB_SendData+0x54>)
 801a306:	f7ff fe3d 	bl	8019f84 <LL_LPUART_DMA_GetRegAddr>
 801a30a:	4605      	mov	r5, r0
 801a30c:	2102      	movs	r1, #2
 801a30e:	480e      	ldr	r0, [pc, #56]	; (801a348 <HW_TRACER_EMB_SendData+0x58>)
 801a310:	f7ff fab4 	bl	801987c <LL_DMA_GetDataTransferDirection>
 801a314:	4603      	mov	r3, r0
 801a316:	9300      	str	r3, [sp, #0]
 801a318:	462b      	mov	r3, r5
 801a31a:	4622      	mov	r2, r4
 801a31c:	2102      	movs	r1, #2
 801a31e:	480a      	ldr	r0, [pc, #40]	; (801a348 <HW_TRACER_EMB_SendData+0x58>)
 801a320:	f7ff faec 	bl	80198fc <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 801a324:	683a      	ldr	r2, [r7, #0]
 801a326:	2102      	movs	r1, #2
 801a328:	4807      	ldr	r0, [pc, #28]	; (801a348 <HW_TRACER_EMB_SendData+0x58>)
 801a32a:	f7ff fac1 	bl	80198b0 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 801a32e:	4805      	ldr	r0, [pc, #20]	; (801a344 <HW_TRACER_EMB_SendData+0x54>)
 801a330:	f7ff fe05 	bl	8019f3e <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a334:	2102      	movs	r1, #2
 801a336:	4804      	ldr	r0, [pc, #16]	; (801a348 <HW_TRACER_EMB_SendData+0x58>)
 801a338:	f7ff fa34 	bl	80197a4 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 801a33c:	bf00      	nop
 801a33e:	3708      	adds	r7, #8
 801a340:	46bd      	mov	sp, r7
 801a342:	bdb0      	pop	{r4, r5, r7, pc}
 801a344:	40008000 	.word	0x40008000
 801a348:	40020000 	.word	0x40020000

0801a34c <__aeabi_memclr>:
 801a34c:	2200      	movs	r2, #0
 801a34e:	f7ec baa0 	b.w	8006892 <__aeabi_memset>

0801a352 <__aeabi_memcpy>:
 801a352:	f000 b833 	b.w	801a3bc <memcpy>
	...

0801a358 <__errno>:
 801a358:	4b01      	ldr	r3, [pc, #4]	; (801a360 <__errno+0x8>)
 801a35a:	6818      	ldr	r0, [r3, #0]
 801a35c:	4770      	bx	lr
 801a35e:	bf00      	nop
 801a360:	20000170 	.word	0x20000170

0801a364 <__libc_init_array>:
 801a364:	b570      	push	{r4, r5, r6, lr}
 801a366:	4d0d      	ldr	r5, [pc, #52]	; (801a39c <__libc_init_array+0x38>)
 801a368:	4c0d      	ldr	r4, [pc, #52]	; (801a3a0 <__libc_init_array+0x3c>)
 801a36a:	1b64      	subs	r4, r4, r5
 801a36c:	10a4      	asrs	r4, r4, #2
 801a36e:	2600      	movs	r6, #0
 801a370:	42a6      	cmp	r6, r4
 801a372:	d109      	bne.n	801a388 <__libc_init_array+0x24>
 801a374:	4d0b      	ldr	r5, [pc, #44]	; (801a3a4 <__libc_init_array+0x40>)
 801a376:	4c0c      	ldr	r4, [pc, #48]	; (801a3a8 <__libc_init_array+0x44>)
 801a378:	f000 fcca 	bl	801ad10 <_init>
 801a37c:	1b64      	subs	r4, r4, r5
 801a37e:	10a4      	asrs	r4, r4, #2
 801a380:	2600      	movs	r6, #0
 801a382:	42a6      	cmp	r6, r4
 801a384:	d105      	bne.n	801a392 <__libc_init_array+0x2e>
 801a386:	bd70      	pop	{r4, r5, r6, pc}
 801a388:	f855 3b04 	ldr.w	r3, [r5], #4
 801a38c:	4798      	blx	r3
 801a38e:	3601      	adds	r6, #1
 801a390:	e7ee      	b.n	801a370 <__libc_init_array+0xc>
 801a392:	f855 3b04 	ldr.w	r3, [r5], #4
 801a396:	4798      	blx	r3
 801a398:	3601      	adds	r6, #1
 801a39a:	e7f2      	b.n	801a382 <__libc_init_array+0x1e>
 801a39c:	0801bcbc 	.word	0x0801bcbc
 801a3a0:	0801bcbc 	.word	0x0801bcbc
 801a3a4:	0801bcbc 	.word	0x0801bcbc
 801a3a8:	0801bcc0 	.word	0x0801bcc0

0801a3ac <malloc>:
 801a3ac:	4b02      	ldr	r3, [pc, #8]	; (801a3b8 <malloc+0xc>)
 801a3ae:	4601      	mov	r1, r0
 801a3b0:	6818      	ldr	r0, [r3, #0]
 801a3b2:	f000 b885 	b.w	801a4c0 <_malloc_r>
 801a3b6:	bf00      	nop
 801a3b8:	20000170 	.word	0x20000170

0801a3bc <memcpy>:
 801a3bc:	440a      	add	r2, r1
 801a3be:	4291      	cmp	r1, r2
 801a3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a3c4:	d100      	bne.n	801a3c8 <memcpy+0xc>
 801a3c6:	4770      	bx	lr
 801a3c8:	b510      	push	{r4, lr}
 801a3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a3d2:	4291      	cmp	r1, r2
 801a3d4:	d1f9      	bne.n	801a3ca <memcpy+0xe>
 801a3d6:	bd10      	pop	{r4, pc}

0801a3d8 <memset>:
 801a3d8:	4402      	add	r2, r0
 801a3da:	4603      	mov	r3, r0
 801a3dc:	4293      	cmp	r3, r2
 801a3de:	d100      	bne.n	801a3e2 <memset+0xa>
 801a3e0:	4770      	bx	lr
 801a3e2:	f803 1b01 	strb.w	r1, [r3], #1
 801a3e6:	e7f9      	b.n	801a3dc <memset+0x4>

0801a3e8 <_free_r>:
 801a3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3ea:	2900      	cmp	r1, #0
 801a3ec:	d044      	beq.n	801a478 <_free_r+0x90>
 801a3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3f2:	9001      	str	r0, [sp, #4]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	f1a1 0404 	sub.w	r4, r1, #4
 801a3fa:	bfb8      	it	lt
 801a3fc:	18e4      	addlt	r4, r4, r3
 801a3fe:	f000 f937 	bl	801a670 <__malloc_lock>
 801a402:	4a1e      	ldr	r2, [pc, #120]	; (801a47c <_free_r+0x94>)
 801a404:	9801      	ldr	r0, [sp, #4]
 801a406:	6813      	ldr	r3, [r2, #0]
 801a408:	b933      	cbnz	r3, 801a418 <_free_r+0x30>
 801a40a:	6063      	str	r3, [r4, #4]
 801a40c:	6014      	str	r4, [r2, #0]
 801a40e:	b003      	add	sp, #12
 801a410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a414:	f000 b932 	b.w	801a67c <__malloc_unlock>
 801a418:	42a3      	cmp	r3, r4
 801a41a:	d908      	bls.n	801a42e <_free_r+0x46>
 801a41c:	6825      	ldr	r5, [r4, #0]
 801a41e:	1961      	adds	r1, r4, r5
 801a420:	428b      	cmp	r3, r1
 801a422:	bf01      	itttt	eq
 801a424:	6819      	ldreq	r1, [r3, #0]
 801a426:	685b      	ldreq	r3, [r3, #4]
 801a428:	1949      	addeq	r1, r1, r5
 801a42a:	6021      	streq	r1, [r4, #0]
 801a42c:	e7ed      	b.n	801a40a <_free_r+0x22>
 801a42e:	461a      	mov	r2, r3
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	b10b      	cbz	r3, 801a438 <_free_r+0x50>
 801a434:	42a3      	cmp	r3, r4
 801a436:	d9fa      	bls.n	801a42e <_free_r+0x46>
 801a438:	6811      	ldr	r1, [r2, #0]
 801a43a:	1855      	adds	r5, r2, r1
 801a43c:	42a5      	cmp	r5, r4
 801a43e:	d10b      	bne.n	801a458 <_free_r+0x70>
 801a440:	6824      	ldr	r4, [r4, #0]
 801a442:	4421      	add	r1, r4
 801a444:	1854      	adds	r4, r2, r1
 801a446:	42a3      	cmp	r3, r4
 801a448:	6011      	str	r1, [r2, #0]
 801a44a:	d1e0      	bne.n	801a40e <_free_r+0x26>
 801a44c:	681c      	ldr	r4, [r3, #0]
 801a44e:	685b      	ldr	r3, [r3, #4]
 801a450:	6053      	str	r3, [r2, #4]
 801a452:	4421      	add	r1, r4
 801a454:	6011      	str	r1, [r2, #0]
 801a456:	e7da      	b.n	801a40e <_free_r+0x26>
 801a458:	d902      	bls.n	801a460 <_free_r+0x78>
 801a45a:	230c      	movs	r3, #12
 801a45c:	6003      	str	r3, [r0, #0]
 801a45e:	e7d6      	b.n	801a40e <_free_r+0x26>
 801a460:	6825      	ldr	r5, [r4, #0]
 801a462:	1961      	adds	r1, r4, r5
 801a464:	428b      	cmp	r3, r1
 801a466:	bf04      	itt	eq
 801a468:	6819      	ldreq	r1, [r3, #0]
 801a46a:	685b      	ldreq	r3, [r3, #4]
 801a46c:	6063      	str	r3, [r4, #4]
 801a46e:	bf04      	itt	eq
 801a470:	1949      	addeq	r1, r1, r5
 801a472:	6021      	streq	r1, [r4, #0]
 801a474:	6054      	str	r4, [r2, #4]
 801a476:	e7ca      	b.n	801a40e <_free_r+0x26>
 801a478:	b003      	add	sp, #12
 801a47a:	bd30      	pop	{r4, r5, pc}
 801a47c:	200032f0 	.word	0x200032f0

0801a480 <sbrk_aligned>:
 801a480:	b570      	push	{r4, r5, r6, lr}
 801a482:	4e0e      	ldr	r6, [pc, #56]	; (801a4bc <sbrk_aligned+0x3c>)
 801a484:	460c      	mov	r4, r1
 801a486:	6831      	ldr	r1, [r6, #0]
 801a488:	4605      	mov	r5, r0
 801a48a:	b911      	cbnz	r1, 801a492 <sbrk_aligned+0x12>
 801a48c:	f000 f88c 	bl	801a5a8 <_sbrk_r>
 801a490:	6030      	str	r0, [r6, #0]
 801a492:	4621      	mov	r1, r4
 801a494:	4628      	mov	r0, r5
 801a496:	f000 f887 	bl	801a5a8 <_sbrk_r>
 801a49a:	1c43      	adds	r3, r0, #1
 801a49c:	d00a      	beq.n	801a4b4 <sbrk_aligned+0x34>
 801a49e:	1cc4      	adds	r4, r0, #3
 801a4a0:	f024 0403 	bic.w	r4, r4, #3
 801a4a4:	42a0      	cmp	r0, r4
 801a4a6:	d007      	beq.n	801a4b8 <sbrk_aligned+0x38>
 801a4a8:	1a21      	subs	r1, r4, r0
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	f000 f87c 	bl	801a5a8 <_sbrk_r>
 801a4b0:	3001      	adds	r0, #1
 801a4b2:	d101      	bne.n	801a4b8 <sbrk_aligned+0x38>
 801a4b4:	f04f 34ff 	mov.w	r4, #4294967295
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	bd70      	pop	{r4, r5, r6, pc}
 801a4bc:	200032f4 	.word	0x200032f4

0801a4c0 <_malloc_r>:
 801a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4c4:	1ccd      	adds	r5, r1, #3
 801a4c6:	f025 0503 	bic.w	r5, r5, #3
 801a4ca:	3508      	adds	r5, #8
 801a4cc:	2d0c      	cmp	r5, #12
 801a4ce:	bf38      	it	cc
 801a4d0:	250c      	movcc	r5, #12
 801a4d2:	2d00      	cmp	r5, #0
 801a4d4:	4607      	mov	r7, r0
 801a4d6:	db01      	blt.n	801a4dc <_malloc_r+0x1c>
 801a4d8:	42a9      	cmp	r1, r5
 801a4da:	d905      	bls.n	801a4e8 <_malloc_r+0x28>
 801a4dc:	230c      	movs	r3, #12
 801a4de:	603b      	str	r3, [r7, #0]
 801a4e0:	2600      	movs	r6, #0
 801a4e2:	4630      	mov	r0, r6
 801a4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4e8:	4e2e      	ldr	r6, [pc, #184]	; (801a5a4 <_malloc_r+0xe4>)
 801a4ea:	f000 f8c1 	bl	801a670 <__malloc_lock>
 801a4ee:	6833      	ldr	r3, [r6, #0]
 801a4f0:	461c      	mov	r4, r3
 801a4f2:	bb34      	cbnz	r4, 801a542 <_malloc_r+0x82>
 801a4f4:	4629      	mov	r1, r5
 801a4f6:	4638      	mov	r0, r7
 801a4f8:	f7ff ffc2 	bl	801a480 <sbrk_aligned>
 801a4fc:	1c43      	adds	r3, r0, #1
 801a4fe:	4604      	mov	r4, r0
 801a500:	d14d      	bne.n	801a59e <_malloc_r+0xde>
 801a502:	6834      	ldr	r4, [r6, #0]
 801a504:	4626      	mov	r6, r4
 801a506:	2e00      	cmp	r6, #0
 801a508:	d140      	bne.n	801a58c <_malloc_r+0xcc>
 801a50a:	6823      	ldr	r3, [r4, #0]
 801a50c:	4631      	mov	r1, r6
 801a50e:	4638      	mov	r0, r7
 801a510:	eb04 0803 	add.w	r8, r4, r3
 801a514:	f000 f848 	bl	801a5a8 <_sbrk_r>
 801a518:	4580      	cmp	r8, r0
 801a51a:	d13a      	bne.n	801a592 <_malloc_r+0xd2>
 801a51c:	6821      	ldr	r1, [r4, #0]
 801a51e:	3503      	adds	r5, #3
 801a520:	1a6d      	subs	r5, r5, r1
 801a522:	f025 0503 	bic.w	r5, r5, #3
 801a526:	3508      	adds	r5, #8
 801a528:	2d0c      	cmp	r5, #12
 801a52a:	bf38      	it	cc
 801a52c:	250c      	movcc	r5, #12
 801a52e:	4629      	mov	r1, r5
 801a530:	4638      	mov	r0, r7
 801a532:	f7ff ffa5 	bl	801a480 <sbrk_aligned>
 801a536:	3001      	adds	r0, #1
 801a538:	d02b      	beq.n	801a592 <_malloc_r+0xd2>
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	442b      	add	r3, r5
 801a53e:	6023      	str	r3, [r4, #0]
 801a540:	e00e      	b.n	801a560 <_malloc_r+0xa0>
 801a542:	6822      	ldr	r2, [r4, #0]
 801a544:	1b52      	subs	r2, r2, r5
 801a546:	d41e      	bmi.n	801a586 <_malloc_r+0xc6>
 801a548:	2a0b      	cmp	r2, #11
 801a54a:	d916      	bls.n	801a57a <_malloc_r+0xba>
 801a54c:	1961      	adds	r1, r4, r5
 801a54e:	42a3      	cmp	r3, r4
 801a550:	6025      	str	r5, [r4, #0]
 801a552:	bf18      	it	ne
 801a554:	6059      	strne	r1, [r3, #4]
 801a556:	6863      	ldr	r3, [r4, #4]
 801a558:	bf08      	it	eq
 801a55a:	6031      	streq	r1, [r6, #0]
 801a55c:	5162      	str	r2, [r4, r5]
 801a55e:	604b      	str	r3, [r1, #4]
 801a560:	4638      	mov	r0, r7
 801a562:	f104 060b 	add.w	r6, r4, #11
 801a566:	f000 f889 	bl	801a67c <__malloc_unlock>
 801a56a:	f026 0607 	bic.w	r6, r6, #7
 801a56e:	1d23      	adds	r3, r4, #4
 801a570:	1af2      	subs	r2, r6, r3
 801a572:	d0b6      	beq.n	801a4e2 <_malloc_r+0x22>
 801a574:	1b9b      	subs	r3, r3, r6
 801a576:	50a3      	str	r3, [r4, r2]
 801a578:	e7b3      	b.n	801a4e2 <_malloc_r+0x22>
 801a57a:	6862      	ldr	r2, [r4, #4]
 801a57c:	42a3      	cmp	r3, r4
 801a57e:	bf0c      	ite	eq
 801a580:	6032      	streq	r2, [r6, #0]
 801a582:	605a      	strne	r2, [r3, #4]
 801a584:	e7ec      	b.n	801a560 <_malloc_r+0xa0>
 801a586:	4623      	mov	r3, r4
 801a588:	6864      	ldr	r4, [r4, #4]
 801a58a:	e7b2      	b.n	801a4f2 <_malloc_r+0x32>
 801a58c:	4634      	mov	r4, r6
 801a58e:	6876      	ldr	r6, [r6, #4]
 801a590:	e7b9      	b.n	801a506 <_malloc_r+0x46>
 801a592:	230c      	movs	r3, #12
 801a594:	603b      	str	r3, [r7, #0]
 801a596:	4638      	mov	r0, r7
 801a598:	f000 f870 	bl	801a67c <__malloc_unlock>
 801a59c:	e7a1      	b.n	801a4e2 <_malloc_r+0x22>
 801a59e:	6025      	str	r5, [r4, #0]
 801a5a0:	e7de      	b.n	801a560 <_malloc_r+0xa0>
 801a5a2:	bf00      	nop
 801a5a4:	200032f0 	.word	0x200032f0

0801a5a8 <_sbrk_r>:
 801a5a8:	b538      	push	{r3, r4, r5, lr}
 801a5aa:	4d06      	ldr	r5, [pc, #24]	; (801a5c4 <_sbrk_r+0x1c>)
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	4604      	mov	r4, r0
 801a5b0:	4608      	mov	r0, r1
 801a5b2:	602b      	str	r3, [r5, #0]
 801a5b4:	f7ec ff34 	bl	8007420 <_sbrk>
 801a5b8:	1c43      	adds	r3, r0, #1
 801a5ba:	d102      	bne.n	801a5c2 <_sbrk_r+0x1a>
 801a5bc:	682b      	ldr	r3, [r5, #0]
 801a5be:	b103      	cbz	r3, 801a5c2 <_sbrk_r+0x1a>
 801a5c0:	6023      	str	r3, [r4, #0]
 801a5c2:	bd38      	pop	{r3, r4, r5, pc}
 801a5c4:	200032f8 	.word	0x200032f8

0801a5c8 <sniprintf>:
 801a5c8:	b40c      	push	{r2, r3}
 801a5ca:	b530      	push	{r4, r5, lr}
 801a5cc:	4b17      	ldr	r3, [pc, #92]	; (801a62c <sniprintf+0x64>)
 801a5ce:	1e0c      	subs	r4, r1, #0
 801a5d0:	681d      	ldr	r5, [r3, #0]
 801a5d2:	b09d      	sub	sp, #116	; 0x74
 801a5d4:	da08      	bge.n	801a5e8 <sniprintf+0x20>
 801a5d6:	238b      	movs	r3, #139	; 0x8b
 801a5d8:	602b      	str	r3, [r5, #0]
 801a5da:	f04f 30ff 	mov.w	r0, #4294967295
 801a5de:	b01d      	add	sp, #116	; 0x74
 801a5e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5e4:	b002      	add	sp, #8
 801a5e6:	4770      	bx	lr
 801a5e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a5ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a5f0:	bf14      	ite	ne
 801a5f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a5f6:	4623      	moveq	r3, r4
 801a5f8:	9304      	str	r3, [sp, #16]
 801a5fa:	9307      	str	r3, [sp, #28]
 801a5fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a600:	9002      	str	r0, [sp, #8]
 801a602:	9006      	str	r0, [sp, #24]
 801a604:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a608:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a60a:	ab21      	add	r3, sp, #132	; 0x84
 801a60c:	a902      	add	r1, sp, #8
 801a60e:	4628      	mov	r0, r5
 801a610:	9301      	str	r3, [sp, #4]
 801a612:	f000 f895 	bl	801a740 <_svfiprintf_r>
 801a616:	1c43      	adds	r3, r0, #1
 801a618:	bfbc      	itt	lt
 801a61a:	238b      	movlt	r3, #139	; 0x8b
 801a61c:	602b      	strlt	r3, [r5, #0]
 801a61e:	2c00      	cmp	r4, #0
 801a620:	d0dd      	beq.n	801a5de <sniprintf+0x16>
 801a622:	9b02      	ldr	r3, [sp, #8]
 801a624:	2200      	movs	r2, #0
 801a626:	701a      	strb	r2, [r3, #0]
 801a628:	e7d9      	b.n	801a5de <sniprintf+0x16>
 801a62a:	bf00      	nop
 801a62c:	20000170 	.word	0x20000170

0801a630 <siprintf>:
 801a630:	b40e      	push	{r1, r2, r3}
 801a632:	b500      	push	{lr}
 801a634:	b09c      	sub	sp, #112	; 0x70
 801a636:	ab1d      	add	r3, sp, #116	; 0x74
 801a638:	9002      	str	r0, [sp, #8]
 801a63a:	9006      	str	r0, [sp, #24]
 801a63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a640:	4809      	ldr	r0, [pc, #36]	; (801a668 <siprintf+0x38>)
 801a642:	9107      	str	r1, [sp, #28]
 801a644:	9104      	str	r1, [sp, #16]
 801a646:	4909      	ldr	r1, [pc, #36]	; (801a66c <siprintf+0x3c>)
 801a648:	f853 2b04 	ldr.w	r2, [r3], #4
 801a64c:	9105      	str	r1, [sp, #20]
 801a64e:	6800      	ldr	r0, [r0, #0]
 801a650:	9301      	str	r3, [sp, #4]
 801a652:	a902      	add	r1, sp, #8
 801a654:	f000 f874 	bl	801a740 <_svfiprintf_r>
 801a658:	9b02      	ldr	r3, [sp, #8]
 801a65a:	2200      	movs	r2, #0
 801a65c:	701a      	strb	r2, [r3, #0]
 801a65e:	b01c      	add	sp, #112	; 0x70
 801a660:	f85d eb04 	ldr.w	lr, [sp], #4
 801a664:	b003      	add	sp, #12
 801a666:	4770      	bx	lr
 801a668:	20000170 	.word	0x20000170
 801a66c:	ffff0208 	.word	0xffff0208

0801a670 <__malloc_lock>:
 801a670:	4801      	ldr	r0, [pc, #4]	; (801a678 <__malloc_lock+0x8>)
 801a672:	f000 baf9 	b.w	801ac68 <__retarget_lock_acquire_recursive>
 801a676:	bf00      	nop
 801a678:	200032fc 	.word	0x200032fc

0801a67c <__malloc_unlock>:
 801a67c:	4801      	ldr	r0, [pc, #4]	; (801a684 <__malloc_unlock+0x8>)
 801a67e:	f000 baf4 	b.w	801ac6a <__retarget_lock_release_recursive>
 801a682:	bf00      	nop
 801a684:	200032fc 	.word	0x200032fc

0801a688 <__ssputs_r>:
 801a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a68c:	688e      	ldr	r6, [r1, #8]
 801a68e:	429e      	cmp	r6, r3
 801a690:	4682      	mov	sl, r0
 801a692:	460c      	mov	r4, r1
 801a694:	4690      	mov	r8, r2
 801a696:	461f      	mov	r7, r3
 801a698:	d838      	bhi.n	801a70c <__ssputs_r+0x84>
 801a69a:	898a      	ldrh	r2, [r1, #12]
 801a69c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a6a0:	d032      	beq.n	801a708 <__ssputs_r+0x80>
 801a6a2:	6825      	ldr	r5, [r4, #0]
 801a6a4:	6909      	ldr	r1, [r1, #16]
 801a6a6:	eba5 0901 	sub.w	r9, r5, r1
 801a6aa:	6965      	ldr	r5, [r4, #20]
 801a6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a6b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a6b4:	3301      	adds	r3, #1
 801a6b6:	444b      	add	r3, r9
 801a6b8:	106d      	asrs	r5, r5, #1
 801a6ba:	429d      	cmp	r5, r3
 801a6bc:	bf38      	it	cc
 801a6be:	461d      	movcc	r5, r3
 801a6c0:	0553      	lsls	r3, r2, #21
 801a6c2:	d531      	bpl.n	801a728 <__ssputs_r+0xa0>
 801a6c4:	4629      	mov	r1, r5
 801a6c6:	f7ff fefb 	bl	801a4c0 <_malloc_r>
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	b950      	cbnz	r0, 801a6e4 <__ssputs_r+0x5c>
 801a6ce:	230c      	movs	r3, #12
 801a6d0:	f8ca 3000 	str.w	r3, [sl]
 801a6d4:	89a3      	ldrh	r3, [r4, #12]
 801a6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6e4:	6921      	ldr	r1, [r4, #16]
 801a6e6:	464a      	mov	r2, r9
 801a6e8:	f7ff fe68 	bl	801a3bc <memcpy>
 801a6ec:	89a3      	ldrh	r3, [r4, #12]
 801a6ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6f6:	81a3      	strh	r3, [r4, #12]
 801a6f8:	6126      	str	r6, [r4, #16]
 801a6fa:	6165      	str	r5, [r4, #20]
 801a6fc:	444e      	add	r6, r9
 801a6fe:	eba5 0509 	sub.w	r5, r5, r9
 801a702:	6026      	str	r6, [r4, #0]
 801a704:	60a5      	str	r5, [r4, #8]
 801a706:	463e      	mov	r6, r7
 801a708:	42be      	cmp	r6, r7
 801a70a:	d900      	bls.n	801a70e <__ssputs_r+0x86>
 801a70c:	463e      	mov	r6, r7
 801a70e:	6820      	ldr	r0, [r4, #0]
 801a710:	4632      	mov	r2, r6
 801a712:	4641      	mov	r1, r8
 801a714:	f000 faaa 	bl	801ac6c <memmove>
 801a718:	68a3      	ldr	r3, [r4, #8]
 801a71a:	1b9b      	subs	r3, r3, r6
 801a71c:	60a3      	str	r3, [r4, #8]
 801a71e:	6823      	ldr	r3, [r4, #0]
 801a720:	4433      	add	r3, r6
 801a722:	6023      	str	r3, [r4, #0]
 801a724:	2000      	movs	r0, #0
 801a726:	e7db      	b.n	801a6e0 <__ssputs_r+0x58>
 801a728:	462a      	mov	r2, r5
 801a72a:	f000 fab9 	bl	801aca0 <_realloc_r>
 801a72e:	4606      	mov	r6, r0
 801a730:	2800      	cmp	r0, #0
 801a732:	d1e1      	bne.n	801a6f8 <__ssputs_r+0x70>
 801a734:	6921      	ldr	r1, [r4, #16]
 801a736:	4650      	mov	r0, sl
 801a738:	f7ff fe56 	bl	801a3e8 <_free_r>
 801a73c:	e7c7      	b.n	801a6ce <__ssputs_r+0x46>
	...

0801a740 <_svfiprintf_r>:
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	4698      	mov	r8, r3
 801a746:	898b      	ldrh	r3, [r1, #12]
 801a748:	061b      	lsls	r3, r3, #24
 801a74a:	b09d      	sub	sp, #116	; 0x74
 801a74c:	4607      	mov	r7, r0
 801a74e:	460d      	mov	r5, r1
 801a750:	4614      	mov	r4, r2
 801a752:	d50e      	bpl.n	801a772 <_svfiprintf_r+0x32>
 801a754:	690b      	ldr	r3, [r1, #16]
 801a756:	b963      	cbnz	r3, 801a772 <_svfiprintf_r+0x32>
 801a758:	2140      	movs	r1, #64	; 0x40
 801a75a:	f7ff feb1 	bl	801a4c0 <_malloc_r>
 801a75e:	6028      	str	r0, [r5, #0]
 801a760:	6128      	str	r0, [r5, #16]
 801a762:	b920      	cbnz	r0, 801a76e <_svfiprintf_r+0x2e>
 801a764:	230c      	movs	r3, #12
 801a766:	603b      	str	r3, [r7, #0]
 801a768:	f04f 30ff 	mov.w	r0, #4294967295
 801a76c:	e0d1      	b.n	801a912 <_svfiprintf_r+0x1d2>
 801a76e:	2340      	movs	r3, #64	; 0x40
 801a770:	616b      	str	r3, [r5, #20]
 801a772:	2300      	movs	r3, #0
 801a774:	9309      	str	r3, [sp, #36]	; 0x24
 801a776:	2320      	movs	r3, #32
 801a778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a77c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a780:	2330      	movs	r3, #48	; 0x30
 801a782:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a92c <_svfiprintf_r+0x1ec>
 801a786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a78a:	f04f 0901 	mov.w	r9, #1
 801a78e:	4623      	mov	r3, r4
 801a790:	469a      	mov	sl, r3
 801a792:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a796:	b10a      	cbz	r2, 801a79c <_svfiprintf_r+0x5c>
 801a798:	2a25      	cmp	r2, #37	; 0x25
 801a79a:	d1f9      	bne.n	801a790 <_svfiprintf_r+0x50>
 801a79c:	ebba 0b04 	subs.w	fp, sl, r4
 801a7a0:	d00b      	beq.n	801a7ba <_svfiprintf_r+0x7a>
 801a7a2:	465b      	mov	r3, fp
 801a7a4:	4622      	mov	r2, r4
 801a7a6:	4629      	mov	r1, r5
 801a7a8:	4638      	mov	r0, r7
 801a7aa:	f7ff ff6d 	bl	801a688 <__ssputs_r>
 801a7ae:	3001      	adds	r0, #1
 801a7b0:	f000 80aa 	beq.w	801a908 <_svfiprintf_r+0x1c8>
 801a7b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7b6:	445a      	add	r2, fp
 801a7b8:	9209      	str	r2, [sp, #36]	; 0x24
 801a7ba:	f89a 3000 	ldrb.w	r3, [sl]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	f000 80a2 	beq.w	801a908 <_svfiprintf_r+0x1c8>
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 801a7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a7ce:	f10a 0a01 	add.w	sl, sl, #1
 801a7d2:	9304      	str	r3, [sp, #16]
 801a7d4:	9307      	str	r3, [sp, #28]
 801a7d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a7da:	931a      	str	r3, [sp, #104]	; 0x68
 801a7dc:	4654      	mov	r4, sl
 801a7de:	2205      	movs	r2, #5
 801a7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7e4:	4851      	ldr	r0, [pc, #324]	; (801a92c <_svfiprintf_r+0x1ec>)
 801a7e6:	f7ec f8ab 	bl	8006940 <memchr>
 801a7ea:	9a04      	ldr	r2, [sp, #16]
 801a7ec:	b9d8      	cbnz	r0, 801a826 <_svfiprintf_r+0xe6>
 801a7ee:	06d0      	lsls	r0, r2, #27
 801a7f0:	bf44      	itt	mi
 801a7f2:	2320      	movmi	r3, #32
 801a7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7f8:	0711      	lsls	r1, r2, #28
 801a7fa:	bf44      	itt	mi
 801a7fc:	232b      	movmi	r3, #43	; 0x2b
 801a7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a802:	f89a 3000 	ldrb.w	r3, [sl]
 801a806:	2b2a      	cmp	r3, #42	; 0x2a
 801a808:	d015      	beq.n	801a836 <_svfiprintf_r+0xf6>
 801a80a:	9a07      	ldr	r2, [sp, #28]
 801a80c:	4654      	mov	r4, sl
 801a80e:	2000      	movs	r0, #0
 801a810:	f04f 0c0a 	mov.w	ip, #10
 801a814:	4621      	mov	r1, r4
 801a816:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a81a:	3b30      	subs	r3, #48	; 0x30
 801a81c:	2b09      	cmp	r3, #9
 801a81e:	d94e      	bls.n	801a8be <_svfiprintf_r+0x17e>
 801a820:	b1b0      	cbz	r0, 801a850 <_svfiprintf_r+0x110>
 801a822:	9207      	str	r2, [sp, #28]
 801a824:	e014      	b.n	801a850 <_svfiprintf_r+0x110>
 801a826:	eba0 0308 	sub.w	r3, r0, r8
 801a82a:	fa09 f303 	lsl.w	r3, r9, r3
 801a82e:	4313      	orrs	r3, r2
 801a830:	9304      	str	r3, [sp, #16]
 801a832:	46a2      	mov	sl, r4
 801a834:	e7d2      	b.n	801a7dc <_svfiprintf_r+0x9c>
 801a836:	9b03      	ldr	r3, [sp, #12]
 801a838:	1d19      	adds	r1, r3, #4
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	9103      	str	r1, [sp, #12]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	bfbb      	ittet	lt
 801a842:	425b      	neglt	r3, r3
 801a844:	f042 0202 	orrlt.w	r2, r2, #2
 801a848:	9307      	strge	r3, [sp, #28]
 801a84a:	9307      	strlt	r3, [sp, #28]
 801a84c:	bfb8      	it	lt
 801a84e:	9204      	strlt	r2, [sp, #16]
 801a850:	7823      	ldrb	r3, [r4, #0]
 801a852:	2b2e      	cmp	r3, #46	; 0x2e
 801a854:	d10c      	bne.n	801a870 <_svfiprintf_r+0x130>
 801a856:	7863      	ldrb	r3, [r4, #1]
 801a858:	2b2a      	cmp	r3, #42	; 0x2a
 801a85a:	d135      	bne.n	801a8c8 <_svfiprintf_r+0x188>
 801a85c:	9b03      	ldr	r3, [sp, #12]
 801a85e:	1d1a      	adds	r2, r3, #4
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	9203      	str	r2, [sp, #12]
 801a864:	2b00      	cmp	r3, #0
 801a866:	bfb8      	it	lt
 801a868:	f04f 33ff 	movlt.w	r3, #4294967295
 801a86c:	3402      	adds	r4, #2
 801a86e:	9305      	str	r3, [sp, #20]
 801a870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a93c <_svfiprintf_r+0x1fc>
 801a874:	7821      	ldrb	r1, [r4, #0]
 801a876:	2203      	movs	r2, #3
 801a878:	4650      	mov	r0, sl
 801a87a:	f7ec f861 	bl	8006940 <memchr>
 801a87e:	b140      	cbz	r0, 801a892 <_svfiprintf_r+0x152>
 801a880:	2340      	movs	r3, #64	; 0x40
 801a882:	eba0 000a 	sub.w	r0, r0, sl
 801a886:	fa03 f000 	lsl.w	r0, r3, r0
 801a88a:	9b04      	ldr	r3, [sp, #16]
 801a88c:	4303      	orrs	r3, r0
 801a88e:	3401      	adds	r4, #1
 801a890:	9304      	str	r3, [sp, #16]
 801a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a896:	4826      	ldr	r0, [pc, #152]	; (801a930 <_svfiprintf_r+0x1f0>)
 801a898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a89c:	2206      	movs	r2, #6
 801a89e:	f7ec f84f 	bl	8006940 <memchr>
 801a8a2:	2800      	cmp	r0, #0
 801a8a4:	d038      	beq.n	801a918 <_svfiprintf_r+0x1d8>
 801a8a6:	4b23      	ldr	r3, [pc, #140]	; (801a934 <_svfiprintf_r+0x1f4>)
 801a8a8:	bb1b      	cbnz	r3, 801a8f2 <_svfiprintf_r+0x1b2>
 801a8aa:	9b03      	ldr	r3, [sp, #12]
 801a8ac:	3307      	adds	r3, #7
 801a8ae:	f023 0307 	bic.w	r3, r3, #7
 801a8b2:	3308      	adds	r3, #8
 801a8b4:	9303      	str	r3, [sp, #12]
 801a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8b8:	4433      	add	r3, r6
 801a8ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a8bc:	e767      	b.n	801a78e <_svfiprintf_r+0x4e>
 801a8be:	fb0c 3202 	mla	r2, ip, r2, r3
 801a8c2:	460c      	mov	r4, r1
 801a8c4:	2001      	movs	r0, #1
 801a8c6:	e7a5      	b.n	801a814 <_svfiprintf_r+0xd4>
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	3401      	adds	r4, #1
 801a8cc:	9305      	str	r3, [sp, #20]
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	f04f 0c0a 	mov.w	ip, #10
 801a8d4:	4620      	mov	r0, r4
 801a8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a8da:	3a30      	subs	r2, #48	; 0x30
 801a8dc:	2a09      	cmp	r2, #9
 801a8de:	d903      	bls.n	801a8e8 <_svfiprintf_r+0x1a8>
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d0c5      	beq.n	801a870 <_svfiprintf_r+0x130>
 801a8e4:	9105      	str	r1, [sp, #20]
 801a8e6:	e7c3      	b.n	801a870 <_svfiprintf_r+0x130>
 801a8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	2301      	movs	r3, #1
 801a8f0:	e7f0      	b.n	801a8d4 <_svfiprintf_r+0x194>
 801a8f2:	ab03      	add	r3, sp, #12
 801a8f4:	9300      	str	r3, [sp, #0]
 801a8f6:	462a      	mov	r2, r5
 801a8f8:	4b0f      	ldr	r3, [pc, #60]	; (801a938 <_svfiprintf_r+0x1f8>)
 801a8fa:	a904      	add	r1, sp, #16
 801a8fc:	4638      	mov	r0, r7
 801a8fe:	f3af 8000 	nop.w
 801a902:	1c42      	adds	r2, r0, #1
 801a904:	4606      	mov	r6, r0
 801a906:	d1d6      	bne.n	801a8b6 <_svfiprintf_r+0x176>
 801a908:	89ab      	ldrh	r3, [r5, #12]
 801a90a:	065b      	lsls	r3, r3, #25
 801a90c:	f53f af2c 	bmi.w	801a768 <_svfiprintf_r+0x28>
 801a910:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a912:	b01d      	add	sp, #116	; 0x74
 801a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a918:	ab03      	add	r3, sp, #12
 801a91a:	9300      	str	r3, [sp, #0]
 801a91c:	462a      	mov	r2, r5
 801a91e:	4b06      	ldr	r3, [pc, #24]	; (801a938 <_svfiprintf_r+0x1f8>)
 801a920:	a904      	add	r1, sp, #16
 801a922:	4638      	mov	r0, r7
 801a924:	f000 f87a 	bl	801aa1c <_printf_i>
 801a928:	e7eb      	b.n	801a902 <_svfiprintf_r+0x1c2>
 801a92a:	bf00      	nop
 801a92c:	0801bc80 	.word	0x0801bc80
 801a930:	0801bc8a 	.word	0x0801bc8a
 801a934:	00000000 	.word	0x00000000
 801a938:	0801a689 	.word	0x0801a689
 801a93c:	0801bc86 	.word	0x0801bc86

0801a940 <_printf_common>:
 801a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a944:	4616      	mov	r6, r2
 801a946:	4699      	mov	r9, r3
 801a948:	688a      	ldr	r2, [r1, #8]
 801a94a:	690b      	ldr	r3, [r1, #16]
 801a94c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a950:	4293      	cmp	r3, r2
 801a952:	bfb8      	it	lt
 801a954:	4613      	movlt	r3, r2
 801a956:	6033      	str	r3, [r6, #0]
 801a958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a95c:	4607      	mov	r7, r0
 801a95e:	460c      	mov	r4, r1
 801a960:	b10a      	cbz	r2, 801a966 <_printf_common+0x26>
 801a962:	3301      	adds	r3, #1
 801a964:	6033      	str	r3, [r6, #0]
 801a966:	6823      	ldr	r3, [r4, #0]
 801a968:	0699      	lsls	r1, r3, #26
 801a96a:	bf42      	ittt	mi
 801a96c:	6833      	ldrmi	r3, [r6, #0]
 801a96e:	3302      	addmi	r3, #2
 801a970:	6033      	strmi	r3, [r6, #0]
 801a972:	6825      	ldr	r5, [r4, #0]
 801a974:	f015 0506 	ands.w	r5, r5, #6
 801a978:	d106      	bne.n	801a988 <_printf_common+0x48>
 801a97a:	f104 0a19 	add.w	sl, r4, #25
 801a97e:	68e3      	ldr	r3, [r4, #12]
 801a980:	6832      	ldr	r2, [r6, #0]
 801a982:	1a9b      	subs	r3, r3, r2
 801a984:	42ab      	cmp	r3, r5
 801a986:	dc26      	bgt.n	801a9d6 <_printf_common+0x96>
 801a988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a98c:	1e13      	subs	r3, r2, #0
 801a98e:	6822      	ldr	r2, [r4, #0]
 801a990:	bf18      	it	ne
 801a992:	2301      	movne	r3, #1
 801a994:	0692      	lsls	r2, r2, #26
 801a996:	d42b      	bmi.n	801a9f0 <_printf_common+0xb0>
 801a998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a99c:	4649      	mov	r1, r9
 801a99e:	4638      	mov	r0, r7
 801a9a0:	47c0      	blx	r8
 801a9a2:	3001      	adds	r0, #1
 801a9a4:	d01e      	beq.n	801a9e4 <_printf_common+0xa4>
 801a9a6:	6823      	ldr	r3, [r4, #0]
 801a9a8:	68e5      	ldr	r5, [r4, #12]
 801a9aa:	6832      	ldr	r2, [r6, #0]
 801a9ac:	f003 0306 	and.w	r3, r3, #6
 801a9b0:	2b04      	cmp	r3, #4
 801a9b2:	bf08      	it	eq
 801a9b4:	1aad      	subeq	r5, r5, r2
 801a9b6:	68a3      	ldr	r3, [r4, #8]
 801a9b8:	6922      	ldr	r2, [r4, #16]
 801a9ba:	bf0c      	ite	eq
 801a9bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9c0:	2500      	movne	r5, #0
 801a9c2:	4293      	cmp	r3, r2
 801a9c4:	bfc4      	itt	gt
 801a9c6:	1a9b      	subgt	r3, r3, r2
 801a9c8:	18ed      	addgt	r5, r5, r3
 801a9ca:	2600      	movs	r6, #0
 801a9cc:	341a      	adds	r4, #26
 801a9ce:	42b5      	cmp	r5, r6
 801a9d0:	d11a      	bne.n	801aa08 <_printf_common+0xc8>
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	e008      	b.n	801a9e8 <_printf_common+0xa8>
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	4652      	mov	r2, sl
 801a9da:	4649      	mov	r1, r9
 801a9dc:	4638      	mov	r0, r7
 801a9de:	47c0      	blx	r8
 801a9e0:	3001      	adds	r0, #1
 801a9e2:	d103      	bne.n	801a9ec <_printf_common+0xac>
 801a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ec:	3501      	adds	r5, #1
 801a9ee:	e7c6      	b.n	801a97e <_printf_common+0x3e>
 801a9f0:	18e1      	adds	r1, r4, r3
 801a9f2:	1c5a      	adds	r2, r3, #1
 801a9f4:	2030      	movs	r0, #48	; 0x30
 801a9f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a9fa:	4422      	add	r2, r4
 801a9fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa04:	3302      	adds	r3, #2
 801aa06:	e7c7      	b.n	801a998 <_printf_common+0x58>
 801aa08:	2301      	movs	r3, #1
 801aa0a:	4622      	mov	r2, r4
 801aa0c:	4649      	mov	r1, r9
 801aa0e:	4638      	mov	r0, r7
 801aa10:	47c0      	blx	r8
 801aa12:	3001      	adds	r0, #1
 801aa14:	d0e6      	beq.n	801a9e4 <_printf_common+0xa4>
 801aa16:	3601      	adds	r6, #1
 801aa18:	e7d9      	b.n	801a9ce <_printf_common+0x8e>
	...

0801aa1c <_printf_i>:
 801aa1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa20:	7e0f      	ldrb	r7, [r1, #24]
 801aa22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa24:	2f78      	cmp	r7, #120	; 0x78
 801aa26:	4691      	mov	r9, r2
 801aa28:	4680      	mov	r8, r0
 801aa2a:	460c      	mov	r4, r1
 801aa2c:	469a      	mov	sl, r3
 801aa2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aa32:	d807      	bhi.n	801aa44 <_printf_i+0x28>
 801aa34:	2f62      	cmp	r7, #98	; 0x62
 801aa36:	d80a      	bhi.n	801aa4e <_printf_i+0x32>
 801aa38:	2f00      	cmp	r7, #0
 801aa3a:	f000 80d8 	beq.w	801abee <_printf_i+0x1d2>
 801aa3e:	2f58      	cmp	r7, #88	; 0x58
 801aa40:	f000 80a3 	beq.w	801ab8a <_printf_i+0x16e>
 801aa44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa4c:	e03a      	b.n	801aac4 <_printf_i+0xa8>
 801aa4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa52:	2b15      	cmp	r3, #21
 801aa54:	d8f6      	bhi.n	801aa44 <_printf_i+0x28>
 801aa56:	a101      	add	r1, pc, #4	; (adr r1, 801aa5c <_printf_i+0x40>)
 801aa58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa5c:	0801aab5 	.word	0x0801aab5
 801aa60:	0801aac9 	.word	0x0801aac9
 801aa64:	0801aa45 	.word	0x0801aa45
 801aa68:	0801aa45 	.word	0x0801aa45
 801aa6c:	0801aa45 	.word	0x0801aa45
 801aa70:	0801aa45 	.word	0x0801aa45
 801aa74:	0801aac9 	.word	0x0801aac9
 801aa78:	0801aa45 	.word	0x0801aa45
 801aa7c:	0801aa45 	.word	0x0801aa45
 801aa80:	0801aa45 	.word	0x0801aa45
 801aa84:	0801aa45 	.word	0x0801aa45
 801aa88:	0801abd5 	.word	0x0801abd5
 801aa8c:	0801aaf9 	.word	0x0801aaf9
 801aa90:	0801abb7 	.word	0x0801abb7
 801aa94:	0801aa45 	.word	0x0801aa45
 801aa98:	0801aa45 	.word	0x0801aa45
 801aa9c:	0801abf7 	.word	0x0801abf7
 801aaa0:	0801aa45 	.word	0x0801aa45
 801aaa4:	0801aaf9 	.word	0x0801aaf9
 801aaa8:	0801aa45 	.word	0x0801aa45
 801aaac:	0801aa45 	.word	0x0801aa45
 801aab0:	0801abbf 	.word	0x0801abbf
 801aab4:	682b      	ldr	r3, [r5, #0]
 801aab6:	1d1a      	adds	r2, r3, #4
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	602a      	str	r2, [r5, #0]
 801aabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aac4:	2301      	movs	r3, #1
 801aac6:	e0a3      	b.n	801ac10 <_printf_i+0x1f4>
 801aac8:	6820      	ldr	r0, [r4, #0]
 801aaca:	6829      	ldr	r1, [r5, #0]
 801aacc:	0606      	lsls	r6, r0, #24
 801aace:	f101 0304 	add.w	r3, r1, #4
 801aad2:	d50a      	bpl.n	801aaea <_printf_i+0xce>
 801aad4:	680e      	ldr	r6, [r1, #0]
 801aad6:	602b      	str	r3, [r5, #0]
 801aad8:	2e00      	cmp	r6, #0
 801aada:	da03      	bge.n	801aae4 <_printf_i+0xc8>
 801aadc:	232d      	movs	r3, #45	; 0x2d
 801aade:	4276      	negs	r6, r6
 801aae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aae4:	485e      	ldr	r0, [pc, #376]	; (801ac60 <_printf_i+0x244>)
 801aae6:	230a      	movs	r3, #10
 801aae8:	e019      	b.n	801ab1e <_printf_i+0x102>
 801aaea:	680e      	ldr	r6, [r1, #0]
 801aaec:	602b      	str	r3, [r5, #0]
 801aaee:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aaf2:	bf18      	it	ne
 801aaf4:	b236      	sxthne	r6, r6
 801aaf6:	e7ef      	b.n	801aad8 <_printf_i+0xbc>
 801aaf8:	682b      	ldr	r3, [r5, #0]
 801aafa:	6820      	ldr	r0, [r4, #0]
 801aafc:	1d19      	adds	r1, r3, #4
 801aafe:	6029      	str	r1, [r5, #0]
 801ab00:	0601      	lsls	r1, r0, #24
 801ab02:	d501      	bpl.n	801ab08 <_printf_i+0xec>
 801ab04:	681e      	ldr	r6, [r3, #0]
 801ab06:	e002      	b.n	801ab0e <_printf_i+0xf2>
 801ab08:	0646      	lsls	r6, r0, #25
 801ab0a:	d5fb      	bpl.n	801ab04 <_printf_i+0xe8>
 801ab0c:	881e      	ldrh	r6, [r3, #0]
 801ab0e:	4854      	ldr	r0, [pc, #336]	; (801ac60 <_printf_i+0x244>)
 801ab10:	2f6f      	cmp	r7, #111	; 0x6f
 801ab12:	bf0c      	ite	eq
 801ab14:	2308      	moveq	r3, #8
 801ab16:	230a      	movne	r3, #10
 801ab18:	2100      	movs	r1, #0
 801ab1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab1e:	6865      	ldr	r5, [r4, #4]
 801ab20:	60a5      	str	r5, [r4, #8]
 801ab22:	2d00      	cmp	r5, #0
 801ab24:	bfa2      	ittt	ge
 801ab26:	6821      	ldrge	r1, [r4, #0]
 801ab28:	f021 0104 	bicge.w	r1, r1, #4
 801ab2c:	6021      	strge	r1, [r4, #0]
 801ab2e:	b90e      	cbnz	r6, 801ab34 <_printf_i+0x118>
 801ab30:	2d00      	cmp	r5, #0
 801ab32:	d04d      	beq.n	801abd0 <_printf_i+0x1b4>
 801ab34:	4615      	mov	r5, r2
 801ab36:	fbb6 f1f3 	udiv	r1, r6, r3
 801ab3a:	fb03 6711 	mls	r7, r3, r1, r6
 801ab3e:	5dc7      	ldrb	r7, [r0, r7]
 801ab40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ab44:	4637      	mov	r7, r6
 801ab46:	42bb      	cmp	r3, r7
 801ab48:	460e      	mov	r6, r1
 801ab4a:	d9f4      	bls.n	801ab36 <_printf_i+0x11a>
 801ab4c:	2b08      	cmp	r3, #8
 801ab4e:	d10b      	bne.n	801ab68 <_printf_i+0x14c>
 801ab50:	6823      	ldr	r3, [r4, #0]
 801ab52:	07de      	lsls	r6, r3, #31
 801ab54:	d508      	bpl.n	801ab68 <_printf_i+0x14c>
 801ab56:	6923      	ldr	r3, [r4, #16]
 801ab58:	6861      	ldr	r1, [r4, #4]
 801ab5a:	4299      	cmp	r1, r3
 801ab5c:	bfde      	ittt	le
 801ab5e:	2330      	movle	r3, #48	; 0x30
 801ab60:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ab64:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ab68:	1b52      	subs	r2, r2, r5
 801ab6a:	6122      	str	r2, [r4, #16]
 801ab6c:	f8cd a000 	str.w	sl, [sp]
 801ab70:	464b      	mov	r3, r9
 801ab72:	aa03      	add	r2, sp, #12
 801ab74:	4621      	mov	r1, r4
 801ab76:	4640      	mov	r0, r8
 801ab78:	f7ff fee2 	bl	801a940 <_printf_common>
 801ab7c:	3001      	adds	r0, #1
 801ab7e:	d14c      	bne.n	801ac1a <_printf_i+0x1fe>
 801ab80:	f04f 30ff 	mov.w	r0, #4294967295
 801ab84:	b004      	add	sp, #16
 801ab86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab8a:	4835      	ldr	r0, [pc, #212]	; (801ac60 <_printf_i+0x244>)
 801ab8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ab90:	6829      	ldr	r1, [r5, #0]
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	f851 6b04 	ldr.w	r6, [r1], #4
 801ab98:	6029      	str	r1, [r5, #0]
 801ab9a:	061d      	lsls	r5, r3, #24
 801ab9c:	d514      	bpl.n	801abc8 <_printf_i+0x1ac>
 801ab9e:	07df      	lsls	r7, r3, #31
 801aba0:	bf44      	itt	mi
 801aba2:	f043 0320 	orrmi.w	r3, r3, #32
 801aba6:	6023      	strmi	r3, [r4, #0]
 801aba8:	b91e      	cbnz	r6, 801abb2 <_printf_i+0x196>
 801abaa:	6823      	ldr	r3, [r4, #0]
 801abac:	f023 0320 	bic.w	r3, r3, #32
 801abb0:	6023      	str	r3, [r4, #0]
 801abb2:	2310      	movs	r3, #16
 801abb4:	e7b0      	b.n	801ab18 <_printf_i+0xfc>
 801abb6:	6823      	ldr	r3, [r4, #0]
 801abb8:	f043 0320 	orr.w	r3, r3, #32
 801abbc:	6023      	str	r3, [r4, #0]
 801abbe:	2378      	movs	r3, #120	; 0x78
 801abc0:	4828      	ldr	r0, [pc, #160]	; (801ac64 <_printf_i+0x248>)
 801abc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801abc6:	e7e3      	b.n	801ab90 <_printf_i+0x174>
 801abc8:	0659      	lsls	r1, r3, #25
 801abca:	bf48      	it	mi
 801abcc:	b2b6      	uxthmi	r6, r6
 801abce:	e7e6      	b.n	801ab9e <_printf_i+0x182>
 801abd0:	4615      	mov	r5, r2
 801abd2:	e7bb      	b.n	801ab4c <_printf_i+0x130>
 801abd4:	682b      	ldr	r3, [r5, #0]
 801abd6:	6826      	ldr	r6, [r4, #0]
 801abd8:	6961      	ldr	r1, [r4, #20]
 801abda:	1d18      	adds	r0, r3, #4
 801abdc:	6028      	str	r0, [r5, #0]
 801abde:	0635      	lsls	r5, r6, #24
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	d501      	bpl.n	801abe8 <_printf_i+0x1cc>
 801abe4:	6019      	str	r1, [r3, #0]
 801abe6:	e002      	b.n	801abee <_printf_i+0x1d2>
 801abe8:	0670      	lsls	r0, r6, #25
 801abea:	d5fb      	bpl.n	801abe4 <_printf_i+0x1c8>
 801abec:	8019      	strh	r1, [r3, #0]
 801abee:	2300      	movs	r3, #0
 801abf0:	6123      	str	r3, [r4, #16]
 801abf2:	4615      	mov	r5, r2
 801abf4:	e7ba      	b.n	801ab6c <_printf_i+0x150>
 801abf6:	682b      	ldr	r3, [r5, #0]
 801abf8:	1d1a      	adds	r2, r3, #4
 801abfa:	602a      	str	r2, [r5, #0]
 801abfc:	681d      	ldr	r5, [r3, #0]
 801abfe:	6862      	ldr	r2, [r4, #4]
 801ac00:	2100      	movs	r1, #0
 801ac02:	4628      	mov	r0, r5
 801ac04:	f7eb fe9c 	bl	8006940 <memchr>
 801ac08:	b108      	cbz	r0, 801ac0e <_printf_i+0x1f2>
 801ac0a:	1b40      	subs	r0, r0, r5
 801ac0c:	6060      	str	r0, [r4, #4]
 801ac0e:	6863      	ldr	r3, [r4, #4]
 801ac10:	6123      	str	r3, [r4, #16]
 801ac12:	2300      	movs	r3, #0
 801ac14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac18:	e7a8      	b.n	801ab6c <_printf_i+0x150>
 801ac1a:	6923      	ldr	r3, [r4, #16]
 801ac1c:	462a      	mov	r2, r5
 801ac1e:	4649      	mov	r1, r9
 801ac20:	4640      	mov	r0, r8
 801ac22:	47d0      	blx	sl
 801ac24:	3001      	adds	r0, #1
 801ac26:	d0ab      	beq.n	801ab80 <_printf_i+0x164>
 801ac28:	6823      	ldr	r3, [r4, #0]
 801ac2a:	079b      	lsls	r3, r3, #30
 801ac2c:	d413      	bmi.n	801ac56 <_printf_i+0x23a>
 801ac2e:	68e0      	ldr	r0, [r4, #12]
 801ac30:	9b03      	ldr	r3, [sp, #12]
 801ac32:	4298      	cmp	r0, r3
 801ac34:	bfb8      	it	lt
 801ac36:	4618      	movlt	r0, r3
 801ac38:	e7a4      	b.n	801ab84 <_printf_i+0x168>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	4632      	mov	r2, r6
 801ac3e:	4649      	mov	r1, r9
 801ac40:	4640      	mov	r0, r8
 801ac42:	47d0      	blx	sl
 801ac44:	3001      	adds	r0, #1
 801ac46:	d09b      	beq.n	801ab80 <_printf_i+0x164>
 801ac48:	3501      	adds	r5, #1
 801ac4a:	68e3      	ldr	r3, [r4, #12]
 801ac4c:	9903      	ldr	r1, [sp, #12]
 801ac4e:	1a5b      	subs	r3, r3, r1
 801ac50:	42ab      	cmp	r3, r5
 801ac52:	dcf2      	bgt.n	801ac3a <_printf_i+0x21e>
 801ac54:	e7eb      	b.n	801ac2e <_printf_i+0x212>
 801ac56:	2500      	movs	r5, #0
 801ac58:	f104 0619 	add.w	r6, r4, #25
 801ac5c:	e7f5      	b.n	801ac4a <_printf_i+0x22e>
 801ac5e:	bf00      	nop
 801ac60:	0801bc91 	.word	0x0801bc91
 801ac64:	0801bca2 	.word	0x0801bca2

0801ac68 <__retarget_lock_acquire_recursive>:
 801ac68:	4770      	bx	lr

0801ac6a <__retarget_lock_release_recursive>:
 801ac6a:	4770      	bx	lr

0801ac6c <memmove>:
 801ac6c:	4288      	cmp	r0, r1
 801ac6e:	b510      	push	{r4, lr}
 801ac70:	eb01 0402 	add.w	r4, r1, r2
 801ac74:	d902      	bls.n	801ac7c <memmove+0x10>
 801ac76:	4284      	cmp	r4, r0
 801ac78:	4623      	mov	r3, r4
 801ac7a:	d807      	bhi.n	801ac8c <memmove+0x20>
 801ac7c:	1e43      	subs	r3, r0, #1
 801ac7e:	42a1      	cmp	r1, r4
 801ac80:	d008      	beq.n	801ac94 <memmove+0x28>
 801ac82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac86:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac8a:	e7f8      	b.n	801ac7e <memmove+0x12>
 801ac8c:	4402      	add	r2, r0
 801ac8e:	4601      	mov	r1, r0
 801ac90:	428a      	cmp	r2, r1
 801ac92:	d100      	bne.n	801ac96 <memmove+0x2a>
 801ac94:	bd10      	pop	{r4, pc}
 801ac96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac9e:	e7f7      	b.n	801ac90 <memmove+0x24>

0801aca0 <_realloc_r>:
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aca4:	4680      	mov	r8, r0
 801aca6:	4614      	mov	r4, r2
 801aca8:	460e      	mov	r6, r1
 801acaa:	b921      	cbnz	r1, 801acb6 <_realloc_r+0x16>
 801acac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acb0:	4611      	mov	r1, r2
 801acb2:	f7ff bc05 	b.w	801a4c0 <_malloc_r>
 801acb6:	b92a      	cbnz	r2, 801acc4 <_realloc_r+0x24>
 801acb8:	f7ff fb96 	bl	801a3e8 <_free_r>
 801acbc:	4625      	mov	r5, r4
 801acbe:	4628      	mov	r0, r5
 801acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acc4:	f000 f81b 	bl	801acfe <_malloc_usable_size_r>
 801acc8:	4284      	cmp	r4, r0
 801acca:	4607      	mov	r7, r0
 801accc:	d802      	bhi.n	801acd4 <_realloc_r+0x34>
 801acce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801acd2:	d812      	bhi.n	801acfa <_realloc_r+0x5a>
 801acd4:	4621      	mov	r1, r4
 801acd6:	4640      	mov	r0, r8
 801acd8:	f7ff fbf2 	bl	801a4c0 <_malloc_r>
 801acdc:	4605      	mov	r5, r0
 801acde:	2800      	cmp	r0, #0
 801ace0:	d0ed      	beq.n	801acbe <_realloc_r+0x1e>
 801ace2:	42bc      	cmp	r4, r7
 801ace4:	4622      	mov	r2, r4
 801ace6:	4631      	mov	r1, r6
 801ace8:	bf28      	it	cs
 801acea:	463a      	movcs	r2, r7
 801acec:	f7ff fb66 	bl	801a3bc <memcpy>
 801acf0:	4631      	mov	r1, r6
 801acf2:	4640      	mov	r0, r8
 801acf4:	f7ff fb78 	bl	801a3e8 <_free_r>
 801acf8:	e7e1      	b.n	801acbe <_realloc_r+0x1e>
 801acfa:	4635      	mov	r5, r6
 801acfc:	e7df      	b.n	801acbe <_realloc_r+0x1e>

0801acfe <_malloc_usable_size_r>:
 801acfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad02:	1f18      	subs	r0, r3, #4
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	bfbc      	itt	lt
 801ad08:	580b      	ldrlt	r3, [r1, r0]
 801ad0a:	18c0      	addlt	r0, r0, r3
 801ad0c:	4770      	bx	lr
	...

0801ad10 <_init>:
 801ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad12:	bf00      	nop
 801ad14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad16:	bc08      	pop	{r3}
 801ad18:	469e      	mov	lr, r3
 801ad1a:	4770      	bx	lr

0801ad1c <_fini>:
 801ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad1e:	bf00      	nop
 801ad20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad22:	bc08      	pop	{r3}
 801ad24:	469e      	mov	lr, r3
 801ad26:	4770      	bx	lr
